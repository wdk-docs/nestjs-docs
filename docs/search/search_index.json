{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"blog/61.circular-dependencies/","text":"Circular dependencies in Node.js modules A circular dependency between Node.js modules happens when two files import each other. Let\u2019s look into this straightforward example: one.js JavaScript const { two } = require ( \"./two\" ); const one = \"1\" ; console . log ( \"file one.js:\" , one , two ); module . exports . one = one ; two . js ; const { one } = require ( \"./one\" ); const two = \"2\" ; console . log ( \"file two.js:\" , one , two ); module . exports . two = two ; After running node ./one.js, we see the following output: Bash file two.js: undefined 2 file one.js: 1 2 ( node:109498 ) Warning: Accessing non-existent property \u2018one\u2019 of module exports inside circular dependency ( Use node --trace-warnings ... to show where the warning was created ) We can see that a code containing circular dependencies can run but might result in unexpected results. The above code executes as follows: one.js executes, and imports two.js, two.js executes, and imports one.js, to prevent an infinite loop, two.js loads an unfinished copy of one.js, this is why the one variable in two.js is undefined, two.js finishes executing, and its exported value reaches one.js, one.js continues running and contains all valid values. The above example allows us to understand how Node.js reacts to circular dependencies. Circular dependencies are often a sign of a bad design, and we should avoid them when possible. Detecting circular dependencies using ESLint The provided code example makes it very obvious that there is a circular dependency between files. It is not always that apparent, though. Fortunately, ESLint can help us detect such dependencies. To do that, we need the eslint-plugin-import package. Bash npm install eslint-plugin-import The rule that we want is called import/no-cycle, and it ensures that no circular dependencies are present between our files. In our NestJS project, we would set the configuration in the following way: .eslintrc.js JavaScript module . exports = { parser : \"@typescript-eslint/parser\" , plugins : [ \"import\" , // ... ], extends : [ \"plugin:import/typescript\" , // ... ], rules : { \"import/no-cycle\" : 2 , // ... }, // ... }; Circular dependencies in NestJS Besides circular dependencies between Node.js modules, we might also run into this issue when working with NestJS modules. In part 55 of this series, we\u2019ve implemented a feature of uploading files to the server. Let\u2019s expand on it to create a case with a circular dependency. localFiles.service.js TypeScript import { Injectable , NotFoundException } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository } from \"typeorm\" ; import LocalFile from \"./localFile.entity\" ; import { UsersService } from \"../users/users.service\" ; @Injectable () class LocalFilesService { constructor ( @InjectRepository ( LocalFile ) private localFilesRepository : Repository < LocalFile > , private usersService : UsersService ) {} async getUserAvatar ( userId : number ) { const user = await this . usersService . getById ( userId ); return this . getFileById ( user . avatarId ); } async saveLocalFileData ( fileData : LocalFileDto ) { const newFile = await this . localFilesRepository . create ( fileData ); await this . localFilesRepository . save ( newFile ); return newFile ; } async getFileById ( fileId : number ) { const file = await this . localFilesRepository . findOne ( fileId ); if ( ! file ) { throw new NotFoundException (); } return file ; } } export default LocalFilesService ; users.service.js TypeScript import { HttpException , HttpStatus , Injectable } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository } from \"typeorm\" ; import User from \"./user.entity\" ; import LocalFilesService from \"../localFiles/localFiles.service\" ; @Injectable () export class UsersService { constructor ( @InjectRepository ( User ) private usersRepository : Repository < User > , private localFilesService : LocalFilesService ) {} async getById ( id : number ) { const user = await this . usersRepository . findOne ({ id }); if ( user ) { return user ; } throw new HttpException ( \"User with this id does not exist\" , HttpStatus . NOT_FOUND ); } async addAvatar ( userId : number , fileData : LocalFileDto ) { const avatar = await this . localFilesService . saveLocalFileData ( fileData ); await this . usersRepository . update ( userId , { avatarId : avatar.id , }); } // ... } Solving the issue using forward referencing In our case, the LocalFilesService needs the UsersService and the other way around. Let\u2019s look into how our modules look so far. localFiles.module.ts TypeScript import { Module } from \"@nestjs/common\" ; import { TypeOrmModule } from \"@nestjs/typeorm\" ; import { ConfigModule } from \"@nestjs/config\" ; import LocalFile from \"./localFile.entity\" ; import LocalFilesService from \"./localFiles.service\" ; import LocalFilesController from \"./localFiles.controller\" ; import { UsersModule } from \"../users/users.module\" ; @Module ({ imports : [ TypeOrmModule . forFeature ([ LocalFile ]), ConfigModule , UsersModule ], providers : [ LocalFilesService ], exports : [ LocalFilesService ], controllers : [ LocalFilesController ], }) export class LocalFilesModule {} users . module .ts ; import { Module } from \"@nestjs/common\" ; import { UsersService } from \"./users.service\" ; import { TypeOrmModule } from \"@nestjs/typeorm\" ; import User from \"./user.entity\" ; import { UsersController } from \"./users.controller\" ; import { ConfigModule } from \"@nestjs/config\" ; import { LocalFilesModule } from \"../localFiles/localFiles.module\" ; @Module ({ imports : [ TypeOrmModule . forFeature ([ User ]), ConfigModule , LocalFilesModule , // ... ], providers : [ UsersService ], exports : [ UsersService ], controllers : [ UsersController ], }) export class UsersModule {} Above, we see that LocalFilesModule imports the UsersModule and vice versa. Running the application with the above configuration causes an error, unfortunately. [ExceptionHandler] Nest cannot create the LocalFilesModule instance. The module at index [2] of the LocalFilesModule \u201cimports\u201d array is undefined. Potential causes: A circular dependency between modules. Use forwardRef() to avoid it. Read more: https://docs.nestjs.com/fundamentals/circular-dependency The module at index [2] is of type \u201cundefined\u201d. Check your import statements and the type of the module. Scope [AppModule -> PostsModule -> UsersModule] Error: Nest cannot create the LocalFilesModule instance. The module at index [2] of the LocalFilesModule \u201cimports\u201d array is undefined. A workaround for the above is to use forward referencing. Thanks to it, we can refer to a module before NestJS initializes it. To do that, we need to use the forwardRef function. localFiles.module.ts TypeScript import { Module , forwardRef } from \"@nestjs/common\" ; import { TypeOrmModule } from \"@nestjs/typeorm\" ; import { ConfigModule } from \"@nestjs/config\" ; import LocalFile from \"./localFile.entity\" ; import LocalFilesService from \"./localFiles.service\" ; import LocalFilesController from \"./localFiles.controller\" ; import { UsersModule } from \"../users/users.module\" ; @Module ({ imports : [ TypeOrmModule . forFeature ([ LocalFile ]), ConfigModule , forwardRef (() => UsersModule )], providers : [ LocalFilesService ], exports : [ LocalFilesService ], controllers : [ LocalFilesController ], }) export class LocalFilesModule {} users . module .ts ; import { Module , forwardRef } from \"@nestjs/common\" ; import { UsersService } from \"./users.service\" ; import { TypeOrmModule } from \"@nestjs/typeorm\" ; import User from \"./user.entity\" ; import { UsersController } from \"./users.controller\" ; import { ConfigModule } from \"@nestjs/config\" ; import { LocalFilesModule } from \"../localFiles/localFiles.module\" ; @Module ({ imports : [ TypeOrmModule . forFeature ([ User ]), ConfigModule , forwardRef (() => LocalFilesModule ), // ... ], providers : [ UsersService ], exports : [ UsersService ], controllers : [ UsersController ], }) export class UsersModule {} Doing the above solves the issue of circular dependencies between our modules. Unfortunately, we still need to fix the problem for services. We need to use the forwardRef function and the @Inject() decorator to do that. localFiles.service.ts TypeScript import { forwardRef , Inject , Injectable } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository } from \"typeorm\" ; import LocalFile from \"./localFile.entity\" ; import { UsersService } from \"../users/users.service\" ; @Injectable () class LocalFilesService { constructor ( @InjectRepository ( LocalFile ) private localFilesRepository : Repository < LocalFile > , @Inject ( forwardRef (() => UsersService )) private usersService : UsersService ) {} // ... } export default LocalFilesService ; users.service.ts; Bash import { forwardRef, Inject, Injectable } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository } from \"typeorm\" ; import User from \"./user.entity\" ; import LocalFilesService from \"../localFiles/localFiles.service\" ; @Injectable () export class UsersService { constructor ( @InjectRepository ( User ) private usersRepository: Repository<User>, @Inject ( forwardRef (() = > LocalFilesService )) private localFilesService: LocalFilesService ) {} // ... } Doing all of the above causes our services to function correctly despite the circular dependencies. Circular dependencies between TypeORM entities We might also run into issues with circular dependencies with TypeORM entities. For example, this might happen when dealing with relationships. If you want to know more about relationships with TypeORM and NestJS, check out API with NestJS #7. Creating relationships with Postgres and TypeORM Fortunately, people noticed this problem, and there is a solution. For a whole discussion, check out this issue on GitHub. \u5728\u6211\u4eec\u7684\u67b6\u6784\u4e2d\u907f\u514d\u5faa\u73af\u4f9d\u8d56 \u4e0d\u5e78\u7684\u662f\uff0c\u5728\u6211\u4eec\u7684\u6a21\u5757\u4e2d\u6709\u5faa\u73af\u4f9d\u8d56\u901a\u5e38\u662f\u503c\u5f97\u6539\u8fdb\u7684\u8bbe\u8ba1\u7684\u6807\u5fd7\u3002 \u5728\u6211\u4eec\u7684\u6848\u4f8b\u4e2d\uff0c\u6211\u4eec\u8fdd\u53cd\u4e86 SOLID \u7684\u5355\u4e00\u8d23\u4efb\u539f\u5219\u3002 \u6211\u4eec\u7684 LocalFilesService \u548c UsersService \u8d1f\u8d23\u591a\u4e2a\u529f\u80fd\u3002 \u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e SOLID \u7684\u77e5\u8bc6\uff0c\u8bf7\u67e5\u770b \u5e94\u7528 SOLID \u539f\u5219\u5230\u4f60\u7684 TypeScript \u4ee3\u7801 \u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u6765\u5c01\u88c5\u90a3\u4e9b\u53ef\u80fd\u5bfc\u81f4\u5faa\u73af\u4f9d\u8d56\u95ee\u9898\u7684\u529f\u80fd\u3002 userAvatars.service.ts TypeScript import { Injectable } from \"@nestjs/common\" ; import { UsersService } from \"../users/users.service\" ; import LocalFilesService from \"../localFiles/localFiles.service\" ; @Injectable () class UserAvatarsService { constructor ( private localFilesService : LocalFilesService , private usersService : UsersService ) {} async getUserAvatar ( userId : number ) { const user = await this . usersService . getById ( userId ); return this . localFilesService . getFileById ( user . avatarId ); } async addAvatar ( userId : number , fileData : LocalFileDto ) { const avatar = await this . localFilesService . saveLocalFileData ( fileData ); await this . usersService . updateUser ( userId , { avatarId : avatar.id , }); } } export default UserAvatarsService ; \u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u76f4\u63a5\u5728 UsersController \u4e2d\u4f7f\u7528\u4e0a\u9762\u7684\u670d\u52a1\uff0c\u6216\u8005\u4e3a\u65b0\u670d\u52a1\u521b\u5efa\u4e00\u4e2a\u5168\u65b0\u7684\u63a7\u5236\u5668\u3002 users.controller.ts TypeScript import { BadRequestException , Controller , Post , Req , UploadedFile , UseGuards , UseInterceptors } from \"@nestjs/common\" ; import JwtAuthenticationGuard from \"../authentication/jwt-authentication.guard\" ; import RequestWithUser from \"../authentication/requestWithUser.interface\" ; import { Express } from \"express\" ; import LocalFilesInterceptor from \"../localFiles/localFiles.interceptor\" ; import { ApiBody , ApiConsumes } from \"@nestjs/swagger\" ; import FileUploadDto from \"./dto/fileUpload.dto\" ; import UserAvatarsService from \"../userAvatars/userAvatars.service\" ; @Controller ( \"users\" ) export class UsersController { constructor ( private readonly userAvatarsService : UserAvatarsService ) {} @Post ( \"avatar\" ) @UseGuards ( JwtAuthenticationGuard ) @UseInterceptors ( LocalFilesInterceptor ({ fieldName : \"file\" , path : \"/avatars\" , fileFilter : ( request , file , callback ) => { if ( ! file . mimetype . includes ( \"image\" )) { return callback ( new BadRequestException ( \"Provide a valid image\" ), false ); } callback ( null , true ); }, limits : { fileSize : Math.pow ( 1024 , 2 ), // 1MB }, }) ) @ApiConsumes ( \"multipart/form-data\" ) @ApiBody ({ description : \"A new avatar for the user\" , type : FileUploadDto , }) async addAvatar ( @Req () request : RequestWithUser , @UploadedFile () file : Express.Multer.File ) { return this . userAvatarsService . addAvatar ( request . user . id , { path : file.path , filename : file.originalname , mimetype : file.mimetype , }); } } \u603b\u7ed3 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u7814\u7a76\u4e86 Node.js \u548c NestJS \u4e0a\u4e0b\u6587\u4e2d\u7684\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb\u95ee\u9898\u3002 \u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86 Node.js \u5982\u4f55\u5904\u7406\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb\uff0c\u4ee5\u53ca\u5b83\u5982\u4f55\u5bfc\u81f4\u96be\u4ee5\u9884\u6d4b\u7684\u95ee\u9898\u3002 \u6211\u4eec\u8fd8\u4f7f\u7528\u524d\u5411\u5f15\u7528\u5904\u7406\u4e86\u8de8 NestJS \u7684\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb\u3002 \u56e0\u4e3a\u8fd9\u53ea\u662f\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u5faa\u73af\u4f9d\u8d56\u9879\u53ef\u80fd\u610f\u5473\u7740\u7f3a\u4e4f\u8bbe\u8ba1\uff0c\u6240\u4ee5\u6211\u4eec\u91cd\u5199\u4e86\u4ee3\u7801\u6765\u6d88\u9664\u5b83\u3002 \u8fd9\u901a\u5e38\u662f\u6700\u597d\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u5e94\u8be5\u907f\u514d\u5728\u4f53\u7cfb\u7ed3\u6784\u4e2d\u5f15\u5165\u5faa\u73af\u4f9d\u8d56\u3002","title":"\u5904\u7406\u5faa\u73af\u4f9d\u8d56\u9879"},{"location":"blog/61.circular-dependencies/#circular-dependencies-in-nodejs-modules","text":"A circular dependency between Node.js modules happens when two files import each other. Let\u2019s look into this straightforward example: one.js JavaScript const { two } = require ( \"./two\" ); const one = \"1\" ; console . log ( \"file one.js:\" , one , two ); module . exports . one = one ; two . js ; const { one } = require ( \"./one\" ); const two = \"2\" ; console . log ( \"file two.js:\" , one , two ); module . exports . two = two ; After running node ./one.js, we see the following output: Bash file two.js: undefined 2 file one.js: 1 2 ( node:109498 ) Warning: Accessing non-existent property \u2018one\u2019 of module exports inside circular dependency ( Use node --trace-warnings ... to show where the warning was created ) We can see that a code containing circular dependencies can run but might result in unexpected results. The above code executes as follows: one.js executes, and imports two.js, two.js executes, and imports one.js, to prevent an infinite loop, two.js loads an unfinished copy of one.js, this is why the one variable in two.js is undefined, two.js finishes executing, and its exported value reaches one.js, one.js continues running and contains all valid values. The above example allows us to understand how Node.js reacts to circular dependencies. Circular dependencies are often a sign of a bad design, and we should avoid them when possible.","title":"Circular dependencies in Node.js modules"},{"location":"blog/61.circular-dependencies/#detecting-circular-dependencies-using-eslint","text":"The provided code example makes it very obvious that there is a circular dependency between files. It is not always that apparent, though. Fortunately, ESLint can help us detect such dependencies. To do that, we need the eslint-plugin-import package. Bash npm install eslint-plugin-import The rule that we want is called import/no-cycle, and it ensures that no circular dependencies are present between our files. In our NestJS project, we would set the configuration in the following way: .eslintrc.js JavaScript module . exports = { parser : \"@typescript-eslint/parser\" , plugins : [ \"import\" , // ... ], extends : [ \"plugin:import/typescript\" , // ... ], rules : { \"import/no-cycle\" : 2 , // ... }, // ... };","title":"Detecting circular dependencies using ESLint"},{"location":"blog/61.circular-dependencies/#circular-dependencies-in-nestjs","text":"Besides circular dependencies between Node.js modules, we might also run into this issue when working with NestJS modules. In part 55 of this series, we\u2019ve implemented a feature of uploading files to the server. Let\u2019s expand on it to create a case with a circular dependency. localFiles.service.js TypeScript import { Injectable , NotFoundException } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository } from \"typeorm\" ; import LocalFile from \"./localFile.entity\" ; import { UsersService } from \"../users/users.service\" ; @Injectable () class LocalFilesService { constructor ( @InjectRepository ( LocalFile ) private localFilesRepository : Repository < LocalFile > , private usersService : UsersService ) {} async getUserAvatar ( userId : number ) { const user = await this . usersService . getById ( userId ); return this . getFileById ( user . avatarId ); } async saveLocalFileData ( fileData : LocalFileDto ) { const newFile = await this . localFilesRepository . create ( fileData ); await this . localFilesRepository . save ( newFile ); return newFile ; } async getFileById ( fileId : number ) { const file = await this . localFilesRepository . findOne ( fileId ); if ( ! file ) { throw new NotFoundException (); } return file ; } } export default LocalFilesService ; users.service.js TypeScript import { HttpException , HttpStatus , Injectable } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository } from \"typeorm\" ; import User from \"./user.entity\" ; import LocalFilesService from \"../localFiles/localFiles.service\" ; @Injectable () export class UsersService { constructor ( @InjectRepository ( User ) private usersRepository : Repository < User > , private localFilesService : LocalFilesService ) {} async getById ( id : number ) { const user = await this . usersRepository . findOne ({ id }); if ( user ) { return user ; } throw new HttpException ( \"User with this id does not exist\" , HttpStatus . NOT_FOUND ); } async addAvatar ( userId : number , fileData : LocalFileDto ) { const avatar = await this . localFilesService . saveLocalFileData ( fileData ); await this . usersRepository . update ( userId , { avatarId : avatar.id , }); } // ... }","title":"Circular dependencies in NestJS"},{"location":"blog/61.circular-dependencies/#solving-the-issue-using-forward-referencing","text":"In our case, the LocalFilesService needs the UsersService and the other way around. Let\u2019s look into how our modules look so far. localFiles.module.ts TypeScript import { Module } from \"@nestjs/common\" ; import { TypeOrmModule } from \"@nestjs/typeorm\" ; import { ConfigModule } from \"@nestjs/config\" ; import LocalFile from \"./localFile.entity\" ; import LocalFilesService from \"./localFiles.service\" ; import LocalFilesController from \"./localFiles.controller\" ; import { UsersModule } from \"../users/users.module\" ; @Module ({ imports : [ TypeOrmModule . forFeature ([ LocalFile ]), ConfigModule , UsersModule ], providers : [ LocalFilesService ], exports : [ LocalFilesService ], controllers : [ LocalFilesController ], }) export class LocalFilesModule {} users . module .ts ; import { Module } from \"@nestjs/common\" ; import { UsersService } from \"./users.service\" ; import { TypeOrmModule } from \"@nestjs/typeorm\" ; import User from \"./user.entity\" ; import { UsersController } from \"./users.controller\" ; import { ConfigModule } from \"@nestjs/config\" ; import { LocalFilesModule } from \"../localFiles/localFiles.module\" ; @Module ({ imports : [ TypeOrmModule . forFeature ([ User ]), ConfigModule , LocalFilesModule , // ... ], providers : [ UsersService ], exports : [ UsersService ], controllers : [ UsersController ], }) export class UsersModule {} Above, we see that LocalFilesModule imports the UsersModule and vice versa. Running the application with the above configuration causes an error, unfortunately. [ExceptionHandler] Nest cannot create the LocalFilesModule instance. The module at index [2] of the LocalFilesModule \u201cimports\u201d array is undefined. Potential causes: A circular dependency between modules. Use forwardRef() to avoid it. Read more: https://docs.nestjs.com/fundamentals/circular-dependency The module at index [2] is of type \u201cundefined\u201d. Check your import statements and the type of the module. Scope [AppModule -> PostsModule -> UsersModule] Error: Nest cannot create the LocalFilesModule instance. The module at index [2] of the LocalFilesModule \u201cimports\u201d array is undefined. A workaround for the above is to use forward referencing. Thanks to it, we can refer to a module before NestJS initializes it. To do that, we need to use the forwardRef function. localFiles.module.ts TypeScript import { Module , forwardRef } from \"@nestjs/common\" ; import { TypeOrmModule } from \"@nestjs/typeorm\" ; import { ConfigModule } from \"@nestjs/config\" ; import LocalFile from \"./localFile.entity\" ; import LocalFilesService from \"./localFiles.service\" ; import LocalFilesController from \"./localFiles.controller\" ; import { UsersModule } from \"../users/users.module\" ; @Module ({ imports : [ TypeOrmModule . forFeature ([ LocalFile ]), ConfigModule , forwardRef (() => UsersModule )], providers : [ LocalFilesService ], exports : [ LocalFilesService ], controllers : [ LocalFilesController ], }) export class LocalFilesModule {} users . module .ts ; import { Module , forwardRef } from \"@nestjs/common\" ; import { UsersService } from \"./users.service\" ; import { TypeOrmModule } from \"@nestjs/typeorm\" ; import User from \"./user.entity\" ; import { UsersController } from \"./users.controller\" ; import { ConfigModule } from \"@nestjs/config\" ; import { LocalFilesModule } from \"../localFiles/localFiles.module\" ; @Module ({ imports : [ TypeOrmModule . forFeature ([ User ]), ConfigModule , forwardRef (() => LocalFilesModule ), // ... ], providers : [ UsersService ], exports : [ UsersService ], controllers : [ UsersController ], }) export class UsersModule {} Doing the above solves the issue of circular dependencies between our modules. Unfortunately, we still need to fix the problem for services. We need to use the forwardRef function and the @Inject() decorator to do that. localFiles.service.ts TypeScript import { forwardRef , Inject , Injectable } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository } from \"typeorm\" ; import LocalFile from \"./localFile.entity\" ; import { UsersService } from \"../users/users.service\" ; @Injectable () class LocalFilesService { constructor ( @InjectRepository ( LocalFile ) private localFilesRepository : Repository < LocalFile > , @Inject ( forwardRef (() => UsersService )) private usersService : UsersService ) {} // ... } export default LocalFilesService ; users.service.ts; Bash import { forwardRef, Inject, Injectable } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository } from \"typeorm\" ; import User from \"./user.entity\" ; import LocalFilesService from \"../localFiles/localFiles.service\" ; @Injectable () export class UsersService { constructor ( @InjectRepository ( User ) private usersRepository: Repository<User>, @Inject ( forwardRef (() = > LocalFilesService )) private localFilesService: LocalFilesService ) {} // ... } Doing all of the above causes our services to function correctly despite the circular dependencies.","title":"Solving the issue using forward referencing"},{"location":"blog/61.circular-dependencies/#circular-dependencies-between-typeorm-entities","text":"We might also run into issues with circular dependencies with TypeORM entities. For example, this might happen when dealing with relationships. If you want to know more about relationships with TypeORM and NestJS, check out API with NestJS #7. Creating relationships with Postgres and TypeORM Fortunately, people noticed this problem, and there is a solution. For a whole discussion, check out this issue on GitHub.","title":"Circular dependencies between TypeORM entities"},{"location":"blog/61.circular-dependencies/#_1","text":"\u4e0d\u5e78\u7684\u662f\uff0c\u5728\u6211\u4eec\u7684\u6a21\u5757\u4e2d\u6709\u5faa\u73af\u4f9d\u8d56\u901a\u5e38\u662f\u503c\u5f97\u6539\u8fdb\u7684\u8bbe\u8ba1\u7684\u6807\u5fd7\u3002 \u5728\u6211\u4eec\u7684\u6848\u4f8b\u4e2d\uff0c\u6211\u4eec\u8fdd\u53cd\u4e86 SOLID \u7684\u5355\u4e00\u8d23\u4efb\u539f\u5219\u3002 \u6211\u4eec\u7684 LocalFilesService \u548c UsersService \u8d1f\u8d23\u591a\u4e2a\u529f\u80fd\u3002 \u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e SOLID \u7684\u77e5\u8bc6\uff0c\u8bf7\u67e5\u770b \u5e94\u7528 SOLID \u539f\u5219\u5230\u4f60\u7684 TypeScript \u4ee3\u7801 \u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u6765\u5c01\u88c5\u90a3\u4e9b\u53ef\u80fd\u5bfc\u81f4\u5faa\u73af\u4f9d\u8d56\u95ee\u9898\u7684\u529f\u80fd\u3002 userAvatars.service.ts TypeScript import { Injectable } from \"@nestjs/common\" ; import { UsersService } from \"../users/users.service\" ; import LocalFilesService from \"../localFiles/localFiles.service\" ; @Injectable () class UserAvatarsService { constructor ( private localFilesService : LocalFilesService , private usersService : UsersService ) {} async getUserAvatar ( userId : number ) { const user = await this . usersService . getById ( userId ); return this . localFilesService . getFileById ( user . avatarId ); } async addAvatar ( userId : number , fileData : LocalFileDto ) { const avatar = await this . localFilesService . saveLocalFileData ( fileData ); await this . usersService . updateUser ( userId , { avatarId : avatar.id , }); } } export default UserAvatarsService ; \u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u76f4\u63a5\u5728 UsersController \u4e2d\u4f7f\u7528\u4e0a\u9762\u7684\u670d\u52a1\uff0c\u6216\u8005\u4e3a\u65b0\u670d\u52a1\u521b\u5efa\u4e00\u4e2a\u5168\u65b0\u7684\u63a7\u5236\u5668\u3002 users.controller.ts TypeScript import { BadRequestException , Controller , Post , Req , UploadedFile , UseGuards , UseInterceptors } from \"@nestjs/common\" ; import JwtAuthenticationGuard from \"../authentication/jwt-authentication.guard\" ; import RequestWithUser from \"../authentication/requestWithUser.interface\" ; import { Express } from \"express\" ; import LocalFilesInterceptor from \"../localFiles/localFiles.interceptor\" ; import { ApiBody , ApiConsumes } from \"@nestjs/swagger\" ; import FileUploadDto from \"./dto/fileUpload.dto\" ; import UserAvatarsService from \"../userAvatars/userAvatars.service\" ; @Controller ( \"users\" ) export class UsersController { constructor ( private readonly userAvatarsService : UserAvatarsService ) {} @Post ( \"avatar\" ) @UseGuards ( JwtAuthenticationGuard ) @UseInterceptors ( LocalFilesInterceptor ({ fieldName : \"file\" , path : \"/avatars\" , fileFilter : ( request , file , callback ) => { if ( ! file . mimetype . includes ( \"image\" )) { return callback ( new BadRequestException ( \"Provide a valid image\" ), false ); } callback ( null , true ); }, limits : { fileSize : Math.pow ( 1024 , 2 ), // 1MB }, }) ) @ApiConsumes ( \"multipart/form-data\" ) @ApiBody ({ description : \"A new avatar for the user\" , type : FileUploadDto , }) async addAvatar ( @Req () request : RequestWithUser , @UploadedFile () file : Express.Multer.File ) { return this . userAvatarsService . addAvatar ( request . user . id , { path : file.path , filename : file.originalname , mimetype : file.mimetype , }); } }","title":"\u5728\u6211\u4eec\u7684\u67b6\u6784\u4e2d\u907f\u514d\u5faa\u73af\u4f9d\u8d56"},{"location":"blog/61.circular-dependencies/#_2","text":"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u7814\u7a76\u4e86 Node.js \u548c NestJS \u4e0a\u4e0b\u6587\u4e2d\u7684\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb\u95ee\u9898\u3002 \u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86 Node.js \u5982\u4f55\u5904\u7406\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb\uff0c\u4ee5\u53ca\u5b83\u5982\u4f55\u5bfc\u81f4\u96be\u4ee5\u9884\u6d4b\u7684\u95ee\u9898\u3002 \u6211\u4eec\u8fd8\u4f7f\u7528\u524d\u5411\u5f15\u7528\u5904\u7406\u4e86\u8de8 NestJS \u7684\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb\u3002 \u56e0\u4e3a\u8fd9\u53ea\u662f\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u5faa\u73af\u4f9d\u8d56\u9879\u53ef\u80fd\u610f\u5473\u7740\u7f3a\u4e4f\u8bbe\u8ba1\uff0c\u6240\u4ee5\u6211\u4eec\u91cd\u5199\u4e86\u4ee3\u7801\u6765\u6d88\u9664\u5b83\u3002 \u8fd9\u901a\u5e38\u662f\u6700\u597d\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u5e94\u8be5\u907f\u514d\u5728\u4f53\u7cfb\u7ed3\u6784\u4e2d\u5f15\u5165\u5faa\u73af\u4f9d\u8d56\u3002","title":"\u603b\u7ed3"},{"location":"blog/_index/","text":"","title":"\u535a\u5ba2"},{"location":"blog/applying-solid-principles-to-your-typescript-code/","text":"SOLID \u539f\u5219\u5728\u76f8\u5f53\u957f\u7684\u4e00\u6bb5\u65f6\u95f4\u4ee5\u524d\u5c31\u88ab\u5b9a\u4e49\u4e86\uff0c\u73b0\u5728\u4ecd\u7136\u9002\u7528\u3002 \u4ed6\u4eec\u7684\u76ee\u6807\u662f\u4f7f\u6211\u4eec\u7684\u8f6f\u4ef6\u66f4\u5bb9\u6613\u7406\u89e3\u3001\u9605\u8bfb\u548c\u6269\u5c55\u3002 \u6211\u4eec\u628a\u8fd9\u4e2a\u6982\u5ff5\u5f52\u529f\u4e8e\u7f57\u4f2f\u7279\u00b7C\u3002 \u9a6c\u4e01 2000 \u5e74\u7684\u8bba\u6587\u3002 \u4e0d\u8fc7\uff0cSOLID \u7684\u9996\u5b57\u6bcd\u7f29\u7565\u8bcd\u662f\u540e\u6765\u5b9a\u4e49\u7684\u3002 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd SOLID \u7684\u6240\u6709\u539f\u7406\uff0c\u5e76\u5728 TypeScript \u7684\u4f8b\u5b50\u4e2d\u4f53\u73b0\u51fa\u6765\u3002 \u5355\u4e00\u804c\u8d23\u539f\u5219 \u5355\u4e00\u804c\u8d23\u539f\u5219\u58f0\u660e\u4e00\u4e2a\u7c7b\u5e94\u8be5\u53ea\u8d1f\u8d23\u5355\u4e00\u529f\u80fd\u3002 \u4ee5\u4e0a\u4e5f\u6d89\u53ca\u5230\u6a21\u5757\u548c\u529f\u80fd\u3002 TypeScript class Statistics { public computeSalesStatistics () { // ... } public generateReport () { // ... } } \u6211\u4eec\u5e94\u8be5\u628a\u4e0a\u9762\u7684\u7c7b\u5206\u6210\u4e24\u4e2a\u5355\u72ec\u7684\u7c7b\u3002 SOLID \u5c06\u8d23\u4efb\u7684\u6982\u5ff5\u5b9a\u4e49\u4e3a\u6539\u53d8\u7684\u7406\u7531\u3002 Robert C.Martin \u5728\u4ed6\u7684\u535a\u5ba2\u6587\u7ae0\u4e2d\u8ba8\u8bba\u4e86\u6211\u4eec\u5982\u4f55\u5b9a\u4e49\u6539\u53d8\u7684\u7406\u7531\u3002 \u4ed6\u5f3a\u8c03\uff0c\u4e0d\u5e94\u8be5\u5728\u4ee3\u7801\u65b9\u9762\u8fdb\u884c\u5ba1\u8bae\u3002 \u4f8b\u5982\uff0c\u6839\u636e\u5355\u4e00\u8d23\u4efb\u539f\u5219\uff0c\u91cd\u6784\u4e0d\u662f\u66f4\u6539\u7684\u539f\u56e0\u3002 \u8981\u5b9a\u4e49\u66f4\u6539\u7684\u539f\u56e0\uff0c\u6211\u4eec\u9700\u8981\u8c03\u67e5\u6211\u4eec\u7684\u7a0b\u5e8f\u7684\u8d23\u4efb\u662f\u4ec0\u4e48\u3002 Statistics \u7c7b\u53ef\u80fd\u4f1a\u56e0\u4e3a\u4e24\u4e2a\u4e0d\u540c\u7684\u539f\u56e0\u800c\u6539\u53d8: \u9500\u552e\u7edf\u8ba1\u8ba1\u7b97\u903b\u8f91\u53d1\u751f\u53d8\u5316\uff0c \u62a5\u544a\u7684\u683c\u5f0f\u53d1\u751f\u53d8\u5316 \u5355\u4e00\u804c\u8d23\u539f\u5219\u5f3a\u8c03\u4e86\u4e0a\u8ff0\u4e24\u4e2a\u65b9\u9762\u7ed9 Statistics \u7c7b\u589e\u52a0\u4e86\u4e24\u79cd\u4e0d\u540c\u7684\u804c\u8d23\u3002 TypeScript class Statistics { public computeSalesStatistics () { // ... } } class ReportGenerator { public generateReport () { // ... } } \u73b0\u5728\u6211\u4eec\u5fc5\u987b\u5206\u5f00\u7c7b\uff0c\u6bcf\u4e2a\u7c7b\u90fd\u6709\u4e00\u4e2a\u6539\u53d8\u7684\u539f\u56e0\uff0c\u56e0\u6b64\u53ea\u6709\u4e00\u4e2a\u8d23\u4efb\u3002 \u5e94\u7528\u4e0a\u8ff0\u539f\u5219\u4f7f\u6211\u4eec\u7684\u4ee3\u7801\u66f4\u5bb9\u6613\u89e3\u91ca\u548c\u7406\u89e3\u3002 \u5f00\u95ed\u539f\u5219 \u6839\u636e\u5f00\u653e-\u5c01\u95ed\u539f\u5219\uff0c\u8f6f\u4ef6\u5b9e\u4f53\u5bf9\u6269\u5c55\u662f\u5f00\u653e\u7684\uff0c\u5bf9\u4fee\u6539\u662f\u5c01\u95ed\u7684\u3002 \u4e0a\u8ff0\u539f\u5219\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u5728\u4e0d\u6539\u53d8\u73b0\u6709\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u6dfb\u52a0\u65b0\u529f\u80fd\u3002 TypeScript class Rectangle { public width : number ; public height : number ; constructor ( width : number , height : number ) { this . width = width ; this . height = height ; } } class Circle { public radius : number ; constructor ( radius : number ) { this . radius = radius ; } } \u5047\u8bbe\u6211\u4eec\u60f3\u8981\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u5f62\u72b6\u6570\u7ec4\u7684\u9762\u79ef\u3002 \u5728\u6211\u4eec\u5f53\u524d\u7684\u8bbe\u8ba1\u4e2d\uff0c\u5b83\u53ef\u80fd\u662f\u8fd9\u6837\u7684: TypeScript function calculateAreasOfMultipleShapes ( shapes : Array < Rectangle | Circle > ) { return shapes . reduce (( calculatedArea , shape ) => { if ( shape instanceof Rectangle ) { return calculatedArea + shape . width * shape . height ; } if ( shape instanceof Circle ) { return calculatedArea + shape . radius * Math . PI ; } }, 0 ); } \u591a\u4e8f\u4e86\u57fa\u4e8e\u63a7\u5236\u6d41\u7684\u6536\u7f29\uff0cTypeScript \u77e5\u9053\u6211\u4eec\u7684\u5f62\u72b6\u6709\u54ea\u4e9b\u5c5e\u6027\u3002 \u6211\u4eec\u5728\u300a\u7406\u89e3 TypeScript \u4e2d\u7684\u4efb\u610f\u548c\u672a\u77e5\u300b\u4e2d\u8ba8\u8bba\u8fc7\u8fd9\u4e2a\u4e3b\u9898\u3002 never \u548c void \u4e4b\u95f4\u7684\u533a\u522b \u4e0a\u8ff0\u65b9\u6cd5\u7684\u95ee\u9898\u662f\uff0c\u5f53\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u65b0\u5f62\u72b6\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539 calculateAreasOfMultipleShapes \u51fd\u6570\u3002 \u8fd9\u4f7f\u5f97\u5b83\u53ef\u4ee5\u4fee\u6539\uff0c\u6253\u7834\u4e86\u5f00\u95ed\u539f\u5219\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f3a\u5236\u6211\u4eec\u7684\u5f62\u72b6\u62e5\u6709\u4e00\u4e2a\u8fd4\u56de\u533a\u57df\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 TypeScript interface Shape { getArea () : number ; } class Rectangle implements Shape { public width : number ; public height : number ; constructor ( width : number , height : number ) { this . width = width ; this . height = height ; } public getArea () { return this . width * this . height ; } } class Circle implements Shape { public radius : number ; constructor ( radius : number ) { this . radius = radius ; } public getArea () { return this . radius * Math . PI ; } } \u73b0\u5728\u6211\u4eec\u786e\u4fe1\u6240\u6709\u7684\u5f62\u72b6\u90fd\u6709 getArea \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f7f\u7528\u5b83\u3002 TypeScript function calculateAreasOfMultipleShapes ( shapes : Shape []) { return shapes . reduce (( calculatedArea , shape ) => { return calculatedArea + shape . getArea (); }, 0 ); } \u73b0\u5728\uff0c\u5f53\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u65b0\u5f62\u72b6\u65f6\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u4fee\u6539 calculateAreasOfMultipleShapes \u51fd\u6570\u3002 \u6211\u4eec\u5bf9\u5ef6\u671f\u5f00\u653e\uff0c\u5bf9\u4fee\u6539\u5173\u95ed\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u62bd\u8c61\u7c7b\u800c\u4e0d\u662f\u63a5\u53e3\u6765\u5b9e\u73b0\u4e0a\u8ff0\u529f\u80fd Liskov \u66ff\u6362\u539f\u5219 \u4e0a\u8ff0\u89c4\u5219\uff0c\u7531 Barbara Liskov \u4ecb\u7ecd\uff0c\u4e5f\u5e2e\u52a9\u6211\u4eec\u786e\u4fdd\u66f4\u6539\u7cfb\u7edf\u7684\u4e00\u4e2a\u533a\u57df\u4e0d\u4f1a\u7834\u574f\u5176\u4ed6\u90e8\u5206\u3002 \u4e3a\u4e86\u4f7f\u8fd9\u4e00\u539f\u5219\u4e0d\u90a3\u4e48\u4ee4\u4eba\u56f0\u60d1\uff0c\u6211\u4eec\u5c06\u628a\u5b83\u5206\u6210\u591a\u4e2a\u90e8\u5206\u3002 \u7528\u5b50\u7c7b\u66ff\u6362\u7c7b\u7684\u5b9e\u4f8b\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u8d1f\u9762\u5f71\u54cd \u5728\u4e0a\u8ff0\u539f\u5219\u4e2d\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\uff0c\u5b83\u7684\u4e3b\u8981\u7126\u70b9\u662f\u7c7b\u7ee7\u627f\u3002 \u8ba9\u6211\u4eec\u6765\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u800c\u751f\u52a8\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u5982\u4f55\u6253\u7834\u4e0a\u8ff0\u539f\u5219\u3002 TypeScript class Employee { protected permissions : any = new Set < string > (); public hasPermission ( permissionName : string ) { return this . permissions . has ( permissionName ); } public addPermission ( permissionName : string ) { return this . permissions . add ( permissionName ); } } class Cashier extends Employee { protected permissions : string [] = []; public addPermission ( permissionName : string ) { this . permissions . push ( permissionName ); } } function isPersonAllowedToDeleteProducts ( person : Employee ) { return person . hasPermission ( \"deleteProducts\" ); } \u4e0a\u9762\u7684\u4ee3\u7801\u95ee\u9898\u5f88\u5927\uff0c\u56e0\u4e3a\u51fa\u7eb3\u548c\u7528\u6237\u7684\u6743\u9650\u5b9e\u73b0\u662f\u4e0d\u540c\u7684\u3002 TypeScript const employee = new Employee (); employee . addPermission ( \"deleteProducts\" ); isPersonAllowedToDeleteProducts ( employee ); \u4e0a\u9762\u7684\u4ee3\u7801\u5de5\u4f5c\u5f97\u5f88\u597d\uff0c\u4f46\u662f\u5f53\u6211\u4eec\u7528\u5b50\u7c7b\u66ff\u6362\u7236\u7c7b\u7684\u5b9e\u4f8b\u65f6\uff0c\u5c31\u4f1a\u9047\u5230\u95ee\u9898\u3002 TypeScript const cashier = new Cashier (); cashier . addPermission ( \"deleteProducts\" ); isPersonAllowedToDeleteProducts ( cashier ); TypeError: this.permissions.has is not a function \u8fd9\u79cd\u60c5\u51b5\u975e\u5e38\u660e\u663e\uff0c\u4e0d\u5e94\u8be5\u51fa\u73b0\u5728\u6b63\u786e\u952e\u5165\u7684 TypeScript \u4ee3\u7801\u4e2d\u3002 \u6211\u4eec\u5fc5\u987b\u4f7f\u7528 permissions: any \u6765\u5141\u8bb8\u51fa\u7eb3\u4e0d\u6070\u5f53\u5730\u6269\u5c55\u7528\u6237\u3002 \u9a8c\u8bc1\u6761\u4ef6 \u4e00\u4e2a\u66f4\u5b8c\u5584\u7684\u793a\u4f8b\u662f\u524d\u7f6e\u6761\u4ef6\u548c\u9a8c\u8bc1\u3002 TypeScript class Employee { protected permissions = new Set < string > (); public addPermission ( permissionName : string ) { return this . permissions . add ( permissionName ); } } class Cashier extends Employee { public addPermission ( permissionName : string ) { if ( permissionName === \"deleteProducts\" ) { throw new Error ( \"Cashier should not be able to delete products!\" ); } return this . permissions . add ( permissionName ); } } \u53e6\u4e00\u65b9\u9762\uff0c\u4e0a\u9762\u7684\u793a\u4f8b\u5728\u7c7b\u578b\u65b9\u9762\u5f88\u597d\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u4e5f\u6253\u7834\u4e86\u5229\u65af\u79d1\u592b\u66ff\u6362\u539f\u5219\u3002 TypeScript const employee = new Employee (); employee . addPermission ( \"deleteProducts\" ); const employee = new Cashier (); employee . addPermission ( \"deleteProducts\" ); Error: Cashier should not be able to delete products! \u540c\u6837\u7684\u4e8b\u60c5\u4e5f\u9002\u7528\u4e8e\u8f93\u51fa\u6761\u4ef6\u3002 \u5982\u679c\u6211\u4eec\u8986\u76d6\u7684\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u90a3\u4e48\u5b50\u7c7b\u4e0d\u5e94\u8be5\u5bf9\u8f93\u51fa\u8fdb\u884c\u989d\u5916\u7684\u9a8c\u8bc1\u3002 \u63a5\u53e3\u9694\u79bb\u539f\u5219 \u63a5\u53e3\u9694\u79bb\u539f\u5219\u5f3a\u8c03\u521b\u5efa\u66f4\u5c0f\u3001\u66f4\u5177\u4f53\u7684\u63a5\u53e3\u3002 \u8ba9\u6211\u4eec\u60f3\u8c61\u4e00\u4e0b\u4e0b\u9762\u7684\u60c5\u51b5\u3002 TypeScript interface Bird { fly () : void ; walk () : void ; } \u4e0a\u56fe\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u9e1f\u7684\u63a5\u53e3\u3002 \u6211\u4eec\u5047\u8bbe\u9e1f\u80fd\u8d70\u80fd\u98de\u3002 \u521b\u5efa\u8fd9\u6837\u4e00\u53ea\u9e1f\u7684\u4f8b\u5b50\u5f88\u7b80\u5355: TypeScript class Nightingale implements Bird { public fly () { /// ... } public walk () { /// ... } } \u4e0d\u8fc7\uff0c\u4e0a\u8ff0\u60c5\u51b5\u5e76\u4e0d\u603b\u662f\u5982\u6b64\u3002 \u4e0a\u8ff0\u5047\u8bbe\u53ef\u80fd\u662f\u9519\u8bef\u7684\u3002 TypeScript class Kiwi implements Bird { public fly () { throw new Error ( \"Unfortunately, Kiwi can not fly!\" ); } public walk () { /// ... } } \u63a5\u53e3\u9694\u79bb\u539f\u5219\u6307\u51fa\uff0c\u4e0d\u5e94\u8be5\u5f3a\u8feb\u5ba2\u6237\u7aef\u4f9d\u8d56\u4e8e\u5b83\u4e0d\u4f7f\u7528\u7684\u65b9\u6cd5\u3002 \u5728\u63a5\u53e3\u4e2d\u653e\u5165\u592a\u591a\u5c5e\u6027\uff0c\u53ef\u80fd\u4f1a\u7834\u574f\u4e0a\u8ff0\u89c4\u5219\u3002 \u6211\u4eec\u53ef\u80fd\u8981\u505a\u7684\u662f\u5b9e\u73b0\u66f4\u5c0f\u7684\u63a5\u53e3\uff0c\u6709\u65f6\u79f0\u4e3a\u89d2\u8272\u63a5\u53e3\u3002 TypeScript interface CanWalk { walk () : void ; } interface CanFly { fly () : void ; } class Nightingale implements CanFly , CanWalk { public fly () { /// ... } public walk () { /// ... } } class Kiwi implements CanWalk { public walk () { /// ... } } \u901a\u8fc7\u6539\u53d8\u63a5\u53e3\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u907f\u514d\u4e86\u63a5\u53e3\u7684\u81a8\u80c0\uff0c\u5e76\u4f7f\u6211\u4eec\u7684\u8f6f\u4ef6\u66f4\u5bb9\u6613\u7ef4\u62a4\u3002 \u4f9d\u8d56\u6027\u5012\u7f6e\u539f\u5219 \u4f9d\u8d56\u5012\u7f6e\u539f\u5219\u7684\u6838\u5fc3\u662f\u9ad8\u5c42\u6a21\u5757\u4e0d\u5e94\u8be5\u4f9d\u8d56\u4f4e\u5c42\u6a21\u5757\u3002 \u76f8\u53cd\uff0c\u5b83\u4eec\u90fd\u5e94\u8be5\u4f9d\u8d56\u4e8e\u62bd\u8c61\u3002 \u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u793a\u4f8b\u6765\u8fdb\u4e00\u6b65\u7814\u7a76\u4e0a\u8ff0\u95ee\u9898\u3002 TypeScript interface Person { introduceSelf () : void ; } class Engineer implements Person { public introduceSelf () { console . log ( \"I am an engineer\" ); } } class Musician implements Person { public introduceSelf () { console . log ( \"I am a musician\" ); } } \u4e0a\u8ff0\u884c\u4e3a\u662f\u57fa\u672c\u7684\u548c\u5b66\u672f\u6027\u7684\uff0c\u4f46\u5e76\u4e0d\u603b\u662f\u8fd9\u6837\u3002 \u5982\u679c\u4ecb\u7ecd\u66f4\u590d\u6742\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e3a\u6b64\u521b\u5efa\u5355\u72ec\u7684\u7c7b\u3002 TypeScript interface IntroductionService { introduce () : void ; } class EngineerIntroductionService implements IntroductionService { public introduce () { console . log ( \"I am an engineer\" ); } } class Engineer implements Person { private introductionService = new EngineerIntroductionService (); public introduceSelf () { this . introductionService . introduce (); } } \u4e0d\u5e78\u7684\u662f\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u6253\u7834\u4e86\u4f9d\u8d56\u5012\u7f6e\u539f\u5219\u3002 \u5b83\u8bf4\u6211\u4eec\u5e94\u8be5\u98a0\u5012\u5de5\u7a0b\u5e08\u548c\u5de5\u7a0b\u5e08\u4ecb\u7ecd\u6240\u7684\u4f9d\u8d56\u5173\u7cfb\u3002 TypeScript class Engineer implements Person { public introductionService : EngineerIntroductionService ; constructor ( introductionService : IntroductionService ) { this . introductionService = introductionService ; } public introduceSelf () { this . introductionService . introduce (); } } const engineer = new Engineer ( new EngineerIntroductionService ()); \u4e0a\u9762\u7684\u597d\u5904\u662f\u6211\u4eec\u4e0d\u9700\u8981\u5de5\u7a0b\u5e08\u548c\u97f3\u4e50\u5bb6\u7684\u5b50\u7c7b\u3002 TypeScript class Person { public introductionService : IntroductionService ; constructor ( introductionService : IntroductionService ) { this . introductionService = introductionService ; } public introduceSelf () { this . introductionService . introduce (); } } const engineer = new Person ( new EngineerIntroductionService ()); const musician = new Person ( new MusicianIntroductionService ()); \u4e0a\u9762\u7684\u65b9\u6cd5\u662f\u4e00\u4e2a\u4f7f\u7528\u7ec4\u5408\u800c\u4e0d\u662f\u7ee7\u627f\u7684\u4f8b\u5b50\u3002 \u6b64\u5916\uff0c\u8fd9\u4f7f\u6211\u4eec\u7684\u7c7b\u66f4\u5bb9\u6613\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u6beb\u4e0d\u8d39\u529b\u5730\u5728\u6784\u9020\u51fd\u6570\u4e2d\u63d0\u4f9b\u6a21\u62df\u670d\u52a1\u3002 \u603b\u7ed3 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u6240\u6709 SOLID \u539f\u5219: S: \u5355\u4e00\u804c\u8d23\u539f\u5219 O: \u5f00\u95ed\u539f\u5219 L: Liskov \u66ff\u6362\u539f\u5219 I: \u63a5\u53e3\u9694\u79bb\u539f\u5219 D: \u4f9d\u8d56\u6027\u5012\u7f6e\u539f\u5219 \u901a\u8fc7\u5c06\u5b83\u4eec\u5e94\u7528\u5230\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u5176\u66f4\u5177\u53ef\u8bfb\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u3002 \u6b64\u5916\uff0c\u8fd9\u4e9b\u90fd\u662f\u5f88\u597d\u7684\u5b9e\u8df5\uff0c\u53ef\u4ee5\u4f7f\u6211\u4eec\u7684\u4ee3\u7801\u5e93\u66f4\u5bb9\u6613\u6269\u5c55\uff0c\u540c\u65f6\u4e0d\u5f71\u54cd\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4ed6\u90e8\u5206\u3002 \u5c3d\u7ba1 SOLID \u7684\u5b9a\u4e49\u5df2\u7ecf\u6709\u4e00\u6bb5\u65f6\u95f4\u4e86\uff0c\u4f46\u5b83\u8868\u660e\u5b83\u4ecd\u7136\u662f\u53ef\u5173\u8054\u7684\uff0c\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u4ece\u7406\u89e3\u5b83\u4eec\u4e2d\u83b7\u5f97\u4e00\u4e9b\u771f\u6b63\u7684\u597d\u5904\u3002","title":"\u5bf9typescript\u4ee3\u7801\u5e94\u7528\u53ef\u9760\u7684\u539f\u5219"},{"location":"blog/applying-solid-principles-to-your-typescript-code/#_1","text":"\u5355\u4e00\u804c\u8d23\u539f\u5219\u58f0\u660e\u4e00\u4e2a\u7c7b\u5e94\u8be5\u53ea\u8d1f\u8d23\u5355\u4e00\u529f\u80fd\u3002 \u4ee5\u4e0a\u4e5f\u6d89\u53ca\u5230\u6a21\u5757\u548c\u529f\u80fd\u3002 TypeScript class Statistics { public computeSalesStatistics () { // ... } public generateReport () { // ... } } \u6211\u4eec\u5e94\u8be5\u628a\u4e0a\u9762\u7684\u7c7b\u5206\u6210\u4e24\u4e2a\u5355\u72ec\u7684\u7c7b\u3002 SOLID \u5c06\u8d23\u4efb\u7684\u6982\u5ff5\u5b9a\u4e49\u4e3a\u6539\u53d8\u7684\u7406\u7531\u3002 Robert C.Martin \u5728\u4ed6\u7684\u535a\u5ba2\u6587\u7ae0\u4e2d\u8ba8\u8bba\u4e86\u6211\u4eec\u5982\u4f55\u5b9a\u4e49\u6539\u53d8\u7684\u7406\u7531\u3002 \u4ed6\u5f3a\u8c03\uff0c\u4e0d\u5e94\u8be5\u5728\u4ee3\u7801\u65b9\u9762\u8fdb\u884c\u5ba1\u8bae\u3002 \u4f8b\u5982\uff0c\u6839\u636e\u5355\u4e00\u8d23\u4efb\u539f\u5219\uff0c\u91cd\u6784\u4e0d\u662f\u66f4\u6539\u7684\u539f\u56e0\u3002 \u8981\u5b9a\u4e49\u66f4\u6539\u7684\u539f\u56e0\uff0c\u6211\u4eec\u9700\u8981\u8c03\u67e5\u6211\u4eec\u7684\u7a0b\u5e8f\u7684\u8d23\u4efb\u662f\u4ec0\u4e48\u3002 Statistics \u7c7b\u53ef\u80fd\u4f1a\u56e0\u4e3a\u4e24\u4e2a\u4e0d\u540c\u7684\u539f\u56e0\u800c\u6539\u53d8: \u9500\u552e\u7edf\u8ba1\u8ba1\u7b97\u903b\u8f91\u53d1\u751f\u53d8\u5316\uff0c \u62a5\u544a\u7684\u683c\u5f0f\u53d1\u751f\u53d8\u5316 \u5355\u4e00\u804c\u8d23\u539f\u5219\u5f3a\u8c03\u4e86\u4e0a\u8ff0\u4e24\u4e2a\u65b9\u9762\u7ed9 Statistics \u7c7b\u589e\u52a0\u4e86\u4e24\u79cd\u4e0d\u540c\u7684\u804c\u8d23\u3002 TypeScript class Statistics { public computeSalesStatistics () { // ... } } class ReportGenerator { public generateReport () { // ... } } \u73b0\u5728\u6211\u4eec\u5fc5\u987b\u5206\u5f00\u7c7b\uff0c\u6bcf\u4e2a\u7c7b\u90fd\u6709\u4e00\u4e2a\u6539\u53d8\u7684\u539f\u56e0\uff0c\u56e0\u6b64\u53ea\u6709\u4e00\u4e2a\u8d23\u4efb\u3002 \u5e94\u7528\u4e0a\u8ff0\u539f\u5219\u4f7f\u6211\u4eec\u7684\u4ee3\u7801\u66f4\u5bb9\u6613\u89e3\u91ca\u548c\u7406\u89e3\u3002","title":"\u5355\u4e00\u804c\u8d23\u539f\u5219"},{"location":"blog/applying-solid-principles-to-your-typescript-code/#_2","text":"\u6839\u636e\u5f00\u653e-\u5c01\u95ed\u539f\u5219\uff0c\u8f6f\u4ef6\u5b9e\u4f53\u5bf9\u6269\u5c55\u662f\u5f00\u653e\u7684\uff0c\u5bf9\u4fee\u6539\u662f\u5c01\u95ed\u7684\u3002 \u4e0a\u8ff0\u539f\u5219\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u5728\u4e0d\u6539\u53d8\u73b0\u6709\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u6dfb\u52a0\u65b0\u529f\u80fd\u3002 TypeScript class Rectangle { public width : number ; public height : number ; constructor ( width : number , height : number ) { this . width = width ; this . height = height ; } } class Circle { public radius : number ; constructor ( radius : number ) { this . radius = radius ; } } \u5047\u8bbe\u6211\u4eec\u60f3\u8981\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u5f62\u72b6\u6570\u7ec4\u7684\u9762\u79ef\u3002 \u5728\u6211\u4eec\u5f53\u524d\u7684\u8bbe\u8ba1\u4e2d\uff0c\u5b83\u53ef\u80fd\u662f\u8fd9\u6837\u7684: TypeScript function calculateAreasOfMultipleShapes ( shapes : Array < Rectangle | Circle > ) { return shapes . reduce (( calculatedArea , shape ) => { if ( shape instanceof Rectangle ) { return calculatedArea + shape . width * shape . height ; } if ( shape instanceof Circle ) { return calculatedArea + shape . radius * Math . PI ; } }, 0 ); } \u591a\u4e8f\u4e86\u57fa\u4e8e\u63a7\u5236\u6d41\u7684\u6536\u7f29\uff0cTypeScript \u77e5\u9053\u6211\u4eec\u7684\u5f62\u72b6\u6709\u54ea\u4e9b\u5c5e\u6027\u3002 \u6211\u4eec\u5728\u300a\u7406\u89e3 TypeScript \u4e2d\u7684\u4efb\u610f\u548c\u672a\u77e5\u300b\u4e2d\u8ba8\u8bba\u8fc7\u8fd9\u4e2a\u4e3b\u9898\u3002","title":"\u5f00\u95ed\u539f\u5219"},{"location":"blog/applying-solid-principles-to-your-typescript-code/#never-void","text":"\u4e0a\u8ff0\u65b9\u6cd5\u7684\u95ee\u9898\u662f\uff0c\u5f53\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u65b0\u5f62\u72b6\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539 calculateAreasOfMultipleShapes \u51fd\u6570\u3002 \u8fd9\u4f7f\u5f97\u5b83\u53ef\u4ee5\u4fee\u6539\uff0c\u6253\u7834\u4e86\u5f00\u95ed\u539f\u5219\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f3a\u5236\u6211\u4eec\u7684\u5f62\u72b6\u62e5\u6709\u4e00\u4e2a\u8fd4\u56de\u533a\u57df\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 TypeScript interface Shape { getArea () : number ; } class Rectangle implements Shape { public width : number ; public height : number ; constructor ( width : number , height : number ) { this . width = width ; this . height = height ; } public getArea () { return this . width * this . height ; } } class Circle implements Shape { public radius : number ; constructor ( radius : number ) { this . radius = radius ; } public getArea () { return this . radius * Math . PI ; } } \u73b0\u5728\u6211\u4eec\u786e\u4fe1\u6240\u6709\u7684\u5f62\u72b6\u90fd\u6709 getArea \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f7f\u7528\u5b83\u3002 TypeScript function calculateAreasOfMultipleShapes ( shapes : Shape []) { return shapes . reduce (( calculatedArea , shape ) => { return calculatedArea + shape . getArea (); }, 0 ); } \u73b0\u5728\uff0c\u5f53\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u65b0\u5f62\u72b6\u65f6\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u4fee\u6539 calculateAreasOfMultipleShapes \u51fd\u6570\u3002 \u6211\u4eec\u5bf9\u5ef6\u671f\u5f00\u653e\uff0c\u5bf9\u4fee\u6539\u5173\u95ed\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u62bd\u8c61\u7c7b\u800c\u4e0d\u662f\u63a5\u53e3\u6765\u5b9e\u73b0\u4e0a\u8ff0\u529f\u80fd","title":"never \u548c void \u4e4b\u95f4\u7684\u533a\u522b"},{"location":"blog/applying-solid-principles-to-your-typescript-code/#liskov","text":"\u4e0a\u8ff0\u89c4\u5219\uff0c\u7531 Barbara Liskov \u4ecb\u7ecd\uff0c\u4e5f\u5e2e\u52a9\u6211\u4eec\u786e\u4fdd\u66f4\u6539\u7cfb\u7edf\u7684\u4e00\u4e2a\u533a\u57df\u4e0d\u4f1a\u7834\u574f\u5176\u4ed6\u90e8\u5206\u3002 \u4e3a\u4e86\u4f7f\u8fd9\u4e00\u539f\u5219\u4e0d\u90a3\u4e48\u4ee4\u4eba\u56f0\u60d1\uff0c\u6211\u4eec\u5c06\u628a\u5b83\u5206\u6210\u591a\u4e2a\u90e8\u5206\u3002 \u7528\u5b50\u7c7b\u66ff\u6362\u7c7b\u7684\u5b9e\u4f8b\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u8d1f\u9762\u5f71\u54cd \u5728\u4e0a\u8ff0\u539f\u5219\u4e2d\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\uff0c\u5b83\u7684\u4e3b\u8981\u7126\u70b9\u662f\u7c7b\u7ee7\u627f\u3002 \u8ba9\u6211\u4eec\u6765\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u800c\u751f\u52a8\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u5982\u4f55\u6253\u7834\u4e0a\u8ff0\u539f\u5219\u3002 TypeScript class Employee { protected permissions : any = new Set < string > (); public hasPermission ( permissionName : string ) { return this . permissions . has ( permissionName ); } public addPermission ( permissionName : string ) { return this . permissions . add ( permissionName ); } } class Cashier extends Employee { protected permissions : string [] = []; public addPermission ( permissionName : string ) { this . permissions . push ( permissionName ); } } function isPersonAllowedToDeleteProducts ( person : Employee ) { return person . hasPermission ( \"deleteProducts\" ); } \u4e0a\u9762\u7684\u4ee3\u7801\u95ee\u9898\u5f88\u5927\uff0c\u56e0\u4e3a\u51fa\u7eb3\u548c\u7528\u6237\u7684\u6743\u9650\u5b9e\u73b0\u662f\u4e0d\u540c\u7684\u3002 TypeScript const employee = new Employee (); employee . addPermission ( \"deleteProducts\" ); isPersonAllowedToDeleteProducts ( employee ); \u4e0a\u9762\u7684\u4ee3\u7801\u5de5\u4f5c\u5f97\u5f88\u597d\uff0c\u4f46\u662f\u5f53\u6211\u4eec\u7528\u5b50\u7c7b\u66ff\u6362\u7236\u7c7b\u7684\u5b9e\u4f8b\u65f6\uff0c\u5c31\u4f1a\u9047\u5230\u95ee\u9898\u3002 TypeScript const cashier = new Cashier (); cashier . addPermission ( \"deleteProducts\" ); isPersonAllowedToDeleteProducts ( cashier ); TypeError: this.permissions.has is not a function \u8fd9\u79cd\u60c5\u51b5\u975e\u5e38\u660e\u663e\uff0c\u4e0d\u5e94\u8be5\u51fa\u73b0\u5728\u6b63\u786e\u952e\u5165\u7684 TypeScript \u4ee3\u7801\u4e2d\u3002 \u6211\u4eec\u5fc5\u987b\u4f7f\u7528 permissions: any \u6765\u5141\u8bb8\u51fa\u7eb3\u4e0d\u6070\u5f53\u5730\u6269\u5c55\u7528\u6237\u3002","title":"Liskov \u66ff\u6362\u539f\u5219"},{"location":"blog/applying-solid-principles-to-your-typescript-code/#_3","text":"\u4e00\u4e2a\u66f4\u5b8c\u5584\u7684\u793a\u4f8b\u662f\u524d\u7f6e\u6761\u4ef6\u548c\u9a8c\u8bc1\u3002 TypeScript class Employee { protected permissions = new Set < string > (); public addPermission ( permissionName : string ) { return this . permissions . add ( permissionName ); } } class Cashier extends Employee { public addPermission ( permissionName : string ) { if ( permissionName === \"deleteProducts\" ) { throw new Error ( \"Cashier should not be able to delete products!\" ); } return this . permissions . add ( permissionName ); } } \u53e6\u4e00\u65b9\u9762\uff0c\u4e0a\u9762\u7684\u793a\u4f8b\u5728\u7c7b\u578b\u65b9\u9762\u5f88\u597d\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u4e5f\u6253\u7834\u4e86\u5229\u65af\u79d1\u592b\u66ff\u6362\u539f\u5219\u3002 TypeScript const employee = new Employee (); employee . addPermission ( \"deleteProducts\" ); const employee = new Cashier (); employee . addPermission ( \"deleteProducts\" ); Error: Cashier should not be able to delete products! \u540c\u6837\u7684\u4e8b\u60c5\u4e5f\u9002\u7528\u4e8e\u8f93\u51fa\u6761\u4ef6\u3002 \u5982\u679c\u6211\u4eec\u8986\u76d6\u7684\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u90a3\u4e48\u5b50\u7c7b\u4e0d\u5e94\u8be5\u5bf9\u8f93\u51fa\u8fdb\u884c\u989d\u5916\u7684\u9a8c\u8bc1\u3002","title":"\u9a8c\u8bc1\u6761\u4ef6"},{"location":"blog/applying-solid-principles-to-your-typescript-code/#_4","text":"\u63a5\u53e3\u9694\u79bb\u539f\u5219\u5f3a\u8c03\u521b\u5efa\u66f4\u5c0f\u3001\u66f4\u5177\u4f53\u7684\u63a5\u53e3\u3002 \u8ba9\u6211\u4eec\u60f3\u8c61\u4e00\u4e0b\u4e0b\u9762\u7684\u60c5\u51b5\u3002 TypeScript interface Bird { fly () : void ; walk () : void ; } \u4e0a\u56fe\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u9e1f\u7684\u63a5\u53e3\u3002 \u6211\u4eec\u5047\u8bbe\u9e1f\u80fd\u8d70\u80fd\u98de\u3002 \u521b\u5efa\u8fd9\u6837\u4e00\u53ea\u9e1f\u7684\u4f8b\u5b50\u5f88\u7b80\u5355: TypeScript class Nightingale implements Bird { public fly () { /// ... } public walk () { /// ... } } \u4e0d\u8fc7\uff0c\u4e0a\u8ff0\u60c5\u51b5\u5e76\u4e0d\u603b\u662f\u5982\u6b64\u3002 \u4e0a\u8ff0\u5047\u8bbe\u53ef\u80fd\u662f\u9519\u8bef\u7684\u3002 TypeScript class Kiwi implements Bird { public fly () { throw new Error ( \"Unfortunately, Kiwi can not fly!\" ); } public walk () { /// ... } } \u63a5\u53e3\u9694\u79bb\u539f\u5219\u6307\u51fa\uff0c\u4e0d\u5e94\u8be5\u5f3a\u8feb\u5ba2\u6237\u7aef\u4f9d\u8d56\u4e8e\u5b83\u4e0d\u4f7f\u7528\u7684\u65b9\u6cd5\u3002 \u5728\u63a5\u53e3\u4e2d\u653e\u5165\u592a\u591a\u5c5e\u6027\uff0c\u53ef\u80fd\u4f1a\u7834\u574f\u4e0a\u8ff0\u89c4\u5219\u3002 \u6211\u4eec\u53ef\u80fd\u8981\u505a\u7684\u662f\u5b9e\u73b0\u66f4\u5c0f\u7684\u63a5\u53e3\uff0c\u6709\u65f6\u79f0\u4e3a\u89d2\u8272\u63a5\u53e3\u3002 TypeScript interface CanWalk { walk () : void ; } interface CanFly { fly () : void ; } class Nightingale implements CanFly , CanWalk { public fly () { /// ... } public walk () { /// ... } } class Kiwi implements CanWalk { public walk () { /// ... } } \u901a\u8fc7\u6539\u53d8\u63a5\u53e3\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u907f\u514d\u4e86\u63a5\u53e3\u7684\u81a8\u80c0\uff0c\u5e76\u4f7f\u6211\u4eec\u7684\u8f6f\u4ef6\u66f4\u5bb9\u6613\u7ef4\u62a4\u3002","title":"\u63a5\u53e3\u9694\u79bb\u539f\u5219"},{"location":"blog/applying-solid-principles-to-your-typescript-code/#_5","text":"\u4f9d\u8d56\u5012\u7f6e\u539f\u5219\u7684\u6838\u5fc3\u662f\u9ad8\u5c42\u6a21\u5757\u4e0d\u5e94\u8be5\u4f9d\u8d56\u4f4e\u5c42\u6a21\u5757\u3002 \u76f8\u53cd\uff0c\u5b83\u4eec\u90fd\u5e94\u8be5\u4f9d\u8d56\u4e8e\u62bd\u8c61\u3002 \u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u793a\u4f8b\u6765\u8fdb\u4e00\u6b65\u7814\u7a76\u4e0a\u8ff0\u95ee\u9898\u3002 TypeScript interface Person { introduceSelf () : void ; } class Engineer implements Person { public introduceSelf () { console . log ( \"I am an engineer\" ); } } class Musician implements Person { public introduceSelf () { console . log ( \"I am a musician\" ); } } \u4e0a\u8ff0\u884c\u4e3a\u662f\u57fa\u672c\u7684\u548c\u5b66\u672f\u6027\u7684\uff0c\u4f46\u5e76\u4e0d\u603b\u662f\u8fd9\u6837\u3002 \u5982\u679c\u4ecb\u7ecd\u66f4\u590d\u6742\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e3a\u6b64\u521b\u5efa\u5355\u72ec\u7684\u7c7b\u3002 TypeScript interface IntroductionService { introduce () : void ; } class EngineerIntroductionService implements IntroductionService { public introduce () { console . log ( \"I am an engineer\" ); } } class Engineer implements Person { private introductionService = new EngineerIntroductionService (); public introduceSelf () { this . introductionService . introduce (); } } \u4e0d\u5e78\u7684\u662f\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u6253\u7834\u4e86\u4f9d\u8d56\u5012\u7f6e\u539f\u5219\u3002 \u5b83\u8bf4\u6211\u4eec\u5e94\u8be5\u98a0\u5012\u5de5\u7a0b\u5e08\u548c\u5de5\u7a0b\u5e08\u4ecb\u7ecd\u6240\u7684\u4f9d\u8d56\u5173\u7cfb\u3002 TypeScript class Engineer implements Person { public introductionService : EngineerIntroductionService ; constructor ( introductionService : IntroductionService ) { this . introductionService = introductionService ; } public introduceSelf () { this . introductionService . introduce (); } } const engineer = new Engineer ( new EngineerIntroductionService ()); \u4e0a\u9762\u7684\u597d\u5904\u662f\u6211\u4eec\u4e0d\u9700\u8981\u5de5\u7a0b\u5e08\u548c\u97f3\u4e50\u5bb6\u7684\u5b50\u7c7b\u3002 TypeScript class Person { public introductionService : IntroductionService ; constructor ( introductionService : IntroductionService ) { this . introductionService = introductionService ; } public introduceSelf () { this . introductionService . introduce (); } } const engineer = new Person ( new EngineerIntroductionService ()); const musician = new Person ( new MusicianIntroductionService ()); \u4e0a\u9762\u7684\u65b9\u6cd5\u662f\u4e00\u4e2a\u4f7f\u7528\u7ec4\u5408\u800c\u4e0d\u662f\u7ee7\u627f\u7684\u4f8b\u5b50\u3002 \u6b64\u5916\uff0c\u8fd9\u4f7f\u6211\u4eec\u7684\u7c7b\u66f4\u5bb9\u6613\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u6beb\u4e0d\u8d39\u529b\u5730\u5728\u6784\u9020\u51fd\u6570\u4e2d\u63d0\u4f9b\u6a21\u62df\u670d\u52a1\u3002","title":"\u4f9d\u8d56\u6027\u5012\u7f6e\u539f\u5219"},{"location":"blog/applying-solid-principles-to-your-typescript-code/#_6","text":"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u6240\u6709 SOLID \u539f\u5219: S: \u5355\u4e00\u804c\u8d23\u539f\u5219 O: \u5f00\u95ed\u539f\u5219 L: Liskov \u66ff\u6362\u539f\u5219 I: \u63a5\u53e3\u9694\u79bb\u539f\u5219 D: \u4f9d\u8d56\u6027\u5012\u7f6e\u539f\u5219 \u901a\u8fc7\u5c06\u5b83\u4eec\u5e94\u7528\u5230\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u5176\u66f4\u5177\u53ef\u8bfb\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u3002 \u6b64\u5916\uff0c\u8fd9\u4e9b\u90fd\u662f\u5f88\u597d\u7684\u5b9e\u8df5\uff0c\u53ef\u4ee5\u4f7f\u6211\u4eec\u7684\u4ee3\u7801\u5e93\u66f4\u5bb9\u6613\u6269\u5c55\uff0c\u540c\u65f6\u4e0d\u5f71\u54cd\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4ed6\u90e8\u5206\u3002 \u5c3d\u7ba1 SOLID \u7684\u5b9a\u4e49\u5df2\u7ecf\u6709\u4e00\u6bb5\u65f6\u95f4\u4e86\uff0c\u4f46\u5b83\u8868\u660e\u5b83\u4ecd\u7136\u662f\u53ef\u5173\u8054\u7684\uff0c\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u4ece\u7406\u89e3\u5b83\u4eec\u4e2d\u83b7\u5f97\u4e00\u4e9b\u771f\u6b63\u7684\u597d\u5904\u3002","title":"\u603b\u7ed3"},{"location":"blog/jwt-authentication-using-node-nestjs-mongoose-passport-ionic5-part1/","text":"\u6211\u4eec\u5c06\u6784\u5efa\u4e00\u4e2a JWT \u8ba4\u8bc1\uff0c\u4f7f\u7528 Nestjs \u4f5c\u4e3a\u540e\u7aef\uff0cMongodb \u4f5c\u4e3a\u6570\u636e\u5e93\uff0cIonic 5 \u4f5c\u4e3a\u524d\u7aef Pre-requisites: \u5bf9 nodejs \u6709\u4e00\u4e9b\u4e86\u89e3 some knowledge of ionic (angular) MongoDB account \u5f00\u53d1\u73af\u5883\uff0c\u5982 Vscode Nestjs \u662f\u4ec0\u4e48? Nestjs is a Node framework built with and fully supports of TypeScript ,Nest makes use of robust HTTP Server frameworks like Express. \u4ec0\u4e48\u662f JWT \u8eab\u4efd\u9a8c\u8bc1? JSON Web Token (JWT) is a standard used to create access tokens for an application, the server generates a token that certifies the user identity and send it to the client. without further ado let\u2019s start building our backend server 1:\u8bbe\u7f6e\u9879\u76ee first we need to check that nestjs is installed in our pc ,to do that run this command in your cmd or the vscode terminal Bash nest --version if nest is not installed run this command to install it Bash npm i -g @nestjs/cli now lets create a new Nest project named \u201cnestjs-auth\u201c by running this command Bash $ nest new nestjs_auth now go inside your project directory Bash $ cd nestjs_auth after that we need to install some dependencies that we need in our project Bash $ npm install --save @nestjs/mongoose mongoose -we are going to use mongoose since it\u2019s the most popular MongoDB object modeling tool you can use the built-in TypeORM module Bash $ npm install --save @nestjs/passport passport passport-jwt $ npm install --save-dev @types/passport-jwt -Passport is an authentication middleware for Node.js , it make our life easier . we installed the @types/passport-localbecause it provides assistance while writing TypeScript code and the--save-dev because we want to install it as a dev dependency Bash $ npm i bcrypt $ npm i -D @types/bcrypt bcrypt is a function we\u2019re going to use in order to hash user password Bash $ npm i --save @nestjs/config this config package is going to help as using the dotenv in our project that we are going to talk about it\u2019s importance later Bash $ npm i --save jsonwebtoken we\u2019re going to use a method from the jsonwebtoken later after we installed the dependencies we need to create a .env file inside our project and add the MONGO_URI we got from our mongodb inside it and later we\u2019re going to remove the .env from git because our mongoURI contains some information we don't want to publish to github MONGO_URI=\"mongodb+srv://yourname:passwordexemple5@cluster0-hsoop.azure.mongodb.net/projectname?retryWrites=true&w=majority\" after saving the .env file we need to update our app.module.ts as following we imported our MongoosModule to our root app.module , if you are familiar with mongoose the .forRoot() methode accepts the same configuration as mongoose.connect(). we also imported ConfigModule so we can use the process.env 2:\u521b\u5efa\u7528\u6237 we finished with setting up the project now we are going to create our user schema in order to do that let\u2019s create a models directory and a user schema file src/models/user.schema.ts then update it as following first we create the mongoose schema for our user, every user has a unique mail and a password. the UserSchema.pre() method is going to be executed before saving the user to database , with the help of bcrypt the password is going to be hashed first we create the hash from our pass then assign the result to our user password variable now let\u2019s create a user interface which we\u2019re going to use later ,in order to do that let\u2019s first create our user.ts file under types folder /src/types/user.ts and update its content as following : now lets create the user module and service with the help of our nest cli commands Bash $ nest g module user $ nest g service user --no-spec \u201cg\u201d is for generate and the \u201cno-spec\u201d to prevent the cli from creating a testing file since we are not going to use it in this tutorial, these 2 commands will generate a user.module.ts and user.service.ts under src/user update the user.module.ts as following we impored the mongooseModule and the userSchema to our user module then we used the forFeature() method to import the user schema in the current scope now our schema is registered ,so we are going to inject the User model inside our user.service.ts using @InjectModel decorator our file is going to look like this: 3: \u5b9e\u73b0\u7528\u6237\u6ce8\u518c \u5728\u5f00\u59cb\u7f16\u8f91\u7528\u6237\u4e4b\u524d\u3002 \u670d\u52a1\u5141\u8bb8\u521b\u5efa\u4e00\u4e2a\u6ce8\u518c DTO, DTO \u662f\u4e00\u4e2a\u5728\u8fdb\u7a0b\u4e4b\u95f4\u643a\u5e26\u6570\u636e\u7684\u5bf9\u8c61\uff0c\u8fd9\u662f\u4e00\u4e2a\u51cf\u5c11\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u8c03\u7528\u7684\u597d\u65b9\u6cd5 Text Only src/user/register.dto.ts \u6309\u5982\u4e0b\u65b9\u5f0f\u66f4\u65b0\u6587\u4ef6\u7684\u5185\u5bb9 TypeScript export interface RegisterDTO { email : string ; password : string ; } \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u7ee7\u7eed\u7f16\u8f91 user.service.ts\uff0c\u4ee5\u521b\u5efa\u7528\u6237\u6ce8\u518c\u65b9\u6cd5\uff0c\u56e0\u6b64\uff0c\u9996\u5148\u50cf\u4e0b\u9762\u8fd9\u6837\u66f4\u65b0\u6587\u4ef6\uff0c\u5e76\u5c06\u5176\u5206\u89e3 \u6240\u4ee5\u6211\u4eec\u5bfc\u5165\u6211\u4eec\u7684\u5bc4\u5b58\u5668 DTO \u4e4b\u540e\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5f02\u6b65\u51fd\u6570\u6765\u5c06\u7528\u6237\u4fdd\u5b58\u5728\u6570\u636e\u5e93\u4e2d\uff0c \u6211\u4eec\u7684\u65b9\u6cd5\u5c06 registerdto \u4f5c\u4e3a\u53c2\u6570\uff0c\u7136\u540e\u4ece\u5b83\u83b7\u53d6 email \u5e76\u5c06\u5176\u8d4b\u503c\u7ed9 const email\uff0c \u201d const {email}=registerDTO\u201d \u7b49\u91cf const email=registerDTO.email \u6211\u4eec\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u6765\u67e5\u770b\u6570\u636e\u5e93\u4e2d\u662f\u5426\u6709\u76f8\u540c\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u56e0\u4e3a\u5b83\u662f\u552f\u4e00\u7684\uff0c\u5e76\u5c06\u7ed3\u679c\u5206\u914d\u7ed9\u7528\u6237\uff0c \u5982\u679c\u6211\u4eec\u6709\u53e6\u4e00\u4e2a\u7528\u6237\u4f7f\u7528\u76f8\u540c\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u6211\u4eec\u5c06\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u5426\u5219\u6211\u4eec\u5c06\u6ce8\u518c\u4fe1\u606f\u4fdd\u5b58\u5230\u6570\u636e\u5e93\uff0c \u5e76\u5728\u6211\u4eec\u5728 create \u65b9\u6cd5\u4e0b\u7f16\u5199\u7684 sanitizeUser \u65b9\u6cd5\u7684\u5e2e\u52a9\u4e0b\u8fd4\u56de\u4e00\u4e2a\u6ca1\u6709\u5bc6\u7801\u7684\u7528\u6237\u5bf9\u8c61 3: \u8eab\u4efd\u9a8c\u8bc1 \u73b0\u5728\u8ba9\u6211\u4eec\u4f7f\u7528 nest cli \u751f\u6210\u4e00\u4e9b\u6587\u4ef6 Bash $ nest g module auth $ nest g service auth $ nest g controller auth this will create an auth folder for us , under that folder create this file Text Only src/auth/login.dto.ts update it\u2019s content as following now the auth.service.ts TypeScript import { Injectable } from \"@nestjs/common\" ; import { Payload } from \"src/types/payload\" ; import { sign } from \"jsonwebtoken\" ; import { UserService } from \"src/user/user.service\" ; @Injectable () export class AuthService { constructor ( private userService : UserService ) {} async signPayload ( payload : Payload ) { return sign ( payload , process . env . SECRET_KEY , { expiresIn : \"7d\" }); } } first we injected the userService inside the constructor then we created signPayLoad method that takes \u201cpayload\u201d as a parameter then we used the sign function from the jsonwebtoken package to help us generate the token and return it as a string, the sign function takes 3 parameters: the payload, the secret key ( we create our SECRET_KEY variable inside the .env file) and the expiration time now let\u2019s update the user.controller.ts TypeScript import { Body , Controller , Get , Post , UseGuards } from \"@nestjs/common\" ; import { RegisterDTO } from \"src/user/register.dto\" ; import { UserService } from \"src/user/user.service\" ; import { AuthService } from \"./auth.service\" ; import { LoginDTO } from \"./login.dto\" ; @Controller ( \"auth\" ) export class AuthController { constructor ( private userService : UserService , private authService : AuthService ) {} @Post ( \"register\" ) async register ( @Body () RegisterDTO : RegisterDTO ) { const user = await this . userService . create ( RegisterDTO ); const payload = { email : user.email , }; const token = await this . authService . signPayload ( payload ); return { user , token }; } @Post ( \"login\" ) async login ( @Body () UserDTO : LoginDTO ) { const user = await this . userService . findByLogin ( UserDTO ); const payload = { email : user.email , }; const token = await this . authService . signPayload ( payload ); return { user , token }; } } let\u2019s break this down step by step first we injected the userService and the authService like we did before then we created the register method we used \u2018@Post(\u2018register\u2019)\u2018 this is called a decorator its purpose is to associate classes with required metadata and enable Nest to create a routing map the register method takes a single parameter (registerDto) we are going to take that parameter from the request body that\u2019s why we need the dedicated decorator @Body() we used the create service from the userService to save the new user and take his email to create the payload that we gonna use to generate the token after that we return both the user and his token same thing for the user login except that we used the findBylogin which is going to check if the user exists or not in the database now that we finished with the user controller we can test our application but it\u2019s going to generate an error since we did not export the userService before using it inside our auth module to do that first export the user service from the user.module.ts exports: [UserService] and import it inside the auth.module.ts imports: [UserModule] now let\u2019s run our server to test the login and register before we see the authorization Bash $ npm run start this will launch our server we can test the application using postman as you can see we tested the /auth/register , we passed the email and password to the body request and we got a json object that contains the user (with no password) and the token same thing for the auth/login , but what if we enter a wrong email or password we get a 400 status with a message : invalid credential 4: \u6388\u6743 we finished with the authentication now we are going to implement the authorization to protect some endpoints from unauthorized users , if you don't know the difference between the two here is an explanation authentication: verifies who you are authorization: decides if you have permission to access a certain resource first we need to add a new method inside the user.service.ts called findByPayload that checks if the user exists or not from his email our new user.service.ts will look like this now create a new method inside the auth.service.ts called validateUser , our auth.service.ts will look like this : now let\u2019s create a new file => src/auth/jwt.strategy.ts and update it\u2019s content as following things starts to look a little bit complicated so let\u2019s understand together what\u2019s going on here this strategy requires some initialization, so we do that by passing in an options object in the super() call jwtFromRequest: supplies the method by which the JWT will be extracted from the Request. We will use the standard approach of supplying a bearer token in the Authorization header of our API requests secretOrKey: we are using the expedient option of supplying a symmetric secret for signing the token. Other options, such as a PEM-encoded public key, may be more appropriate for production apps For the jwt-strategy, Passport first verifies the JWT\u2019s signature and decodes the JSON. It then invokes our validate() method we\u2019re guaranteed that we\u2019re receiving a valid token that we have previously signed and issued to a valid user. you can learn more about his approach from here. now inject the jwt strategy inside the auth.module.ts providers providers: [AuthService,JwtStrategy] and update the auth.controller.ts as following we created 2 methods the hiddenInformation and publicInformation we used the useGuards decorator to protect that endpoint from unauthorized users with the help of the jwt strategy we created let\u2019s try it out with postman this is the first endpoint /auth/anyone we received the message without any problem even though we didn't add the token ,and that\u2019s because the endpoint is not protected with the authguard now lets try /auth/onlyauth this time we received a 401 error with the message: \u201dunauthorized\u201d now lets add the token and try again this time we received our hidden information without any problems we finished with the nestjs tutorial ,you can find the code for the project here link:https://github.com/mohanedbenmansour/nestjs_mongodb_jwt_auth stay tuned for the part 2 where we are going to build the front end for our project using ionic 5","title":"JWT Authentication using node(Nestjs),Mongoose,Passport,ionic5 .. PART1"},{"location":"blog/jwt-authentication-using-node-nestjs-mongoose-passport-ionic5-part1/#pre-requisites","text":"\u5bf9 nodejs \u6709\u4e00\u4e9b\u4e86\u89e3 some knowledge of ionic (angular) MongoDB account \u5f00\u53d1\u73af\u5883\uff0c\u5982 Vscode","title":"Pre-requisites:"},{"location":"blog/jwt-authentication-using-node-nestjs-mongoose-passport-ionic5-part1/#nestjs","text":"Nestjs is a Node framework built with and fully supports of TypeScript ,Nest makes use of robust HTTP Server frameworks like Express.","title":"Nestjs \u662f\u4ec0\u4e48?"},{"location":"blog/jwt-authentication-using-node-nestjs-mongoose-passport-ionic5-part1/#jwt","text":"JSON Web Token (JWT) is a standard used to create access tokens for an application, the server generates a token that certifies the user identity and send it to the client. without further ado let\u2019s start building our backend server","title":"\u4ec0\u4e48\u662f JWT \u8eab\u4efd\u9a8c\u8bc1?"},{"location":"blog/jwt-authentication-using-node-nestjs-mongoose-passport-ionic5-part1/#1","text":"first we need to check that nestjs is installed in our pc ,to do that run this command in your cmd or the vscode terminal Bash nest --version if nest is not installed run this command to install it Bash npm i -g @nestjs/cli now lets create a new Nest project named \u201cnestjs-auth\u201c by running this command Bash $ nest new nestjs_auth now go inside your project directory Bash $ cd nestjs_auth after that we need to install some dependencies that we need in our project Bash $ npm install --save @nestjs/mongoose mongoose -we are going to use mongoose since it\u2019s the most popular MongoDB object modeling tool you can use the built-in TypeORM module Bash $ npm install --save @nestjs/passport passport passport-jwt $ npm install --save-dev @types/passport-jwt -Passport is an authentication middleware for Node.js , it make our life easier . we installed the @types/passport-localbecause it provides assistance while writing TypeScript code and the--save-dev because we want to install it as a dev dependency Bash $ npm i bcrypt $ npm i -D @types/bcrypt bcrypt is a function we\u2019re going to use in order to hash user password Bash $ npm i --save @nestjs/config this config package is going to help as using the dotenv in our project that we are going to talk about it\u2019s importance later Bash $ npm i --save jsonwebtoken we\u2019re going to use a method from the jsonwebtoken later after we installed the dependencies we need to create a .env file inside our project and add the MONGO_URI we got from our mongodb inside it and later we\u2019re going to remove the .env from git because our mongoURI contains some information we don't want to publish to github MONGO_URI=\"mongodb+srv://yourname:passwordexemple5@cluster0-hsoop.azure.mongodb.net/projectname?retryWrites=true&w=majority\" after saving the .env file we need to update our app.module.ts as following we imported our MongoosModule to our root app.module , if you are familiar with mongoose the .forRoot() methode accepts the same configuration as mongoose.connect(). we also imported ConfigModule so we can use the process.env","title":"1:\u8bbe\u7f6e\u9879\u76ee"},{"location":"blog/jwt-authentication-using-node-nestjs-mongoose-passport-ionic5-part1/#2","text":"we finished with setting up the project now we are going to create our user schema in order to do that let\u2019s create a models directory and a user schema file src/models/user.schema.ts then update it as following first we create the mongoose schema for our user, every user has a unique mail and a password. the UserSchema.pre() method is going to be executed before saving the user to database , with the help of bcrypt the password is going to be hashed first we create the hash from our pass then assign the result to our user password variable now let\u2019s create a user interface which we\u2019re going to use later ,in order to do that let\u2019s first create our user.ts file under types folder /src/types/user.ts and update its content as following : now lets create the user module and service with the help of our nest cli commands Bash $ nest g module user $ nest g service user --no-spec \u201cg\u201d is for generate and the \u201cno-spec\u201d to prevent the cli from creating a testing file since we are not going to use it in this tutorial, these 2 commands will generate a user.module.ts and user.service.ts under src/user update the user.module.ts as following we impored the mongooseModule and the userSchema to our user module then we used the forFeature() method to import the user schema in the current scope now our schema is registered ,so we are going to inject the User model inside our user.service.ts using @InjectModel decorator our file is going to look like this:","title":"2:\u521b\u5efa\u7528\u6237"},{"location":"blog/jwt-authentication-using-node-nestjs-mongoose-passport-ionic5-part1/#3","text":"\u5728\u5f00\u59cb\u7f16\u8f91\u7528\u6237\u4e4b\u524d\u3002 \u670d\u52a1\u5141\u8bb8\u521b\u5efa\u4e00\u4e2a\u6ce8\u518c DTO, DTO \u662f\u4e00\u4e2a\u5728\u8fdb\u7a0b\u4e4b\u95f4\u643a\u5e26\u6570\u636e\u7684\u5bf9\u8c61\uff0c\u8fd9\u662f\u4e00\u4e2a\u51cf\u5c11\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u8c03\u7528\u7684\u597d\u65b9\u6cd5 Text Only src/user/register.dto.ts \u6309\u5982\u4e0b\u65b9\u5f0f\u66f4\u65b0\u6587\u4ef6\u7684\u5185\u5bb9 TypeScript export interface RegisterDTO { email : string ; password : string ; } \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u7ee7\u7eed\u7f16\u8f91 user.service.ts\uff0c\u4ee5\u521b\u5efa\u7528\u6237\u6ce8\u518c\u65b9\u6cd5\uff0c\u56e0\u6b64\uff0c\u9996\u5148\u50cf\u4e0b\u9762\u8fd9\u6837\u66f4\u65b0\u6587\u4ef6\uff0c\u5e76\u5c06\u5176\u5206\u89e3 \u6240\u4ee5\u6211\u4eec\u5bfc\u5165\u6211\u4eec\u7684\u5bc4\u5b58\u5668 DTO \u4e4b\u540e\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5f02\u6b65\u51fd\u6570\u6765\u5c06\u7528\u6237\u4fdd\u5b58\u5728\u6570\u636e\u5e93\u4e2d\uff0c \u6211\u4eec\u7684\u65b9\u6cd5\u5c06 registerdto \u4f5c\u4e3a\u53c2\u6570\uff0c\u7136\u540e\u4ece\u5b83\u83b7\u53d6 email \u5e76\u5c06\u5176\u8d4b\u503c\u7ed9 const email\uff0c \u201d const {email}=registerDTO\u201d \u7b49\u91cf const email=registerDTO.email \u6211\u4eec\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u6765\u67e5\u770b\u6570\u636e\u5e93\u4e2d\u662f\u5426\u6709\u76f8\u540c\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u56e0\u4e3a\u5b83\u662f\u552f\u4e00\u7684\uff0c\u5e76\u5c06\u7ed3\u679c\u5206\u914d\u7ed9\u7528\u6237\uff0c \u5982\u679c\u6211\u4eec\u6709\u53e6\u4e00\u4e2a\u7528\u6237\u4f7f\u7528\u76f8\u540c\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u6211\u4eec\u5c06\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u5426\u5219\u6211\u4eec\u5c06\u6ce8\u518c\u4fe1\u606f\u4fdd\u5b58\u5230\u6570\u636e\u5e93\uff0c \u5e76\u5728\u6211\u4eec\u5728 create \u65b9\u6cd5\u4e0b\u7f16\u5199\u7684 sanitizeUser \u65b9\u6cd5\u7684\u5e2e\u52a9\u4e0b\u8fd4\u56de\u4e00\u4e2a\u6ca1\u6709\u5bc6\u7801\u7684\u7528\u6237\u5bf9\u8c61","title":"3: \u5b9e\u73b0\u7528\u6237\u6ce8\u518c"},{"location":"blog/jwt-authentication-using-node-nestjs-mongoose-passport-ionic5-part1/#3_1","text":"\u73b0\u5728\u8ba9\u6211\u4eec\u4f7f\u7528 nest cli \u751f\u6210\u4e00\u4e9b\u6587\u4ef6 Bash $ nest g module auth $ nest g service auth $ nest g controller auth this will create an auth folder for us , under that folder create this file Text Only src/auth/login.dto.ts update it\u2019s content as following now the auth.service.ts TypeScript import { Injectable } from \"@nestjs/common\" ; import { Payload } from \"src/types/payload\" ; import { sign } from \"jsonwebtoken\" ; import { UserService } from \"src/user/user.service\" ; @Injectable () export class AuthService { constructor ( private userService : UserService ) {} async signPayload ( payload : Payload ) { return sign ( payload , process . env . SECRET_KEY , { expiresIn : \"7d\" }); } } first we injected the userService inside the constructor then we created signPayLoad method that takes \u201cpayload\u201d as a parameter then we used the sign function from the jsonwebtoken package to help us generate the token and return it as a string, the sign function takes 3 parameters: the payload, the secret key ( we create our SECRET_KEY variable inside the .env file) and the expiration time now let\u2019s update the user.controller.ts TypeScript import { Body , Controller , Get , Post , UseGuards } from \"@nestjs/common\" ; import { RegisterDTO } from \"src/user/register.dto\" ; import { UserService } from \"src/user/user.service\" ; import { AuthService } from \"./auth.service\" ; import { LoginDTO } from \"./login.dto\" ; @Controller ( \"auth\" ) export class AuthController { constructor ( private userService : UserService , private authService : AuthService ) {} @Post ( \"register\" ) async register ( @Body () RegisterDTO : RegisterDTO ) { const user = await this . userService . create ( RegisterDTO ); const payload = { email : user.email , }; const token = await this . authService . signPayload ( payload ); return { user , token }; } @Post ( \"login\" ) async login ( @Body () UserDTO : LoginDTO ) { const user = await this . userService . findByLogin ( UserDTO ); const payload = { email : user.email , }; const token = await this . authService . signPayload ( payload ); return { user , token }; } } let\u2019s break this down step by step first we injected the userService and the authService like we did before then we created the register method we used \u2018@Post(\u2018register\u2019)\u2018 this is called a decorator its purpose is to associate classes with required metadata and enable Nest to create a routing map the register method takes a single parameter (registerDto) we are going to take that parameter from the request body that\u2019s why we need the dedicated decorator @Body() we used the create service from the userService to save the new user and take his email to create the payload that we gonna use to generate the token after that we return both the user and his token same thing for the user login except that we used the findBylogin which is going to check if the user exists or not in the database now that we finished with the user controller we can test our application but it\u2019s going to generate an error since we did not export the userService before using it inside our auth module to do that first export the user service from the user.module.ts exports: [UserService] and import it inside the auth.module.ts imports: [UserModule] now let\u2019s run our server to test the login and register before we see the authorization Bash $ npm run start this will launch our server we can test the application using postman as you can see we tested the /auth/register , we passed the email and password to the body request and we got a json object that contains the user (with no password) and the token same thing for the auth/login , but what if we enter a wrong email or password we get a 400 status with a message : invalid credential","title":"3: \u8eab\u4efd\u9a8c\u8bc1"},{"location":"blog/jwt-authentication-using-node-nestjs-mongoose-passport-ionic5-part1/#4","text":"we finished with the authentication now we are going to implement the authorization to protect some endpoints from unauthorized users , if you don't know the difference between the two here is an explanation authentication: verifies who you are authorization: decides if you have permission to access a certain resource first we need to add a new method inside the user.service.ts called findByPayload that checks if the user exists or not from his email our new user.service.ts will look like this now create a new method inside the auth.service.ts called validateUser , our auth.service.ts will look like this : now let\u2019s create a new file => src/auth/jwt.strategy.ts and update it\u2019s content as following things starts to look a little bit complicated so let\u2019s understand together what\u2019s going on here this strategy requires some initialization, so we do that by passing in an options object in the super() call jwtFromRequest: supplies the method by which the JWT will be extracted from the Request. We will use the standard approach of supplying a bearer token in the Authorization header of our API requests secretOrKey: we are using the expedient option of supplying a symmetric secret for signing the token. Other options, such as a PEM-encoded public key, may be more appropriate for production apps For the jwt-strategy, Passport first verifies the JWT\u2019s signature and decodes the JSON. It then invokes our validate() method we\u2019re guaranteed that we\u2019re receiving a valid token that we have previously signed and issued to a valid user. you can learn more about his approach from here. now inject the jwt strategy inside the auth.module.ts providers providers: [AuthService,JwtStrategy] and update the auth.controller.ts as following we created 2 methods the hiddenInformation and publicInformation we used the useGuards decorator to protect that endpoint from unauthorized users with the help of the jwt strategy we created let\u2019s try it out with postman this is the first endpoint /auth/anyone we received the message without any problem even though we didn't add the token ,and that\u2019s because the endpoint is not protected with the authguard now lets try /auth/onlyauth this time we received a 401 error with the message: \u201dunauthorized\u201d now lets add the token and try again this time we received our hidden information without any problems we finished with the nestjs tutorial ,you can find the code for the project here link:https://github.com/mohanedbenmansour/nestjs_mongodb_jwt_auth stay tuned for the part 2 where we are going to build the front end for our project using ionic 5","title":"4: \u6388\u6743"},{"location":"blog/nestjs-file-uploading-using-multer/","text":"https://gabrieltanner.org/blog/nestjs-file-uploading-using-multer \u672c\u6307\u5357\u5c06\u5411\u4f60\u5c55\u793a\u5982\u4f55\u5c06\u6587\u4ef6\u4e0a\u4f20\u5230\u4f60\u7684 Nestjs \u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4ee5\u53ca\u5728\u8fd9\u6837\u505a\u65f6\u4f60\u5e94\u8be5\u8bb0\u4f4f\u7684\u4e8b\u60c5\u3002 \u60a8\u5c06\u5f00\u53d1\u4e00\u4e2a\u5177\u6709\u4e09\u4e2a\u7aef\u70b9\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5c06\u8fbe\u5230\u4ee5\u4e0b\u76ee\u7684: \u4e0a\u4f20\u4e00\u4e2a\u56fe\u50cf \u4e0a\u4f20\u591a\u4e2a\u56fe\u50cf \u4f7f\u7528\u56fe\u50cf\u8def\u5f84\u83b7\u53d6\u56fe\u50cf \u60a8\u8fd8\u5c06\u6dfb\u52a0\u81ea\u5b9a\u4e49\u5b9e\u7528\u5de5\u5177\u6765\u7f16\u8f91\u6587\u4ef6\u540d\u5e76\u9a8c\u8bc1\u56fe\u50cf\u7684\u6587\u4ef6\u4e0a\u4f20\u3002 \u4e0d\u6d6a\u8d39\u65f6\u95f4\u4e86\uff0c\u8ba9\u6211\u4eec\u5f00\u59cb\u5427\u3002 \u8bbe\u7f6e \u60a8\u9700\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u6587\u4ef6\u670d\u52a1\u5668\u7684 Nestjs \u9879\u76ee\u3002 \u4e3a\u6b64\uff0c\u9700\u8981\u6253\u5f00\u7ec8\u7aef\uff0c\u6267\u884c\u5982\u4e0b\u547d\u4ee4: Bash nest new nest-file-uploading && cd nest-file-uploading \u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a nest-file-upload \u7684\u65b0\u76ee\u5f55\uff0c\u5e76\u4f7f\u7528\u6807\u51c6\u7684 Nestjs \u914d\u7f6e\u5bf9\u5176\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u5b89\u88c5\u597d\u76ee\u5f55\u540e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\u5e94\u7528\u7a0b\u5e8f\u6240\u9700\u7684\u4f9d\u8d56\u9879: Bash npm install @nestjs/platform-express --save npm install @types/express -D \u5728\u5f00\u59cb\u7f16\u7801\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u505a\u7684\u6700\u540e\u4e00\u4ef6\u4e8b\u662f\u521b\u5efa\u9879\u76ee\u6240\u9700\u7684\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u3002 \u8fd9\u975e\u5e38\u7b80\u5355\uff0c\u56e0\u4e3a\u5e94\u7528\u7a0b\u5e8f\u53ea\u9700\u8981\u591a\u4e00\u4e2a\u6587\u4ef6\u3002 Bash mkdir src/utils touch src/utils/file-uploading.utils.ts \u8981\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u73b0\u5728\u53ef\u4ee5\u5728\u4f60\u7684\u7ec8\u7aef\u4e2d\u6267\u884c Bash npm run start:dev\u3002 \u4e0a\u4f20\u6587\u4ef6 \u73b0\u5728\u60a8\u5df2\u7ecf\u5b8c\u6210\u4e86\u8bbe\u7f6e\u8fc7\u7a0b\uff0c\u60a8\u53ef\u4ee5\u7ee7\u7eed\u5e76\u5f00\u59cb\u5b9e\u73b0\u5b9e\u9645\u7684\u529f\u80fd\u3002 \u8ba9\u6211\u4eec\u4ece\u5728\u4f60\u7684 AppModule \u4e2d\u5bfc\u5165 MulterModule \u5f00\u59cb\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528 Multer \u3002 TypeScript import { Module } from \"@nestjs/common\" ; import { AppController } from \"./app.controller\" ; import { MulterModule } from \"@nestjs/platform-express\" ; @Module ({ imports : [ MulterModule . register ({ dest : \"./files\" , }), ], controllers : [ AppController ], }) export class AppModule {} \u5728\u8fd9\u91cc\uff0c\u4f60\u4ece @nestjs/platform-express \u4e2d\u5bfc\u5165 MulterModule \uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230 imports \u8bed\u53e5\u4e2d\u3002 \u60a8\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u4e0a\u4f20\u65f6\u4fdd\u5b58\u6587\u4ef6\u7684\u76ee\u7684\u5730\u3002 Note: \u8fd9\u4e2a\u76ee\u6807\u4ece\u9879\u76ee\u7684\u6839\u8def\u5f84\u5f00\u59cb\uff0c\u800c\u4e0d\u662f src \u6587\u4ef6\u5939\u3002 \u4e0b\u4e00\u6b65\u662f\u5b9e\u73b0\u5b9e\u9645\u7684\u4e0a\u4f20\u529f\u80fd\uff0c\u8fd9\u76f8\u5f53\u7b80\u5355\u3002 \u60a8\u53ea\u9700\u8981\u5c06 FileInterceptor() \u6dfb\u52a0\u5230\u4e00\u4e2a\u666e\u901a\u7684 @Post \u8bf7\u6c42\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u7136\u540e\u4f7f\u7528 @UploadedFile() \u88c5\u9970\u5668\u4ece\u8bf7\u6c42\u4e2d\u63d0\u53d6\u6587\u4ef6\u3002 TypeScript export class AlbumController { @Post () @UseInterceptors ( FileInterceptor ( \"image\" )) async uploadedFile ( @UploadedFile () file ) { const response = { originalname : file.originalname , filename : file.filename , }; return response ; } } FileInterceptor \u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a fieldName \u548c\u4e00\u4e2a\u53ef\u9009\u7684 options \u5bf9\u8c61\uff0c\u7a0d\u540e\u60a8\u5c06\u4f7f\u7528\u5b83\u6765\u68c0\u67e5\u6b63\u786e\u7684\u6587\u4ef6\u7c7b\u578b\uff0c\u5e76\u5728\u76ee\u5f55\u4e2d\u7ed9\u6587\u4ef6\u4e00\u4e2a\u81ea\u5b9a\u4e49\u540d\u79f0\u3002 \u4e00\u6b21\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff0c\u4f60\u53ea\u9700\u8981\u4f7f\u7528 FilesInterceptor \u6765\u4ee3\u66ff\uff0c\u5e76\u4f20\u9012\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u5373\u6587\u4ef6\u7684\u6700\u5927\u6570\u91cf\u3002 TypeScript export class AlbumController { @Post ( \"multiple\" ) @UseInterceptors ( FilesInterceptor ( \"image\" , 20 , { storage : diskStorage ({ destination : \"./files\" , filename : editFileName , }), fileFilter : imageFileFilter , }) ) async uploadMultipleFiles ( @UploadedFiles () files ) { const response = []; files . forEach (( file ) => { const fileReponse = { originalname : file.originalname , filename : file.filename , }; response . push ( fileReponse ); }); return response ; } } \u8fd9\u5f88\u7b80\u5355\uff0c\u8fd9\u91cc\u552f\u4e00\u7684\u95ee\u9898\u662f\uff0c\u7528\u6237\u53ef\u4ee5\u4e0a\u4f20\u6240\u6709\u6587\u4ef6\u7c7b\u578b\uff0c\u800c\u4e0d\u8003\u8651\u6587\u4ef6\u6269\u5c55\u540d\uff0c\u8fd9\u5e76\u4e0d\u9002\u5408\u6240\u6709\u9879\u76ee\uff0c\u6587\u4ef6\u540d\u53ea\u662f\u4e00\u4e9b\u968f\u673a\u6570\u3002 \u8ba9\u6211\u4eec\u901a\u8fc7\u5728\u60a8\u7684 file-upload.utils.ts \u6587\u4ef6\u4e2d\u5b9e\u73b0\u4e00\u4e9b\u5b9e\u7528\u5de5\u5177\u6765\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\u3002 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5b9e\u73b0\u53ea\u5141\u8bb8\u4e0a\u4f20\u56fe\u50cf\u7684\u6587\u4ef6\u7c7b\u578b\u8fc7\u6ee4\u5668\u3002 TypeScript export const imageFileFilter = ( req , file , callback ) => { if ( ! file . originalname . match ( /\\.(jpg|jpeg|png|gif)$/ )) { return callback ( new Error ( \"Only image files are allowed!\" ), false ); } callback ( null , true ); }; \u8fd9\u91cc\u60a8\u521b\u5efa\u4e86\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u51fd\u6570\uff0c\u7528\u4e8e\u68c0\u67e5\u6587\u4ef6\u7c7b\u578b\u662f\u5426\u4e3a\u56fe\u50cf\u3002 \u5982\u679c\u662f\uff0c\u5b83\u8fd4\u56de true\uff0c\u56fe\u50cf\u5c06\u88ab\u4e0a\u4f20\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u4f60\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\uff0c\u5e76\u4e3a\u56de\u8c03\u8fd4\u56de false\u3002 editFileName \u51fd\u6570\u5177\u6709\u76f8\u540c\u7684\u7ed3\u6784\uff0c\u4f46\u4f7f\u7528\u539f\u59cb\u540d\u79f0\u3001\u6587\u4ef6\u6269\u5c55\u540d\u548c\u56db\u4e2a\u968f\u673a\u6570\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6587\u4ef6\u540d\u3002 TypeScript export const editFileName = ( req , file , callback ) => { const name = file . originalname . split ( \".\" )[ 0 ]; const fileExtName = extname ( file . originalname ); const randomName = Array ( 4 ) . fill ( null ) . map (() => Math . round ( Math . random () * 16 ). toString ( 16 )) . join ( \"\" ); callback ( null , ` ${ name } - ${ randomName }${ fileExtName } ` ); }; \u73b0\u5728\u4f60\u5df2\u7ecf\u521b\u5efa\u4e86\u8fd9\u4e24\u4e2a\u4e2d\u95f4\u4ef6\u51fd\u6570\uff0c\u662f\u65f6\u5019\u5728 app.controller.ts \u6587\u4ef6\u4e2d\u4f7f\u7528\u5b83\u4eec\u4e86\u3002 \u4e3a\u6b64\uff0c\u4f60\u53ea\u9700\u8981\u5728 FileInterceptor \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u914d\u7f6e\u5bf9\u8c61\uff0c\u5982\u4e0b\u6240\u793a: TypeScript export class AlbumController { @Post () @UseInterceptors ( FileInterceptor ( \"image\" , { storage : diskStorage ({ destination : \"./files\" , filename : editFileName , }), fileFilter : imageFileFilter , }) ) async uploadedFile ( @UploadedFile () file ) { const response = { originalname : file.originalname , filename : file.filename , }; return response ; } @Post ( \"multiple\" ) @UseInterceptors ( FilesInterceptor ( \"image\" , 20 , { storage : diskStorage ({ destination : \"./files\" , filename : editFileName , }), fileFilter : imageFileFilter , }) ) async uploadMultipleFiles ( @UploadedFiles () files ) { const response = []; files . forEach (( file ) => { const fileReponse = { originalname : file.originalname , filename : file.filename , }; response . push ( fileReponse ); }); return response ; } } \u6700\u540e\uff0c\u4f60\u5c06\u6dfb\u52a0\u4e00\u4e2a @Get \u8def\u7531\uff0c\u5b83\u5c06 imagepath \u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u4f7f\u7528 sendFile \u65b9\u6cd5\u8fd4\u56de\u56fe\u50cf\u3002 TypeScript export class AlbumController { @Get ( \":imgpath\" ) seeUploadedFile ( @Param ( \"imgpath\" ) image , @Res () res ) { return res . sendFile ( image , { root : \"./files\" }); } } \u6d4b\u8bd5\u5e94\u7528\u7a0b\u5e8f \u65e2\u7136\u60a8\u5df2\u7ecf\u5b8c\u6210\u4e86\u5e94\u7528\u7a0b\u5e8f\uff0c\u73b0\u5728\u5c31\u53ef\u4ee5\u901a\u8fc7\u5411\u7aef\u70b9\u53d1\u9001 HTTP \u8bf7\u6c42\u6765\u6d4b\u8bd5\u5b83\u4e86\u3002 \u8fd9\u53ef\u4ee5\u4f7f\u7528\u7ec8\u7aef\u4e2d\u7684 curl \u547d\u4ee4\u6216\u4f7f\u7528\u4e00\u4e2a HTTP \u5ba2\u6237\u7aef\u8f6f\u4ef6\uff0c\u5982 Postman \u6216 Insomnia \u6765\u5b8c\u6210\u3002 \u6211\u4e2a\u4eba\u4f7f\u7528\u7684\u662f\u300aInsomnia\u300b\uff0c\u4f46\u5728\u300aPostman\u300b\u4e2d\u4e5f\u5e94\u8be5\u662f\u4e00\u6837\u7684\u3002 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u670d\u52a1\u5668: Bash npm run start \u6b63\u5982\u7ec8\u7aef\u8f93\u51fa\u6240\u793a\uff0c\u670d\u52a1\u5668\u73b0\u5728\u8fd0\u884c\u5728 http://localhost:3000 \u4e0a\u3002 \u8981\u6d4b\u8bd5 API\uff0c\u60a8\u73b0\u5728\u53ea\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 HTTP \u8bf7\u6c42\u5e76\u5c06\u8bf7\u6c42\u4f53\u66f4\u6539\u4e3a multipart \uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u4e0a\u4f20\u6587\u4ef6\u4e86\u3002 Upload images \u5728\u8fd9\u91cc\uff0c\u60a8\u5c06\u76ee\u6807\u8bbe\u7f6e\u4e3a http://localhost:3000 \uff0c\u5e76\u5411\u8bf7\u6c42\u4f53\u6dfb\u52a0\u4e00\u4e2a\u56fe\u50cf\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u5355\u51fb\u590d\u9009\u6846\u65c1\u8fb9\u7684\u7bad\u5934\u5e76\u9009\u62e9 file \u6765\u5b8c\u6210\u3002 \u5728\u53f3\u4fa7\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u670d\u52a1\u5668\u4e0a\u5e26\u6709\u539f\u59cb\u6587\u4ef6\u540d\u548c\u65b0\u6587\u4ef6\u540d\u7684\u54cd\u5e94\u3002 Note: \u7a0d\u540e\u5c06\u4f7f\u7528\u65b0\u6587\u4ef6\u540d\u4ece\u670d\u52a1\u5668\u83b7\u53d6\u56fe\u50cf\u3002 Upload multiple images \u5728\u8fd9\u91cc\uff0c\u60a8\u53ef\u4ee5\u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u4f46\u8981\u5728/\u591a\u4e2a\u7aef\u70b9\u4e0a\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u3002 Get uploaded image \u83b7\u53d6\u6587\u4ef6\u4e5f\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8fc7\u7a0b\u3002 \u60a8\u53ea\u9700\u8981\u5c06\u4ece post \u8bf7\u6c42\u4e2d\u83b7\u5f97\u7684\u6587\u4ef6\u540d\u4f5c\u4e3a\u53c2\u6570\u53d1\u9001\u4e00\u4e2a get \u8bf7\u6c42\u5230 API \u3002 \u9879\u76ee\u7684\u5b8c\u6574\u4ee3\u7801\u4e5f\u53ef\u4ee5\u5728\u6211\u7684 Github \u4e0a\u627e\u5230\u3002 \u7ed3\u8bba \u4f60\u4e00\u76f4\u575a\u6301\u5230\u6700\u540e!\u5e0c\u671b\u672c\u6587\u80fd\u5e2e\u52a9\u60a8\u7406\u89e3 Nestjs \u4e2d\u7684\u6587\u4ef6\u4e0a\u4f20\u3002 \u5982\u679c\u60a8\u89c9\u5f97\u8fd9\u5f88\u6709\u7528\uff0c\u8bf7\u8003\u8651\u63a8\u8350\u5e76\u4e0e\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u5206\u4eab\u3002 \u5982\u679c\u4f60\u6709\u4efb\u4f55\u95ee\u9898\u6216\u53cd\u9988\uff0c\u8bf7\u5728 twitter \u4e0a\u544a\u8bc9\u6211\u6216\u4f7f\u7528\u6211\u7684\u8054\u7cfb\u65b9\u5f0f\u3002","title":"Nestjs\u4f7f\u7528Multer\u4e0a\u4f20\u6587\u4ef6"},{"location":"blog/nestjs-file-uploading-using-multer/#_1","text":"\u60a8\u9700\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u6587\u4ef6\u670d\u52a1\u5668\u7684 Nestjs \u9879\u76ee\u3002 \u4e3a\u6b64\uff0c\u9700\u8981\u6253\u5f00\u7ec8\u7aef\uff0c\u6267\u884c\u5982\u4e0b\u547d\u4ee4: Bash nest new nest-file-uploading && cd nest-file-uploading \u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a nest-file-upload \u7684\u65b0\u76ee\u5f55\uff0c\u5e76\u4f7f\u7528\u6807\u51c6\u7684 Nestjs \u914d\u7f6e\u5bf9\u5176\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u5b89\u88c5\u597d\u76ee\u5f55\u540e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\u5e94\u7528\u7a0b\u5e8f\u6240\u9700\u7684\u4f9d\u8d56\u9879: Bash npm install @nestjs/platform-express --save npm install @types/express -D \u5728\u5f00\u59cb\u7f16\u7801\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u505a\u7684\u6700\u540e\u4e00\u4ef6\u4e8b\u662f\u521b\u5efa\u9879\u76ee\u6240\u9700\u7684\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u3002 \u8fd9\u975e\u5e38\u7b80\u5355\uff0c\u56e0\u4e3a\u5e94\u7528\u7a0b\u5e8f\u53ea\u9700\u8981\u591a\u4e00\u4e2a\u6587\u4ef6\u3002 Bash mkdir src/utils touch src/utils/file-uploading.utils.ts \u8981\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u73b0\u5728\u53ef\u4ee5\u5728\u4f60\u7684\u7ec8\u7aef\u4e2d\u6267\u884c Bash npm run start:dev\u3002","title":"\u8bbe\u7f6e"},{"location":"blog/nestjs-file-uploading-using-multer/#_2","text":"\u73b0\u5728\u60a8\u5df2\u7ecf\u5b8c\u6210\u4e86\u8bbe\u7f6e\u8fc7\u7a0b\uff0c\u60a8\u53ef\u4ee5\u7ee7\u7eed\u5e76\u5f00\u59cb\u5b9e\u73b0\u5b9e\u9645\u7684\u529f\u80fd\u3002 \u8ba9\u6211\u4eec\u4ece\u5728\u4f60\u7684 AppModule \u4e2d\u5bfc\u5165 MulterModule \u5f00\u59cb\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528 Multer \u3002 TypeScript import { Module } from \"@nestjs/common\" ; import { AppController } from \"./app.controller\" ; import { MulterModule } from \"@nestjs/platform-express\" ; @Module ({ imports : [ MulterModule . register ({ dest : \"./files\" , }), ], controllers : [ AppController ], }) export class AppModule {} \u5728\u8fd9\u91cc\uff0c\u4f60\u4ece @nestjs/platform-express \u4e2d\u5bfc\u5165 MulterModule \uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230 imports \u8bed\u53e5\u4e2d\u3002 \u60a8\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u4e0a\u4f20\u65f6\u4fdd\u5b58\u6587\u4ef6\u7684\u76ee\u7684\u5730\u3002 Note: \u8fd9\u4e2a\u76ee\u6807\u4ece\u9879\u76ee\u7684\u6839\u8def\u5f84\u5f00\u59cb\uff0c\u800c\u4e0d\u662f src \u6587\u4ef6\u5939\u3002 \u4e0b\u4e00\u6b65\u662f\u5b9e\u73b0\u5b9e\u9645\u7684\u4e0a\u4f20\u529f\u80fd\uff0c\u8fd9\u76f8\u5f53\u7b80\u5355\u3002 \u60a8\u53ea\u9700\u8981\u5c06 FileInterceptor() \u6dfb\u52a0\u5230\u4e00\u4e2a\u666e\u901a\u7684 @Post \u8bf7\u6c42\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u7136\u540e\u4f7f\u7528 @UploadedFile() \u88c5\u9970\u5668\u4ece\u8bf7\u6c42\u4e2d\u63d0\u53d6\u6587\u4ef6\u3002 TypeScript export class AlbumController { @Post () @UseInterceptors ( FileInterceptor ( \"image\" )) async uploadedFile ( @UploadedFile () file ) { const response = { originalname : file.originalname , filename : file.filename , }; return response ; } } FileInterceptor \u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a fieldName \u548c\u4e00\u4e2a\u53ef\u9009\u7684 options \u5bf9\u8c61\uff0c\u7a0d\u540e\u60a8\u5c06\u4f7f\u7528\u5b83\u6765\u68c0\u67e5\u6b63\u786e\u7684\u6587\u4ef6\u7c7b\u578b\uff0c\u5e76\u5728\u76ee\u5f55\u4e2d\u7ed9\u6587\u4ef6\u4e00\u4e2a\u81ea\u5b9a\u4e49\u540d\u79f0\u3002 \u4e00\u6b21\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff0c\u4f60\u53ea\u9700\u8981\u4f7f\u7528 FilesInterceptor \u6765\u4ee3\u66ff\uff0c\u5e76\u4f20\u9012\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u5373\u6587\u4ef6\u7684\u6700\u5927\u6570\u91cf\u3002 TypeScript export class AlbumController { @Post ( \"multiple\" ) @UseInterceptors ( FilesInterceptor ( \"image\" , 20 , { storage : diskStorage ({ destination : \"./files\" , filename : editFileName , }), fileFilter : imageFileFilter , }) ) async uploadMultipleFiles ( @UploadedFiles () files ) { const response = []; files . forEach (( file ) => { const fileReponse = { originalname : file.originalname , filename : file.filename , }; response . push ( fileReponse ); }); return response ; } } \u8fd9\u5f88\u7b80\u5355\uff0c\u8fd9\u91cc\u552f\u4e00\u7684\u95ee\u9898\u662f\uff0c\u7528\u6237\u53ef\u4ee5\u4e0a\u4f20\u6240\u6709\u6587\u4ef6\u7c7b\u578b\uff0c\u800c\u4e0d\u8003\u8651\u6587\u4ef6\u6269\u5c55\u540d\uff0c\u8fd9\u5e76\u4e0d\u9002\u5408\u6240\u6709\u9879\u76ee\uff0c\u6587\u4ef6\u540d\u53ea\u662f\u4e00\u4e9b\u968f\u673a\u6570\u3002 \u8ba9\u6211\u4eec\u901a\u8fc7\u5728\u60a8\u7684 file-upload.utils.ts \u6587\u4ef6\u4e2d\u5b9e\u73b0\u4e00\u4e9b\u5b9e\u7528\u5de5\u5177\u6765\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\u3002 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5b9e\u73b0\u53ea\u5141\u8bb8\u4e0a\u4f20\u56fe\u50cf\u7684\u6587\u4ef6\u7c7b\u578b\u8fc7\u6ee4\u5668\u3002 TypeScript export const imageFileFilter = ( req , file , callback ) => { if ( ! file . originalname . match ( /\\.(jpg|jpeg|png|gif)$/ )) { return callback ( new Error ( \"Only image files are allowed!\" ), false ); } callback ( null , true ); }; \u8fd9\u91cc\u60a8\u521b\u5efa\u4e86\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u51fd\u6570\uff0c\u7528\u4e8e\u68c0\u67e5\u6587\u4ef6\u7c7b\u578b\u662f\u5426\u4e3a\u56fe\u50cf\u3002 \u5982\u679c\u662f\uff0c\u5b83\u8fd4\u56de true\uff0c\u56fe\u50cf\u5c06\u88ab\u4e0a\u4f20\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u4f60\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\uff0c\u5e76\u4e3a\u56de\u8c03\u8fd4\u56de false\u3002 editFileName \u51fd\u6570\u5177\u6709\u76f8\u540c\u7684\u7ed3\u6784\uff0c\u4f46\u4f7f\u7528\u539f\u59cb\u540d\u79f0\u3001\u6587\u4ef6\u6269\u5c55\u540d\u548c\u56db\u4e2a\u968f\u673a\u6570\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6587\u4ef6\u540d\u3002 TypeScript export const editFileName = ( req , file , callback ) => { const name = file . originalname . split ( \".\" )[ 0 ]; const fileExtName = extname ( file . originalname ); const randomName = Array ( 4 ) . fill ( null ) . map (() => Math . round ( Math . random () * 16 ). toString ( 16 )) . join ( \"\" ); callback ( null , ` ${ name } - ${ randomName }${ fileExtName } ` ); }; \u73b0\u5728\u4f60\u5df2\u7ecf\u521b\u5efa\u4e86\u8fd9\u4e24\u4e2a\u4e2d\u95f4\u4ef6\u51fd\u6570\uff0c\u662f\u65f6\u5019\u5728 app.controller.ts \u6587\u4ef6\u4e2d\u4f7f\u7528\u5b83\u4eec\u4e86\u3002 \u4e3a\u6b64\uff0c\u4f60\u53ea\u9700\u8981\u5728 FileInterceptor \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u914d\u7f6e\u5bf9\u8c61\uff0c\u5982\u4e0b\u6240\u793a: TypeScript export class AlbumController { @Post () @UseInterceptors ( FileInterceptor ( \"image\" , { storage : diskStorage ({ destination : \"./files\" , filename : editFileName , }), fileFilter : imageFileFilter , }) ) async uploadedFile ( @UploadedFile () file ) { const response = { originalname : file.originalname , filename : file.filename , }; return response ; } @Post ( \"multiple\" ) @UseInterceptors ( FilesInterceptor ( \"image\" , 20 , { storage : diskStorage ({ destination : \"./files\" , filename : editFileName , }), fileFilter : imageFileFilter , }) ) async uploadMultipleFiles ( @UploadedFiles () files ) { const response = []; files . forEach (( file ) => { const fileReponse = { originalname : file.originalname , filename : file.filename , }; response . push ( fileReponse ); }); return response ; } } \u6700\u540e\uff0c\u4f60\u5c06\u6dfb\u52a0\u4e00\u4e2a @Get \u8def\u7531\uff0c\u5b83\u5c06 imagepath \u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u4f7f\u7528 sendFile \u65b9\u6cd5\u8fd4\u56de\u56fe\u50cf\u3002 TypeScript export class AlbumController { @Get ( \":imgpath\" ) seeUploadedFile ( @Param ( \"imgpath\" ) image , @Res () res ) { return res . sendFile ( image , { root : \"./files\" }); } }","title":"\u4e0a\u4f20\u6587\u4ef6"},{"location":"blog/nestjs-file-uploading-using-multer/#_3","text":"\u65e2\u7136\u60a8\u5df2\u7ecf\u5b8c\u6210\u4e86\u5e94\u7528\u7a0b\u5e8f\uff0c\u73b0\u5728\u5c31\u53ef\u4ee5\u901a\u8fc7\u5411\u7aef\u70b9\u53d1\u9001 HTTP \u8bf7\u6c42\u6765\u6d4b\u8bd5\u5b83\u4e86\u3002 \u8fd9\u53ef\u4ee5\u4f7f\u7528\u7ec8\u7aef\u4e2d\u7684 curl \u547d\u4ee4\u6216\u4f7f\u7528\u4e00\u4e2a HTTP \u5ba2\u6237\u7aef\u8f6f\u4ef6\uff0c\u5982 Postman \u6216 Insomnia \u6765\u5b8c\u6210\u3002 \u6211\u4e2a\u4eba\u4f7f\u7528\u7684\u662f\u300aInsomnia\u300b\uff0c\u4f46\u5728\u300aPostman\u300b\u4e2d\u4e5f\u5e94\u8be5\u662f\u4e00\u6837\u7684\u3002 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u670d\u52a1\u5668: Bash npm run start \u6b63\u5982\u7ec8\u7aef\u8f93\u51fa\u6240\u793a\uff0c\u670d\u52a1\u5668\u73b0\u5728\u8fd0\u884c\u5728 http://localhost:3000 \u4e0a\u3002 \u8981\u6d4b\u8bd5 API\uff0c\u60a8\u73b0\u5728\u53ea\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 HTTP \u8bf7\u6c42\u5e76\u5c06\u8bf7\u6c42\u4f53\u66f4\u6539\u4e3a multipart \uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u4e0a\u4f20\u6587\u4ef6\u4e86\u3002 Upload images \u5728\u8fd9\u91cc\uff0c\u60a8\u5c06\u76ee\u6807\u8bbe\u7f6e\u4e3a http://localhost:3000 \uff0c\u5e76\u5411\u8bf7\u6c42\u4f53\u6dfb\u52a0\u4e00\u4e2a\u56fe\u50cf\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u5355\u51fb\u590d\u9009\u6846\u65c1\u8fb9\u7684\u7bad\u5934\u5e76\u9009\u62e9 file \u6765\u5b8c\u6210\u3002 \u5728\u53f3\u4fa7\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u670d\u52a1\u5668\u4e0a\u5e26\u6709\u539f\u59cb\u6587\u4ef6\u540d\u548c\u65b0\u6587\u4ef6\u540d\u7684\u54cd\u5e94\u3002 Note: \u7a0d\u540e\u5c06\u4f7f\u7528\u65b0\u6587\u4ef6\u540d\u4ece\u670d\u52a1\u5668\u83b7\u53d6\u56fe\u50cf\u3002 Upload multiple images \u5728\u8fd9\u91cc\uff0c\u60a8\u53ef\u4ee5\u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u4f46\u8981\u5728/\u591a\u4e2a\u7aef\u70b9\u4e0a\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u3002 Get uploaded image \u83b7\u53d6\u6587\u4ef6\u4e5f\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8fc7\u7a0b\u3002 \u60a8\u53ea\u9700\u8981\u5c06\u4ece post \u8bf7\u6c42\u4e2d\u83b7\u5f97\u7684\u6587\u4ef6\u540d\u4f5c\u4e3a\u53c2\u6570\u53d1\u9001\u4e00\u4e2a get \u8bf7\u6c42\u5230 API \u3002 \u9879\u76ee\u7684\u5b8c\u6574\u4ee3\u7801\u4e5f\u53ef\u4ee5\u5728\u6211\u7684 Github \u4e0a\u627e\u5230\u3002","title":"\u6d4b\u8bd5\u5e94\u7528\u7a0b\u5e8f"},{"location":"blog/nestjs-file-uploading-using-multer/#_4","text":"\u4f60\u4e00\u76f4\u575a\u6301\u5230\u6700\u540e!\u5e0c\u671b\u672c\u6587\u80fd\u5e2e\u52a9\u60a8\u7406\u89e3 Nestjs \u4e2d\u7684\u6587\u4ef6\u4e0a\u4f20\u3002 \u5982\u679c\u60a8\u89c9\u5f97\u8fd9\u5f88\u6709\u7528\uff0c\u8bf7\u8003\u8651\u63a8\u8350\u5e76\u4e0e\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u5206\u4eab\u3002 \u5982\u679c\u4f60\u6709\u4efb\u4f55\u95ee\u9898\u6216\u53cd\u9988\uff0c\u8bf7\u5728 twitter \u4e0a\u544a\u8bc9\u6211\u6216\u4f7f\u7528\u6211\u7684\u8054\u7cfb\u65b9\u5f0f\u3002","title":"\u7ed3\u8bba"},{"location":"blog/scalable-websockets-with-nestjs-and-redis/","text":"https://blog.logrocket.com/scalable-websockets-with-nestjs-and-redis/ \u5728\u5904\u7406\u4e00\u4e2a\u76f8\u5bf9\u5e74\u8f7b\u7684\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u4e3a\u4e86\u66f4\u5feb\u5730\u5b9e\u73b0\u7279\u6027\uff0c\u4eba\u4eec\u5f80\u5f80\u5ffd\u7565\u5bf9\u53ef\u4f38\u7f29\u6027\u7684\u9700\u6c42\u3002 \u7136\u800c\uff0c\u6211\u8ba4\u4e3a\uff0c\u5373\u4f7f\u5728\u9879\u76ee\u7684\u6700\u521d\u9636\u6bb5\uff0c\u786e\u4fdd\u4ee3\u7801\u5c3d\u53ef\u80fd\u5177\u6709\u53ef\u4f38\u7f29\u6027\u4e5f\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002 \u6700\u8fd1\uff0c\u5f53\u6211\u5728\u505a\u4e00\u4e2a\u9879\u76ee\u7684\u65f6\u5019\uff0c\u6211\u9047\u5230\u4e86\u4e00\u4e2a\u6311\u6218\uff0c\u8981\u628a WebSockets \u6dfb\u52a0\u5230 NestJS \u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002 \u867d\u7136\u7531\u4e8e\u5927\u91cf\u7684\u6587\u6863\uff0c\u8fd9\u662f\u4e00\u4e2a\u76f8\u5bf9\u7b80\u5355\u7684\u4efb\u52a1\uff0c\u4f46\u5b83\u6709\u4e00\u4e2a\u5f88\u5927\u7684\u7f3a\u70b9: \u5b83\u4e3a\u4ee5\u524d\u7684\u65e0\u72b6\u6001\u5e94\u7528\u7a0b\u5e8f\u5f15\u5165\u4e86\u4e00\u4e2a\u72b6\u6001\u3002 \u591a\u4e8f\u4e86 Docker \u548c Kubernetes \u7b49\u5de5\u5177\uff0c\u73b0\u5728\u7684\u540e\u7aef\u5e94\u7528\u7a0b\u5e8f\u5f88\u5bb9\u6613\u6269\u5c55\u3002 \u521b\u5efa\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u7684\u590d\u6742\u6027\u5df2\u7ecf\u663e\u8457\u964d\u4f4e\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u8981\u5e94\u7528\u7a0b\u5e8f\u4fdd\u6301\u65e0\u72b6\u6001\u3002 \u7531\u4e8e\u6ca1\u6709\u72b6\u6001\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u518d\u6b21\u88ab\u5173\u95ed\u548c\u6253\u5f00\uff0c\u800c\u4e0d\u4f1a\u51fa\u73b0\u610f\u5916\u7684\u884c\u4e3a\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u5f88\u5bb9\u6613\u88ab\u4e22\u5f03\u3002 WebSocket \u534f\u8bae\u7684\u6bcf\u4e2a\u5b9e\u73b0\u90fd\u5fc5\u987b\u4ee5\u67d0\u79cd\u5f62\u5f0f\u4fdd\u6301\u5f53\u524d\u6253\u5f00\u7684\u8fde\u63a5\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u6211\u4eec\u6709\u5e94\u7528\u7a0b\u5e8f\u7684\u4e24\u4e2a\u5b9e\u4f8b\uff0c\u7531\u7b2c\u4e8c\u4e2a\u5b9e\u4f8b\u5206\u6d3e\u7684\u4e8b\u4ef6\u5c06\u6c38\u8fdc\u4e0d\u4f1a\u5230\u8fbe\u8fde\u63a5\u5230\u7b2c\u4e00\u4e2a\u5b9e\u4f8b\u7684\u5ba2\u6237\u7aef\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6709\u4e00\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u5728\u591a\u4e2a\u5b9e\u4f8b\u4e4b\u95f4\u201c\u5171\u4eab\u201d\u5f00\u653e\u8fde\u63a5\u6c60\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 Redis \u7684\u53d1\u5e03/\u8ba2\u9605\u673a\u5236\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u6240\u6709\u5b9e\u4f8b\u4e4b\u95f4\u8f6c\u53d1\u53d1\u51fa\u7684\u4e8b\u4ef6\uff0c\u4ee5\u786e\u4fdd\u6bcf\u4e2a\u6253\u5f00\u7684\u8fde\u63a5\u63a5\u6536\u5230\u5b83\u4eec\u3002 \u4e0b\u9762\u7684\u5b9e\u73b0\u5b8c\u5168\u5305\u542b\u4e86 Nest \u751f\u6001\u7cfb\u7edf\uff0c\u5305\u62ec\u4ee5\u4e0b\u60c5\u51b5:\u53ea\u5411\u4e00\u4e2a\u7528\u6237\u53d1\u9001\u4e8b\u4ef6;\u5411\u6240\u6709\u6253\u5f00\u7684\u8fde\u63a5\u53d1\u51fa\u4e8b\u4ef6;\u5e76\u5411\u6240\u6709\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u53d1\u51fa\u4e8b\u4ef6\u3002 Note: \u5728 NestJS \u6587\u6863\u4e2d\uff0c\u6709\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u6dfb\u52a0 Redis \u6765\u5728\u5b9e\u4f8b\u4e4b\u95f4\u8f6c\u53d1\u4e8b\u4ef6\uff0c\u53ea\u9700\u51e0\u884c\u4ee3\u7801\u3002 \u5982\u679c\u60a8\u6b63\u5728\u5bfb\u627e\u4e00\u4e2a\u7b80\u5355\u4f46\u6709\u9650\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u8bf7\u770b\u770b\u8fd9\u91cc\u3002 \u5982\u679c\u60a8\u60f3\u81ea\u5df1\u627e\u51fa\u5982\u4f55\u5b9e\u73b0\u4e0a\u8ff0\u673a\u5236\uff0c\u8bf7\u52a1\u5fc5\u7ee7\u7eed\u8fdb\u884c\u3002 \u672c\u6587\u5047\u8bbe\u4f60\u5bf9 Docker\u3001TypeScript \u548c RxJS \u6709\u57fa\u672c\u7684\u4e86\u89e3\u3002 \u8bbe\u7f6e Nest \u5e94\u7528\u7a0b\u5e8f \u5728\u672c\u6587\u4e2d\uff0c\u6211\u5df2\u7ecf\u8be6\u7ec6\u63cf\u8ff0\u4e86\u5c06\u5728\u8fd9\u91cc\u4f7f\u7528\u7684\u8bbe\u7f6e\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u4f7f\u7528 Nest CLI \u4e3a\u6211\u4eec\u642d\u5efa\u5e94\u7528\u7a0b\u5e8f\uff0cDocker \u4f7f\u7528 Docker-compose \u6dfb\u52a0 Redis \u548c Postgres \u8fdb\u884c\u672c\u5730\u5f00\u53d1\u3002 \u6211\u5efa\u8bae\u60a8\u4e0b\u8f7d\u8fd9\u4e2a\u8d44\u6e90\u5e93\u5e76\u8ddf\u968f\u672c\u6587\uff0c\u56e0\u4e3a\u6211\u5c06\u53ea\u89e3\u91ca\u76f8\u5173\u7684\u4ee3\u7801\uff0c\u800c\u4e0d\u4ecb\u7ecd Nest \u6837\u677f\u6587\u4ef6(\u5982\u6a21\u5757)\u3002 \u6dfb\u52a0 Redis Redis \u662f\u4e00\u4e2a\u5185\u5b58\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u5b58\u50a8\uff0c\u53ef\u4ee5\u7528\u4f5c\u6570\u636e\u5e93\uff0c\u7f13\u5b58\uff0c\u6216\u53d1\u5e03/\u8ba2\u9605\u5ba2\u6237\u7aef\u3002 \u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u53ea\u662f Redis \u7684\u51e0\u79cd\u53ef\u80fd\u6027\u3002 \u5982\u679c\u4f60\u6709\u5174\u8da3\u4e86\u89e3\u66f4\u591a\uff0c\u5c31\u5728\u8fd9\u91cc\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f60\u5fc5\u987b\u5728\u4f60\u7684\u7535\u8111\u4e0a\u5b89\u88c5 Redis\uff0c\u4f46\u7531\u4e8e\u5e94\u7528\u7a0b\u5e8f\u88ab Docker \u5bb9\u5668\u5316\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u8fd9\u6837\u505a\u3002 Docker \u4e3a\u6211\u4eec\u8d1f\u8d23\u5b89\u88c5\u548c\u542f\u52a8 Redis\u3002 \u4e3a\u4e86\u4ece\u8282\u70b9\u8fd0\u884c\u65f6\u4e0e Redis \u901a\u4fe1\uff0c\u6709\u4e00\u4e9b\u5e93\u53ef\u7528\u3002 \u6211\u4eec\u5c06\u4f7f\u7528 ioredis\uff0c\u56e0\u4e3a\u5b83\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u7279\u6027\uff0c\u540c\u65f6\u4fdd\u6301\u4e86\u5f3a\u5927\u7684\u6027\u80fd\u3002 \u6211\u4eec\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a Nest \u6a21\u5757\u6765\u5c01\u88c5\u4e0e Redis \u76f8\u5173\u7684\u4ee3\u7801\u3002 \u5728 RedisModule \u4e2d\uff0c\u6211\u4eec\u6709 providers \u6570\u7ec4\uff0c\u6211\u4eec\u5728\u5176\u4e2d\u521b\u5efa ioredis \u5ba2\u6237\u7aef\u6765\u4e0e Redis \u901a\u4fe1\u3002 \u6211\u4eec\u8fd8\u5b9e\u73b0\u4e86 RedisService\uff0c\u5b83\u62bd\u8c61\u4e86\u76d1\u542c\u548c\u53d1\u9001 Redis \u6d88\u606f\u3002 \u6b63\u5982\u524d\u9762\u63d0\u5230\u7684\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e24\u4e2a\u5177\u6709\u4e0d\u540c\u76ee\u7684\u7684 Redis \u5ba2\u6237\u7aef:\u4e00\u4e2a\u7528\u4e8e\u8ba2\u9605\uff0c\u4e00\u4e2a\u7528\u4e8e\u53d1\u5e03\u6d88\u606f\u3002 TypeScript //redis.providers.ts import { Provider } from \"@nestjs/common\" ; import Redis from \"ioredis\" ; import { REDIS_PUBLISHER_CLIENT , REDIS_SUBSCRIBER_CLIENT , } from \"./redis.constants\" ; export type RedisClient = Redis . Redis ; export const redisProviders : Provider [] = [ { useFactory : () : RedisClient => { return new Redis ({ host : \"socket-redis\" , port : 6379 , }); }, provide : REDIS_SUBSCRIBER_CLIENT , }, { useFactory : () : RedisClient => { return new Redis ({ host : \"socket-redis\" , port : 6379 , }); }, provide : REDIS_PUBLISHER_CLIENT , }, ]; \u6ce8\u610f\uff0c\u4e3b\u673a\u548c\u7aef\u53e3\u503c\u901a\u5e38\u662f\u901a\u8fc7\u67d0\u79cd\u5f62\u5f0f\u7684\u914d\u7f6e\u6765\u914d\u7f6e\u7684\uff0c\u6bd4\u5982 ConfigService\uff0c\u4f46\u662f\u8fd9\u91cc\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\u7701\u7565\u4e86\u5b83\u3002 \u6709\u4e86\u8fd9\u4e9b\u5728 RedisModule \u4e2d\u6ce8\u518c\u7684\u63d0\u4f9b\u5546\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u5b83\u4eec\u4f5c\u4e3a\u4f9d\u8d56\u6ce8\u5165\u5230\u6211\u4eec\u7684\u670d\u52a1\u4e2d\u3002 \u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a RedisService\u3002 TypeScript //redis.service.ts import { REDIS_PUBLISHER_CLIENT , REDIS_SUBSCRIBER_CLIENT , } from \"./redis.constants\" ; import { RedisClient } from \"./redis.providers\" ; export interface RedisSubscribeMessage { readonly message : string ; readonly channel : string ; } @Injectable () export class RedisService { public constructor ( @Inject ( REDIS_SUBSCRIBER_CLIENT ) private readonly redisSubscriberClient : RedisClient , @Inject ( REDIS_PUBLISHER_CLIENT ) private readonly redisPublisherClient : RedisClient ) {} // ... } \u5728\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u6309\u7167\u9884\u671f\u6ce8\u5165\u4e86\u4e24\u4e2a Redis \u5ba2\u6237\u7aef\u3002 \u7136\u540e\u5b9a\u4e49\u4e24\u4e2a\u65b9\u6cd5:fromEvent \u548c publish\u3002 \u8ba9\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0b fromEvent \u65b9\u6cd5\u3002 TypeScript public fromEvent < T > ( eventName : string ) : Observable < T > { this . redisSubscriberClient . subscribe ( eventName ); return Observable . create (( observer : Observer < RedisSubscribeMessage > ) => this . redisSubscriberClient . on ( 'message' , ( channel , message ) => observer . next ({ channel , message })), ). pipe ( filter (({ channel }) => channel === eventName ), map (({ message }) => JSON . parse ( message )), ); } \u5b83\u544a\u8bc9 Redis \u901a\u8fc7\u4f7f\u7528 redisSubscriberClient \u7684\u8ba2\u9605\u65b9\u6cd5\u6765\u5173\u6ce8\u6240\u63d0\u4f9b\u7684\u4e8b\u4ef6\u3002 \u7136\u540e\u6211\u4eec\u8fd4\u56de\u4e00\u4e2a\u53ef\u89c2\u5bdf\u5bf9\u8c61\uff0c\u5728\u8fd9\u4e2a\u53ef\u89c2\u5bdf\u5bf9\u8c61\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u5728 message \u4e8b\u4ef6\u4e0a\u9644\u52a0\u4e00\u4e2a\u76d1\u542c\u5668\u6765\u76d1\u542c\u4efb\u4f55\u65b0\u6d88\u606f\u3002 \u5f53\u6211\u4eec\u6536\u5230\u4e00\u6761\u65b0\u6d88\u606f\u65f6\uff0c\u6211\u4eec\u9996\u5148\u68c0\u67e5\u901a\u9053(Redis \u4e8b\u4ef6\u540d\u79f0)\u662f\u5426\u7b49\u4e8e\u63d0\u4f9b\u7684 eventName\u3002 \u5982\u679c\u662f\uff0c\u6211\u4eec\u4f7f\u7528 JSON.parse \u5c06 redis \u53d1\u9001\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5bf9\u8c61\u3002 TypeScript public async publish ( channel : string , value : unknown ) : Promise < number > { return new Promise < number > (( resolve , reject ) => { return this . redisPublisherClient . publish ( channel , JSON . stringify ( value ), ( error , reply ) => { if ( error ) { return reject ( error ); } return resolve ( reply ); }); }); } publish \u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u901a\u9053\u548c\u4e00\u4e2a\u672a\u77e5\u503c\uff0c\u5e76\u4f7f\u7528 redisPublisherClient \u6765\u53d1\u5e03\u5b83\u3002 \u7531\u4e8e Redis \u65e0\u6cd5\u4f20\u8f93 JavaScript \u5bf9\u8c61\uff0c\u6211\u4eec\u5047\u8bbe\u63d0\u4f9b\u7684\u503c\u53ef\u4ee5\u7528 JSON.stringify \u5b57\u7b26\u4e32\u5316\u3002 \u901a\u8fc7\u8fd9\u4e24\u79cd\u65b9\u6cd5\uff0c\u6211\u4eec\u6210\u529f\u5730\u5c06\u8fde\u63a5\u5230\u5e95\u5c42 Redis \u5ba2\u6237\u7aef\u7684\u6240\u6709\u9ebb\u70e6\u4ee3\u7801\u62bd\u8c61\u51fa\u6765\uff0c\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u53ef\u9760\u7684 API \u901a\u8fc7\u4f7f\u7528 RedisService \u5728\u5b9e\u4f8b\u4e4b\u95f4\u53d1\u9001\u4e8b\u4ef6\u3002 \u521b\u5efa\u5957\u63a5\u5b57\u7684\u72b6\u6001 \u6211\u4eec\u5df2\u7ecf\u63d0\u5230\uff0c\u5f53\u524d\u6253\u5f00\u7684 WebSocket \u8fde\u63a5\u5fc5\u987b\u4fdd\u6301\u5728\u67d0\u79cd\u72b6\u6001\u3002 \u50cf socket.io \u8fd9\u6837\u7684\u5e93\uff0c\u6211\u4eec\u5c06\u5728\u8fd9\u91cc\u4f7f\u7528\u5b83\uff0c\u4e3a\u6211\u4eec\u505a\u8fd9\u4ef6\u4e8b\u3002 \u5e93\u63d0\u4f9b\u4e86\u6709\u7528\u7684\u65b9\u6cd5\uff0c\u5982 .send \u6216 .emit \uff0c\u8fd9\u4f7f\u5f97\u5b9e\u9645\u4e0a\u5f88\u96be\u4ee5\u6307\u5b9a\u7684\u683c\u5f0f\u83b7\u5f97\u5f53\u524d\u6d3b\u52a8\u7684\u5957\u63a5\u5b57(\u8fde\u63a5) \u4e3a\u4e86\u4f7f\u6211\u4eec\u66f4\u5bb9\u6613\u68c0\u7d22\u548c\u7ba1\u7406\u5957\u63a5\u5b57\uff0c\u6211\u4eec\u5c06\u5b9e\u73b0\u6211\u4eec\u81ea\u5df1\u7684\u5957\u63a5\u5b57\u72b6\u6001\u3002 \u5728\u6211\u4eec\u7684\u72b6\u6001\u5b9e\u73b0\u4e2d\uff0c\u6211\u4eec\u611f\u5174\u8da3\u7684\u662f\u68c0\u7d22\u6307\u5b9a\u7528\u6237\u7684\u5957\u63a5\u5b57\u3002 \u8fd9\u6837\uff0c\u5982\u679c\u5b9e\u4f8b No.3 \u5206\u6d3e\u4e86 ID \u4e3a 1234 \u7684\u7528\u6237\u5e94\u8be5\u63a5\u6536\u7684\u4e8b\u4ef6\uff0c\u6211\u4eec\u5c06\u80fd\u591f\u8f7b\u677e\u5730\u68c0\u67e5\u6240\u6709\u5b9e\u4f8b\u662f\u5426\u6709\u8be5 ID \u7684\u7528\u6237\u7684\u4efb\u4f55\u5957\u63a5\u5b57\u3002 \u6211\u4eec\u5047\u8bbe\u6b63\u5728\u521b\u5efa\u7684\u5e94\u7528\u7a0b\u5e8f\u652f\u6301\u67d0\u79cd\u8eab\u4efd\u9a8c\u8bc1\u3002 \u7a0d\u540e\u5c06\u4ecb\u7ecd\u5982\u4f55\u9a8c\u8bc1\u4f20\u5165\u5957\u63a5\u5b57;\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5047\u8bbe\u6bcf\u4e2a\u5957\u63a5\u5b57\u90fd\u6709\u4e00\u4e2a\u53ef\u7528\u7684 userId \u3002 \u8fd9\u5f88\u7b80\u5355\u3002 \u6211\u4eec\u5c06\u4ee5\u4ee5\u4e0b\u683c\u5f0f\u5b58\u50a8\u5957\u63a5\u5b57: Map<string, Socket[]> . \u8981\u7528\u6587\u5b57\u8868\u793a\uff0c\u952e\u5c06\u662f\u7528\u6237\u7684 id\uff0c\u5bf9\u5e94\u7684\u503c\u5c06\u662f\u7528\u6237\u7684\u6240\u6709\u5957\u63a5\u5b57\u3002 \u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a SocketStateModule \u7684 Nest \u6a21\u5757\uff0c\u4ee5\u53ca\u8d1f\u8d23\u4fdd\u6301\u72b6\u6001\u7684\u670d\u52a1\u3002 TypeScript //socket-state-service.ts @Injectable () export class SocketStateService { private socketState = new Map < string , Socket [] > (); // ... } \u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u79c1\u6709\u5c5e\u6027\uff0c\u8be5\u5c5e\u6027\u5728\u6620\u5c04\u4e2d\u4fdd\u5b58\u72b6\u6001\uff0c\u7136\u540e\u6dfb\u52a0\u4e00\u4e9b\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u66f4\u5bb9\u6613\u5730\u4f7f\u7528\u670d\u52a1\u3002 TypeScript public add ( userId : string , socket : Socket ) : boolean { const existingSockets = this . socketState . get ( userId ) || [] const sockets = [... existingSockets , socket ] this . socketState . set ( userId , sockets ) return true } add \u65b9\u6cd5\u63a5\u53d7' userId '\u548c socket \u4f5c\u4e3a\u53c2\u6570\uff0c\u5b83\u4eec\u8868\u793a\u4e00\u4e2a\u65b0\u6253\u5f00\u7684\u8fde\u63a5\u3002 \u9996\u5148\uff0c\u5b83\u5c06\u7528\u6237\u73b0\u6709\u7684\u5957\u63a5\u5b57(\u6216\u8005\u4e00\u4e2a\u7a7a\u6570\u7ec4\uff0c\u5982\u679c\u6ca1\u6709\u73b0\u6709\u7684\u5957\u63a5\u5b57)\u4fdd\u5b58\u5728 existingSockets \u4e2d\u3002 \u7136\u540e\u5c06\u63d0\u4f9b\u7684\u5957\u63a5\u5b57\u9644\u52a0\u5230\u96c6\u5408\u7684\u672b\u5c3e\uff0c\u5e76\u5c06\u65b0\u7684\u5957\u63a5\u5b57\u96c6\u5408\u4fdd\u5b58\u5728\u72b6\u6001\u4e2d\u3002 TypeScript public remove ( userId : string , socket : Socket ) : boolean { const existingSockets = this . socketState . get ( userId ) if ( ! existingSockets ) { return true } const sockets = existingSockets . filter ( s => s . id !== socket . id ) if ( ! sockets . length ) { this . socketState . delete ( userId ) } else { this . socketState . set ( userId , sockets ) } return true } remove \u65b9\u6cd5\u4ece\u7528\u6237\u5f53\u524d\u5b58\u5728\u7684\u5957\u63a5\u5b57\u4e2d\u8fc7\u6ee4\u6389\u4e0d\u9700\u8981\u7684\u5957\u63a5\u5b57\u3002 \u6bcf\u4e2a\u5957\u63a5\u5b57\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 id\uff0c\u53ef\u4ee5\u7528\u6765\u68c0\u67e5\u662f\u5426\u76f8\u7b49\u3002 \u5982\u679c\u5728\u79fb\u9664\u5957\u63a5\u5b57\u4e4b\u540e\uff0c\u7528\u6237\u7684\u72b6\u6001\u4e2d\u4e0d\u518d\u6709\u4efb\u4f55\u5957\u63a5\u5b57\uff0c\u5219\u8be5\u6570\u7ec4\u5c06\u5b8c\u5168\u4ece\u6620\u5c04\u4e2d\u79fb\u9664\u4ee5\u8282\u7701\u5185\u5b58\u3002 \u5982\u679c\u8fc7\u6ee4\u540e\u6570\u7ec4\u4e2d\u8fd8\u5269\u4e0b\u4e00\u4e9b\u5957\u63a5\u5b57\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u5176\u8bbe\u7f6e\u56de\u72b6\u6001\u3002 TypeScript public get ( userId : string ) : Socket [] { return this . socketState . get ( userId ) || [] } public getAll () : Socket [] { const all = [] this . socketState . forEach ( sockets => all . push ( sockets )) return all } \u8fd8\u6709\u53e6\u5916\u4e24\u4e2a\u65b9\u6cd5:get \u548c getAll\u3002 \u5728 get \u65b9\u6cd5\u4e2d\uff0c\u8fd4\u56de\u5c5e\u4e8e\u7ed9\u5b9a\u7528\u6237\u7684\u6240\u6709\u5957\u63a5\u5b57(\u5982\u679c\u6ca1\u6709\uff0c\u5219\u8fd4\u56de\u7a7a\u6570\u7ec4)\u3002 \u5728 getAll \u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Map \u7684 forEach \u65b9\u6cd5\uff0c\u83b7\u53d6\u6bcf\u4e2a\u7528\u6237\u7684\u5957\u63a5\u5b57\uff0c\u5e76\u5c06\u5b83\u4eec\u5408\u5e76\u5230\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002 \u521b\u5efa\u4e00\u4e2a\u9002\u914d\u5668 Nest \u6700\u597d\u7684\u7279\u6027\u4e4b\u4e00\u662f\uff0c\u5b83\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u5904\u7406\u5e95\u5c42\u5e93\u2014\u2014\u6bd4\u5982\u901a\u8fc7\u5b9a\u4e49\u826f\u597d\u3001\u53ef\u9760\u7684\u62bd\u8c61\u6765\u5904\u7406\u670d\u52a1\u5668\u7684 Express \u548c Fastify \u6216\u8005 socket.io \u548c ws \u7528\u4e8e\u5957\u63a5\u5b57\u3002 \u4ece\u5f00\u53d1\u4eba\u5458\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5e93\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4ea4\u6362\uff0c\u800c\u65e0\u9700\u5bf9\u4ee3\u7801\u5e93\u8fdb\u884c\u4efb\u4f55\u91cd\u5927\u66f4\u6539\u3002 \u4e3a\u4e86\u8ba9\u5b83\u5de5\u4f5c\uff0cNest \u6709\u81ea\u5df1\u7684\u4e00\u7ec4\u9002\u914d\u5668\uff0c\u5c06\u5e93\u7684 API\u201c\u5339\u914d\u201d\u5230 Nest \u6240\u671f\u671b\u7684 API\u3002 \u8fd9\u4f7f\u5f97 Nest \u5f88\u5bb9\u6613\u652f\u6301\u8bb8\u591a\u5177\u6709\u4e0d\u540c api \u7684\u5e93\u3002 \u56e0\u4e3a\u6211\u4eec\u60f3\u8981\u8ddf\u8e2a\u5f53\u524d\u6253\u5f00\u7684\u5957\u63a5\u5b57\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u6269\u5c55 socket.io \u7684\u9002\u914d\u5668\u3002 \u8be5\u9002\u914d\u5668\u53ef\u4ee5\u4f5c\u4e3a@nestjs/platform-socket.io \u5305\u7684\u4e00\u90e8\u5206\u4f7f\u7528\u3002 \u901a\u8fc7\u6269\u5c55\u73b0\u6709\u7684\u9002\u914d\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u53ea\u8986\u76d6\u6211\u4eec\u9700\u8981\u7684\u65b9\u6cd5\uff0c\u800c\u5c06\u6240\u6709\u5176\u4ed6\u4e8b\u60c5\u7559\u7ed9\u9002\u914d\u5668\u3002 \u5728 Nest \u7684\u6587\u6863\u4e2d\uff0c\u8be6\u7ec6\u89e3\u91ca\u4e86\u81ea\u5b9a\u4e49\u9002\u914d\u5668\u5982\u4f55\u5de5\u4f5c\u4ee5\u53ca\u5b83\u4eec\u4e3a\u4f55\u5982\u6b64\u5f3a\u5927\u3002 \u6211\u5efa\u8bae\u5728\u8fdb\u4e00\u6b65\u9605\u8bfb\u4e4b\u524d\u5148\u9605\u8bfb\u5b83\u3002 TypeScript export class SocketStateAdapter extends IoAdapter implements WebSocketAdapter { public constructor ( private readonly app : INestApplicationContext , private readonly socketStateService : SocketStateService ) { super ( app ); } private server : socketio.Server ; public create ( port : number , options : socketio.ServerOptions = {} ) : socketio . Server { this . server = super . createIOServer ( port , options ); this . server . use ( async ( socket : AuthenticatedSocket , next ) => { const token = socket . handshake . query ? . token || socket . handshake . headers ? . authorization ; if ( ! token ) { socket . auth = null ; // not authenticated connection is still valid // thus no error return next (); } try { // fake auth socket . auth = { userId : \"1234\" , }; return next (); } catch ( e ) { return next ( e ); } }); return this . server ; } public bindClientConnect ( server : socketio.Server , callback : Function ) : void { server . on ( \"connection\" , ( socket : AuthenticatedSocket ) => { if ( socket . auth ) { this . socketStateService . add ( socket . auth . userId , socket ); socket . on ( \"disconnect\" , () => { this . socketStateService . remove ( socket . auth . userId , socket ); }); } callback ( socket ); }); } } \u6211\u4eec\u7684\u7c7b\u6269\u5c55\u4e86 IoAdapter \u5e76\u8986\u76d6\u4e86\u4e24\u4e2a\u65b9\u6cd5:create \u548c bindClientConnect\u3002 \u6b63\u5982\u5b83\u7684\u540d\u5b57\u6240\u793a\uff0ccreate \u65b9\u6cd5\u8d1f\u8d23\u521b\u5efa\u4e00\u4e2a WebSocket \u670d\u52a1\u5668\u7684\u5b9e\u4f8b\u3002 \u6211\u4eec\u4f7f\u7528 IoAdapter \u7684 createIOServer \u65b9\u6cd5\u5c3d\u53ef\u80fd\u5730\u91cd\u7528\u4ee3\u7801\uff0c\u5e76\u786e\u4fdd\u4e00\u5207\u90fd\u5c3d\u53ef\u80fd\u5730\u63a5\u8fd1\u539f\u59cb\u9002\u914d\u5668\u3002 \u7136\u540e\u6211\u4eec\u8bbe\u7f6e\u4e00\u4e2a\u7528\u4e8e\u8eab\u4efd\u9a8c\u8bc1\u7684\u4e2d\u95f4\u4ef6\u2014\u2014\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u662f\u4e00\u4e2a\u5047\u4e2d\u95f4\u4ef6\u3002 \u6211\u4eec\u5047\u8bbe\u8eab\u4efd\u9a8c\u8bc1\u662f\u57fa\u4e8e\u4ee4\u724c\u7684\u3002 \u5728\u4e2d\u95f4\u4ef6\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u68c0\u67e5\u662f\u5426\u5728\u6211\u4eec\u9884\u671f\u7684\u4f4d\u7f6e\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4ee4\u724c:\u6388\u6743\u5934\u6216\u67e5\u8be2\u7684\u4ee4\u724c\u53c2\u6570\u3002 \u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u4ee4\u724c\uff0c\u5219\u8bbe\u7f6e socket.auth \u4e3a null\uff0c\u8c03\u7528\u4e0b\u4e00\u4e2a\u8fdb\u884c\u4e0e\u5176\u4ed6\u4e2d\u95f4\u4ef6\u7684\u6267\u884c\u3002 \u5982\u679c\u6709\u4ee4\u724c\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u4f7f\u7528 AuthService \u68c0\u67e5\u5e76\u9a8c\u8bc1\u5b83\uff0c\u4f46\u8fd9\u8d85\u51fa\u4e86\u672c\u6587\u7684\u8303\u56f4\u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u5c06\u628a\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u4ee4\u724c\u7684\u6709\u6548\u8d1f\u8f7d\u6a21\u62df\u4e3a\u4e00\u4e2a\u5177\u6709\u5355\u4e00\u5c5e\u6027 userId \u7b49\u4e8e 1234 \u7684\u5bf9\u8c61\u3002 \u4ee4\u724c\u9a8c\u8bc1\u88ab\u653e\u5728 try/catch \u5757\u4e2d\uff0c\u56e0\u4e3a\u4ee4\u724c\u9a8c\u8bc1\u65b9\u6cd5\u53ef\u80fd\u629b\u51fa\u9519\u8bef\u3002 \u5982\u679c\u662f\uff0c\u6211\u4eec\u5e94\u8be5\u6355\u83b7\u5b83\u5e76\u4f7f\u7528 error \u53c2\u6570\u8c03\u7528 next \u6765\u6307\u793a\u5957\u63a5\u5b57\u3002\u4e00\u4e2a\u9519\u8bef\u53d1\u751f\u4e86\u3002 \u7b2c\u4e8c\u4e2a\u65b9\u6cd5\u662f bindClientConnect\uff0c\u5b83\u8d1f\u8d23\u5728\u5957\u63a5\u5b57\u670d\u52a1\u5668\u4e2d\u6ce8\u518c\u8fde\u63a5\u4fa6\u542c\u5668\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u670d\u52a1\u5668\uff0c\u5728\u90a3\u91cc\u6211\u4eec\u53ef\u4ee5\u76d1\u542c\u8fde\u63a5\u4e8b\u4ef6\u3002 \u6211\u4eec\u5728 create \u65b9\u6cd5\u4e2d\u5b9a\u4e49\u7684\u4e2d\u95f4\u4ef6\u5c06\u9884\u5148\u6267\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u68c0\u67e5\u5957\u63a5\u5b57\u5bf9\u8c61\u4e0a\u7684 auth \u5c5e\u6027\u3002 \u73b0\u5728\u8bf7\u8bb0\u4f4f:\u6211\u4eec\u4e5f\u5141\u8bb8\u5b58\u5728\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u5957\u63a5\u5b57\uff0c\u56e0\u6b64\u6211\u4eec\u5fc5\u987b\u9996\u5148\u68c0\u67e5 auth \u5c5e\u6027\u662f\u5426\u5b58\u5728\u3002 \u5982\u679c\u662f\uff0c\u6211\u4eec\u4f7f\u7528\u524d\u9762\u5b9a\u4e49\u7684 socketStateService \u65b9\u6cd5\u5c06\u5957\u63a5\u5b57\u6dfb\u52a0\u5230\u7528\u6237\u7684\u5957\u63a5\u5b57\u6c60\u4e2d\u3002 \u6211\u4eec\u8fd8\u4e3a\u65ad\u5f00\u8fde\u63a5\u4e8b\u4ef6\u6ce8\u518c\u4e00\u4e2a\u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u4ee5\u5c06\u5957\u63a5\u5b57\u4ece\u72b6\u6001\u4e2d\u79fb\u9664\u3002 \u4e3a\u4e86\u5b8c\u5168\u786e\u5b9a\u6ca1\u6709\u4efb\u4f55\u5185\u5b58\u6cc4\u6f0f\uff0c\u6211\u4eec\u4f7f\u7528\u5957\u63a5\u5b57\u5bf9\u8c61\u7684 removeAllListeners \u65b9\u6cd5\u6765\u5220\u9664\u65ad\u5f00\u4e8b\u4ef6\u76d1\u542c\u5668\u3002 \u65e0\u8bba\u662f\u5426\u6709 auth \u5c5e\u6027\uff0c\u6211\u4eec\u90fd\u5fc5\u987b\u8c03\u7528\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u63d0\u4f9b\u7684\u56de\u8c03\u51fd\u6570\uff0c\u4ee5\u8ba9 socket.io \u9002\u914d\u5668\u4e5f\u4fdd\u6301\u5bf9\u5957\u63a5\u5b57\u7684\u5f15\u7528\u3002 \u8981\u6ce8\u518c\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u9002\u914d\u5668\uff0c\u6211\u4eec\u5fc5\u987b\u4f7f\u7528 Nest \u5e94\u7528\u7684 useWebSocketAdapter \u65b9\u6cd5: TypeScript //adapter.init.ts export const initAdapters = ( app : INestApplication ) : INestApplication => { const socketStateService = app . get ( SocketStateService ); const redisPropagatorService = app . get ( RedisPropagatorService ); app . useWebSocketAdapter ( new SocketStateAdapter ( app , socketStateService , redisPropagatorService ) ); return app ; }; \u4e0b\u9762\u89e3\u91ca\u4e86 redisPropagatorService\u3002 TypeScript //main.ts async function bootstrap () : Promise < void > { const app = await NestFactory . create ( AppModule ); initAdapters ( app ); await app . listen ( 3000 , () => { console . log ( `Listening on port 3000.` ); }); } bootstrap (); \u521b\u5efa Redis \u4e8b\u4ef6\u4f20\u64ad\u5668 \u968f\u7740 Redis \u96c6\u6210\u548c\u6211\u4eec\u81ea\u5df1\u7684\u5957\u63a5\u5b57\u72b6\u6001\u548c\u9002\u914d\u5668\u5230\u4f4d\uff0c\u6240\u6709\u5269\u4e0b\u8981\u505a\u7684\u5c31\u662f\u521b\u5efa\u6700\u540e\u4e00\u4e2a\u670d\u52a1\uff0c\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u6240\u6709\u5b9e\u4f8b\u4e2d\u5206\u6d3e\u4e8b\u4ef6\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u5fc5\u987b\u518d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\u201cRedisPropagatorModule\u201d\u7684 Nest \u6a21\u5757\u3002 \u5728 RedisPropagatorService \u4e2d\uff0c\u6211\u4eec\u5c06\u76d1\u542c\u6765\u81ea\u5176\u4ed6\u5b9e\u4f8b\u7684\u4efb\u4f55\u4f20\u5165\u7684 Redis \u4e8b\u4ef6\uff0c\u5e76\u5c06\u4e8b\u4ef6\u5206\u53d1\u7ed9\u5b83\u4eec\u3002 \u77a7!\u6211\u4eec\u81ea\u5df1\u7684\u53d1\u5e03/\u8ba2\u9605\u670d\u52a1! \u6709\u4e09\u79cd\u7c7b\u578b\u7684\u4e8b\u4ef6\uff0c\u901a\u8fc7 Redis: \u5411\u6240\u6709\u6253\u5f00\u7684\u8fde\u63a5\u53d1\u51fa\u4e8b\u4ef6 \u53ea\u5411\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u53d1\u51fa\u4e8b\u4ef6 \u53ea\u5411\u6307\u5b9a\u7684\u7528\u6237\u53d1\u51fa\u4e8b\u4ef6 \u5728\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5c06\u5982\u4e0b\u5b9a\u4e49\u5b83\u4eec: TypeScript export const REDIS_SOCKET_EVENT_SEND_NAME = \"REDIS_SOCKET_EVENT_SEND_NAME\" ; export const REDIS_SOCKET_EVENT_EMIT_ALL_NAME = \"REDIS_SOCKET_EVENT_EMIT_ALL_NAME\" ; export const REDIS_SOCKET_EVENT_EMIT_AUTHENTICATED_NAME = \"REDIS_SOCKET_EVENT_EMIT_AUTHENTICATED_NAME\" ; \u73b0\u5728\u8ba9\u6211\u4eec\u521b\u5efa\u670d\u52a1: TypeScript @Injectable () export class RedisPropagatorService { private socketServer : Server ; public constructor ( private readonly socketStateService : SocketStateService , private readonly redisService : RedisService ) {} public propagateEvent ( eventInfo : RedisSocketEventSendDTO ) : boolean { if ( ! eventInfo . userId ) { return false ; } this . redisService . publish ( REDIS_SOCKET_EVENT_SEND_NAME , eventInfo ); return true ; } public emitToAuthenticated ( eventInfo : RedisSocketEventEmitDTO ) : boolean { this . redisService . publish ( REDIS_SOCKET_EVENT_EMIT_AUTHENTICATED_NAME , eventInfo ); return true ; } public emitToAll ( eventInfo : RedisSocketEventEmitDTO ) : boolean { this . redisService . publish ( REDIS_SOCKET_EVENT_EMIT_ALL_NAME , eventInfo ); return true ; } // ... } \u5728\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u524d\u9762\u521b\u5efa\u7684\u4e24\u4e2a\u670d\u52a1\u3002 \u6211\u4eec\u5b9a\u4e49\u4e86\u4e09\u4e2a\u6709\u7528\u7684\u65b9\u6cd5\u3002 \u4ed6\u4eec\u90fd\u505a\u4e00\u4ef6\u7b80\u5355\u7684\u4e8b\u60c5:\u4ed6\u4eec\u53d1\u9001\u9884\u671f\u7684 Redis \u4e8b\u4ef6\u4e0e\u63d0\u4f9b\u7684\u4fe1\u606f\u3002 \u552f\u4e00\u7684\u533a\u522b\u662f\u5728 propagateEvent \u65b9\u6cd5\u4e2d\uff0c\u9664\u975e\u63d0\u4f9b\u4e86 userId\uff0c\u5426\u5219\u6211\u4eec\u4e0d\u60f3\u53d1\u5e03\u4e8b\u4ef6\u3002 \u9664\u6b64\u4e4b\u5916\uff0cemitToAll \u548c emitToAuthenticated \u65b9\u6cd5\u90fd\u53ef\u4ee5\u4ece\u4ee3\u7801\u5e93\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\u8c03\u7528\u3002 \u4f46\u5bf9\u4e8e propagateEvent\uff0c\u60c5\u51b5\u5e76\u975e\u5982\u6b64;\u6bcf\u5f53\u5957\u63a5\u5b57\u670d\u52a1\u5668\u5411\u524d\u7aef\u5ba2\u6237\u7aef\u5206\u6d3e\u4e8b\u4ef6\u65f6\uff0c\u5c06\u8c03\u7528\u6b64\u65b9\u6cd5\u3002 \u4fa6\u542c\u4e8b\u4ef6\u5206\u6d3e \u4e3a\u4e86\u6700\u5927\u9650\u5ea6\u5730\u5229\u7528 Nest \u751f\u6001\u7cfb\u7edf\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u62e6\u622a\u5668\uff0c\u5b83\u5c06\u8bbf\u95ee\u6bcf\u4e2a\u5957\u63a5\u5b57\u4e8b\u4ef6\u54cd\u5e94\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u4e0d\u5fc5\u5728\u6bcf\u4e2a\u7f51\u5173\u4e2d\u624b\u52a8\u8c03\u7528 propagateEvent\u3002 TypeScript //redis-propagator.interceptor.ts @Injectable () export class RedisPropagatorInterceptor < T > implements NestInterceptor < T , WsResponse < T >> { public constructor ( private readonly redisPropagatorService : RedisPropagatorService ) {} public intercept ( context : ExecutionContext , next : CallHandler ) : Observable < WsResponse < T >> { const socket : AuthenticatedSocket = context . switchToWs (). getClient (); return next . handle (). pipe ( tap (( data ) => { this . redisPropagatorService . propagateEvent ({ ... data , socketId : socket.id , userId : socket.auth?.userId , }); }) ); } } \u62e6\u622a\u5668\u53ef\u4ee5\u8ba2\u9605\u7531 next.handle()\u65b9\u6cd5\u8fd4\u56de\u7684\u53ef\u89c2\u5bdf\u5bf9\u8c61\u3002 \u670d\u52a1\u5668\u53d1\u9001\u7684\u6bcf\u4e2a WebSocket \u4e8b\u4ef6\u90fd\u4f1a\u7ecf\u8fc7\u8fd9\u91cc\u3002 \u901a\u8fc7\u4f7f\u7528 RxJS \u7684 tap \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u54cd\u5e94\u505a\u51fa\u53cd\u5e94\u800c\u4e0d\u6539\u53d8\u5b83\u3002 \u5728\u8fd4\u56de\u5230\u524d\u7aef\u5ba2\u6237\u7aef\u4e4b\u524d\uff0c\u6bcf\u4e2a\u5df2\u5206\u6d3e\u4e8b\u4ef6\u90fd\u5728\u6240\u6709\u5b9e\u4f8b\u4e4b\u95f4\u4f20\u64ad\uff0c\u5728\u8fd9\u4e9b\u5b9e\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4e8b\u4ef6\u53d1\u9001\u7ed9\u6240\u6709\u5c5e\u4e8e\u7528\u6237\u7684\u5957\u63a5\u5b57\u3002 \u8bb0\u4f4f\uff0cauth \u5bf9\u8c61\u662f\u53ef\u9009\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528 TypeScript \u7684\u65b0\u53ef\u9009\u94fe\u63a5\u8bed\u6cd5\u6765\u786e\u4fdd\u6ca1\u6709 auth \u5bf9\u8c61\u65f6\u4ee3\u7801\u4e0d\u4f1a\u4e2d\u65ad\u3002 \u5728 propagateEvent \u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u62d2\u7edd\u4e0d\u5e26 userId \u7684\u4e8b\u4ef6\u3002 \u8fd9\u662f\u56e0\u4e3a\u6b64\u7c7b\u4e8b\u4ef6\u5bf9\u8de8\u5b9e\u4f8b\u4f20\u64ad\u6ca1\u6709\u5174\u8da3\u2014\u2014\u8fde\u63a5\u662f\u60df\u4e00\u7684\u3002 \u8bb0\u4f4f\uff0c\u65e0\u8bba\u662f\u5426\u4f7f\u7528\u4e86 propagateEvent \u65b9\u6cd5\uff0c\u4e8b\u4ef6\u90fd\u4f1a\u53d1\u9001\u5230\u524d\u7aef\u5ba2\u6237\u673a\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u6ca1\u6709 auth \u5bf9\u8c61\uff0c\u7f51\u5173\u53d1\u9001\u7684\u4e8b\u4ef6\u4ecd\u7136\u4f1a\u5230\u8fbe\u524d\u7aef\u5ba2\u6237\u7aef\u3002 \u6211\u4eec\u53ea\u662f\u786e\u4fdd\u5b83\u88ab\u53d1\u9001\u5230\u7528\u6237\u53ef\u80fd\u6253\u5f00\u7684\u6240\u6709\u5176\u4ed6\u5957\u63a5\u5b57\u3002 \u6211\u4eec\u5c06\u5728\u672c\u6587\u672b\u5c3e\u7684\u793a\u4f8b\u4e2d\u5c55\u793a\u5982\u4f55\u9644\u52a0\u62e6\u622a\u5668\u3002 \u5728 RedisPropagatorService \u4e2d\u521b\u5efa\u4e8b\u4ef6\u76d1\u542c\u5668 \u9664\u4e86\u5c06\u4e8b\u4ef6\u5206\u6d3e\u5230\u5176\u4ed6\u5b9e\u4f8b\u5916\uff0c\u6211\u4eec\u8fd8\u5e0c\u671b\u4fa6\u542c\u6765\u81ea\u5176\u4ed6\u5b9e\u4f8b\u7684\u4e8b\u4ef6\u3002 TypeScript @Injectable () export class RedisPropagatorService { // ... private socketServer : Server ; public constructor ( private readonly socketStateService : SocketStateService , private readonly redisService : RedisService ) { this . redisService . fromEvent ( REDIS_SOCKET_EVENT_SEND_NAME ) . pipe ( tap ( this . consumeSendEvent )) . subscribe (); this . redisService . fromEvent ( REDIS_SOCKET_EVENT_EMIT_ALL_NAME ) . pipe ( tap ( this . consumeEmitToAllEvent )) . subscribe (); this . redisService . fromEvent ( REDIS_SOCKET_EVENT_EMIT_AUTHENTICATED_NAME ) . pipe ( tap ( this . consumeEmitToAuthenticatedEvent )) . subscribe (); } public injectSocketServer ( server : Server ) : RedisPropagatorService { this . socketServer = server ; return this ; } } \u611f\u8c22 redisService\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8ba2\u9605 Redis \u4e8b\u4ef6\u3002 \u4f7f\u7528 RxJS \u7684 tap \u64cd\u4f5c\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528\u5176\u4e2d\u4e00\u4e2a\u65b9\u6cd5\u6765\u5bf9 observable \u7684\u4e8b\u4ef6\u6d41\u505a\u51fa\u9002\u5f53\u7684\u53cd\u5e94\u3002 \u6539\u53d8 socketStateAdapter \u6211\u4eec\u8fd8\u521b\u5efa\u4e86\u4e00\u4e2a injectSocketServer \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5141\u8bb8\u6211\u4eec\u5c06 WebSocket \u670d\u52a1\u5668\u5b9e\u4f8b\u6ce8\u5165\u5230\u6211\u4eec\u7684\u670d\u52a1\u4e2d\u3002 \u6700\u597d\u901a\u8fc7\u4f9d\u8d56\u9879\u6ce8\u5165\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4f46\u5728\u7f16\u5199\u81ea\u5b9a\u4e49\u9002\u914d\u5668\u65f6\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u7136\u800c\uff0c\u6709\u4e86\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u6211\u4eec\u5fc5\u987b\u8c03\u6574\u9002\u914d\u5668\u7684\u4ee3\u7801: TypeScript export class SocketStateAdapter extends IoAdapter implements WebSocketAdapter { public constructor ( private readonly app : INestApplicationContext , private readonly socketStateService : SocketStateService , private readonly redisPropagatorService : RedisPropagatorService , ) { super ( app ); } public create ( port : number , options : socketio.ServerOptions = {}) : socketio . Server { const server = super . createIOServer ( port , options ); this . redisPropagatorService . injectSocketServer ( server ); // ... } \u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u6765\u83b7\u53d6 redisPropagatorService \u7684\u5b9e\u4f8b\uff0c\u5e76\u4e14\u5728\u521b\u5efa WebSocket \u670d\u52a1\u5668\u671f\u95f4\uff0c\u6211\u4eec\u53ea\u662f\u5c06\u5b83\u6ce8\u5165\u5230\u6211\u4eec\u7684\u5355\u4f8b\u670d\u52a1\u4e2d\u3002 \u89e3\u51b3\u4e86\u8fd9\u4e9b\u95ee\u9898\u4e4b\u540e\uff0c\u8ba9\u6211\u4eec\u56de\u5230 redisPropagatorService\uff0c\u5e76\u5b9a\u4e49\u7528\u4e8e\u76d1\u542c\u4e8b\u4ef6\u7684\u65b9\u6cd5\u3002 consumeSendEvent \u65b9\u6cd5 \u9996\u5148\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a consumeSendEvent \u7684\u65b9\u6cd5\u6765\u76d1\u542c Redis \u4e8b\u4ef6\uff0c\u5b83\u544a\u8bc9\u6211\u4eec\u53d1\u9001\u4e00\u4e2a\u4e8b\u4ef6\u7ed9\u6307\u5b9a\u7684\u7528\u6237\u3002 TypeScript private consumeSendEvent = ( eventInfo : RedisSocketEventSendDTO ) : void => { const { userId , event , data , socketId } = eventInfo ; return this . socketStateService . get ( userId ) . filter (( socket ) => socket . id !== socketId ) . forEach (( socket ) => socket . emit ( event , data )); }; \u5728 eventInfo \u4e2d\uff0c\u6211\u4eec\u4f20\u9012\u4ee5\u4e0b\u4fe1\u606f: TypeScript export class RedisSocketEventSendDTO { public readonly userId : string ; public readonly socketId : string ; public readonly event : string ; public readonly data : unknown ; } \u77e5\u9053\u5c06\u4e8b\u4ef6\u53d1\u9001\u5230\u4f55\u5904(userId)\u3001\u4e8b\u4ef6\u88ab\u79f0\u4e3a\u4ec0\u4e48(event)\u3001\u5b83\u5e94\u8be5\u5305\u542b\u4ec0\u4e48\u6570\u636e(data)\u4ee5\u53ca\u4e8b\u4ef6\u8d77\u6e90\u4e8e\u54ea\u4e2a\u5957\u63a5\u5b57(socketId)\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5b89\u5168\u5730\u5c06\u4e8b\u4ef6\u53d1\u9001\u5230\u73b0\u6709\u7528\u6237\u7684\u5957\u63a5\u5b57\u3002 \u6211\u4eec\u9996\u5148\u83b7\u53d6\u7528\u6237\u7684\u5957\u63a5\u5b57(\u901a\u8fc7\u63d0\u4f9b\u7684 socketId \u8fc7\u6ee4\u5957\u63a5\u5b57\u6765\u786e\u4fdd\u6ca1\u6709\u53d1\u9001\u4e24\u6b21\u76f8\u540c\u7684\u4e8b\u4ef6)\uff0c\u7136\u540e\u4f7f\u7528\u6bcf\u4e2a\u5957\u63a5\u5b57\u7684 emit \u65b9\u6cd5\u6765\u53d1\u9001\u4e8b\u4ef6\u3002 \u5982\u679c\u5f53\u524d\u6ca1\u6709\u4e3a\u7528\u6237\u6253\u5f00\u7684\u5957\u63a5\u5b57(\u5982\u679c\u7528\u6237\u5728\u67d0\u4e2a\u5176\u4ed6\u5b9e\u4f8b\u4e0a\u53ea\u6709\u4e00\u4e2a\u6253\u5f00\u7684\u8fde\u63a5)\uff0c\u5219 socketStateService \u7684 get \u65b9\u6cd5\u5c06\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6570\u7ec4\uff0c\u5e76\u4e14\u4e0d\u4f1a\u6267\u884c\u4ee5\u4e0b\u6240\u6709\u65b9\u6cd5\u3002 \u5728\u62e6\u622a\u5668\u5185\u90e8\uff0c\u6211\u4eec\u4f7f\u7528 propagateEvent \u65b9\u6cd5\u8de8\u6240\u6709\u5b9e\u4f8b\u53d1\u9001\u4e8b\u4ef6\u3002 \u7136\u540e\u5c06\u4e8b\u4ef6\u53d1\u9001\u5230\u524d\u7aef\u5ba2\u6237\u7aef\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u8ddf\u8e2a\u4e8b\u4ef6\u53d1\u751f\u5728\u54ea\u4e2a\u5957\u63a5\u5b57\u4e0a:\u4ee5\u786e\u4fdd\u540c\u4e00\u4e2a\u4e8b\u4ef6\u4e0d\u4f1a\u5728\u540c\u4e00\u4e2a\u5957\u63a5\u5b57\u4e0a\u53d1\u9001\u4e24\u6b21\u3002 consumeEmitToAllEvent TypeScript private consumeEmitToAllEvent = ( eventInfo : RedisSocketEventEmitDTO , ) : void => { this . socketServer . emit ( eventInfo . event , eventInfo . data ); }; \u8be5\u65b9\u6cd5\u975e\u5e38\u7b80\u5355\u2014\u6240\u8981\u505a\u7684\u5c31\u662f\u4f7f\u7528\u5957\u63a5\u5b57\u670d\u52a1\u5668\u7684 emit \u65b9\u6cd5\u5411\u6240\u6709\u5f53\u524d\u6253\u5f00\u7684\u8fde\u63a5\u53d1\u9001\u4e8b\u4ef6\uff0c\u65e0\u8bba\u662f\u5426\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u3002 consumeEmitToAuthenticated TypeScript private consumeEmitToAuthenticatedEvent = ( eventInfo : RedisSocketEventEmitDTO , ) : void => { const { event , data } = eventInfo ; return this . socketStateService . getAll () . forEach (( socket ) => socket . emit ( event , data )); }; \u5728 consumeEmitToAuthenticated \u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 socketStateService \u7684 getAll \u65b9\u6cd5\u3002 \u5728\u83b7\u5f97\u6240\u6709\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u5957\u63a5\u5b57\u4e4b\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u5957\u63a5\u5b57\u7684 emit \u65b9\u6cd5\u6765\u53d1\u9001\u4e8b\u4ef6\u3002 \u5de5\u4f5c\u793a\u4f8b \u6700\u540e\u8981\u505a\u7684\u662f\u521b\u5efa\u4e00\u4e2a\u7f51\u5173\u6765\u76d1\u542c\u4f20\u5165\u7684\u4e8b\u4ef6\u5e76\u68c0\u67e5\u4e00\u5207\u662f\u5426\u6309\u9884\u671f\u5de5\u4f5c\u3002 TypeScript @UseInterceptors ( RedisPropagatorInterceptor ) @WebSocketGateway () export class EventsGateway { @SubscribeMessage ( \"events\" ) public findAll () : Observable < any > { return from ([ 1 , 2 , 3 ]). pipe ( map (( item ) => { return { event : \"events\" , data : item }; }) ); } } \u901a\u8fc7\u4f7f\u7528@UseInterceptors \u88c5\u9970\u5668\uff0c\u6211\u4eec\u6ce8\u518c\u4e86\u8de8\u6240\u6709\u5b9e\u4f8b\u53d1\u51fa\u4e8b\u4ef6\u7684\u62e6\u622a\u5668\u3002 \u5982\u679c\u5e0c\u671b\u4f20\u64ad\u4e8b\u4ef6\uff0c\u5c31\u5fc5\u987b\u5728\u6211\u4eec\u521b\u5efa\u7684\u6bcf\u4e2a\u7f51\u5173\u4e0a\u6ce8\u518c\u62e6\u622a\u5668\u3002 \u73b0\u5728\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u5e26\u6709\u5957\u63a5\u5b57\u7684\u7b80\u5355 HTML \u6587\u4ef6\u3002io-client \u5e93: HTML <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" /> < title > Sockets test </ title > </ head > < body > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.dev.js\" ></ script > < script > window . s = io ( \"http://localhost:3000\" , { query : { token : \"123\" , }, }); s . emit ( \"events\" , { event : \"events\" , data : { test : true } }); s . on ( \"events\" , ( response ) => { console . log ( response ); }); </ script > </ body > </ html > \u63d0\u4f9b\u7684\u4ee4\u724c\u663e\u7136\u662f\u5047\u7684\uff0c\u6211\u4eec\u53ea\u662f\u60f3\u6a21\u62df\u6709\u4e00\u4e2a\u4ee4\u724c\u3002 \u4ece\u5b58\u50a8\u5e93\u4e2d\u83b7\u53d6\u4ee3\u7801\u540e\uff0c\u4e3a\u4e86\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd0\u884c: docker-compose \u8d77\u6765 \u5728\u89c2\u5bdf\u6a21\u5f0f\u4e0b\u7f16\u8bd1\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f \u4e00\u65e6\u670d\u52a1\u5668\u542f\u52a8\u5e76\u8fd0\u884c\uff0c\u6253\u5f00\u6587\u4ef6\u5e76\u68c0\u67e5\u63a7\u5236\u53f0: \u68c0\u67e5 HTML \u6587\u4ef6\u4e2d\u7684\u63a7\u5236\u53f0 \u77e5\u9053\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4ee4\u724c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6253\u5f00\u7b2c\u4e8c\u4e2a\u9009\u9879\u5361\u6765\u68c0\u67e5\u4e24\u4e2a\u9009\u9879\u5361\u662f\u5426\u5e94\u8be5\u63a5\u6536\u76f8\u540c\u7684\u4e8b\u4ef6(\u56e0\u4e3a\u5b83\u4eec\u662f\u6765\u81ea\u4e00\u4e2a\u7528\u6237\u7684\u4e24\u4e2a\u4f1a\u8bdd): \u63a7\u5236\u53f0\u53cd\u6620\u4e24\u4e2a\u4f1a\u8bdd \u901a\u8fc7\u5237\u65b0\u4e00\u4e2a\u9009\u9879\u5361\uff0c\u6211\u4eec\u5c06\u4f7f\u7b2c\u4e8c\u4e2a\u9009\u9879\u5361\u4e5f\u63a5\u6536\u4e8b\u4ef6\u3002 \u6211\u4eec\u7684\u4e8b\u4ef6\u901a\u8fc7 Redis \u5ba2\u6237\u7aef\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u8f6c\u53d1\u5230\u5b83\u4eec\u8d77\u6e90\u7684\u540c\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u4f46\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u53ea\u53d1\u9001\u5230\u5c1a\u672a\u6536\u5230\u4e8b\u4ef6\u7684\u5957\u63a5\u5b57\u3002 \u5b8c\u6574\u7684\u4ee3\u7801\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002 \u603b\u7ed3 \u5f53\u628a WebSockets \u6dfb\u52a0\u5230\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u65f6\uff0c\u6211\u4eec\u9762\u4e34\u7740\u4e00\u4e2a\u51b3\u5b9a:\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u662f\u5426\u53ef\u4f38\u7f29\u3002 \u4e00\u65e6\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u8de8\u591a\u4e2a\u5b9e\u4f8b\u8fdb\u884c\u590d\u5236\uff0c\u90a3\u4e48\u9884\u5148\u51b3\u5b9a\u4f7f\u7528\u53ef\u4f38\u7f29\u7684\u89e3\u51b3\u65b9\u6848\u5c06\u6781\u5927\u5730\u9020\u798f\u4e8e\u6211\u4eec\u3002 \u7531\u4e8e Nest \u7684\u6a21\u5757\u5316\uff0c\u4e00\u65e6\u5b9e\u73b0\uff0c\u89e3\u51b3\u65b9\u6848\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u590d\u5236\u5230\u5176\u4ed6\u9879\u76ee\u3002 \u786e\u4fdd\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u662f\u53ef\u4f38\u7f29\u7684\u662f\u4e00\u9879\u8270\u5de8\u7684\u5de5\u4f5c\u3002 \u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\uff0c\u8fd9\u9700\u8981\u6211\u4eec\u5f7b\u5e95\u6539\u53d8\u601d\u7ef4\u65b9\u5f0f\u3002 \u4f46\u8fd9\u7edd\u5bf9\u503c\u5f97\u3002","title":"\u4f7f\u7528 NestJS \u548c Redis \u6269\u5c55 WebSockets"},{"location":"blog/scalable-websockets-with-nestjs-and-redis/#nest","text":"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u5df2\u7ecf\u8be6\u7ec6\u63cf\u8ff0\u4e86\u5c06\u5728\u8fd9\u91cc\u4f7f\u7528\u7684\u8bbe\u7f6e\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u4f7f\u7528 Nest CLI \u4e3a\u6211\u4eec\u642d\u5efa\u5e94\u7528\u7a0b\u5e8f\uff0cDocker \u4f7f\u7528 Docker-compose \u6dfb\u52a0 Redis \u548c Postgres \u8fdb\u884c\u672c\u5730\u5f00\u53d1\u3002 \u6211\u5efa\u8bae\u60a8\u4e0b\u8f7d\u8fd9\u4e2a\u8d44\u6e90\u5e93\u5e76\u8ddf\u968f\u672c\u6587\uff0c\u56e0\u4e3a\u6211\u5c06\u53ea\u89e3\u91ca\u76f8\u5173\u7684\u4ee3\u7801\uff0c\u800c\u4e0d\u4ecb\u7ecd Nest \u6837\u677f\u6587\u4ef6(\u5982\u6a21\u5757)\u3002","title":"\u8bbe\u7f6e Nest \u5e94\u7528\u7a0b\u5e8f"},{"location":"blog/scalable-websockets-with-nestjs-and-redis/#redis","text":"Redis \u662f\u4e00\u4e2a\u5185\u5b58\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u5b58\u50a8\uff0c\u53ef\u4ee5\u7528\u4f5c\u6570\u636e\u5e93\uff0c\u7f13\u5b58\uff0c\u6216\u53d1\u5e03/\u8ba2\u9605\u5ba2\u6237\u7aef\u3002 \u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u53ea\u662f Redis \u7684\u51e0\u79cd\u53ef\u80fd\u6027\u3002 \u5982\u679c\u4f60\u6709\u5174\u8da3\u4e86\u89e3\u66f4\u591a\uff0c\u5c31\u5728\u8fd9\u91cc\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f60\u5fc5\u987b\u5728\u4f60\u7684\u7535\u8111\u4e0a\u5b89\u88c5 Redis\uff0c\u4f46\u7531\u4e8e\u5e94\u7528\u7a0b\u5e8f\u88ab Docker \u5bb9\u5668\u5316\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u8fd9\u6837\u505a\u3002 Docker \u4e3a\u6211\u4eec\u8d1f\u8d23\u5b89\u88c5\u548c\u542f\u52a8 Redis\u3002 \u4e3a\u4e86\u4ece\u8282\u70b9\u8fd0\u884c\u65f6\u4e0e Redis \u901a\u4fe1\uff0c\u6709\u4e00\u4e9b\u5e93\u53ef\u7528\u3002 \u6211\u4eec\u5c06\u4f7f\u7528 ioredis\uff0c\u56e0\u4e3a\u5b83\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u7279\u6027\uff0c\u540c\u65f6\u4fdd\u6301\u4e86\u5f3a\u5927\u7684\u6027\u80fd\u3002 \u6211\u4eec\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a Nest \u6a21\u5757\u6765\u5c01\u88c5\u4e0e Redis \u76f8\u5173\u7684\u4ee3\u7801\u3002 \u5728 RedisModule \u4e2d\uff0c\u6211\u4eec\u6709 providers \u6570\u7ec4\uff0c\u6211\u4eec\u5728\u5176\u4e2d\u521b\u5efa ioredis \u5ba2\u6237\u7aef\u6765\u4e0e Redis \u901a\u4fe1\u3002 \u6211\u4eec\u8fd8\u5b9e\u73b0\u4e86 RedisService\uff0c\u5b83\u62bd\u8c61\u4e86\u76d1\u542c\u548c\u53d1\u9001 Redis \u6d88\u606f\u3002 \u6b63\u5982\u524d\u9762\u63d0\u5230\u7684\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e24\u4e2a\u5177\u6709\u4e0d\u540c\u76ee\u7684\u7684 Redis \u5ba2\u6237\u7aef:\u4e00\u4e2a\u7528\u4e8e\u8ba2\u9605\uff0c\u4e00\u4e2a\u7528\u4e8e\u53d1\u5e03\u6d88\u606f\u3002 TypeScript //redis.providers.ts import { Provider } from \"@nestjs/common\" ; import Redis from \"ioredis\" ; import { REDIS_PUBLISHER_CLIENT , REDIS_SUBSCRIBER_CLIENT , } from \"./redis.constants\" ; export type RedisClient = Redis . Redis ; export const redisProviders : Provider [] = [ { useFactory : () : RedisClient => { return new Redis ({ host : \"socket-redis\" , port : 6379 , }); }, provide : REDIS_SUBSCRIBER_CLIENT , }, { useFactory : () : RedisClient => { return new Redis ({ host : \"socket-redis\" , port : 6379 , }); }, provide : REDIS_PUBLISHER_CLIENT , }, ]; \u6ce8\u610f\uff0c\u4e3b\u673a\u548c\u7aef\u53e3\u503c\u901a\u5e38\u662f\u901a\u8fc7\u67d0\u79cd\u5f62\u5f0f\u7684\u914d\u7f6e\u6765\u914d\u7f6e\u7684\uff0c\u6bd4\u5982 ConfigService\uff0c\u4f46\u662f\u8fd9\u91cc\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\u7701\u7565\u4e86\u5b83\u3002 \u6709\u4e86\u8fd9\u4e9b\u5728 RedisModule \u4e2d\u6ce8\u518c\u7684\u63d0\u4f9b\u5546\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u5b83\u4eec\u4f5c\u4e3a\u4f9d\u8d56\u6ce8\u5165\u5230\u6211\u4eec\u7684\u670d\u52a1\u4e2d\u3002 \u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a RedisService\u3002 TypeScript //redis.service.ts import { REDIS_PUBLISHER_CLIENT , REDIS_SUBSCRIBER_CLIENT , } from \"./redis.constants\" ; import { RedisClient } from \"./redis.providers\" ; export interface RedisSubscribeMessage { readonly message : string ; readonly channel : string ; } @Injectable () export class RedisService { public constructor ( @Inject ( REDIS_SUBSCRIBER_CLIENT ) private readonly redisSubscriberClient : RedisClient , @Inject ( REDIS_PUBLISHER_CLIENT ) private readonly redisPublisherClient : RedisClient ) {} // ... } \u5728\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u6309\u7167\u9884\u671f\u6ce8\u5165\u4e86\u4e24\u4e2a Redis \u5ba2\u6237\u7aef\u3002 \u7136\u540e\u5b9a\u4e49\u4e24\u4e2a\u65b9\u6cd5:fromEvent \u548c publish\u3002 \u8ba9\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0b fromEvent \u65b9\u6cd5\u3002 TypeScript public fromEvent < T > ( eventName : string ) : Observable < T > { this . redisSubscriberClient . subscribe ( eventName ); return Observable . create (( observer : Observer < RedisSubscribeMessage > ) => this . redisSubscriberClient . on ( 'message' , ( channel , message ) => observer . next ({ channel , message })), ). pipe ( filter (({ channel }) => channel === eventName ), map (({ message }) => JSON . parse ( message )), ); } \u5b83\u544a\u8bc9 Redis \u901a\u8fc7\u4f7f\u7528 redisSubscriberClient \u7684\u8ba2\u9605\u65b9\u6cd5\u6765\u5173\u6ce8\u6240\u63d0\u4f9b\u7684\u4e8b\u4ef6\u3002 \u7136\u540e\u6211\u4eec\u8fd4\u56de\u4e00\u4e2a\u53ef\u89c2\u5bdf\u5bf9\u8c61\uff0c\u5728\u8fd9\u4e2a\u53ef\u89c2\u5bdf\u5bf9\u8c61\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u5728 message \u4e8b\u4ef6\u4e0a\u9644\u52a0\u4e00\u4e2a\u76d1\u542c\u5668\u6765\u76d1\u542c\u4efb\u4f55\u65b0\u6d88\u606f\u3002 \u5f53\u6211\u4eec\u6536\u5230\u4e00\u6761\u65b0\u6d88\u606f\u65f6\uff0c\u6211\u4eec\u9996\u5148\u68c0\u67e5\u901a\u9053(Redis \u4e8b\u4ef6\u540d\u79f0)\u662f\u5426\u7b49\u4e8e\u63d0\u4f9b\u7684 eventName\u3002 \u5982\u679c\u662f\uff0c\u6211\u4eec\u4f7f\u7528 JSON.parse \u5c06 redis \u53d1\u9001\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5bf9\u8c61\u3002 TypeScript public async publish ( channel : string , value : unknown ) : Promise < number > { return new Promise < number > (( resolve , reject ) => { return this . redisPublisherClient . publish ( channel , JSON . stringify ( value ), ( error , reply ) => { if ( error ) { return reject ( error ); } return resolve ( reply ); }); }); } publish \u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u901a\u9053\u548c\u4e00\u4e2a\u672a\u77e5\u503c\uff0c\u5e76\u4f7f\u7528 redisPublisherClient \u6765\u53d1\u5e03\u5b83\u3002 \u7531\u4e8e Redis \u65e0\u6cd5\u4f20\u8f93 JavaScript \u5bf9\u8c61\uff0c\u6211\u4eec\u5047\u8bbe\u63d0\u4f9b\u7684\u503c\u53ef\u4ee5\u7528 JSON.stringify \u5b57\u7b26\u4e32\u5316\u3002 \u901a\u8fc7\u8fd9\u4e24\u79cd\u65b9\u6cd5\uff0c\u6211\u4eec\u6210\u529f\u5730\u5c06\u8fde\u63a5\u5230\u5e95\u5c42 Redis \u5ba2\u6237\u7aef\u7684\u6240\u6709\u9ebb\u70e6\u4ee3\u7801\u62bd\u8c61\u51fa\u6765\uff0c\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u53ef\u9760\u7684 API \u901a\u8fc7\u4f7f\u7528 RedisService \u5728\u5b9e\u4f8b\u4e4b\u95f4\u53d1\u9001\u4e8b\u4ef6\u3002","title":"\u6dfb\u52a0 Redis"},{"location":"blog/scalable-websockets-with-nestjs-and-redis/#_1","text":"\u6211\u4eec\u5df2\u7ecf\u63d0\u5230\uff0c\u5f53\u524d\u6253\u5f00\u7684 WebSocket \u8fde\u63a5\u5fc5\u987b\u4fdd\u6301\u5728\u67d0\u79cd\u72b6\u6001\u3002 \u50cf socket.io \u8fd9\u6837\u7684\u5e93\uff0c\u6211\u4eec\u5c06\u5728\u8fd9\u91cc\u4f7f\u7528\u5b83\uff0c\u4e3a\u6211\u4eec\u505a\u8fd9\u4ef6\u4e8b\u3002 \u5e93\u63d0\u4f9b\u4e86\u6709\u7528\u7684\u65b9\u6cd5\uff0c\u5982 .send \u6216 .emit \uff0c\u8fd9\u4f7f\u5f97\u5b9e\u9645\u4e0a\u5f88\u96be\u4ee5\u6307\u5b9a\u7684\u683c\u5f0f\u83b7\u5f97\u5f53\u524d\u6d3b\u52a8\u7684\u5957\u63a5\u5b57(\u8fde\u63a5) \u4e3a\u4e86\u4f7f\u6211\u4eec\u66f4\u5bb9\u6613\u68c0\u7d22\u548c\u7ba1\u7406\u5957\u63a5\u5b57\uff0c\u6211\u4eec\u5c06\u5b9e\u73b0\u6211\u4eec\u81ea\u5df1\u7684\u5957\u63a5\u5b57\u72b6\u6001\u3002 \u5728\u6211\u4eec\u7684\u72b6\u6001\u5b9e\u73b0\u4e2d\uff0c\u6211\u4eec\u611f\u5174\u8da3\u7684\u662f\u68c0\u7d22\u6307\u5b9a\u7528\u6237\u7684\u5957\u63a5\u5b57\u3002 \u8fd9\u6837\uff0c\u5982\u679c\u5b9e\u4f8b No.3 \u5206\u6d3e\u4e86 ID \u4e3a 1234 \u7684\u7528\u6237\u5e94\u8be5\u63a5\u6536\u7684\u4e8b\u4ef6\uff0c\u6211\u4eec\u5c06\u80fd\u591f\u8f7b\u677e\u5730\u68c0\u67e5\u6240\u6709\u5b9e\u4f8b\u662f\u5426\u6709\u8be5 ID \u7684\u7528\u6237\u7684\u4efb\u4f55\u5957\u63a5\u5b57\u3002 \u6211\u4eec\u5047\u8bbe\u6b63\u5728\u521b\u5efa\u7684\u5e94\u7528\u7a0b\u5e8f\u652f\u6301\u67d0\u79cd\u8eab\u4efd\u9a8c\u8bc1\u3002 \u7a0d\u540e\u5c06\u4ecb\u7ecd\u5982\u4f55\u9a8c\u8bc1\u4f20\u5165\u5957\u63a5\u5b57;\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5047\u8bbe\u6bcf\u4e2a\u5957\u63a5\u5b57\u90fd\u6709\u4e00\u4e2a\u53ef\u7528\u7684 userId \u3002 \u8fd9\u5f88\u7b80\u5355\u3002 \u6211\u4eec\u5c06\u4ee5\u4ee5\u4e0b\u683c\u5f0f\u5b58\u50a8\u5957\u63a5\u5b57: Map<string, Socket[]> . \u8981\u7528\u6587\u5b57\u8868\u793a\uff0c\u952e\u5c06\u662f\u7528\u6237\u7684 id\uff0c\u5bf9\u5e94\u7684\u503c\u5c06\u662f\u7528\u6237\u7684\u6240\u6709\u5957\u63a5\u5b57\u3002 \u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a SocketStateModule \u7684 Nest \u6a21\u5757\uff0c\u4ee5\u53ca\u8d1f\u8d23\u4fdd\u6301\u72b6\u6001\u7684\u670d\u52a1\u3002 TypeScript //socket-state-service.ts @Injectable () export class SocketStateService { private socketState = new Map < string , Socket [] > (); // ... } \u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u79c1\u6709\u5c5e\u6027\uff0c\u8be5\u5c5e\u6027\u5728\u6620\u5c04\u4e2d\u4fdd\u5b58\u72b6\u6001\uff0c\u7136\u540e\u6dfb\u52a0\u4e00\u4e9b\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u66f4\u5bb9\u6613\u5730\u4f7f\u7528\u670d\u52a1\u3002 TypeScript public add ( userId : string , socket : Socket ) : boolean { const existingSockets = this . socketState . get ( userId ) || [] const sockets = [... existingSockets , socket ] this . socketState . set ( userId , sockets ) return true } add \u65b9\u6cd5\u63a5\u53d7' userId '\u548c socket \u4f5c\u4e3a\u53c2\u6570\uff0c\u5b83\u4eec\u8868\u793a\u4e00\u4e2a\u65b0\u6253\u5f00\u7684\u8fde\u63a5\u3002 \u9996\u5148\uff0c\u5b83\u5c06\u7528\u6237\u73b0\u6709\u7684\u5957\u63a5\u5b57(\u6216\u8005\u4e00\u4e2a\u7a7a\u6570\u7ec4\uff0c\u5982\u679c\u6ca1\u6709\u73b0\u6709\u7684\u5957\u63a5\u5b57)\u4fdd\u5b58\u5728 existingSockets \u4e2d\u3002 \u7136\u540e\u5c06\u63d0\u4f9b\u7684\u5957\u63a5\u5b57\u9644\u52a0\u5230\u96c6\u5408\u7684\u672b\u5c3e\uff0c\u5e76\u5c06\u65b0\u7684\u5957\u63a5\u5b57\u96c6\u5408\u4fdd\u5b58\u5728\u72b6\u6001\u4e2d\u3002 TypeScript public remove ( userId : string , socket : Socket ) : boolean { const existingSockets = this . socketState . get ( userId ) if ( ! existingSockets ) { return true } const sockets = existingSockets . filter ( s => s . id !== socket . id ) if ( ! sockets . length ) { this . socketState . delete ( userId ) } else { this . socketState . set ( userId , sockets ) } return true } remove \u65b9\u6cd5\u4ece\u7528\u6237\u5f53\u524d\u5b58\u5728\u7684\u5957\u63a5\u5b57\u4e2d\u8fc7\u6ee4\u6389\u4e0d\u9700\u8981\u7684\u5957\u63a5\u5b57\u3002 \u6bcf\u4e2a\u5957\u63a5\u5b57\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 id\uff0c\u53ef\u4ee5\u7528\u6765\u68c0\u67e5\u662f\u5426\u76f8\u7b49\u3002 \u5982\u679c\u5728\u79fb\u9664\u5957\u63a5\u5b57\u4e4b\u540e\uff0c\u7528\u6237\u7684\u72b6\u6001\u4e2d\u4e0d\u518d\u6709\u4efb\u4f55\u5957\u63a5\u5b57\uff0c\u5219\u8be5\u6570\u7ec4\u5c06\u5b8c\u5168\u4ece\u6620\u5c04\u4e2d\u79fb\u9664\u4ee5\u8282\u7701\u5185\u5b58\u3002 \u5982\u679c\u8fc7\u6ee4\u540e\u6570\u7ec4\u4e2d\u8fd8\u5269\u4e0b\u4e00\u4e9b\u5957\u63a5\u5b57\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u5176\u8bbe\u7f6e\u56de\u72b6\u6001\u3002 TypeScript public get ( userId : string ) : Socket [] { return this . socketState . get ( userId ) || [] } public getAll () : Socket [] { const all = [] this . socketState . forEach ( sockets => all . push ( sockets )) return all } \u8fd8\u6709\u53e6\u5916\u4e24\u4e2a\u65b9\u6cd5:get \u548c getAll\u3002 \u5728 get \u65b9\u6cd5\u4e2d\uff0c\u8fd4\u56de\u5c5e\u4e8e\u7ed9\u5b9a\u7528\u6237\u7684\u6240\u6709\u5957\u63a5\u5b57(\u5982\u679c\u6ca1\u6709\uff0c\u5219\u8fd4\u56de\u7a7a\u6570\u7ec4)\u3002 \u5728 getAll \u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Map \u7684 forEach \u65b9\u6cd5\uff0c\u83b7\u53d6\u6bcf\u4e2a\u7528\u6237\u7684\u5957\u63a5\u5b57\uff0c\u5e76\u5c06\u5b83\u4eec\u5408\u5e76\u5230\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002","title":"\u521b\u5efa\u5957\u63a5\u5b57\u7684\u72b6\u6001"},{"location":"blog/scalable-websockets-with-nestjs-and-redis/#_2","text":"Nest \u6700\u597d\u7684\u7279\u6027\u4e4b\u4e00\u662f\uff0c\u5b83\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u5904\u7406\u5e95\u5c42\u5e93\u2014\u2014\u6bd4\u5982\u901a\u8fc7\u5b9a\u4e49\u826f\u597d\u3001\u53ef\u9760\u7684\u62bd\u8c61\u6765\u5904\u7406\u670d\u52a1\u5668\u7684 Express \u548c Fastify \u6216\u8005 socket.io \u548c ws \u7528\u4e8e\u5957\u63a5\u5b57\u3002 \u4ece\u5f00\u53d1\u4eba\u5458\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5e93\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4ea4\u6362\uff0c\u800c\u65e0\u9700\u5bf9\u4ee3\u7801\u5e93\u8fdb\u884c\u4efb\u4f55\u91cd\u5927\u66f4\u6539\u3002 \u4e3a\u4e86\u8ba9\u5b83\u5de5\u4f5c\uff0cNest \u6709\u81ea\u5df1\u7684\u4e00\u7ec4\u9002\u914d\u5668\uff0c\u5c06\u5e93\u7684 API\u201c\u5339\u914d\u201d\u5230 Nest \u6240\u671f\u671b\u7684 API\u3002 \u8fd9\u4f7f\u5f97 Nest \u5f88\u5bb9\u6613\u652f\u6301\u8bb8\u591a\u5177\u6709\u4e0d\u540c api \u7684\u5e93\u3002 \u56e0\u4e3a\u6211\u4eec\u60f3\u8981\u8ddf\u8e2a\u5f53\u524d\u6253\u5f00\u7684\u5957\u63a5\u5b57\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u6269\u5c55 socket.io \u7684\u9002\u914d\u5668\u3002 \u8be5\u9002\u914d\u5668\u53ef\u4ee5\u4f5c\u4e3a@nestjs/platform-socket.io \u5305\u7684\u4e00\u90e8\u5206\u4f7f\u7528\u3002 \u901a\u8fc7\u6269\u5c55\u73b0\u6709\u7684\u9002\u914d\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u53ea\u8986\u76d6\u6211\u4eec\u9700\u8981\u7684\u65b9\u6cd5\uff0c\u800c\u5c06\u6240\u6709\u5176\u4ed6\u4e8b\u60c5\u7559\u7ed9\u9002\u914d\u5668\u3002 \u5728 Nest \u7684\u6587\u6863\u4e2d\uff0c\u8be6\u7ec6\u89e3\u91ca\u4e86\u81ea\u5b9a\u4e49\u9002\u914d\u5668\u5982\u4f55\u5de5\u4f5c\u4ee5\u53ca\u5b83\u4eec\u4e3a\u4f55\u5982\u6b64\u5f3a\u5927\u3002 \u6211\u5efa\u8bae\u5728\u8fdb\u4e00\u6b65\u9605\u8bfb\u4e4b\u524d\u5148\u9605\u8bfb\u5b83\u3002 TypeScript export class SocketStateAdapter extends IoAdapter implements WebSocketAdapter { public constructor ( private readonly app : INestApplicationContext , private readonly socketStateService : SocketStateService ) { super ( app ); } private server : socketio.Server ; public create ( port : number , options : socketio.ServerOptions = {} ) : socketio . Server { this . server = super . createIOServer ( port , options ); this . server . use ( async ( socket : AuthenticatedSocket , next ) => { const token = socket . handshake . query ? . token || socket . handshake . headers ? . authorization ; if ( ! token ) { socket . auth = null ; // not authenticated connection is still valid // thus no error return next (); } try { // fake auth socket . auth = { userId : \"1234\" , }; return next (); } catch ( e ) { return next ( e ); } }); return this . server ; } public bindClientConnect ( server : socketio.Server , callback : Function ) : void { server . on ( \"connection\" , ( socket : AuthenticatedSocket ) => { if ( socket . auth ) { this . socketStateService . add ( socket . auth . userId , socket ); socket . on ( \"disconnect\" , () => { this . socketStateService . remove ( socket . auth . userId , socket ); }); } callback ( socket ); }); } } \u6211\u4eec\u7684\u7c7b\u6269\u5c55\u4e86 IoAdapter \u5e76\u8986\u76d6\u4e86\u4e24\u4e2a\u65b9\u6cd5:create \u548c bindClientConnect\u3002 \u6b63\u5982\u5b83\u7684\u540d\u5b57\u6240\u793a\uff0ccreate \u65b9\u6cd5\u8d1f\u8d23\u521b\u5efa\u4e00\u4e2a WebSocket \u670d\u52a1\u5668\u7684\u5b9e\u4f8b\u3002 \u6211\u4eec\u4f7f\u7528 IoAdapter \u7684 createIOServer \u65b9\u6cd5\u5c3d\u53ef\u80fd\u5730\u91cd\u7528\u4ee3\u7801\uff0c\u5e76\u786e\u4fdd\u4e00\u5207\u90fd\u5c3d\u53ef\u80fd\u5730\u63a5\u8fd1\u539f\u59cb\u9002\u914d\u5668\u3002 \u7136\u540e\u6211\u4eec\u8bbe\u7f6e\u4e00\u4e2a\u7528\u4e8e\u8eab\u4efd\u9a8c\u8bc1\u7684\u4e2d\u95f4\u4ef6\u2014\u2014\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u662f\u4e00\u4e2a\u5047\u4e2d\u95f4\u4ef6\u3002 \u6211\u4eec\u5047\u8bbe\u8eab\u4efd\u9a8c\u8bc1\u662f\u57fa\u4e8e\u4ee4\u724c\u7684\u3002 \u5728\u4e2d\u95f4\u4ef6\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u68c0\u67e5\u662f\u5426\u5728\u6211\u4eec\u9884\u671f\u7684\u4f4d\u7f6e\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4ee4\u724c:\u6388\u6743\u5934\u6216\u67e5\u8be2\u7684\u4ee4\u724c\u53c2\u6570\u3002 \u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u4ee4\u724c\uff0c\u5219\u8bbe\u7f6e socket.auth \u4e3a null\uff0c\u8c03\u7528\u4e0b\u4e00\u4e2a\u8fdb\u884c\u4e0e\u5176\u4ed6\u4e2d\u95f4\u4ef6\u7684\u6267\u884c\u3002 \u5982\u679c\u6709\u4ee4\u724c\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u4f7f\u7528 AuthService \u68c0\u67e5\u5e76\u9a8c\u8bc1\u5b83\uff0c\u4f46\u8fd9\u8d85\u51fa\u4e86\u672c\u6587\u7684\u8303\u56f4\u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u5c06\u628a\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u4ee4\u724c\u7684\u6709\u6548\u8d1f\u8f7d\u6a21\u62df\u4e3a\u4e00\u4e2a\u5177\u6709\u5355\u4e00\u5c5e\u6027 userId \u7b49\u4e8e 1234 \u7684\u5bf9\u8c61\u3002 \u4ee4\u724c\u9a8c\u8bc1\u88ab\u653e\u5728 try/catch \u5757\u4e2d\uff0c\u56e0\u4e3a\u4ee4\u724c\u9a8c\u8bc1\u65b9\u6cd5\u53ef\u80fd\u629b\u51fa\u9519\u8bef\u3002 \u5982\u679c\u662f\uff0c\u6211\u4eec\u5e94\u8be5\u6355\u83b7\u5b83\u5e76\u4f7f\u7528 error \u53c2\u6570\u8c03\u7528 next \u6765\u6307\u793a\u5957\u63a5\u5b57\u3002\u4e00\u4e2a\u9519\u8bef\u53d1\u751f\u4e86\u3002 \u7b2c\u4e8c\u4e2a\u65b9\u6cd5\u662f bindClientConnect\uff0c\u5b83\u8d1f\u8d23\u5728\u5957\u63a5\u5b57\u670d\u52a1\u5668\u4e2d\u6ce8\u518c\u8fde\u63a5\u4fa6\u542c\u5668\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u670d\u52a1\u5668\uff0c\u5728\u90a3\u91cc\u6211\u4eec\u53ef\u4ee5\u76d1\u542c\u8fde\u63a5\u4e8b\u4ef6\u3002 \u6211\u4eec\u5728 create \u65b9\u6cd5\u4e2d\u5b9a\u4e49\u7684\u4e2d\u95f4\u4ef6\u5c06\u9884\u5148\u6267\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u68c0\u67e5\u5957\u63a5\u5b57\u5bf9\u8c61\u4e0a\u7684 auth \u5c5e\u6027\u3002 \u73b0\u5728\u8bf7\u8bb0\u4f4f:\u6211\u4eec\u4e5f\u5141\u8bb8\u5b58\u5728\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u5957\u63a5\u5b57\uff0c\u56e0\u6b64\u6211\u4eec\u5fc5\u987b\u9996\u5148\u68c0\u67e5 auth \u5c5e\u6027\u662f\u5426\u5b58\u5728\u3002 \u5982\u679c\u662f\uff0c\u6211\u4eec\u4f7f\u7528\u524d\u9762\u5b9a\u4e49\u7684 socketStateService \u65b9\u6cd5\u5c06\u5957\u63a5\u5b57\u6dfb\u52a0\u5230\u7528\u6237\u7684\u5957\u63a5\u5b57\u6c60\u4e2d\u3002 \u6211\u4eec\u8fd8\u4e3a\u65ad\u5f00\u8fde\u63a5\u4e8b\u4ef6\u6ce8\u518c\u4e00\u4e2a\u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u4ee5\u5c06\u5957\u63a5\u5b57\u4ece\u72b6\u6001\u4e2d\u79fb\u9664\u3002 \u4e3a\u4e86\u5b8c\u5168\u786e\u5b9a\u6ca1\u6709\u4efb\u4f55\u5185\u5b58\u6cc4\u6f0f\uff0c\u6211\u4eec\u4f7f\u7528\u5957\u63a5\u5b57\u5bf9\u8c61\u7684 removeAllListeners \u65b9\u6cd5\u6765\u5220\u9664\u65ad\u5f00\u4e8b\u4ef6\u76d1\u542c\u5668\u3002 \u65e0\u8bba\u662f\u5426\u6709 auth \u5c5e\u6027\uff0c\u6211\u4eec\u90fd\u5fc5\u987b\u8c03\u7528\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u63d0\u4f9b\u7684\u56de\u8c03\u51fd\u6570\uff0c\u4ee5\u8ba9 socket.io \u9002\u914d\u5668\u4e5f\u4fdd\u6301\u5bf9\u5957\u63a5\u5b57\u7684\u5f15\u7528\u3002 \u8981\u6ce8\u518c\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u9002\u914d\u5668\uff0c\u6211\u4eec\u5fc5\u987b\u4f7f\u7528 Nest \u5e94\u7528\u7684 useWebSocketAdapter \u65b9\u6cd5: TypeScript //adapter.init.ts export const initAdapters = ( app : INestApplication ) : INestApplication => { const socketStateService = app . get ( SocketStateService ); const redisPropagatorService = app . get ( RedisPropagatorService ); app . useWebSocketAdapter ( new SocketStateAdapter ( app , socketStateService , redisPropagatorService ) ); return app ; }; \u4e0b\u9762\u89e3\u91ca\u4e86 redisPropagatorService\u3002 TypeScript //main.ts async function bootstrap () : Promise < void > { const app = await NestFactory . create ( AppModule ); initAdapters ( app ); await app . listen ( 3000 , () => { console . log ( `Listening on port 3000.` ); }); } bootstrap ();","title":"\u521b\u5efa\u4e00\u4e2a\u9002\u914d\u5668"},{"location":"blog/scalable-websockets-with-nestjs-and-redis/#redis_1","text":"\u968f\u7740 Redis \u96c6\u6210\u548c\u6211\u4eec\u81ea\u5df1\u7684\u5957\u63a5\u5b57\u72b6\u6001\u548c\u9002\u914d\u5668\u5230\u4f4d\uff0c\u6240\u6709\u5269\u4e0b\u8981\u505a\u7684\u5c31\u662f\u521b\u5efa\u6700\u540e\u4e00\u4e2a\u670d\u52a1\uff0c\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u6240\u6709\u5b9e\u4f8b\u4e2d\u5206\u6d3e\u4e8b\u4ef6\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u5fc5\u987b\u518d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\u201cRedisPropagatorModule\u201d\u7684 Nest \u6a21\u5757\u3002 \u5728 RedisPropagatorService \u4e2d\uff0c\u6211\u4eec\u5c06\u76d1\u542c\u6765\u81ea\u5176\u4ed6\u5b9e\u4f8b\u7684\u4efb\u4f55\u4f20\u5165\u7684 Redis \u4e8b\u4ef6\uff0c\u5e76\u5c06\u4e8b\u4ef6\u5206\u53d1\u7ed9\u5b83\u4eec\u3002 \u77a7!\u6211\u4eec\u81ea\u5df1\u7684\u53d1\u5e03/\u8ba2\u9605\u670d\u52a1! \u6709\u4e09\u79cd\u7c7b\u578b\u7684\u4e8b\u4ef6\uff0c\u901a\u8fc7 Redis: \u5411\u6240\u6709\u6253\u5f00\u7684\u8fde\u63a5\u53d1\u51fa\u4e8b\u4ef6 \u53ea\u5411\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u53d1\u51fa\u4e8b\u4ef6 \u53ea\u5411\u6307\u5b9a\u7684\u7528\u6237\u53d1\u51fa\u4e8b\u4ef6 \u5728\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5c06\u5982\u4e0b\u5b9a\u4e49\u5b83\u4eec: TypeScript export const REDIS_SOCKET_EVENT_SEND_NAME = \"REDIS_SOCKET_EVENT_SEND_NAME\" ; export const REDIS_SOCKET_EVENT_EMIT_ALL_NAME = \"REDIS_SOCKET_EVENT_EMIT_ALL_NAME\" ; export const REDIS_SOCKET_EVENT_EMIT_AUTHENTICATED_NAME = \"REDIS_SOCKET_EVENT_EMIT_AUTHENTICATED_NAME\" ; \u73b0\u5728\u8ba9\u6211\u4eec\u521b\u5efa\u670d\u52a1: TypeScript @Injectable () export class RedisPropagatorService { private socketServer : Server ; public constructor ( private readonly socketStateService : SocketStateService , private readonly redisService : RedisService ) {} public propagateEvent ( eventInfo : RedisSocketEventSendDTO ) : boolean { if ( ! eventInfo . userId ) { return false ; } this . redisService . publish ( REDIS_SOCKET_EVENT_SEND_NAME , eventInfo ); return true ; } public emitToAuthenticated ( eventInfo : RedisSocketEventEmitDTO ) : boolean { this . redisService . publish ( REDIS_SOCKET_EVENT_EMIT_AUTHENTICATED_NAME , eventInfo ); return true ; } public emitToAll ( eventInfo : RedisSocketEventEmitDTO ) : boolean { this . redisService . publish ( REDIS_SOCKET_EVENT_EMIT_ALL_NAME , eventInfo ); return true ; } // ... } \u5728\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u524d\u9762\u521b\u5efa\u7684\u4e24\u4e2a\u670d\u52a1\u3002 \u6211\u4eec\u5b9a\u4e49\u4e86\u4e09\u4e2a\u6709\u7528\u7684\u65b9\u6cd5\u3002 \u4ed6\u4eec\u90fd\u505a\u4e00\u4ef6\u7b80\u5355\u7684\u4e8b\u60c5:\u4ed6\u4eec\u53d1\u9001\u9884\u671f\u7684 Redis \u4e8b\u4ef6\u4e0e\u63d0\u4f9b\u7684\u4fe1\u606f\u3002 \u552f\u4e00\u7684\u533a\u522b\u662f\u5728 propagateEvent \u65b9\u6cd5\u4e2d\uff0c\u9664\u975e\u63d0\u4f9b\u4e86 userId\uff0c\u5426\u5219\u6211\u4eec\u4e0d\u60f3\u53d1\u5e03\u4e8b\u4ef6\u3002 \u9664\u6b64\u4e4b\u5916\uff0cemitToAll \u548c emitToAuthenticated \u65b9\u6cd5\u90fd\u53ef\u4ee5\u4ece\u4ee3\u7801\u5e93\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\u8c03\u7528\u3002 \u4f46\u5bf9\u4e8e propagateEvent\uff0c\u60c5\u51b5\u5e76\u975e\u5982\u6b64;\u6bcf\u5f53\u5957\u63a5\u5b57\u670d\u52a1\u5668\u5411\u524d\u7aef\u5ba2\u6237\u7aef\u5206\u6d3e\u4e8b\u4ef6\u65f6\uff0c\u5c06\u8c03\u7528\u6b64\u65b9\u6cd5\u3002","title":"\u521b\u5efa Redis \u4e8b\u4ef6\u4f20\u64ad\u5668"},{"location":"blog/scalable-websockets-with-nestjs-and-redis/#_3","text":"\u4e3a\u4e86\u6700\u5927\u9650\u5ea6\u5730\u5229\u7528 Nest \u751f\u6001\u7cfb\u7edf\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u62e6\u622a\u5668\uff0c\u5b83\u5c06\u8bbf\u95ee\u6bcf\u4e2a\u5957\u63a5\u5b57\u4e8b\u4ef6\u54cd\u5e94\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u4e0d\u5fc5\u5728\u6bcf\u4e2a\u7f51\u5173\u4e2d\u624b\u52a8\u8c03\u7528 propagateEvent\u3002 TypeScript //redis-propagator.interceptor.ts @Injectable () export class RedisPropagatorInterceptor < T > implements NestInterceptor < T , WsResponse < T >> { public constructor ( private readonly redisPropagatorService : RedisPropagatorService ) {} public intercept ( context : ExecutionContext , next : CallHandler ) : Observable < WsResponse < T >> { const socket : AuthenticatedSocket = context . switchToWs (). getClient (); return next . handle (). pipe ( tap (( data ) => { this . redisPropagatorService . propagateEvent ({ ... data , socketId : socket.id , userId : socket.auth?.userId , }); }) ); } } \u62e6\u622a\u5668\u53ef\u4ee5\u8ba2\u9605\u7531 next.handle()\u65b9\u6cd5\u8fd4\u56de\u7684\u53ef\u89c2\u5bdf\u5bf9\u8c61\u3002 \u670d\u52a1\u5668\u53d1\u9001\u7684\u6bcf\u4e2a WebSocket \u4e8b\u4ef6\u90fd\u4f1a\u7ecf\u8fc7\u8fd9\u91cc\u3002 \u901a\u8fc7\u4f7f\u7528 RxJS \u7684 tap \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u54cd\u5e94\u505a\u51fa\u53cd\u5e94\u800c\u4e0d\u6539\u53d8\u5b83\u3002 \u5728\u8fd4\u56de\u5230\u524d\u7aef\u5ba2\u6237\u7aef\u4e4b\u524d\uff0c\u6bcf\u4e2a\u5df2\u5206\u6d3e\u4e8b\u4ef6\u90fd\u5728\u6240\u6709\u5b9e\u4f8b\u4e4b\u95f4\u4f20\u64ad\uff0c\u5728\u8fd9\u4e9b\u5b9e\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4e8b\u4ef6\u53d1\u9001\u7ed9\u6240\u6709\u5c5e\u4e8e\u7528\u6237\u7684\u5957\u63a5\u5b57\u3002 \u8bb0\u4f4f\uff0cauth \u5bf9\u8c61\u662f\u53ef\u9009\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528 TypeScript \u7684\u65b0\u53ef\u9009\u94fe\u63a5\u8bed\u6cd5\u6765\u786e\u4fdd\u6ca1\u6709 auth \u5bf9\u8c61\u65f6\u4ee3\u7801\u4e0d\u4f1a\u4e2d\u65ad\u3002 \u5728 propagateEvent \u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u62d2\u7edd\u4e0d\u5e26 userId \u7684\u4e8b\u4ef6\u3002 \u8fd9\u662f\u56e0\u4e3a\u6b64\u7c7b\u4e8b\u4ef6\u5bf9\u8de8\u5b9e\u4f8b\u4f20\u64ad\u6ca1\u6709\u5174\u8da3\u2014\u2014\u8fde\u63a5\u662f\u60df\u4e00\u7684\u3002 \u8bb0\u4f4f\uff0c\u65e0\u8bba\u662f\u5426\u4f7f\u7528\u4e86 propagateEvent \u65b9\u6cd5\uff0c\u4e8b\u4ef6\u90fd\u4f1a\u53d1\u9001\u5230\u524d\u7aef\u5ba2\u6237\u673a\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u6ca1\u6709 auth \u5bf9\u8c61\uff0c\u7f51\u5173\u53d1\u9001\u7684\u4e8b\u4ef6\u4ecd\u7136\u4f1a\u5230\u8fbe\u524d\u7aef\u5ba2\u6237\u7aef\u3002 \u6211\u4eec\u53ea\u662f\u786e\u4fdd\u5b83\u88ab\u53d1\u9001\u5230\u7528\u6237\u53ef\u80fd\u6253\u5f00\u7684\u6240\u6709\u5176\u4ed6\u5957\u63a5\u5b57\u3002 \u6211\u4eec\u5c06\u5728\u672c\u6587\u672b\u5c3e\u7684\u793a\u4f8b\u4e2d\u5c55\u793a\u5982\u4f55\u9644\u52a0\u62e6\u622a\u5668\u3002","title":"\u4fa6\u542c\u4e8b\u4ef6\u5206\u6d3e"},{"location":"blog/scalable-websockets-with-nestjs-and-redis/#redispropagatorservice","text":"\u9664\u4e86\u5c06\u4e8b\u4ef6\u5206\u6d3e\u5230\u5176\u4ed6\u5b9e\u4f8b\u5916\uff0c\u6211\u4eec\u8fd8\u5e0c\u671b\u4fa6\u542c\u6765\u81ea\u5176\u4ed6\u5b9e\u4f8b\u7684\u4e8b\u4ef6\u3002 TypeScript @Injectable () export class RedisPropagatorService { // ... private socketServer : Server ; public constructor ( private readonly socketStateService : SocketStateService , private readonly redisService : RedisService ) { this . redisService . fromEvent ( REDIS_SOCKET_EVENT_SEND_NAME ) . pipe ( tap ( this . consumeSendEvent )) . subscribe (); this . redisService . fromEvent ( REDIS_SOCKET_EVENT_EMIT_ALL_NAME ) . pipe ( tap ( this . consumeEmitToAllEvent )) . subscribe (); this . redisService . fromEvent ( REDIS_SOCKET_EVENT_EMIT_AUTHENTICATED_NAME ) . pipe ( tap ( this . consumeEmitToAuthenticatedEvent )) . subscribe (); } public injectSocketServer ( server : Server ) : RedisPropagatorService { this . socketServer = server ; return this ; } } \u611f\u8c22 redisService\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8ba2\u9605 Redis \u4e8b\u4ef6\u3002 \u4f7f\u7528 RxJS \u7684 tap \u64cd\u4f5c\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528\u5176\u4e2d\u4e00\u4e2a\u65b9\u6cd5\u6765\u5bf9 observable \u7684\u4e8b\u4ef6\u6d41\u505a\u51fa\u9002\u5f53\u7684\u53cd\u5e94\u3002","title":"\u5728 RedisPropagatorService \u4e2d\u521b\u5efa\u4e8b\u4ef6\u76d1\u542c\u5668"},{"location":"blog/scalable-websockets-with-nestjs-and-redis/#socketstateadapter","text":"\u6211\u4eec\u8fd8\u521b\u5efa\u4e86\u4e00\u4e2a injectSocketServer \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5141\u8bb8\u6211\u4eec\u5c06 WebSocket \u670d\u52a1\u5668\u5b9e\u4f8b\u6ce8\u5165\u5230\u6211\u4eec\u7684\u670d\u52a1\u4e2d\u3002 \u6700\u597d\u901a\u8fc7\u4f9d\u8d56\u9879\u6ce8\u5165\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4f46\u5728\u7f16\u5199\u81ea\u5b9a\u4e49\u9002\u914d\u5668\u65f6\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u7136\u800c\uff0c\u6709\u4e86\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u6211\u4eec\u5fc5\u987b\u8c03\u6574\u9002\u914d\u5668\u7684\u4ee3\u7801: TypeScript export class SocketStateAdapter extends IoAdapter implements WebSocketAdapter { public constructor ( private readonly app : INestApplicationContext , private readonly socketStateService : SocketStateService , private readonly redisPropagatorService : RedisPropagatorService , ) { super ( app ); } public create ( port : number , options : socketio.ServerOptions = {}) : socketio . Server { const server = super . createIOServer ( port , options ); this . redisPropagatorService . injectSocketServer ( server ); // ... } \u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u6765\u83b7\u53d6 redisPropagatorService \u7684\u5b9e\u4f8b\uff0c\u5e76\u4e14\u5728\u521b\u5efa WebSocket \u670d\u52a1\u5668\u671f\u95f4\uff0c\u6211\u4eec\u53ea\u662f\u5c06\u5b83\u6ce8\u5165\u5230\u6211\u4eec\u7684\u5355\u4f8b\u670d\u52a1\u4e2d\u3002 \u89e3\u51b3\u4e86\u8fd9\u4e9b\u95ee\u9898\u4e4b\u540e\uff0c\u8ba9\u6211\u4eec\u56de\u5230 redisPropagatorService\uff0c\u5e76\u5b9a\u4e49\u7528\u4e8e\u76d1\u542c\u4e8b\u4ef6\u7684\u65b9\u6cd5\u3002","title":"\u6539\u53d8 socketStateAdapter"},{"location":"blog/scalable-websockets-with-nestjs-and-redis/#consumesendevent","text":"\u9996\u5148\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a consumeSendEvent \u7684\u65b9\u6cd5\u6765\u76d1\u542c Redis \u4e8b\u4ef6\uff0c\u5b83\u544a\u8bc9\u6211\u4eec\u53d1\u9001\u4e00\u4e2a\u4e8b\u4ef6\u7ed9\u6307\u5b9a\u7684\u7528\u6237\u3002 TypeScript private consumeSendEvent = ( eventInfo : RedisSocketEventSendDTO ) : void => { const { userId , event , data , socketId } = eventInfo ; return this . socketStateService . get ( userId ) . filter (( socket ) => socket . id !== socketId ) . forEach (( socket ) => socket . emit ( event , data )); }; \u5728 eventInfo \u4e2d\uff0c\u6211\u4eec\u4f20\u9012\u4ee5\u4e0b\u4fe1\u606f: TypeScript export class RedisSocketEventSendDTO { public readonly userId : string ; public readonly socketId : string ; public readonly event : string ; public readonly data : unknown ; } \u77e5\u9053\u5c06\u4e8b\u4ef6\u53d1\u9001\u5230\u4f55\u5904(userId)\u3001\u4e8b\u4ef6\u88ab\u79f0\u4e3a\u4ec0\u4e48(event)\u3001\u5b83\u5e94\u8be5\u5305\u542b\u4ec0\u4e48\u6570\u636e(data)\u4ee5\u53ca\u4e8b\u4ef6\u8d77\u6e90\u4e8e\u54ea\u4e2a\u5957\u63a5\u5b57(socketId)\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5b89\u5168\u5730\u5c06\u4e8b\u4ef6\u53d1\u9001\u5230\u73b0\u6709\u7528\u6237\u7684\u5957\u63a5\u5b57\u3002 \u6211\u4eec\u9996\u5148\u83b7\u53d6\u7528\u6237\u7684\u5957\u63a5\u5b57(\u901a\u8fc7\u63d0\u4f9b\u7684 socketId \u8fc7\u6ee4\u5957\u63a5\u5b57\u6765\u786e\u4fdd\u6ca1\u6709\u53d1\u9001\u4e24\u6b21\u76f8\u540c\u7684\u4e8b\u4ef6)\uff0c\u7136\u540e\u4f7f\u7528\u6bcf\u4e2a\u5957\u63a5\u5b57\u7684 emit \u65b9\u6cd5\u6765\u53d1\u9001\u4e8b\u4ef6\u3002 \u5982\u679c\u5f53\u524d\u6ca1\u6709\u4e3a\u7528\u6237\u6253\u5f00\u7684\u5957\u63a5\u5b57(\u5982\u679c\u7528\u6237\u5728\u67d0\u4e2a\u5176\u4ed6\u5b9e\u4f8b\u4e0a\u53ea\u6709\u4e00\u4e2a\u6253\u5f00\u7684\u8fde\u63a5)\uff0c\u5219 socketStateService \u7684 get \u65b9\u6cd5\u5c06\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6570\u7ec4\uff0c\u5e76\u4e14\u4e0d\u4f1a\u6267\u884c\u4ee5\u4e0b\u6240\u6709\u65b9\u6cd5\u3002 \u5728\u62e6\u622a\u5668\u5185\u90e8\uff0c\u6211\u4eec\u4f7f\u7528 propagateEvent \u65b9\u6cd5\u8de8\u6240\u6709\u5b9e\u4f8b\u53d1\u9001\u4e8b\u4ef6\u3002 \u7136\u540e\u5c06\u4e8b\u4ef6\u53d1\u9001\u5230\u524d\u7aef\u5ba2\u6237\u7aef\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u8ddf\u8e2a\u4e8b\u4ef6\u53d1\u751f\u5728\u54ea\u4e2a\u5957\u63a5\u5b57\u4e0a:\u4ee5\u786e\u4fdd\u540c\u4e00\u4e2a\u4e8b\u4ef6\u4e0d\u4f1a\u5728\u540c\u4e00\u4e2a\u5957\u63a5\u5b57\u4e0a\u53d1\u9001\u4e24\u6b21\u3002","title":"consumeSendEvent \u65b9\u6cd5"},{"location":"blog/scalable-websockets-with-nestjs-and-redis/#consumeemittoallevent","text":"TypeScript private consumeEmitToAllEvent = ( eventInfo : RedisSocketEventEmitDTO , ) : void => { this . socketServer . emit ( eventInfo . event , eventInfo . data ); }; \u8be5\u65b9\u6cd5\u975e\u5e38\u7b80\u5355\u2014\u6240\u8981\u505a\u7684\u5c31\u662f\u4f7f\u7528\u5957\u63a5\u5b57\u670d\u52a1\u5668\u7684 emit \u65b9\u6cd5\u5411\u6240\u6709\u5f53\u524d\u6253\u5f00\u7684\u8fde\u63a5\u53d1\u9001\u4e8b\u4ef6\uff0c\u65e0\u8bba\u662f\u5426\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u3002","title":"consumeEmitToAllEvent"},{"location":"blog/scalable-websockets-with-nestjs-and-redis/#consumeemittoauthenticated","text":"TypeScript private consumeEmitToAuthenticatedEvent = ( eventInfo : RedisSocketEventEmitDTO , ) : void => { const { event , data } = eventInfo ; return this . socketStateService . getAll () . forEach (( socket ) => socket . emit ( event , data )); }; \u5728 consumeEmitToAuthenticated \u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 socketStateService \u7684 getAll \u65b9\u6cd5\u3002 \u5728\u83b7\u5f97\u6240\u6709\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u5957\u63a5\u5b57\u4e4b\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u5957\u63a5\u5b57\u7684 emit \u65b9\u6cd5\u6765\u53d1\u9001\u4e8b\u4ef6\u3002","title":"consumeEmitToAuthenticated"},{"location":"blog/scalable-websockets-with-nestjs-and-redis/#_4","text":"\u6700\u540e\u8981\u505a\u7684\u662f\u521b\u5efa\u4e00\u4e2a\u7f51\u5173\u6765\u76d1\u542c\u4f20\u5165\u7684\u4e8b\u4ef6\u5e76\u68c0\u67e5\u4e00\u5207\u662f\u5426\u6309\u9884\u671f\u5de5\u4f5c\u3002 TypeScript @UseInterceptors ( RedisPropagatorInterceptor ) @WebSocketGateway () export class EventsGateway { @SubscribeMessage ( \"events\" ) public findAll () : Observable < any > { return from ([ 1 , 2 , 3 ]). pipe ( map (( item ) => { return { event : \"events\" , data : item }; }) ); } } \u901a\u8fc7\u4f7f\u7528@UseInterceptors \u88c5\u9970\u5668\uff0c\u6211\u4eec\u6ce8\u518c\u4e86\u8de8\u6240\u6709\u5b9e\u4f8b\u53d1\u51fa\u4e8b\u4ef6\u7684\u62e6\u622a\u5668\u3002 \u5982\u679c\u5e0c\u671b\u4f20\u64ad\u4e8b\u4ef6\uff0c\u5c31\u5fc5\u987b\u5728\u6211\u4eec\u521b\u5efa\u7684\u6bcf\u4e2a\u7f51\u5173\u4e0a\u6ce8\u518c\u62e6\u622a\u5668\u3002 \u73b0\u5728\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u5e26\u6709\u5957\u63a5\u5b57\u7684\u7b80\u5355 HTML \u6587\u4ef6\u3002io-client \u5e93: HTML <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" /> < title > Sockets test </ title > </ head > < body > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.dev.js\" ></ script > < script > window . s = io ( \"http://localhost:3000\" , { query : { token : \"123\" , }, }); s . emit ( \"events\" , { event : \"events\" , data : { test : true } }); s . on ( \"events\" , ( response ) => { console . log ( response ); }); </ script > </ body > </ html > \u63d0\u4f9b\u7684\u4ee4\u724c\u663e\u7136\u662f\u5047\u7684\uff0c\u6211\u4eec\u53ea\u662f\u60f3\u6a21\u62df\u6709\u4e00\u4e2a\u4ee4\u724c\u3002 \u4ece\u5b58\u50a8\u5e93\u4e2d\u83b7\u53d6\u4ee3\u7801\u540e\uff0c\u4e3a\u4e86\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd0\u884c: docker-compose \u8d77\u6765 \u5728\u89c2\u5bdf\u6a21\u5f0f\u4e0b\u7f16\u8bd1\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f \u4e00\u65e6\u670d\u52a1\u5668\u542f\u52a8\u5e76\u8fd0\u884c\uff0c\u6253\u5f00\u6587\u4ef6\u5e76\u68c0\u67e5\u63a7\u5236\u53f0: \u68c0\u67e5 HTML \u6587\u4ef6\u4e2d\u7684\u63a7\u5236\u53f0 \u77e5\u9053\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4ee4\u724c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6253\u5f00\u7b2c\u4e8c\u4e2a\u9009\u9879\u5361\u6765\u68c0\u67e5\u4e24\u4e2a\u9009\u9879\u5361\u662f\u5426\u5e94\u8be5\u63a5\u6536\u76f8\u540c\u7684\u4e8b\u4ef6(\u56e0\u4e3a\u5b83\u4eec\u662f\u6765\u81ea\u4e00\u4e2a\u7528\u6237\u7684\u4e24\u4e2a\u4f1a\u8bdd): \u63a7\u5236\u53f0\u53cd\u6620\u4e24\u4e2a\u4f1a\u8bdd \u901a\u8fc7\u5237\u65b0\u4e00\u4e2a\u9009\u9879\u5361\uff0c\u6211\u4eec\u5c06\u4f7f\u7b2c\u4e8c\u4e2a\u9009\u9879\u5361\u4e5f\u63a5\u6536\u4e8b\u4ef6\u3002 \u6211\u4eec\u7684\u4e8b\u4ef6\u901a\u8fc7 Redis \u5ba2\u6237\u7aef\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u8f6c\u53d1\u5230\u5b83\u4eec\u8d77\u6e90\u7684\u540c\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u4f46\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u53ea\u53d1\u9001\u5230\u5c1a\u672a\u6536\u5230\u4e8b\u4ef6\u7684\u5957\u63a5\u5b57\u3002 \u5b8c\u6574\u7684\u4ee3\u7801\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002","title":"\u5de5\u4f5c\u793a\u4f8b"},{"location":"blog/scalable-websockets-with-nestjs-and-redis/#_5","text":"\u5f53\u628a WebSockets \u6dfb\u52a0\u5230\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u65f6\uff0c\u6211\u4eec\u9762\u4e34\u7740\u4e00\u4e2a\u51b3\u5b9a:\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u662f\u5426\u53ef\u4f38\u7f29\u3002 \u4e00\u65e6\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u8de8\u591a\u4e2a\u5b9e\u4f8b\u8fdb\u884c\u590d\u5236\uff0c\u90a3\u4e48\u9884\u5148\u51b3\u5b9a\u4f7f\u7528\u53ef\u4f38\u7f29\u7684\u89e3\u51b3\u65b9\u6848\u5c06\u6781\u5927\u5730\u9020\u798f\u4e8e\u6211\u4eec\u3002 \u7531\u4e8e Nest \u7684\u6a21\u5757\u5316\uff0c\u4e00\u65e6\u5b9e\u73b0\uff0c\u89e3\u51b3\u65b9\u6848\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u590d\u5236\u5230\u5176\u4ed6\u9879\u76ee\u3002 \u786e\u4fdd\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u662f\u53ef\u4f38\u7f29\u7684\u662f\u4e00\u9879\u8270\u5de8\u7684\u5de5\u4f5c\u3002 \u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\uff0c\u8fd9\u9700\u8981\u6211\u4eec\u5f7b\u5e95\u6539\u53d8\u601d\u7ef4\u65b9\u5f0f\u3002 \u4f46\u8fd9\u7edd\u5bf9\u503c\u5f97\u3002","title":"\u603b\u7ed3"},{"location":"blog/websocket-cluster-with-nestjs-and-redis/","text":"https://medium.com/@mohsenes/websocket-cluster-with-nestjs-and-redis-a18882d418ed \u6269\u5c55\u662f\u540e\u7aef\u5e94\u7528\u7a0b\u5e8f\u751f\u6d3b\u4e2d\u4e0d\u53ef\u907f\u514d\u7684\u4e00\u90e8\u5206\uff0c\u4e00\u65e6\u60a8\u51b3\u5b9a\u5c06\u5e94\u7528\u7a0b\u5e8f\u6269\u5c55\u5230\u591a\u4e2a\u5b9e\u4f8b\uff0c\u60a8\u5c06\u9762\u4e34\u4e00\u4e2a\u95ee\u9898:\u5982\u4f55\u5904\u7406\u62e5\u6709\u591a\u4e2a\u5ba2\u6237\u673a(\u7535\u8bdd\u3001\u7b14\u8bb0\u672c\u7535\u8111\u7b49)\u7684\u7528\u6237\uff0c\u6bcf\u4e2a\u5ba2\u6237\u673a\u90fd\u8fde\u63a5\u5230\u96c6\u7fa4\u7684\u968f\u673a\u5b9e\u4f8b\u3002 \u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e76\u4f7f\u7528 NestJs \u548c Redis \u6765\u89e3\u51b3\u5b83\u3002 \u9700\u6c42: \u6709\u4f7f\u7528 Nodejs \u548c NestJs \u7684\u7ecf\u9a8c \u5b89\u88c5 Nodejs \u5b89\u88c5\u4e86 NestJs CLI \u5b89\u88c5 Redis \u95ee\u9898: \u5728 WebSocket \u4e0a\u53d1\u51fa\u7684\u6d88\u606f\u9700\u8981\u53d1\u9001\u5230\u4e0e\u6211\u4eec\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u76f8\u8fde\u7684\u63a5\u6536\u65b9\u7684\u8bbe\u5907\u4e0a \u89e3\u51b3\u65b9\u6848: \u6211\u4eec\u5c06\u4f7f\u7528 Redis PubSub \u6d41\u5904\u7406\u6d88\u606f\u5230\u591a\u4e2a\u5b9e\u4f8b\uff0c\u4e3a\u4e86\u5728 NestJs \u4e0a\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a socket \u6a21\u5757\u7684\u6a21\u5757\uff0c\u6211\u4eec\u5c06\u653e\u7f6e\u4e00\u4e2a\u7f51\u5173\u6765\u5904\u7406 socket \u5ba2\u6237\u7aef\u548c\u4e00\u4e2a\u670d\u52a1\u6765\u8fdb\u884c\u53d1\u73b0\uff0c\u8fde\u63a5\u5230 Redis \u548c\u5206\u53d1\u6d88\u606f\u3002 \u6211\u4eec\u5c06\u9010\u6b65\u4ecb\u7ecd\u8fd9\u4e00\u70b9\u3002 \u51c6\u5907\u5b89\u88c5 \u5b89\u88c5 NestJs CLI \u4ee5\u5168\u5c40\u5305\u7684\u5f62\u5f0f\u5b89\u88c5 NestJs CLI Bash # run with sudo if you are on ubuntu npm i -g @nestjs/cli \u521b\u5efa NestJS \u9879\u76ee \u521b\u5efa\u65b0\u7684 NestJS \u9879\u76ee\uff0c\u4f9d\u8d56\u9879\u4e5f\u5c06\u901a\u8fc7\u8fd9\u4e2a\u547d\u4ee4\u901a\u8fc7\u5411\u5bfc\u5b89\u88c5 Bash nest g socket-cluster-app \u751f\u6210 Socket \u6a21\u5757 \u751f\u6210\u6211\u4eec\u8ba8\u8bba\u8fc7\u7684 Socket \u6a21\u5757 Bash # go into project folder cd socket-cluster-app/ # generate socket module nest g module socket # generate socket service nest g service socket # generate socket gateway nest g gateway socket/socket \u4f7f\u7528 nest g \u547d\u4ee4\u4f1a\u81ea\u52a8\u5c06\u4f60\u7684\u670d\u52a1\u548c\u5957\u63a5\u5b57\u6dfb\u52a0\u5230\u5b83\u4eec\u7684\u76f8\u5173\u6a21\u5757\u4e2d \u5b89\u88c5 WebSocket \u9002\u914d\u5668 Bash npm i @nestjs/platform-ws npm i @nestjs/websockets \u7528\u4f8b\u5b9e\u73b0 \u5728 main.ts \u6587\u4ef6\u4e2d\u6ce8\u518c\u9002\u914d\u5668 TypeScript import { NestFactory } from \"@nestjs/core\" ; import { WsAdapter } from \"@nestjs/platform-ws\" ; import { AppModule } from \"./app.module\" ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); // register adapter app . useWebSocketAdapter ( new WsAdapter ( app ) as any ); await app . listen ( parseInt ( process . env [ \"PORT\" ], 10 ) || 3000 ); } bootstrap (); \u6807\u8bc6\u6bcf\u4e2a\u5957\u63a5\u5b57 \u7136\u540e\uff0c\u6211\u4eec\u5c06\u5728 handleConnection \u8c03\u7528\u4e2d\u6807\u8bc6\u6bcf\u4e2a\u5957\u63a5\u5b57\uff0c\u5e76\u5c06\u4e3a\u6bcf\u4e2a\u5ba2\u6237\u7aef\u6dfb\u52a0\u4e00\u4e2a\u201cuserId\u201d\u5c5e\u6027\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u4ee4\u724c cookie \u8bbe\u7f6e userId\uff0c\u5728\u4e00\u4e2a\u771f\u5b9e\u7684\u4f8b\u5b50\u4e2d\uff0c\u60a8\u9700\u8981\u9a8c\u8bc1\u4ee4\u724c\uff0c \u5e76\u901a\u8fc7\u67e5\u8be2\u6570\u636e\u5e93\u6216\u67d0\u4e9b\u8eab\u4efd\u9a8c\u8bc1\u670d\u52a1\u5c06 userId \u5206\u914d\u7ed9\u5ba2\u6237\u7aef\u3002 src/socket.gateway.ts TypeScript import { OnGatewayConnection , OnGatewayDisconnect , WebSocketGateway , } from \"@nestjs/websockets\" ; @WebSocketGateway () export class SocketGateway implements OnGatewayConnection , OnGatewayDisconnect { public connectedSockets : { [ key : string ] : any [] } = {}; async handleConnection ( client : any , req : Request ) { try { const token = req . headers [ \"cookie\" ] . split ( \";\" ) . map (( p ) => p . trim ()) . find (( p ) => p . split ( \"=\" )[ 0 ] === \"token\" ) . split ( \"=\" )[ 1 ]; // for this example, we simply set userId by token client . userId = token ; if ( ! this . connectedSockets [ client . userId ]) this . connectedSockets [ client . userId ] = []; this . connectedSockets [ client . userId ]. push ( client ); } catch ( error ) { client . close ( 4403 , \"set JWT cookie to authenticate\" ); } } handleDisconnect ( client : any ) { this . connectedSockets [ client . userId ] = this . connectedSockets [ client . userId ]. filter (( p ) => p . id !== client . id ); } } \u5957\u63a5\u5b57\u670d\u52a1 \u73b0\u5728\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u5957\u63a5\u5b57\u670d\u52a1\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a Redis \u5305\u5728\u5b9e\u4f8b\u4e4b\u95f4\u5206\u53d1\u6d88\u606f\u3002 Bash npm i redis npm i --save-dev @types/redis Socket \u670d\u52a1\u5c06\u6709\u591a\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u7b2c 0 \u6b65\u662f\u5728\u6784\u9020\u51fd\u6570\u65b9\u6cd5\u4e2d\u4e3a\u6211\u4eec\u7684\u670d\u52a1\u5206\u914d\u4e00\u4e2a\u968f\u673a id\uff0c\u5e76\u6ce8\u5165\u6211\u4eec\u5728\u4e0a\u4e00\u6b65\u4e2d\u5b9e\u73b0\u7684\u201cSocketGateWay\u201d\u3002 src/main.ts TypeScript constructor ( private readonly socketGateway : SocketGateway ) { this . serviceId = 'SOCKET_CHANNEL_' + Math . random () . toString ( 26 ) . slice ( 2 ); } \u53e6\u5916\uff0c\u6211\u4eec\u5728 socket \u670d\u52a1\u4e2d\u5b9e\u73b0\u4e86 onModuleInit \u51fd\u6570\uff0c\u5b83\u5c06\u521b\u5efa\u5e76\u8fde\u63a5\u5230 3 \u4e2a Redis \u5ba2\u6237\u7aef\u3002 \u7528 redisClient \u901a\u8fc7\u901a\u9053\u53d1\u73b0\u66f4\u65b0\u670d\u52a1\u5173\u952e\u5b57 \u901a\u8fc7 subscriberClient \u83b7\u53d6\u5206\u5e03\u5f0f\u6d88\u606f publisherClient \u5c06\u6d88\u606f\u5206\u53d1\u5230\u5176\u4ed6\u5b9e\u4f8b src/socket/socket.service.ts TypeScript async onModuleInit () { this . redisClient = await this . newRedisClient (); this . subscriberClient = await this . newRedisClient (); this . publisherClient = await this . newRedisClient (); this . subscriberClient . subscribe ( this . serviceId ); this . subscriberClient . on ( 'message' , ( channel , message ) => { const { userId , payload } = JSON . parse ( message ); this . sendMessage ( userId , payload , true ); }); await this . channelDiscovery (); } private async newRedisClient () { return createClient ({ host : 'localhost' , port : 6379 , }); } createClient \u662f\u4ece\u201credis\u201d\u5305\u5bfc\u5165\u7684 channelDiscovery \u5c06\u4fdd\u5b58\u5b83\u7684 serviceId \u5728 Redis \u4e0e\u8fc7\u671f 3 \u79d2\u3002 \u5b83\u8fd8\u5c06\u542f\u52a8\u81ea\u6211\u91cd\u590d\u8d85\u65f6\uff0c\u6bcf 2 \u79d2\u91cd\u65b0\u6267\u884c\u4e00\u6b21\u3002 \u8fd9\u6837\uff0c\u6240\u6709\u5b9e\u4f8b\u90fd\u53ef\u4ee5\u8bbf\u95ee\u5df2\u66f4\u65b0\u7684\u5957\u63a5\u5b57\u670d\u52a1\u5217\u8868\uff0c\u4ee5\u4fbf\u5206\u53d1\u6d88\u606f\u3002 \u6e05\u9664\u53d1\u73b0\u95f4\u9694\u8d85\u65f6 \u5728\u6d4b\u8bd5\u6b64\u670d\u52a1\u65f6\uff0c\u9632\u6b62\u5f00\u653e\u5904\u7406\u7a0b\u5e8f\u7684\u95ee\u9898\u5c06\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002 src/socket/socket.service.ts TypeScript private async channelDiscovery () { this . redisClient . setex ( this . serviceId , 3 , Date . now (). toString ()); this . discoveryInterval = setTimeout (() => { this . channelDiscovery (); }, 2000 ); } async onModuleDestroy () { this . discoveryInterval && clearTimeout ( this . discoveryInterval ); } sendMessage \u6700\u540e\u4e00\u6b65\u662f\u5411\u7279\u5b9a\u7528\u6237\u7684\u6bcf\u4e2a\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u53d1\u9001\u6d88\u606f\u3002 \u6211\u4eec\u5c06\u6d88\u606f\u53d1\u9001\u5230\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\uff0c\u5e76\u5c06\u6b64\u6d88\u606f\u5206\u53d1\u7ed9\u5176\u4ed6\u5b9e\u4f8b\u3002 \u5982\u679c\u6d88\u606f\u5df2\u7ecf\u7531\u53e6\u4e00\u4e2a\u5b9e\u4f8b\u5206\u53d1\uff0c\u201cif(!fromRedisChannel)\u201d \u5219\u5c06\u963b\u6b62\u5206\u53d1\u3002 src/socket/socket.service.ts TypeScript async sendMessage ( userId : string , payload : string , fromRedisChannel : boolean , ) { this . socketGateway . connectedSockets [ userId ] ? . forEach ( socket => socket . send ( payload ), ); if ( ! fromRedisChannel ) { this . redisClient . keys ( 'SOCKET_CHANNEL_' , ( err , ids ) => { ids . filter ( p => p != this . serviceId ). forEach ( id => { this . publisherClient . publish ( id , JSON . stringify ({ payload , userId , }), ); }); }); } } \u6d4b\u8bd5\u573a\u666f \u597d\u7684\uff0c\u6211\u4eec\u5b8c\u6210\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u6d4b\u8bd5\u573a\u666f\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u6d4b\u8bd5\u811a\u672c\uff0c\u8be5\u811a\u672c\u5c06\u8fde\u63a5\u5230\u6211\u4eec\u7684\u4e00\u4e2a\u5b9e\u4f8b\u5e76\u6253\u5370\u63a5\u6536\u5230\u7684\u6d88\u606f\u3002 \u901a\u8fc7\u8fd0\u884c\u201cnpm i ws\u201d\u6765\u5b89\u88c5 ws \u5305 TypeScript const ws = require ( \"ws\" ); const port = 3001 ; const socket = new ws ( `ws://localhost: ${ port } ` , { headers : { Cookie : \"token=user1\" }, }); socket . on ( \"message\" , ( data ) => { console . log ( `Received message` , data ); }); socket . on ( \"open\" , ( data ) => { console . log ( `Connected to port ${ port } ` ); }); socket . on ( \"close\" , ( data ) => { console . log ( `Disconnected from port ${ port } ` ); }); \u7136\u540e\uff0c\u6211\u4eec\u5411\u5957\u63a5\u5b57\u670d\u52a1\u6dfb\u52a0\u4e00\u4e2a\u7b80\u5355\u7684\u95f4\u9694\uff0c\u7528\u4e8e\u5411 user1 \u53d1\u9001\u65f6\u95f4\u3002 Bash constructor ( private readonly socketGateway: SocketGateway ) { this.serviceId = 'SOCKET_CHANNEL_' + Math.random () .toString ( 26 ) .slice ( 2 ) ; setInterval (() = > { this.sendMessage ( 'user1' , new Date () .toLocaleTimeString () + ` | from server on port ${ process .env[ 'PORT' ] } ` , false, ) ; } , 3000 ) ; } \u6700\u540e\uff0c\u6309\u987a\u5e8f\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4 Bash PORT = 3001 npm start PORT = 3002 npm start node test-script.js \u6d4b\u8bd5\u811a\u672c\u5e94\u8be5\u6bcf 3 \u79d2\u8bb0\u5f55\u4e00\u6761\u6765\u81ea\u4e24\u4e2a\u5b9e\u4f8b\u7684\u6d88\u606f\u3002 Bash # output Received message 8 :21:55 AM | from server on port 3001 Received message 8 :21:57 AM | from server on port 3002 \u8fd9\u5411\u6211\u4eec\u8868\u660e\uff0c\u73b0\u5728\u6211\u4eec\u7684\u670d\u52a1\u80fd\u591f\u5c06\u6765\u81ea\u4e0d\u540c\u5b9e\u4f8b\u7684 WebSocket \u6d88\u606f\u5206\u53d1\u5230\u7279\u5b9a\u7684\u5ba2\u6237\u673a\u3002 \u5b8c\u6574\u793a\u4f8b \u6211\u4eec\u5728\u672c\u6587\u4e2d\u6240\u91c7\u53d6\u7684\u6b65\u9aa4\u7684\u4e00\u4e2a\u5b8c\u6574\u7684\u5de5\u4f5c\u793a\u4f8b\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230 https://github.com/m-esm/socket-cluster-app main.js TypeScript import { NestFactory } from \"@nestjs/core\" ; import { WsAdapter } from \"@nestjs/platform-ws\" ; import { AppModule } from \"./app.module\" ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); // register adapter app . useWebSocketAdapter ( new WsAdapter ( app ) as any ); await app . listen ( parseInt ( process . env [ \"PORT\" ], 10 ) || 3000 ); } bootstrap (); socket socket.service.ts TypeScript import { Injectable , OnModuleDestroy , OnModuleInit } from \"@nestjs/common\" ; import { createClient , RedisClient } from \"redis\" ; import { SocketGateway } from \"./socket.gateway\" ; @Injectable () export class SocketService implements OnModuleInit , OnModuleDestroy { public redisClient : RedisClient ; public publisherClient : RedisClient ; private subscriberClient : RedisClient ; private discoveryInterval ; private serviceId : string ; constructor ( private readonly socketGateway : SocketGateway ) { this . serviceId = \"SOCKET_CHANNEL_\" + Math . random (). toString ( 26 ). slice ( 2 ); setInterval (() => { this . sendMessage ( \"user1\" , new Date (). toLocaleTimeString () + ` | from server on port ${ process . env [ \"PORT\" ] } ` , false ); }, 3000 ); } async onModuleInit () { this . redisClient = await this . newRedisClient (); this . subscriberClient = await this . newRedisClient (); this . publisherClient = await this . newRedisClient (); this . subscriberClient . subscribe ( this . serviceId ); this . subscriberClient . on ( \"message\" , ( channel , message ) => { const { userId , payload } = JSON . parse ( message ); this . sendMessage ( userId , payload , true ); }); await this . channelDiscovery (); } private async newRedisClient () { return createClient ({ host : \"localhost\" , port : 6379 , }); } async onModuleDestroy () { this . discoveryInterval && clearTimeout ( this . discoveryInterval ); } private async channelDiscovery () { this . redisClient . setex ( this . serviceId , 3 , Date . now (). toString ()); this . discoveryInterval = setTimeout (() => { this . channelDiscovery (); }, 2000 ); } async sendMessage ( userId : string , payload : string , fromRedisChannel : boolean ) { this . socketGateway . connectedSockets [ userId ] ? . forEach (( socket ) => socket . send ( payload ) ); if ( ! fromRedisChannel ) { this . redisClient . keys ( \"SOCKET_CHANNEL_*\" , ( err , ids ) => { ids . filter (( p ) => p != this . serviceId ) . forEach (( id ) => { this . publisherClient . publish ( id , JSON . stringify ({ payload , userId , }) ); }); }); } } } socket.gateway.ts TypeScript import { OnGatewayConnection , OnGatewayDisconnect , WebSocketGateway , } from \"@nestjs/websockets\" ; @WebSocketGateway () export class SocketGateway implements OnGatewayConnection , OnGatewayDisconnect { public connectedSockets : { [ key : string ] : any [] } = {}; async handleConnection ( client : any , req : Request ) { try { const token = req . headers [ \"cookie\" ] . split ( \";\" ) . map (( p ) => p . trim ()) . find (( p ) => p . split ( \"=\" )[ 0 ] === \"token\" ) . split ( \"=\" )[ 1 ]; // for this example, we simply set userId by token client . userId = token ; if ( ! this . connectedSockets [ client . userId ]) this . connectedSockets [ client . userId ] = []; this . connectedSockets [ client . userId ]. push ( client ); } catch ( error ) { client . close ( 4403 , \"set JWT cookie to authenticate\" ); } } handleDisconnect ( client : any ) { this . connectedSockets [ client . userId ] = this . connectedSockets [ client . userId ]. filter (( p ) => p . id !== client . id ); } }","title":"WebSocket cluster with NestJs and Redis"},{"location":"blog/websocket-cluster-with-nestjs-and-redis/#_1","text":"","title":"\u51c6\u5907\u5b89\u88c5"},{"location":"blog/websocket-cluster-with-nestjs-and-redis/#nestjs-cli","text":"\u4ee5\u5168\u5c40\u5305\u7684\u5f62\u5f0f\u5b89\u88c5 NestJs CLI Bash # run with sudo if you are on ubuntu npm i -g @nestjs/cli","title":"\u5b89\u88c5 NestJs CLI"},{"location":"blog/websocket-cluster-with-nestjs-and-redis/#nestjs","text":"\u521b\u5efa\u65b0\u7684 NestJS \u9879\u76ee\uff0c\u4f9d\u8d56\u9879\u4e5f\u5c06\u901a\u8fc7\u8fd9\u4e2a\u547d\u4ee4\u901a\u8fc7\u5411\u5bfc\u5b89\u88c5 Bash nest g socket-cluster-app","title":"\u521b\u5efa NestJS \u9879\u76ee"},{"location":"blog/websocket-cluster-with-nestjs-and-redis/#socket","text":"\u751f\u6210\u6211\u4eec\u8ba8\u8bba\u8fc7\u7684 Socket \u6a21\u5757 Bash # go into project folder cd socket-cluster-app/ # generate socket module nest g module socket # generate socket service nest g service socket # generate socket gateway nest g gateway socket/socket \u4f7f\u7528 nest g \u547d\u4ee4\u4f1a\u81ea\u52a8\u5c06\u4f60\u7684\u670d\u52a1\u548c\u5957\u63a5\u5b57\u6dfb\u52a0\u5230\u5b83\u4eec\u7684\u76f8\u5173\u6a21\u5757\u4e2d","title":"\u751f\u6210 Socket \u6a21\u5757"},{"location":"blog/websocket-cluster-with-nestjs-and-redis/#websocket","text":"Bash npm i @nestjs/platform-ws npm i @nestjs/websockets","title":"\u5b89\u88c5 WebSocket \u9002\u914d\u5668"},{"location":"blog/websocket-cluster-with-nestjs-and-redis/#_2","text":"\u5728 main.ts \u6587\u4ef6\u4e2d\u6ce8\u518c\u9002\u914d\u5668 TypeScript import { NestFactory } from \"@nestjs/core\" ; import { WsAdapter } from \"@nestjs/platform-ws\" ; import { AppModule } from \"./app.module\" ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); // register adapter app . useWebSocketAdapter ( new WsAdapter ( app ) as any ); await app . listen ( parseInt ( process . env [ \"PORT\" ], 10 ) || 3000 ); } bootstrap ();","title":"\u7528\u4f8b\u5b9e\u73b0"},{"location":"blog/websocket-cluster-with-nestjs-and-redis/#_3","text":"\u7136\u540e\uff0c\u6211\u4eec\u5c06\u5728 handleConnection \u8c03\u7528\u4e2d\u6807\u8bc6\u6bcf\u4e2a\u5957\u63a5\u5b57\uff0c\u5e76\u5c06\u4e3a\u6bcf\u4e2a\u5ba2\u6237\u7aef\u6dfb\u52a0\u4e00\u4e2a\u201cuserId\u201d\u5c5e\u6027\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u4ee4\u724c cookie \u8bbe\u7f6e userId\uff0c\u5728\u4e00\u4e2a\u771f\u5b9e\u7684\u4f8b\u5b50\u4e2d\uff0c\u60a8\u9700\u8981\u9a8c\u8bc1\u4ee4\u724c\uff0c \u5e76\u901a\u8fc7\u67e5\u8be2\u6570\u636e\u5e93\u6216\u67d0\u4e9b\u8eab\u4efd\u9a8c\u8bc1\u670d\u52a1\u5c06 userId \u5206\u914d\u7ed9\u5ba2\u6237\u7aef\u3002 src/socket.gateway.ts TypeScript import { OnGatewayConnection , OnGatewayDisconnect , WebSocketGateway , } from \"@nestjs/websockets\" ; @WebSocketGateway () export class SocketGateway implements OnGatewayConnection , OnGatewayDisconnect { public connectedSockets : { [ key : string ] : any [] } = {}; async handleConnection ( client : any , req : Request ) { try { const token = req . headers [ \"cookie\" ] . split ( \";\" ) . map (( p ) => p . trim ()) . find (( p ) => p . split ( \"=\" )[ 0 ] === \"token\" ) . split ( \"=\" )[ 1 ]; // for this example, we simply set userId by token client . userId = token ; if ( ! this . connectedSockets [ client . userId ]) this . connectedSockets [ client . userId ] = []; this . connectedSockets [ client . userId ]. push ( client ); } catch ( error ) { client . close ( 4403 , \"set JWT cookie to authenticate\" ); } } handleDisconnect ( client : any ) { this . connectedSockets [ client . userId ] = this . connectedSockets [ client . userId ]. filter (( p ) => p . id !== client . id ); } }","title":"\u6807\u8bc6\u6bcf\u4e2a\u5957\u63a5\u5b57"},{"location":"blog/websocket-cluster-with-nestjs-and-redis/#_4","text":"\u73b0\u5728\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u5957\u63a5\u5b57\u670d\u52a1\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a Redis \u5305\u5728\u5b9e\u4f8b\u4e4b\u95f4\u5206\u53d1\u6d88\u606f\u3002 Bash npm i redis npm i --save-dev @types/redis Socket \u670d\u52a1\u5c06\u6709\u591a\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u7b2c 0 \u6b65\u662f\u5728\u6784\u9020\u51fd\u6570\u65b9\u6cd5\u4e2d\u4e3a\u6211\u4eec\u7684\u670d\u52a1\u5206\u914d\u4e00\u4e2a\u968f\u673a id\uff0c\u5e76\u6ce8\u5165\u6211\u4eec\u5728\u4e0a\u4e00\u6b65\u4e2d\u5b9e\u73b0\u7684\u201cSocketGateWay\u201d\u3002 src/main.ts TypeScript constructor ( private readonly socketGateway : SocketGateway ) { this . serviceId = 'SOCKET_CHANNEL_' + Math . random () . toString ( 26 ) . slice ( 2 ); } \u53e6\u5916\uff0c\u6211\u4eec\u5728 socket \u670d\u52a1\u4e2d\u5b9e\u73b0\u4e86 onModuleInit \u51fd\u6570\uff0c\u5b83\u5c06\u521b\u5efa\u5e76\u8fde\u63a5\u5230 3 \u4e2a Redis \u5ba2\u6237\u7aef\u3002 \u7528 redisClient \u901a\u8fc7\u901a\u9053\u53d1\u73b0\u66f4\u65b0\u670d\u52a1\u5173\u952e\u5b57 \u901a\u8fc7 subscriberClient \u83b7\u53d6\u5206\u5e03\u5f0f\u6d88\u606f publisherClient \u5c06\u6d88\u606f\u5206\u53d1\u5230\u5176\u4ed6\u5b9e\u4f8b src/socket/socket.service.ts TypeScript async onModuleInit () { this . redisClient = await this . newRedisClient (); this . subscriberClient = await this . newRedisClient (); this . publisherClient = await this . newRedisClient (); this . subscriberClient . subscribe ( this . serviceId ); this . subscriberClient . on ( 'message' , ( channel , message ) => { const { userId , payload } = JSON . parse ( message ); this . sendMessage ( userId , payload , true ); }); await this . channelDiscovery (); } private async newRedisClient () { return createClient ({ host : 'localhost' , port : 6379 , }); } createClient \u662f\u4ece\u201credis\u201d\u5305\u5bfc\u5165\u7684 channelDiscovery \u5c06\u4fdd\u5b58\u5b83\u7684 serviceId \u5728 Redis \u4e0e\u8fc7\u671f 3 \u79d2\u3002 \u5b83\u8fd8\u5c06\u542f\u52a8\u81ea\u6211\u91cd\u590d\u8d85\u65f6\uff0c\u6bcf 2 \u79d2\u91cd\u65b0\u6267\u884c\u4e00\u6b21\u3002 \u8fd9\u6837\uff0c\u6240\u6709\u5b9e\u4f8b\u90fd\u53ef\u4ee5\u8bbf\u95ee\u5df2\u66f4\u65b0\u7684\u5957\u63a5\u5b57\u670d\u52a1\u5217\u8868\uff0c\u4ee5\u4fbf\u5206\u53d1\u6d88\u606f\u3002 \u6e05\u9664\u53d1\u73b0\u95f4\u9694\u8d85\u65f6 \u5728\u6d4b\u8bd5\u6b64\u670d\u52a1\u65f6\uff0c\u9632\u6b62\u5f00\u653e\u5904\u7406\u7a0b\u5e8f\u7684\u95ee\u9898\u5c06\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002 src/socket/socket.service.ts TypeScript private async channelDiscovery () { this . redisClient . setex ( this . serviceId , 3 , Date . now (). toString ()); this . discoveryInterval = setTimeout (() => { this . channelDiscovery (); }, 2000 ); } async onModuleDestroy () { this . discoveryInterval && clearTimeout ( this . discoveryInterval ); } sendMessage \u6700\u540e\u4e00\u6b65\u662f\u5411\u7279\u5b9a\u7528\u6237\u7684\u6bcf\u4e2a\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u53d1\u9001\u6d88\u606f\u3002 \u6211\u4eec\u5c06\u6d88\u606f\u53d1\u9001\u5230\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\uff0c\u5e76\u5c06\u6b64\u6d88\u606f\u5206\u53d1\u7ed9\u5176\u4ed6\u5b9e\u4f8b\u3002 \u5982\u679c\u6d88\u606f\u5df2\u7ecf\u7531\u53e6\u4e00\u4e2a\u5b9e\u4f8b\u5206\u53d1\uff0c\u201cif(!fromRedisChannel)\u201d \u5219\u5c06\u963b\u6b62\u5206\u53d1\u3002 src/socket/socket.service.ts TypeScript async sendMessage ( userId : string , payload : string , fromRedisChannel : boolean , ) { this . socketGateway . connectedSockets [ userId ] ? . forEach ( socket => socket . send ( payload ), ); if ( ! fromRedisChannel ) { this . redisClient . keys ( 'SOCKET_CHANNEL_' , ( err , ids ) => { ids . filter ( p => p != this . serviceId ). forEach ( id => { this . publisherClient . publish ( id , JSON . stringify ({ payload , userId , }), ); }); }); } }","title":"\u5957\u63a5\u5b57\u670d\u52a1"},{"location":"blog/websocket-cluster-with-nestjs-and-redis/#_5","text":"\u597d\u7684\uff0c\u6211\u4eec\u5b8c\u6210\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u6d4b\u8bd5\u573a\u666f\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u6d4b\u8bd5\u811a\u672c\uff0c\u8be5\u811a\u672c\u5c06\u8fde\u63a5\u5230\u6211\u4eec\u7684\u4e00\u4e2a\u5b9e\u4f8b\u5e76\u6253\u5370\u63a5\u6536\u5230\u7684\u6d88\u606f\u3002 \u901a\u8fc7\u8fd0\u884c\u201cnpm i ws\u201d\u6765\u5b89\u88c5 ws \u5305 TypeScript const ws = require ( \"ws\" ); const port = 3001 ; const socket = new ws ( `ws://localhost: ${ port } ` , { headers : { Cookie : \"token=user1\" }, }); socket . on ( \"message\" , ( data ) => { console . log ( `Received message` , data ); }); socket . on ( \"open\" , ( data ) => { console . log ( `Connected to port ${ port } ` ); }); socket . on ( \"close\" , ( data ) => { console . log ( `Disconnected from port ${ port } ` ); }); \u7136\u540e\uff0c\u6211\u4eec\u5411\u5957\u63a5\u5b57\u670d\u52a1\u6dfb\u52a0\u4e00\u4e2a\u7b80\u5355\u7684\u95f4\u9694\uff0c\u7528\u4e8e\u5411 user1 \u53d1\u9001\u65f6\u95f4\u3002 Bash constructor ( private readonly socketGateway: SocketGateway ) { this.serviceId = 'SOCKET_CHANNEL_' + Math.random () .toString ( 26 ) .slice ( 2 ) ; setInterval (() = > { this.sendMessage ( 'user1' , new Date () .toLocaleTimeString () + ` | from server on port ${ process .env[ 'PORT' ] } ` , false, ) ; } , 3000 ) ; } \u6700\u540e\uff0c\u6309\u987a\u5e8f\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4 Bash PORT = 3001 npm start PORT = 3002 npm start node test-script.js \u6d4b\u8bd5\u811a\u672c\u5e94\u8be5\u6bcf 3 \u79d2\u8bb0\u5f55\u4e00\u6761\u6765\u81ea\u4e24\u4e2a\u5b9e\u4f8b\u7684\u6d88\u606f\u3002 Bash # output Received message 8 :21:55 AM | from server on port 3001 Received message 8 :21:57 AM | from server on port 3002 \u8fd9\u5411\u6211\u4eec\u8868\u660e\uff0c\u73b0\u5728\u6211\u4eec\u7684\u670d\u52a1\u80fd\u591f\u5c06\u6765\u81ea\u4e0d\u540c\u5b9e\u4f8b\u7684 WebSocket \u6d88\u606f\u5206\u53d1\u5230\u7279\u5b9a\u7684\u5ba2\u6237\u673a\u3002","title":"\u6d4b\u8bd5\u573a\u666f"},{"location":"blog/websocket-cluster-with-nestjs-and-redis/#_6","text":"\u6211\u4eec\u5728\u672c\u6587\u4e2d\u6240\u91c7\u53d6\u7684\u6b65\u9aa4\u7684\u4e00\u4e2a\u5b8c\u6574\u7684\u5de5\u4f5c\u793a\u4f8b\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230 https://github.com/m-esm/socket-cluster-app main.js TypeScript import { NestFactory } from \"@nestjs/core\" ; import { WsAdapter } from \"@nestjs/platform-ws\" ; import { AppModule } from \"./app.module\" ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); // register adapter app . useWebSocketAdapter ( new WsAdapter ( app ) as any ); await app . listen ( parseInt ( process . env [ \"PORT\" ], 10 ) || 3000 ); } bootstrap (); socket socket.service.ts TypeScript import { Injectable , OnModuleDestroy , OnModuleInit } from \"@nestjs/common\" ; import { createClient , RedisClient } from \"redis\" ; import { SocketGateway } from \"./socket.gateway\" ; @Injectable () export class SocketService implements OnModuleInit , OnModuleDestroy { public redisClient : RedisClient ; public publisherClient : RedisClient ; private subscriberClient : RedisClient ; private discoveryInterval ; private serviceId : string ; constructor ( private readonly socketGateway : SocketGateway ) { this . serviceId = \"SOCKET_CHANNEL_\" + Math . random (). toString ( 26 ). slice ( 2 ); setInterval (() => { this . sendMessage ( \"user1\" , new Date (). toLocaleTimeString () + ` | from server on port ${ process . env [ \"PORT\" ] } ` , false ); }, 3000 ); } async onModuleInit () { this . redisClient = await this . newRedisClient (); this . subscriberClient = await this . newRedisClient (); this . publisherClient = await this . newRedisClient (); this . subscriberClient . subscribe ( this . serviceId ); this . subscriberClient . on ( \"message\" , ( channel , message ) => { const { userId , payload } = JSON . parse ( message ); this . sendMessage ( userId , payload , true ); }); await this . channelDiscovery (); } private async newRedisClient () { return createClient ({ host : \"localhost\" , port : 6379 , }); } async onModuleDestroy () { this . discoveryInterval && clearTimeout ( this . discoveryInterval ); } private async channelDiscovery () { this . redisClient . setex ( this . serviceId , 3 , Date . now (). toString ()); this . discoveryInterval = setTimeout (() => { this . channelDiscovery (); }, 2000 ); } async sendMessage ( userId : string , payload : string , fromRedisChannel : boolean ) { this . socketGateway . connectedSockets [ userId ] ? . forEach (( socket ) => socket . send ( payload ) ); if ( ! fromRedisChannel ) { this . redisClient . keys ( \"SOCKET_CHANNEL_*\" , ( err , ids ) => { ids . filter (( p ) => p != this . serviceId ) . forEach (( id ) => { this . publisherClient . publish ( id , JSON . stringify ({ payload , userId , }) ); }); }); } } } socket.gateway.ts TypeScript import { OnGatewayConnection , OnGatewayDisconnect , WebSocketGateway , } from \"@nestjs/websockets\" ; @WebSocketGateway () export class SocketGateway implements OnGatewayConnection , OnGatewayDisconnect { public connectedSockets : { [ key : string ] : any [] } = {}; async handleConnection ( client : any , req : Request ) { try { const token = req . headers [ \"cookie\" ] . split ( \";\" ) . map (( p ) => p . trim ()) . find (( p ) => p . split ( \"=\" )[ 0 ] === \"token\" ) . split ( \"=\" )[ 1 ]; // for this example, we simply set userId by token client . userId = token ; if ( ! this . connectedSockets [ client . userId ]) this . connectedSockets [ client . userId ] = []; this . connectedSockets [ client . userId ]. push ( client ); } catch ( error ) { client . close ( 4403 , \"set JWT cookie to authenticate\" ); } } handleDisconnect ( client : any ) { this . connectedSockets [ client . userId ] = this . connectedSockets [ client . userId ]. filter (( p ) => p . id !== client . id ); } }","title":"\u5b8c\u6574\u793a\u4f8b"},{"location":"docs/_index/","text":"https://wanago.io/courses/api-with-nestjs/ \u63a7\u5236\u5668\u3001\u8def\u7531\u548c\u6a21\u5757\u7ed3\u6784 \u7528 TypeORM \u5efa\u7acb\u4e00\u4e2a PostgreSQL \u6570\u636e\u5e93 \u4f7f\u7528 bcrypt\u3001Passport\u3001JWT \u548c cookie \u5bf9\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1 \u9519\u8bef\u5904\u7406\u548c\u6570\u636e\u9a8c\u8bc1 \u7528\u62e6\u622a\u5668\u5e8f\u5217\u5316\u54cd\u5e94 \u7814\u7a76\u4f9d\u8d56\u6ce8\u5165\u548c\u6a21\u5757 \u521b\u5efa\u4e0e Postgres \u548c TypeORM \u7684\u5173\u7cfb \u7f16\u5199\u5355\u5143\u6d4b\u8bd5 \u4f7f\u7528\u96c6\u6210\u6d4b\u8bd5\u6d4b\u8bd5\u670d\u52a1\u548c\u63a7\u5236\u5668 \u4e0a\u4f20\u516c\u5171\u6587\u4ef6\u5230 Amazon S3 \u4f7f\u7528 Amazon S3 \u7ba1\u7406\u79c1\u6709\u6587\u4ef6 \u4ecb\u7ecd Elasticsearch \u4f7f\u7528 JWT \u5b9e\u73b0\u5237\u65b0\u4ee4\u724c \u4f7f\u7528\u7d22\u5f15\u63d0\u9ad8 Postgres \u6570\u636e\u5e93\u7684\u6027\u80fd \u7528 PostgreSQL \u548c TypeORM \u5b9a\u4e49\u4e8b\u52a1 \u4f7f\u7528\u6570\u7ec4\u6570\u636e\u7c7b\u578b\u4e0e PostgreSQL \u548c TypeORM \u4f7f\u7528 PostgreSQL \u548c TypeORM \u8fdb\u884c\u504f\u79fb\u548c\u952e\u96c6\u5206\u9875 \u63a2\u7d22\u5fae\u670d\u52a1\u7684\u7406\u5ff5 \u4f7f\u7528 RabbitMQ \u4e0e\u5fae\u670d\u52a1\u901a\u4fe1 \u4f7f\u7528 gRPC \u6846\u67b6\u4e0e\u5fae\u670d\u52a1\u901a\u4fe1 CQRS \u7684\u4ecb\u7ecd \u7528 PostgreSQL \u548c TypeORM \u5b58\u50a8 JSON \u5b9e\u73b0\u5185\u5b58\u7f13\u5b58\u4ee5\u63d0\u9ad8\u6027\u80fd \u7f13\u5b58\u4e0e\u590d\u8ff0\u3002\u5728 Node.js \u96c6\u7fa4\u4e2d\u8fd0\u884c\u5e94\u7528 \u4f7f\u7528 cron \u548c Nodemailer \u53d1\u9001\u9884\u5b9a\u7684\u7535\u5b50\u90ae\u4ef6 \u4e0e WebSockets \u7684\u5b9e\u65f6\u804a\u5929 GraphQL \u6982\u8bba\u3002\u67e5\u8be2\u3001\u4fee\u6539\u548c\u8eab\u4efd\u9a8c\u8bc1 \u5904\u7406 GraphQL \u4e2d\u7684 N + 1 \u95ee\u9898 \u4f7f\u7528 GraphQL \u8ba2\u9605\u5b9e\u73b0\u5b9e\u65f6\u66f4\u65b0 GraphQL \u4e2d\u7684\u6807\u91cf\u7c7b\u578b \u53cc\u56e0\u7d20\u8eab\u4efd\u9a8c\u8bc1 \u4ecb\u7ecd Prisma \u4e0e PostgreSQL \u7ba1\u7406 PostgreSQL \u4e0e Prisma \u7684\u5173\u7cfb \u4f7f\u7528\u961f\u5217\u5904\u7406 cpu \u5bc6\u96c6\u578b\u4efb\u52a1 \u4f7f\u7528\u670d\u52a1\u5668\u7aef\u4f1a\u8bdd\u800c\u4e0d\u662f JSON Web \u4ee4\u724c \u4ecb\u7ecd\u5e26 React \u7684\u6761\u7eb9 \u4f7f\u7528 Stripe \u4fdd\u5b58\u4fe1\u7528\u5361\u4ee5\u5907\u5c06\u6765\u4f7f\u7528 \u901a\u8fc7\u8ba2\u9605\u8bbe\u7f6e\u5206\u671f\u4ed8\u6b3e \u7528 webhook \u5bf9 Stripe \u4e8b\u4ef6\u505a\u51fa\u53cd\u5e94 \u786e\u8ba4\u90ae\u7bb1\u5730\u5740 \u9a8c\u8bc1\u7535\u8bdd\u53f7\u7801\u548c\u53d1\u9001\u77ed\u4fe1\u4e0e Twilio \u4f7f\u7528\u8c37\u6b4c\u5bf9\u7528\u6237\u8fdb\u884c\u8ba4\u8bc1 MongoDB \u6982\u8bba \u4e0e MongoDB \u5b9e\u73b0\u5173\u7cfb MongoDB \u548c Mongoose \u7684\u865a\u62df\u8d22\u4ea7 MongoDB \u548c Mongoose \u7ba1\u7406\u4e8b\u52a1 \u7528 MongoDB \u548c Mongoose \u5b9e\u73b0\u5206\u9875 \u7528 MongoDB \u548c Mongoose \u5b9a\u4e49\u7d22\u5f15 MongoDB \u548c Mongoose \u7684 PUT \u548c PATCH \u66f4\u65b0 \u4ecb\u7ecd\u4f7f\u7528\u5185\u7f6e\u8bb0\u5f55\u5668\u548c TypeORM \u8fdb\u884c\u65e5\u5fd7\u8bb0\u5f55 \u4f7f\u7528\u7ec8\u7aef\u548c\u6570\u636e\u72d7\u8fdb\u884c\u8fd0\u884c\u72b6\u51b5\u68c0\u67e5 \u4f7f\u7528 Compodoc \u548c JSDoc \u751f\u6210\u6587\u6863 \u4f7f\u7528 PostgreSQL \u548c TypeORM \u5b9e\u73b0\u8f6f\u5220\u9664 \u5728 PostgreSQL \u6570\u636e\u5e93\u4e2d\u5b58\u50a8\u6587\u4ef6 \u4e0a\u4f20\u6587\u4ef6\u5230\u670d\u52a1\u5668 \u4f7f\u7528\u89d2\u8272\u548c\u58f0\u660e\u8fdb\u884c\u6388\u6743 \u4f7f\u7528 mixin \u6a21\u5f0f\u7ec4\u5408\u7c7b \u4f7f\u7528 ETag \u5b9e\u73b0\u7f13\u5b58\u548c\u8282\u7701\u5e26\u5bbd \u4ecb\u7ecd\u4e00\u4e2a\u4e0e Lerna \u548c Yarn \u5de5\u4f5c\u7a7a\u95f4\u7684\u5355\u7c27\u7ba1 OpenAPI \u89c4\u8303\u548c Swagger \u5904\u7406\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb","title":"\u6587\u6863"},{"location":"docs/awesome/","text":"https://github.com/nestjs/awesome-nestjs/blob/master/README.md \u8d44\u6e90 \u5b98\u65b9\u8d44\u6e90 Website Official Guide GitHub Repo Examples Nest Starter - Nest framework TypeScript starter. JavaScript Starter - Nest framework JavaScript (ES6 / ES7 / ES8) starter. \u793e\u533a Gitter Discord Telegram (community maintained) Telegram (Brazilian Portuguese speak community) Telegram (Russian speak community) Slack (Korean speak community) Reddit (community maintained) Facebook (Polish speak community) \u4f1a\u8c08 Revealing framework fundamentals: NestJS behind the curtain by Kamil My\u015bliwiec \u6559\u7a0b Introduction to modern Node.js framework NestJS Node Express - Teach how to use NestJS step by step. Build web applications with Nest NestJS30Days - Learn the NestJS framework in 30 days. Build a geofencing web app using NestJS and the Google Maps API Build live comments with sentiment analysis using NestJS Build a chat app with sentiment analysis using NestJS Create a realtime graph using NestJS Build a realtime table with DataTables and NestJS NestJS Basic Auth and Sessions NestJS Hasura Integration via Schema Stitching And JWT Auth MEAN Stack with NestJS and Swagger NestJS Ideas API Building a real time web applications using NestJS and Ably Video Tutorials - Building a full-stack blog with NestJS, Angular and Angular Material. Free Video Course - The complete NestJS developer. Enterprise Node.js framework. \u4f8b\u5b50 ChatServer - Server side of Chat App implemented using NestJS. Domain Driven Design - Library - Example of an application that follows Domain Driven Design. Realworld Example App - Exemplary real world backend API built with NestJS + TypeORM. Mant - New Stack on the Market to beat them all MANT. REST NestJS Postgres - CrudJS implemented as a REST API, using NestJS and Postgres. Nest Permissions Seed - A simple application demonstrating the basic usage of permissions with NestJS. Angular NestJS Rendering - Angular 5+ server side rendering using NestJS. Angular Contact Manager App - A Contact Manager App using Angular, NestJS, Mongoose, Passport, JWT. Books Library API - A restful API with NestJS and mongoose. Passport Auth NestJS - Passport strategies and oauth integration built with NestJS. NestJS Auth0 - An example NestJS application that uses Auth0 via Passport for authentication. Nest Ideas API - An implementation of a REST and GraphQL server built with NestJS, PostgresQL and TypeORM. Nestcloud Starter - Quickly start a micro-service app use nestcloud. Nodepress - A RESTful API server application for Blog CMS. Serverless-Lambda-DynamoDB - A fully SERVERLESS in-production application with AWS Lambda, DynamoDB, DynamoDB Streams. Serverless-Lambda-FirestoreDB - A fully SERVERLESS in-production application with AWS Lambda, FirestoreDB, Firebase Auth, Winston Logger, Swagger. Also implements admin role authorization. Serverless NestJS TypeOrm - Example how to NestJS using the serverless framework with TypeORM. Passport Email Auth - Starter project that includes API for user email authentication with MongoDB and PassportJs. NestJS Project Structure - Example of constructing a project structure with NestJS. NestJS Elasticsearch Vue - Autocomplete search with NestJS, Elasticsearch and Vue. TypeScript Clean Architecture - Clean Architecture based application with NestJS, PostgreSQL and TypeORM. NestJS Api Mongoose - Simple example Api Rest with Nestjs 8.x and Mongoose \u6837\u677f \ud83e\uddea Fully tested NestJS Prisma Clean Architecture Boilerplate - This boilerplate shows how to test your NestJS API with unit, integration and e2e tests. Use-cases are written in functionnal programming with FP-TS. NestJS Permission Boilerplate - This is a basic NestJS boilerplate project built on the more powerful Node.js framework. The main purpose of this project is to dynamically handle roles and permissions assigned to the user. SQB NestJS Boilerplate - A production-ready \ud83c\udfed NestJS boilerplate with batteries \ud83d\udd0b included. No Kidding!. Nest BFF - A boilerplate BFF web application starter-project using NestJS. Includes CLI, and MongoDB migrations features. NestJS Template - Scaffold your next TypeScript API with this production-ready NestJS template crafted for Docker environments. MEAN Todo with NestJS - A simple Todo application with NestJS and Swagger. Included Authorization/Authentication. NestJS Boilerplate - Boilerplate with available authentication, typeorm, env configuration and swagger. Everything you need to start making great things. Awesome Nest Boilerplate - Typescript, Postgresql, TypeORM, Swagger for Api documentation, Role base access control, and best application architecture. NestJS Prisma Starter - Starter project for NestJS includes Graphql with Prisma Client, Passport-JWT authentication, Swagger Api and Docker. TeanJS - TeanJS is a starter that provides you all the keys to be able to start writing your code as quickly as possible. NestJS DDD Boilerplate - Domain Driven Design Base app with NestJS, Class Validator and TypeORM. SOLID principles applied to create fully testable applications. Nest Mongo Graphql - Starter Kit using NestJS MongoDB Graphql and type-graphql https://typegraphql.ml/ inspired the type schema first approach. Ultimate Backend - Enterprise multi-tenant SaaS starter kit with CQRS GraphQL microservice architecture, apollo federation, event source and authentication. NestJS GraphQL Boilerplate - Dockerized API boilerplate with NestJS, TypeORM, TypeGraphQL, MongoDB, GraphQL and automated tasks with Makefile. Code first approach. NextJS & NestJS GraphQL Starter - GraphQL NestJS with NextJS boilerplace. Includes GitHub, Reddit & Google OAuth. The Knests Stack - Full stack/end starter with: PostgreSQL, Knex.js, NestJS, Next.js, GraphQL, React, Material-UI, Docker multistage images for, Docker compose and a GitLab CI/CD pipeline fully configured. Nest Hackathon Starter - Hackathon starter project for NestJS. Includes Prisma, email verification, Passport-JWT authentication, Swagger and more. Stator - A full-stack boilerplate that does it all - automatic releases, deployments, enforced conventions. NestJS REST Starter Kit - By MonstarLab - Features: JWT Auth, RBAC Authorization, TypeORM, winston logger, Pagination, Auto-generated Swagger. Other: prettier, commit-linting husky hooks, SonarCloud, docker-compose. NestJS Api Boilerplate JWT - An API Boilerplate to create a ready-to-use REST API in seconds with NestJS + TypeORM and Passport Auth JWT. NestJS REST API boilerplate for typical project - Boilerplate with Auth, TypeORM, PostgreSQL, Mailing, I18N, Docker, File uploads (support local and Amazon S3 drivers), Swagger, Tests, CI. NestJS and Prisma Yarn Monorepo Starter Template - Full-stack monorepo starter (Yarn workspaces) with Prisma, GraphQL, CI and more. Truthy NestJS Headless CMS - Open source headless CMS API written using NestJS, that has built-in modules like User Management, Role Management, Permission Management, Email Module, Account Settings, 2FA settings, Throttling, RBAC support, Localization, frontend application written with ReactJS & Redux Saga, UI built with Ant design and many more. Other: unit test using Jest, prettier, commit-linting husky hooks, PostgreSQL, Redis, docker etc. NestJS Realtime Chat - Boilerplate for a realtime chat based on Websockets, TypeORM, PostgreSQL, REST, Docker which includes PassportJS/JWT auth, rooms, kick/ban user functionality \u9879\u76ee\u4f7f\u7528 NestJS \u5f00\u6e90 Ever\u00ae - Open-Source Commerce Platform for On-Demand Economy and Digital Marketplaces. Feednext - Open-Source Social Media Application. Gauzy - Open-Source Profits Sharing Platform for modern agencies and studios. LXDhub - Management system for Linux Containers (LXC). Notadd - Microservice development architecture. Pimp My PR - Open-Source platform for statistics and pull request management. ToolJet - ToolJet is the open-source low-code framework alternative to Retool & Mendix to build & deploy internal tools with minimal engineering effort. ( Source Code ) GPL-3.0 Vendure - Open-Source headless GraphQL ecommerce framework built on NestJS, with a focus on developer productivity and ease of customization. iola - Socket client with Rest API. Amplication - Amplication is an open-source low-code devtool that auto-generates backend apps built with TypeScript and Node.js, and a client built with React. \u7ec4\u4ef6\u548c\u5e93 \u5b9e\u7528\u7a0b\u5e8f Nest CQRS - A lightweight CQRS module for Nest framework. Typed CQRS - A wrapper for the Nest CQRS library for better typing of query and command results. Nest Config - A Great module to handle project configurations. Nest Typed Config - Intuitive, type-safe configuration module for Nest framework. Nest Consul Service - A Node.js micro-service solution based on Consul, writing by Typescript language and NestJS framework. Nest Easy Config - A NestJS module for managing configs that provides some sleek features. Nest Schedule - Schedule job easier by decorator. Nest Queue - Easy queue management based on Redis for your application. Nest Toolbox - The repository contains a suite of components and modules for NestJS. Nest Multer Extended - Extended MulterModule for NestJS framework with flexible Amazon S3 upload and helpful features. Nest CLS - A continuation-local storage module for Nest (using async_hooks ) NestJS HTTP Promise - A Promise-based alternative to @nestjs/axios , with retries feature using axios-retry and axios . \u72b6\u6001\u7ba1\u7406 Ngrx Nest - Ngrx/store and ngrx/effects on the server using the nest framework. \u4ee3\u7801\u98ce\u683c StyleGuide and Coding Conventions - An unofficial TypeScript StyleGuide. Web Sockets Official Redis Nest Ioredis - A ioredis module for Nest framework. Nest Redis Cluster - Redis(ioredis) module for NestJS framework. Mail Mailman - The only \ud83d\udcee mailer package you need for your NestJS Applications. Nest Mailer - A mailer module for Nest framework. API Swagger - This's an OpenAPI (Swagger) module for Nest. [ Tutorial ] . AsyncAPI - AsyncAPI module for NestJS. Nest-Query - Nest CRUD for GraphQL APIs. Nestia - Automatic SDK generator for the clients. \u4e2d\u95f4\u4ef6 Nest Middlewares - Common, injectable middlewares for NestJS. \u9519\u8bef Eyewitness - Receive error reports directly to your inbox whenever any exception is witnessed \ud83d\udc40 in your NestJS application. Nest Flub - Pretty Error Stack Viewer for NestJS Framework . Nest Enlighten - A laravel-ignition like error page for NestJS Framework. Nest Rate Limiter - A highly configurable rate limiter library. Nest Raven - Sentry Raven Module for NestJS Framework. Lint Eslint Plugin NestJS - ESLint rules for NestJS framework. Typescript-Eslint Plugin NestJS - ESLint rules for NestJS framework. \u8def\u7531\u5668 \ud83d\udea6 Nest Router - Router Module For NestJS Framework \ud83d\udea6 \ud83d\ude80 for organizing your Routes, creating a routes tree, and more. NestJS Dialogflow - Dialog flow module that simplify the web hook handling for your NLP application using NestJS. \u65e5\u5fd7\u8bb0\u5f55 Nest Winston - Winston module for NestJS. Nest Pino - Pino module for NestJS Log with request context in any place. Ogma - A monorepo for the Ogma logger and related packages. \u76d1\u63a7 Nest OpenTelemetry - Deeply integrated NestJS OpenTelemetry module with auto instrumentations. Nest Status Monitor - Simple, self-hosted module based on Socket.io and Chart.js to report realtime server metrics for NestJS based node servers. Nest Terminus - Integrated healthchecks, based on Terminus package. Nest X-Ray - Record incoming and outgoing request for AWS X-Ray , also supports custom instrumentation. Nest OpenTelemetry (OTEL) - OpenTelemetry module for NestJS. \u56fd\u9645\u5316 (i18n) Nest i18n - Adds i18n support easily to your server, with a rich formatting api build in. \u8d27\u5e01 Nestjs Cashify - Currency conversion module for NestJS. \u4e8b\u4ef6 Nest Event - Event handling with decorators for NestJS Framework. \u8eab\u4efd\u9a8c\u8bc1 NestJS Session - Idiomatic Session Module for NestJS. Built on top of express-session . RBAC (\u57fa\u4e8e\u89d2\u8272\u7684\u8bbf\u95ee\u63a7\u5236) Nest RBAC - RBAC module for NestJS, with a dynamic storage and cache. Nest Keycloak Admin - Keycloak Admin Client with support for User Managed Access protocol. NestJS OSO - Library that simplifies the implementation of OSO (open-source policy engine for authorization). \u591a\u79df\u8d41 Nestjs MTenant - A module for NestJS to enable multitenancy support with deep integration into the system as whole (based on async_hooks ). \u5fae\u670d\u52a1 NestJS PG Notify - NestJS custom transport strategy for PostgreSQL Pub/Sub. Nestjs Transport Eventbus - The module for Nest to allow broadcasting events via variety of nestjs trasports in easy way NestJS Google Cloud Pub/Sub Microservice Transport - Custom Google Cloud Pub/Sub microservice transport \u6570\u636e\u5e93 NestJS Prisma - Library and schematics adding Prisma integration to a NestJS application \u6d4b\u8bd5 \u96c6\u5408\u7684\u4f8b\u5b50 Testing Nestjs - A repository to show off to the community methods of testing NestJS including Unit Tests, Integration Tests, E2E Tests, pipes, filters, interceptors, GraphQL, Mongo, TypeORM, and more! \u4f7f\u7528\u5de5\u5177 GoLevelUp utilities for Jest - Utilities for making testing NestJS applications easier. Currently supports Jest. Mockingbird - A library to create typed tests fixtures/mocks using decorators and built-in faker support NestJS + Pact - Injectable Pact.js Consumer/Provider for NestJS \u96c6\u6210 \u8ba4\u8bc1 Nest + Auth0 - NestJS Framework web application with Auth0. Nest Firebase Auth - NestJS Passport Strategy for Firebase Auth using Firebase Admin SDK \u6570\u636e\u5e93 Typeorm - A TypeORM module for Nest framework [ Tutorial ]. Nest Typeorm Factories - A TypeORM Entities factories. Useful for NestJS unit testing. Nest Transact - The simplest transactions using with Nest and TypeORM Nest Mongoose - A Mongoose module for Nest framework. Nest Typegoose - A Typegoose module for Nest framework. Nest MikroORM - A MikroORM module for Nest Framework. Nest Sequelize JWT - Starter kit Nest + Sequelize + jwt. Nest sequelize-typescript - Nest + sequelize-typescript + JWT + Jest + Swagger. Nest Prisma - A Fully Type-Safe ORM for NestJS . GraphQL GoLevelUp NestJS GraphQL Request - Easily inject and work with GraphQLClient instances from server side NestJS code. Useful for interacting with third party GraphQL APIs. GoLevelUp NestJS Hasura - NestJS integrations for working with Hasura which provides realtime GraphQL APIs over your Postgres Database. \u6a21\u5f0f Nest typeorm paginate - A simple function and interfaces for pagination. Nest JSON RPC Transport - JSON RPC transport layer for the NestJS framework. \u7f16\u8f91\u5668 VSCode NestJS Files - Quickly create NestJS Files. NestJS Snippets - Vscode NestJS code Snippets. AMQP Nest AMQP - An amqp connection manager. Nest RabbitMQ - A custom library for NestJS microservice. It allows you to use RabbitMQ or AMQP. GoLevelUp NestJS RabbitMQ - Flexible AMQP integrations for NestJS that supports multiple messaging patterns and intuitive decorators. EventStore Nest EventStore - An evenstore.org module for NestJS CQRS with adapter support to persist lastcheckpoint for Catchup subscription. \u652f\u4ed8\u7f51\u5173 Nest Braintree - A module for webhooks and transactions. Nest Stripe - A module for injecting a configured Stripe client into your services. GoLevelUp Nest Stripe - Injectable client plus autowired Stripe webhook handling for deeper integrations. Frontend Nest CRUD React Admin - A React Admin data provider for NextJS CRUD . Nest AdminBro - NestJS plugin for AdminBro , an automatic admin interface which can be plugged into your application. \u8c03\u5ea6 Nest Bull - A Bull module for Nest framework. \u5de5\u4f5c\u6d41\u81ea\u52a8\u5316 Zeebe microservices \u804a\u5929\u673a\u5668\u4eba Nest Telegraf - A module for creating Telegram bots using NestJS, based on Telegraf . Necord - A module for creating Discord bots using NestJS, based on Discord.js . \u6587\u4ef6\u5b58\u50a8 Nest Storage - A manage file storage module( flydrive ) for NestJS Framework. \u4e91\u7ba1\u7406\u914d\u7f6e Nonfig Config - A module for Nonfig Configuration Management Service. Nonfig combines Configurations and Features. So you change features, and release swiftly, and measure to digital impact. SDK Nest Firebase Admin - NestJS Module for Firebase Admin SDK . \u8fd0\u884c\u65f6 \u547d\u4ee4\u884c/\u7ec8\u7aef Nest Commander - A module for using NestJS to build up CLI applications CLI - CLI tool for NestJS applications. Yeoman Generator - A yeoman generator for NestJS apps. NestJS Console - A NestJS module that provide a cli to application. Typescript SDK Generator - A command-line utility to generate a fully typed SDK from a Nest.js REST API Meetups None at the moment. Why not create a meetup and make a PR? \u8d21\u732e Contributions welcome! Read the contribution guidelines first. \u8bb8\u53ef\u8bc1 To the extent possible under law, juliandavidmr has waived all copyright and related or neighboring rights to this work.","title":"awesome"},{"location":"docs/awesome/#_1","text":"","title":"\u8d44\u6e90"},{"location":"docs/awesome/#_2","text":"Website Official Guide GitHub Repo Examples Nest Starter - Nest framework TypeScript starter. JavaScript Starter - Nest framework JavaScript (ES6 / ES7 / ES8) starter.","title":"\u5b98\u65b9\u8d44\u6e90"},{"location":"docs/awesome/#_3","text":"Gitter Discord Telegram (community maintained) Telegram (Brazilian Portuguese speak community) Telegram (Russian speak community) Slack (Korean speak community) Reddit (community maintained) Facebook (Polish speak community)","title":"\u793e\u533a"},{"location":"docs/awesome/#_4","text":"Revealing framework fundamentals: NestJS behind the curtain by Kamil My\u015bliwiec","title":"\u4f1a\u8c08"},{"location":"docs/awesome/#_5","text":"Introduction to modern Node.js framework NestJS Node Express - Teach how to use NestJS step by step. Build web applications with Nest NestJS30Days - Learn the NestJS framework in 30 days. Build a geofencing web app using NestJS and the Google Maps API Build live comments with sentiment analysis using NestJS Build a chat app with sentiment analysis using NestJS Create a realtime graph using NestJS Build a realtime table with DataTables and NestJS NestJS Basic Auth and Sessions NestJS Hasura Integration via Schema Stitching And JWT Auth MEAN Stack with NestJS and Swagger NestJS Ideas API Building a real time web applications using NestJS and Ably Video Tutorials - Building a full-stack blog with NestJS, Angular and Angular Material. Free Video Course - The complete NestJS developer. Enterprise Node.js framework.","title":"\u6559\u7a0b"},{"location":"docs/awesome/#_6","text":"ChatServer - Server side of Chat App implemented using NestJS. Domain Driven Design - Library - Example of an application that follows Domain Driven Design. Realworld Example App - Exemplary real world backend API built with NestJS + TypeORM. Mant - New Stack on the Market to beat them all MANT. REST NestJS Postgres - CrudJS implemented as a REST API, using NestJS and Postgres. Nest Permissions Seed - A simple application demonstrating the basic usage of permissions with NestJS. Angular NestJS Rendering - Angular 5+ server side rendering using NestJS. Angular Contact Manager App - A Contact Manager App using Angular, NestJS, Mongoose, Passport, JWT. Books Library API - A restful API with NestJS and mongoose. Passport Auth NestJS - Passport strategies and oauth integration built with NestJS. NestJS Auth0 - An example NestJS application that uses Auth0 via Passport for authentication. Nest Ideas API - An implementation of a REST and GraphQL server built with NestJS, PostgresQL and TypeORM. Nestcloud Starter - Quickly start a micro-service app use nestcloud. Nodepress - A RESTful API server application for Blog CMS. Serverless-Lambda-DynamoDB - A fully SERVERLESS in-production application with AWS Lambda, DynamoDB, DynamoDB Streams. Serverless-Lambda-FirestoreDB - A fully SERVERLESS in-production application with AWS Lambda, FirestoreDB, Firebase Auth, Winston Logger, Swagger. Also implements admin role authorization. Serverless NestJS TypeOrm - Example how to NestJS using the serverless framework with TypeORM. Passport Email Auth - Starter project that includes API for user email authentication with MongoDB and PassportJs. NestJS Project Structure - Example of constructing a project structure with NestJS. NestJS Elasticsearch Vue - Autocomplete search with NestJS, Elasticsearch and Vue. TypeScript Clean Architecture - Clean Architecture based application with NestJS, PostgreSQL and TypeORM. NestJS Api Mongoose - Simple example Api Rest with Nestjs 8.x and Mongoose","title":"\u4f8b\u5b50"},{"location":"docs/awesome/#_7","text":"\ud83e\uddea Fully tested NestJS Prisma Clean Architecture Boilerplate - This boilerplate shows how to test your NestJS API with unit, integration and e2e tests. Use-cases are written in functionnal programming with FP-TS. NestJS Permission Boilerplate - This is a basic NestJS boilerplate project built on the more powerful Node.js framework. The main purpose of this project is to dynamically handle roles and permissions assigned to the user. SQB NestJS Boilerplate - A production-ready \ud83c\udfed NestJS boilerplate with batteries \ud83d\udd0b included. No Kidding!. Nest BFF - A boilerplate BFF web application starter-project using NestJS. Includes CLI, and MongoDB migrations features. NestJS Template - Scaffold your next TypeScript API with this production-ready NestJS template crafted for Docker environments. MEAN Todo with NestJS - A simple Todo application with NestJS and Swagger. Included Authorization/Authentication. NestJS Boilerplate - Boilerplate with available authentication, typeorm, env configuration and swagger. Everything you need to start making great things. Awesome Nest Boilerplate - Typescript, Postgresql, TypeORM, Swagger for Api documentation, Role base access control, and best application architecture. NestJS Prisma Starter - Starter project for NestJS includes Graphql with Prisma Client, Passport-JWT authentication, Swagger Api and Docker. TeanJS - TeanJS is a starter that provides you all the keys to be able to start writing your code as quickly as possible. NestJS DDD Boilerplate - Domain Driven Design Base app with NestJS, Class Validator and TypeORM. SOLID principles applied to create fully testable applications. Nest Mongo Graphql - Starter Kit using NestJS MongoDB Graphql and type-graphql https://typegraphql.ml/ inspired the type schema first approach. Ultimate Backend - Enterprise multi-tenant SaaS starter kit with CQRS GraphQL microservice architecture, apollo federation, event source and authentication. NestJS GraphQL Boilerplate - Dockerized API boilerplate with NestJS, TypeORM, TypeGraphQL, MongoDB, GraphQL and automated tasks with Makefile. Code first approach. NextJS & NestJS GraphQL Starter - GraphQL NestJS with NextJS boilerplace. Includes GitHub, Reddit & Google OAuth. The Knests Stack - Full stack/end starter with: PostgreSQL, Knex.js, NestJS, Next.js, GraphQL, React, Material-UI, Docker multistage images for, Docker compose and a GitLab CI/CD pipeline fully configured. Nest Hackathon Starter - Hackathon starter project for NestJS. Includes Prisma, email verification, Passport-JWT authentication, Swagger and more. Stator - A full-stack boilerplate that does it all - automatic releases, deployments, enforced conventions. NestJS REST Starter Kit - By MonstarLab - Features: JWT Auth, RBAC Authorization, TypeORM, winston logger, Pagination, Auto-generated Swagger. Other: prettier, commit-linting husky hooks, SonarCloud, docker-compose. NestJS Api Boilerplate JWT - An API Boilerplate to create a ready-to-use REST API in seconds with NestJS + TypeORM and Passport Auth JWT. NestJS REST API boilerplate for typical project - Boilerplate with Auth, TypeORM, PostgreSQL, Mailing, I18N, Docker, File uploads (support local and Amazon S3 drivers), Swagger, Tests, CI. NestJS and Prisma Yarn Monorepo Starter Template - Full-stack monorepo starter (Yarn workspaces) with Prisma, GraphQL, CI and more. Truthy NestJS Headless CMS - Open source headless CMS API written using NestJS, that has built-in modules like User Management, Role Management, Permission Management, Email Module, Account Settings, 2FA settings, Throttling, RBAC support, Localization, frontend application written with ReactJS & Redux Saga, UI built with Ant design and many more. Other: unit test using Jest, prettier, commit-linting husky hooks, PostgreSQL, Redis, docker etc. NestJS Realtime Chat - Boilerplate for a realtime chat based on Websockets, TypeORM, PostgreSQL, REST, Docker which includes PassportJS/JWT auth, rooms, kick/ban user functionality","title":"\u6837\u677f"},{"location":"docs/awesome/#nestjs","text":"","title":"\u9879\u76ee\u4f7f\u7528 NestJS"},{"location":"docs/awesome/#_8","text":"Ever\u00ae - Open-Source Commerce Platform for On-Demand Economy and Digital Marketplaces. Feednext - Open-Source Social Media Application. Gauzy - Open-Source Profits Sharing Platform for modern agencies and studios. LXDhub - Management system for Linux Containers (LXC). Notadd - Microservice development architecture. Pimp My PR - Open-Source platform for statistics and pull request management. ToolJet - ToolJet is the open-source low-code framework alternative to Retool & Mendix to build & deploy internal tools with minimal engineering effort. ( Source Code ) GPL-3.0 Vendure - Open-Source headless GraphQL ecommerce framework built on NestJS, with a focus on developer productivity and ease of customization. iola - Socket client with Rest API. Amplication - Amplication is an open-source low-code devtool that auto-generates backend apps built with TypeScript and Node.js, and a client built with React.","title":"\u5f00\u6e90"},{"location":"docs/awesome/#_9","text":"","title":"\u7ec4\u4ef6\u548c\u5e93"},{"location":"docs/awesome/#_10","text":"Nest CQRS - A lightweight CQRS module for Nest framework. Typed CQRS - A wrapper for the Nest CQRS library for better typing of query and command results. Nest Config - A Great module to handle project configurations. Nest Typed Config - Intuitive, type-safe configuration module for Nest framework. Nest Consul Service - A Node.js micro-service solution based on Consul, writing by Typescript language and NestJS framework. Nest Easy Config - A NestJS module for managing configs that provides some sleek features. Nest Schedule - Schedule job easier by decorator. Nest Queue - Easy queue management based on Redis for your application. Nest Toolbox - The repository contains a suite of components and modules for NestJS. Nest Multer Extended - Extended MulterModule for NestJS framework with flexible Amazon S3 upload and helpful features. Nest CLS - A continuation-local storage module for Nest (using async_hooks ) NestJS HTTP Promise - A Promise-based alternative to @nestjs/axios , with retries feature using axios-retry and axios .","title":"\u5b9e\u7528\u7a0b\u5e8f"},{"location":"docs/awesome/#_11","text":"Ngrx Nest - Ngrx/store and ngrx/effects on the server using the nest framework.","title":"\u72b6\u6001\u7ba1\u7406"},{"location":"docs/awesome/#_12","text":"StyleGuide and Coding Conventions - An unofficial TypeScript StyleGuide.","title":"\u4ee3\u7801\u98ce\u683c"},{"location":"docs/awesome/#web-sockets","text":"Official","title":"Web Sockets"},{"location":"docs/awesome/#redis","text":"Nest Ioredis - A ioredis module for Nest framework. Nest Redis Cluster - Redis(ioredis) module for NestJS framework.","title":"Redis"},{"location":"docs/awesome/#mail","text":"Mailman - The only \ud83d\udcee mailer package you need for your NestJS Applications. Nest Mailer - A mailer module for Nest framework.","title":"Mail"},{"location":"docs/awesome/#api","text":"Swagger - This's an OpenAPI (Swagger) module for Nest. [ Tutorial ] . AsyncAPI - AsyncAPI module for NestJS. Nest-Query - Nest CRUD for GraphQL APIs. Nestia - Automatic SDK generator for the clients.","title":"API"},{"location":"docs/awesome/#_13","text":"Nest Middlewares - Common, injectable middlewares for NestJS.","title":"\u4e2d\u95f4\u4ef6"},{"location":"docs/awesome/#_14","text":"Eyewitness - Receive error reports directly to your inbox whenever any exception is witnessed \ud83d\udc40 in your NestJS application. Nest Flub - Pretty Error Stack Viewer for NestJS Framework . Nest Enlighten - A laravel-ignition like error page for NestJS Framework. Nest Rate Limiter - A highly configurable rate limiter library. Nest Raven - Sentry Raven Module for NestJS Framework.","title":"\u9519\u8bef"},{"location":"docs/awesome/#lint","text":"Eslint Plugin NestJS - ESLint rules for NestJS framework. Typescript-Eslint Plugin NestJS - ESLint rules for NestJS framework.","title":"Lint"},{"location":"docs/awesome/#_15","text":"Nest Router - Router Module For NestJS Framework \ud83d\udea6 \ud83d\ude80 for organizing your Routes, creating a routes tree, and more.","title":"\u8def\u7531\u5668 \ud83d\udea6"},{"location":"docs/awesome/#_16","text":"NestJS Dialogflow - Dialog flow module that simplify the web hook handling for your NLP application using NestJS.","title":""},{"location":"docs/awesome/#_17","text":"Nest Winston - Winston module for NestJS. Nest Pino - Pino module for NestJS Log with request context in any place. Ogma - A monorepo for the Ogma logger and related packages.","title":"\u65e5\u5fd7\u8bb0\u5f55"},{"location":"docs/awesome/#_18","text":"Nest OpenTelemetry - Deeply integrated NestJS OpenTelemetry module with auto instrumentations. Nest Status Monitor - Simple, self-hosted module based on Socket.io and Chart.js to report realtime server metrics for NestJS based node servers. Nest Terminus - Integrated healthchecks, based on Terminus package. Nest X-Ray - Record incoming and outgoing request for AWS X-Ray , also supports custom instrumentation. Nest OpenTelemetry (OTEL) - OpenTelemetry module for NestJS.","title":"\u76d1\u63a7"},{"location":"docs/awesome/#i18n","text":"Nest i18n - Adds i18n support easily to your server, with a rich formatting api build in.","title":"\u56fd\u9645\u5316 (i18n)"},{"location":"docs/awesome/#_19","text":"Nestjs Cashify - Currency conversion module for NestJS.","title":"\u8d27\u5e01"},{"location":"docs/awesome/#_20","text":"Nest Event - Event handling with decorators for NestJS Framework.","title":"\u4e8b\u4ef6"},{"location":"docs/awesome/#_21","text":"NestJS Session - Idiomatic Session Module for NestJS. Built on top of express-session .","title":"\u8eab\u4efd\u9a8c\u8bc1"},{"location":"docs/awesome/#rbac","text":"Nest RBAC - RBAC module for NestJS, with a dynamic storage and cache. Nest Keycloak Admin - Keycloak Admin Client with support for User Managed Access protocol. NestJS OSO - Library that simplifies the implementation of OSO (open-source policy engine for authorization).","title":"RBAC (\u57fa\u4e8e\u89d2\u8272\u7684\u8bbf\u95ee\u63a7\u5236)"},{"location":"docs/awesome/#_22","text":"Nestjs MTenant - A module for NestJS to enable multitenancy support with deep integration into the system as whole (based on async_hooks ).","title":"\u591a\u79df\u8d41"},{"location":"docs/awesome/#_23","text":"NestJS PG Notify - NestJS custom transport strategy for PostgreSQL Pub/Sub. Nestjs Transport Eventbus - The module for Nest to allow broadcasting events via variety of nestjs trasports in easy way NestJS Google Cloud Pub/Sub Microservice Transport - Custom Google Cloud Pub/Sub microservice transport","title":"\u5fae\u670d\u52a1"},{"location":"docs/awesome/#_24","text":"NestJS Prisma - Library and schematics adding Prisma integration to a NestJS application","title":"\u6570\u636e\u5e93"},{"location":"docs/awesome/#_25","text":"","title":"\u6d4b\u8bd5"},{"location":"docs/awesome/#_26","text":"Testing Nestjs - A repository to show off to the community methods of testing NestJS including Unit Tests, Integration Tests, E2E Tests, pipes, filters, interceptors, GraphQL, Mongo, TypeORM, and more!","title":"\u96c6\u5408\u7684\u4f8b\u5b50"},{"location":"docs/awesome/#_27","text":"GoLevelUp utilities for Jest - Utilities for making testing NestJS applications easier. Currently supports Jest. Mockingbird - A library to create typed tests fixtures/mocks using decorators and built-in faker support NestJS + Pact - Injectable Pact.js Consumer/Provider for NestJS","title":"\u4f7f\u7528\u5de5\u5177"},{"location":"docs/awesome/#_28","text":"","title":"\u96c6\u6210"},{"location":"docs/awesome/#_29","text":"Nest + Auth0 - NestJS Framework web application with Auth0. Nest Firebase Auth - NestJS Passport Strategy for Firebase Auth using Firebase Admin SDK","title":"\u8ba4\u8bc1"},{"location":"docs/awesome/#_30","text":"Typeorm - A TypeORM module for Nest framework [ Tutorial ]. Nest Typeorm Factories - A TypeORM Entities factories. Useful for NestJS unit testing. Nest Transact - The simplest transactions using with Nest and TypeORM Nest Mongoose - A Mongoose module for Nest framework. Nest Typegoose - A Typegoose module for Nest framework. Nest MikroORM - A MikroORM module for Nest Framework. Nest Sequelize JWT - Starter kit Nest + Sequelize + jwt. Nest sequelize-typescript - Nest + sequelize-typescript + JWT + Jest + Swagger. Nest Prisma - A Fully Type-Safe ORM for NestJS .","title":"\u6570\u636e\u5e93"},{"location":"docs/awesome/#graphql","text":"GoLevelUp NestJS GraphQL Request - Easily inject and work with GraphQLClient instances from server side NestJS code. Useful for interacting with third party GraphQL APIs. GoLevelUp NestJS Hasura - NestJS integrations for working with Hasura which provides realtime GraphQL APIs over your Postgres Database.","title":"GraphQL"},{"location":"docs/awesome/#_31","text":"Nest typeorm paginate - A simple function and interfaces for pagination. Nest JSON RPC Transport - JSON RPC transport layer for the NestJS framework.","title":"\u6a21\u5f0f"},{"location":"docs/awesome/#_32","text":"VSCode NestJS Files - Quickly create NestJS Files. NestJS Snippets - Vscode NestJS code Snippets.","title":"\u7f16\u8f91\u5668"},{"location":"docs/awesome/#amqp","text":"Nest AMQP - An amqp connection manager. Nest RabbitMQ - A custom library for NestJS microservice. It allows you to use RabbitMQ or AMQP. GoLevelUp NestJS RabbitMQ - Flexible AMQP integrations for NestJS that supports multiple messaging patterns and intuitive decorators.","title":"AMQP"},{"location":"docs/awesome/#eventstore","text":"Nest EventStore - An evenstore.org module for NestJS CQRS with adapter support to persist lastcheckpoint for Catchup subscription.","title":"EventStore"},{"location":"docs/awesome/#_33","text":"Nest Braintree - A module for webhooks and transactions. Nest Stripe - A module for injecting a configured Stripe client into your services. GoLevelUp Nest Stripe - Injectable client plus autowired Stripe webhook handling for deeper integrations.","title":"\u652f\u4ed8\u7f51\u5173"},{"location":"docs/awesome/#frontend","text":"Nest CRUD React Admin - A React Admin data provider for NextJS CRUD . Nest AdminBro - NestJS plugin for AdminBro , an automatic admin interface which can be plugged into your application.","title":"Frontend"},{"location":"docs/awesome/#_34","text":"Nest Bull - A Bull module for Nest framework.","title":"\u8c03\u5ea6"},{"location":"docs/awesome/#_35","text":"Zeebe microservices","title":"\u5de5\u4f5c\u6d41\u81ea\u52a8\u5316"},{"location":"docs/awesome/#_36","text":"Nest Telegraf - A module for creating Telegram bots using NestJS, based on Telegraf . Necord - A module for creating Discord bots using NestJS, based on Discord.js .","title":"\u804a\u5929\u673a\u5668\u4eba"},{"location":"docs/awesome/#_37","text":"Nest Storage - A manage file storage module( flydrive ) for NestJS Framework.","title":"\u6587\u4ef6\u5b58\u50a8"},{"location":"docs/awesome/#_38","text":"Nonfig Config - A module for Nonfig Configuration Management Service. Nonfig combines Configurations and Features. So you change features, and release swiftly, and measure to digital impact.","title":"\u4e91\u7ba1\u7406\u914d\u7f6e"},{"location":"docs/awesome/#sdk","text":"Nest Firebase Admin - NestJS Module for Firebase Admin SDK .","title":"SDK"},{"location":"docs/awesome/#_39","text":"","title":"\u8fd0\u884c\u65f6"},{"location":"docs/awesome/#_40","text":"Nest Commander - A module for using NestJS to build up CLI applications CLI - CLI tool for NestJS applications. Yeoman Generator - A yeoman generator for NestJS apps. NestJS Console - A NestJS module that provide a cli to application. Typescript SDK Generator - A command-line utility to generate a fully typed SDK from a Nest.js REST API","title":"\u547d\u4ee4\u884c/\u7ec8\u7aef"},{"location":"docs/awesome/#meetups","text":"None at the moment. Why not create a meetup and make a PR?","title":"Meetups"},{"location":"docs/awesome/#_41","text":"Contributions welcome! Read the contribution guidelines first.","title":"\u8d21\u732e"},{"location":"docs/awesome/#_42","text":"To the extent possible under law, juliandavidmr has waived all copyright and related or neighboring rights to this work.","title":"\u8bb8\u53ef\u8bc1"},{"location":"docs/compodoc/_index/","text":"https://github.com/compodoc \u4e3a\u4ec0\u4e48\u4f7f\u7528 Compodoc? Compodoc \u5e2e\u52a9 Angular \u5f00\u53d1\u4eba\u5458\u4e3a\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u6e05\u6670\u800c\u6709\u7528\u7684\u6587\u6863\u3002 \u60a8\u56e2\u961f\u7684\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\uff0c\u6216\u8005\u8bbf\u95ee\u516c\u5171\u6587\u6863\u7684 internet \u8bbf\u95ee\u8005\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u7406\u89e3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u6216\u5e93\u7684\u7279\u6027\u3002 \u5f00\u6e90 Compodoc \u662f Vincent Ogloblinsky \u7684\u5f00\u6e90\u6210\u679c\u3002 \u5f00\u53d1\u8005\u53ef\u4ee5\u5728 GitHub \u4e0a\u8d21\u732e\u548c\u5206\u53c9\u56de\u8d2d\u3002 \u4e0d\u8981\u5fd8\u8bb0\u9605\u8bfb \u8d21\u732e\u6307\u5357 \u3002 \u51c6\u5907\u597d\u4e86\u5417?\u8d70\u5427! \u8bf7\u9605\u8bfb installation \u9875\u9762\u4ee5\u4e86\u89e3\u6709\u5173\u5b89\u88c5\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 usage \u5e2e\u52a9\u60a8\u4f7f\u7528\u6240\u6709\u53ef\u7528\u7684\u9009\u9879\u3002 \u652f\u6301\u8005 \u8bf7\u6bcf\u6708\u6350\u6b3e\u652f\u6301\u6211\u4eec\uff0c\u5e76\u534f\u52a9\u6211\u4eec\u7ee7\u7eed\u6d3b\u52a8\u3002[\u6210\u4e3a\u652f\u6301\u8005]\u652f\u6301\u5730\u5740) \u8d5e\u52a9\u5546 \u901a\u8fc7\u6210\u4e3a\u8d5e\u52a9\u8005\u6765\u652f\u6301\u8fd9\u4e2a\u9879\u76ee\u3002\u60a8\u7684\u5fbd\u6807\u5c06\u663e\u793a\u5728\u8fd9\u91cc\u4e0e\u4e00\u4e2a\u94fe\u63a5\u5230\u60a8\u7684\u7f51\u7ad9\u3002[\u6210\u4e3a\u8d5e\u52a9\u5546]\u652f\u6301\u5730\u5740)","title":"Compodoc"},{"location":"docs/compodoc/_index/#compodoc","text":"Compodoc \u5e2e\u52a9 Angular \u5f00\u53d1\u4eba\u5458\u4e3a\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u6e05\u6670\u800c\u6709\u7528\u7684\u6587\u6863\u3002 \u60a8\u56e2\u961f\u7684\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\uff0c\u6216\u8005\u8bbf\u95ee\u516c\u5171\u6587\u6863\u7684 internet \u8bbf\u95ee\u8005\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u7406\u89e3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u6216\u5e93\u7684\u7279\u6027\u3002","title":"\u4e3a\u4ec0\u4e48\u4f7f\u7528 Compodoc?"},{"location":"docs/compodoc/_index/#_1","text":"Compodoc \u662f Vincent Ogloblinsky \u7684\u5f00\u6e90\u6210\u679c\u3002 \u5f00\u53d1\u8005\u53ef\u4ee5\u5728 GitHub \u4e0a\u8d21\u732e\u548c\u5206\u53c9\u56de\u8d2d\u3002 \u4e0d\u8981\u5fd8\u8bb0\u9605\u8bfb \u8d21\u732e\u6307\u5357 \u3002","title":"\u5f00\u6e90"},{"location":"docs/compodoc/_index/#_2","text":"\u8bf7\u9605\u8bfb installation \u9875\u9762\u4ee5\u4e86\u89e3\u6709\u5173\u5b89\u88c5\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 usage \u5e2e\u52a9\u60a8\u4f7f\u7528\u6240\u6709\u53ef\u7528\u7684\u9009\u9879\u3002","title":"\u51c6\u5907\u597d\u4e86\u5417?\u8d70\u5427!"},{"location":"docs/compodoc/_index/#_3","text":"\u8bf7\u6bcf\u6708\u6350\u6b3e\u652f\u6301\u6211\u4eec\uff0c\u5e76\u534f\u52a9\u6211\u4eec\u7ee7\u7eed\u6d3b\u52a8\u3002[\u6210\u4e3a\u652f\u6301\u8005]\u652f\u6301\u5730\u5740)","title":"\u652f\u6301\u8005"},{"location":"docs/compodoc/_index/#_4","text":"\u901a\u8fc7\u6210\u4e3a\u8d5e\u52a9\u8005\u6765\u652f\u6301\u8fd9\u4e2a\u9879\u76ee\u3002\u60a8\u7684\u5fbd\u6807\u5c06\u663e\u793a\u5728\u8fd9\u91cc\u4e0e\u4e00\u4e2a\u94fe\u63a5\u5230\u60a8\u7684\u7f51\u7ad9\u3002[\u6210\u4e3a\u8d5e\u52a9\u5546]\u652f\u6301\u5730\u5740)","title":"\u8d5e\u52a9\u5546"},{"location":"docs/compodoc/comments/","text":"Compodoc \u4f7f\u7528 Typescript \u7684 AST \u89e3\u6790\u5668\u548c\u5b83\u7684\u5185\u90e8 api\uff0c\u6240\u4ee5\u6ce8\u91ca\u5fc5\u987b\u662f JSDoc \u6ce8\u91ca: JavaScript /** * \u652f\u6301\u6ce8\u89c6 */ \u8fd9\u4e9b\u662f\u4e0d\u652f\u6301\u7684: JavaScript /* * \u4e0d\u652f\u6301\u7684\u6ce8\u89c6 */ /* \u4e0d\u652f\u6301\u7684\u6ce8\u89c6 */ // \u4e0d\u652f\u6301\u7684\u6ce8\u89c6 \u5728\u6ce8\u91ca\u4e2d\u521b\u5efa\u65b0\u884c\uff0c\u4e24\u884c\u4e4b\u95f4\u6709\u4e00\u4e2a\u7a7a\u884c\u3002 JavaScript /** * First line * * Second line */ \u4e0b\u9762\u7684\u793a\u4f8b\u5c06\u5728\u8f93\u51fa\u7684\u6587\u6863\u4e2d\u53ea\u751f\u6210\u4e00\u884c\u3002 JavaScript /** * First line * Second line */","title":"\u6ce8\u91ca"},{"location":"docs/compodoc/demo/","text":"\u73b0\u573a\u6f14\u793a: Angular \u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684 TodoMVC \u5e94\u7528\u7a0b\u5e8f \u6f14\u793a\u9879\u76ee\u751f\u6210\u7684\u6587\u6863\u3002 Nest \u5b83\u662f\u4e3a\u8fd9\u4e2a\u6f14\u793a\u9879\u76ee\u751f\u6210\u7684\u6587\u6863\uff0c\u8fd9\u662f\u4e00\u4e2a RealWorld \u793a\u4f8b\u5e94\u7528\u7a0b\u5e8f . Stencil \u5b83\u662f\u4e3a\u8fd9\u4e2a\u6f14\u793a\u9879\u76ee\u751f\u6210\u7684\u6587\u6863\uff0c\u8fd9\u662f\u4e00\u4e2a Stencil \u793a\u4f8b\u5e94\u7528\u7a0b\u5e8f . \u622a\u56fe \u4e0b\u9762\u662f\u8fd9\u4e2a\u9879\u76ee SoundCloud API \u5ba2\u6237\u7aef \u548c\u9ed8\u8ba4\u4e3b\u9898(gitbook)\u751f\u6210\u6587\u6863\u7684\u622a\u56fe \u81ea\u8ff0\u6587\u4ef6\u9875\u9762 \u6982\u8ff0\u9875\u9762 \u6a21\u5757\u9875\u9762 \u5355\u6a21\u5757\u9875\u9762 \u7ec4\u4ef6\u9875\u9762 \u6e90\u4ee3\u7801\u9009\u9879\u5361 \u641c\u7d22\u9875\u9762 \u8986\u76d6\u7387\u62a5\u544a","title":"\u73b0\u573a\u6f14\u793a"},{"location":"docs/compodoc/demo/#_1","text":"\u4e0b\u9762\u662f\u8fd9\u4e2a\u9879\u76ee SoundCloud API \u5ba2\u6237\u7aef \u548c\u9ed8\u8ba4\u4e3b\u9898(gitbook)\u751f\u6210\u6587\u6863\u7684\u622a\u56fe","title":"\u622a\u56fe"},{"location":"docs/compodoc/demo/#_2","text":"","title":"\u81ea\u8ff0\u6587\u4ef6\u9875\u9762"},{"location":"docs/compodoc/demo/#_3","text":"","title":"\u6982\u8ff0\u9875\u9762"},{"location":"docs/compodoc/demo/#_4","text":"","title":"\u6a21\u5757\u9875\u9762"},{"location":"docs/compodoc/demo/#_5","text":"","title":"\u5355\u6a21\u5757\u9875\u9762"},{"location":"docs/compodoc/demo/#_6","text":"","title":"\u7ec4\u4ef6\u9875\u9762"},{"location":"docs/compodoc/demo/#_7","text":"","title":"\u6e90\u4ee3\u7801\u9009\u9879\u5361"},{"location":"docs/compodoc/demo/#_8","text":"","title":"\u641c\u7d22\u9875\u9762"},{"location":"docs/compodoc/demo/#_9","text":"","title":"\u8986\u76d6\u7387\u62a5\u544a"},{"location":"docs/compodoc/documentation-coverage/","text":"General information Documentation coverage is calculated only for all statement of the file, even decorators. Private functions are not part of the calculation. The command --coverageTest gives the ability to test under a CI context the level of documentation coverage. The command --coverageTestThresholdFail gives the ability to specify if command will fail with error or just warn user (true: error, false: warn) (default: true) The command --coverageMinimumPerFile gives the ability to specify a minimum of coverage per file. Test coverage during commit process install first lint-staged : npm i -d lint-staged add the configuration inside your package.json file : JSON \"devDependencies\" : { ... }, \"lint-staged\" : { \"linters\" : { \"*.ts\" : [ \"compodoc --coverageMinimumPerFile 25\" ] } }","title":"\u6587\u6863\u8986\u76d6"},{"location":"docs/compodoc/documentation-coverage/#general-information","text":"Documentation coverage is calculated only for all statement of the file, even decorators. Private functions are not part of the calculation. The command --coverageTest gives the ability to test under a CI context the level of documentation coverage. The command --coverageTestThresholdFail gives the ability to specify if command will fail with error or just warn user (true: error, false: warn) (default: true) The command --coverageMinimumPerFile gives the ability to specify a minimum of coverage per file.","title":"General information"},{"location":"docs/compodoc/documentation-coverage/#test-coverage-during-commit-process","text":"install first lint-staged : npm i -d lint-staged add the configuration inside your package.json file : JSON \"devDependencies\" : { ... }, \"lint-staged\" : { \"linters\" : { \"*.ts\" : [ \"compodoc --coverageMinimumPerFile 25\" ] } }","title":"Test coverage during commit process"},{"location":"docs/compodoc/extensions/","text":"Gulp \u6709\u4e00\u4e2a\u63d2\u4ef6\u53ef\u7528\u6765\u8fd0\u884c Compodoc \u4e0e Gulp\u3002 \u4f60\u53ef\u4ee5\u5728 NPM \u4e0a\u627e\u5230\u5b83: https://www.npmjs.com/package/gulp-compodoc JHispter \u6709\u4e00\u4e2a JHipster \u6a21\u5757\u53ef\u4ee5\u7528 JHipster \u8fd0\u884c Compodoc\u3002 \u4f60\u53ef\u4ee5\u5728 NPM \u4e0a\u627e\u5230\u5b83: https://www.npmjs.com/package/generator-jhipster-compodoc","title":"\u6269\u5c55"},{"location":"docs/compodoc/extensions/#gulp","text":"\u6709\u4e00\u4e2a\u63d2\u4ef6\u53ef\u7528\u6765\u8fd0\u884c Compodoc \u4e0e Gulp\u3002 \u4f60\u53ef\u4ee5\u5728 NPM \u4e0a\u627e\u5230\u5b83: https://www.npmjs.com/package/gulp-compodoc","title":"Gulp"},{"location":"docs/compodoc/extensions/#jhispter","text":"\u6709\u4e00\u4e2a JHipster \u6a21\u5757\u53ef\u4ee5\u7528 JHipster \u8fd0\u884c Compodoc\u3002 \u4f60\u53ef\u4ee5\u5728 NPM \u4e0a\u627e\u5230\u5b83: https://www.npmjs.com/package/generator-jhipster-compodoc","title":"JHispter"},{"location":"docs/compodoc/features/","text":"\u652f\u6301 \u2014 Angular , NestJS & Stencil \u5e72\u51c0,\u7b80\u5355\u7684\u8bbe\u8ba1 \u2014 \u4f7f\u7528 Compodoc\uff0c\u4e3b\u8981\u7aef\u70b9\u4f4d\u4e8e\u6587\u6863\u7684\u5de6\u4fa7\uff0c\u6240\u6709\u5185\u5bb9\u4f4d\u4e8e\u53f3\u4fa7 \u7f8e\u4e3d\u7684\u4e3b\u9898 \u2014 8 \u4e2a\u4e3b\u9898 \u53ef\u4ee5\u4ece\u8457\u540d\u7684\u6587\u6863\u5de5\u5177\u5982 Gitbook , Read the Docs \u6216\u9879\u76ee\u5982 Vagrant , Laravel , Postmark , Material design and Stripe \u4e2d\u83b7\u5f97. i18n \u2014 \u8bb8\u591a\u53ef\u7528\u7684\u8bed\u8a00: de-DE, en-US, es-ES, fr-FR, hu-HU, it-IT, ja-JP, nl-NL, pl-PL, pt-BR, sk-SK, zh-CN \u641c\u7d22 \u2014 Compodoc \u5305\u62ec\u4e00\u4e2a\u5f3a\u5927\u7684\u641c\u7d22\u5f15\u64ce( lunr.js )\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u627e\u5230\u60a8\u7684\u4fe1\u606f \u81ea\u52a8\u76ee\u5f55 - API \u76ee\u5f55\u662f\u4f7f\u7528\u5728\u6587\u4ef6\u89e3\u6790\u671f\u95f4\u627e\u5230\u7684\u5143\u7d20\u751f\u6210\u7684 \u5f00\u6e90\u548c npm \u53d1\u5e03 - \u4f7f\u7528 npm \u548c\u4e00\u4e2a\u811a\u672c\u76f4\u63a5\u5728\u4f60\u7684\u9879\u76ee\u4e2d\u4f7f\u7528\u5b83\uff0c\u5c31\u662f\u8fd9\u6837! \u5f53\u5730\u7684\u4e00\u4e2a\u5de5\u5177 - \u4e0d\u9700\u8981\u670d\u52a1\u5668\uff0c\u4e0d\u9700\u8981\u5728\u7ebf\u4e0a\u4f20\u8d44\u6e90 \u6ca1\u6709 TypeScript \u7f16\u8bd1 - Compodoc \u89e3\u6790\u4f60\u7684\u4ee3\u7801 JSDoc \u8f7b\u652f\u6301 - \u652f\u6301 @param , @returns , @link , @ignore and @example \u6807\u7b7e \u6587\u6863\u8986\u76d6 - \u83b7\u53d6\u9879\u76ee\u7684\u6587\u6863\u8986\u76d6\u7387\u62a5\u544a Angular-CLI \u53cb\u597d - Compodoc \u652f\u6301\u5f00\u7bb1\u5373\u7528\u7684 Angular-CLI \u9879\u76ee \u6697\u9ed1\u6a21\u5f0f - Compodoc \u652f\u6301\u60a8\u7684\u6d4f\u89c8\u5668\u7684\u5f00\u7bb1\u6697\u6a21\u5f0f","title":"\u7279\u6027"},{"location":"docs/compodoc/hosting/","text":"Github pages \u9075\u5faa\u8fd9\u4e2a\u4f1f\u5927\u7684\u6559\u7a0b: https://voorhoede.github.io/front-end-tooling-recipes/travis-deploy-to-gh-pages/","title":"\u6258\u7ba1"},{"location":"docs/compodoc/hosting/#github-pages","text":"\u9075\u5faa\u8fd9\u4e2a\u4f1f\u5927\u7684\u6559\u7a0b: https://voorhoede.github.io/front-end-tooling-recipes/travis-deploy-to-gh-pages/","title":"Github pages"},{"location":"docs/compodoc/installation/","text":"Node.js \u7248\u672c Compodoc \u53ea\u4f7f\u7528 LTS \u7248\u672c\u8fdb\u884c\u6d4b\u8bd5: v12.x, v14.x Angular-CLI Compodoc \u652f\u6301\u6700\u65b0\u7684 Angular-CLI \u7248\u672c:13.x \u53ea\u9700\u5728\u4e00\u4e2a\u65b0\u7684\u6216\u73b0\u6709\u7684\u9879\u76ee\u4e2d\u8fd0\u884c Compodoc\u3002 \u5168\u5c40\u5b89\u88c5 \u4ece npm \u5b89\u88c5: Bash npm install -g @compodoc/compodoc \u5982\u679c\u4f60\u5728 Windows \u4e0a\u4f7f\u7528 PowerShell\uff0c\u8bf7\u6dfb\u52a0\u5f15\u53f7: Bash npm install -g \"@compodoc/compodoc\" \u672c\u5730\u5b89\u88c5 \u4f7f\u7528 Angular CLI \u5b89\u88c5:npm scripts + \u7279\u6b8a\u7684 tsconfig.doc.json \u6587\u4ef6\u5c06\u88ab\u521b\u5efa\u3002 Bash ng add @compodoc/compodoc \u6216\u76f4\u63a5 Bash npm install --save-dev @compodoc/compodoc \u8fd0\u884c \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a tsconfig.doc.json \u7684\u6587\u4ef6\uff0c\u5305\u542b\u4e00\u4e2a\u6307\u5411 src \u6587\u4ef6\u5939\u7684\u952e include \uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 exclude \u952e: Text Only { \"include\": [\"src/**/*.ts\"], \"exclude\": [\"src/test.ts\", \"src/**/*.spec.ts\", \"src/app/file-to-exclude.ts\"] } \u5728\u4f60\u7684 package.json \u4e2d\u5b9a\u4e49\u4e00\u4e2a\u811a\u672c\u4efb\u52a1(\u4f7f\u7528 npm 6.x): Bash \"scripts\" : { \"compodoc\" : \"npx compodoc -p tsconfig.doc.json\" } \u5e76\u50cf\u6b63\u5e38\u7684 NPM \u811a\u672c\u4e00\u6837\u8fd0\u884c\u5b83: Bash npm run compodoc \u6216\u4e0e npx: Bash npx @compodoc/compodoc ... \u8bf7\u53c2\u9605 usage \u4e86\u89e3\u66f4\u591a\u7ec6\u8282\u3002 tsconfig \u6587\u4ef6\u5728\u4ee3\u7801\u5e93\u4e2d\u7684\u4f4d\u7f6e Compodoc \u4ece -p \u9009\u9879\u63d0\u4f9b\u7684 tsconfig \u6587\u4ef6\u7684\u6587\u4ef6\u5939\u7ea7\u522b\u542f\u52a8\u3002 Angular CLI \u9879\u76ee\u7684\u4f8b\u5b50: Text Only . \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 app \u2502 \u2502 \u251c\u2500\u2500 app.component.ts \u2502 \u2502 \u2514\u2500\u2500 app.module.ts \u2502 \u251c\u2500\u2500 main.ts \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 tsconfig.app.json \u251c\u2500\u2500 tsconfig.doc.json \u2514\u2500\u2500 tsconfig.json","title":"\u5b89\u88c5"},{"location":"docs/compodoc/installation/#nodejs","text":"Compodoc \u53ea\u4f7f\u7528 LTS \u7248\u672c\u8fdb\u884c\u6d4b\u8bd5: v12.x, v14.x","title":"Node.js \u7248\u672c"},{"location":"docs/compodoc/installation/#angular-cli","text":"Compodoc \u652f\u6301\u6700\u65b0\u7684 Angular-CLI \u7248\u672c:13.x \u53ea\u9700\u5728\u4e00\u4e2a\u65b0\u7684\u6216\u73b0\u6709\u7684\u9879\u76ee\u4e2d\u8fd0\u884c Compodoc\u3002","title":"Angular-CLI"},{"location":"docs/compodoc/installation/#_1","text":"\u4ece npm \u5b89\u88c5: Bash npm install -g @compodoc/compodoc \u5982\u679c\u4f60\u5728 Windows \u4e0a\u4f7f\u7528 PowerShell\uff0c\u8bf7\u6dfb\u52a0\u5f15\u53f7: Bash npm install -g \"@compodoc/compodoc\"","title":"\u5168\u5c40\u5b89\u88c5"},{"location":"docs/compodoc/installation/#_2","text":"\u4f7f\u7528 Angular CLI \u5b89\u88c5:npm scripts + \u7279\u6b8a\u7684 tsconfig.doc.json \u6587\u4ef6\u5c06\u88ab\u521b\u5efa\u3002 Bash ng add @compodoc/compodoc \u6216\u76f4\u63a5 Bash npm install --save-dev @compodoc/compodoc","title":"\u672c\u5730\u5b89\u88c5"},{"location":"docs/compodoc/installation/#_3","text":"\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a tsconfig.doc.json \u7684\u6587\u4ef6\uff0c\u5305\u542b\u4e00\u4e2a\u6307\u5411 src \u6587\u4ef6\u5939\u7684\u952e include \uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 exclude \u952e: Text Only { \"include\": [\"src/**/*.ts\"], \"exclude\": [\"src/test.ts\", \"src/**/*.spec.ts\", \"src/app/file-to-exclude.ts\"] } \u5728\u4f60\u7684 package.json \u4e2d\u5b9a\u4e49\u4e00\u4e2a\u811a\u672c\u4efb\u52a1(\u4f7f\u7528 npm 6.x): Bash \"scripts\" : { \"compodoc\" : \"npx compodoc -p tsconfig.doc.json\" } \u5e76\u50cf\u6b63\u5e38\u7684 NPM \u811a\u672c\u4e00\u6837\u8fd0\u884c\u5b83: Bash npm run compodoc \u6216\u4e0e npx: Bash npx @compodoc/compodoc ... \u8bf7\u53c2\u9605 usage \u4e86\u89e3\u66f4\u591a\u7ec6\u8282\u3002","title":"\u8fd0\u884c"},{"location":"docs/compodoc/installation/#tsconfig","text":"Compodoc \u4ece -p \u9009\u9879\u63d0\u4f9b\u7684 tsconfig \u6587\u4ef6\u7684\u6587\u4ef6\u5939\u7ea7\u522b\u542f\u52a8\u3002 Angular CLI \u9879\u76ee\u7684\u4f8b\u5b50: Text Only . \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 app \u2502 \u2502 \u251c\u2500\u2500 app.component.ts \u2502 \u2502 \u2514\u2500\u2500 app.module.ts \u2502 \u251c\u2500\u2500 main.ts \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 tsconfig.app.json \u251c\u2500\u2500 tsconfig.doc.json \u2514\u2500\u2500 tsconfig.json","title":"tsconfig \u6587\u4ef6\u5728\u4ee3\u7801\u5e93\u4e2d\u7684\u4f4d\u7f6e"},{"location":"docs/compodoc/jsdoc-tags/","text":"\u76ee\u524d Compodoc \u53ea\u652f\u6301\u8fd9\u4e9b JSDoc \u6807\u7b7e (\u7531\u4e8e TypeScript \u7f16\u8bd1\u5668\u7684\u9650\u5236 ) : @deprecated Deprecated description JavaScript /** * This is my class * @deprecated This class is deprecated */ class MyClass {} @returns {Type} Description JavaScript /** * @param {string} target The target to process * @returns The processed target number */ function processTarget ( target : string ) : number ; @ignore , @internal \u8fd9\u4e9b\u6807\u8bb0\u6307\u793a\u4ee3\u7801\u4e2d\u7684\u7b26\u53f7\u6c38\u8fdc\u4e0d\u5e94\u8be5\u51fa\u73b0\u5728\u6587\u6863\u4e2d\u3002 @ignore \u9002\u7528\u4e8e\u7c7b\u3001\u7ec4\u4ef6\u6216\u53ef\u6ce8\u5165\u7ec4\u4ef6\u5185\u90e8\uff0c\u4e5f\u9002\u7528\u4e8e\u6574\u4e2a\u7ec4\u4ef6\u3002 JavaScript /** * @ignore */ @ Component ({ selector : \"app-root\" , templateUrl : \"./app.component.html\" , styleUrls : [ \"./app.component.css\" ], }) export class AppComponent {} JavaScript /** * Footer component */ @ Component ({ selector : \"the-footer\" , templateUrl : \"./footer.component.html\" , styleUrls : [ \"./footer.component.css\" ], }) export class FooterComponent { /** * @ignore */ ignoredProperty : string ; /** * @ignore */ @ Input () ignoredInput : string ; /** * @ignore */ @ Output () ignoredOutput ; /** * @ignore */ ignoredFunction () {} } @param {Type} Name Description JavaScript /** * @example * This is a good example * processTarget('yo') * * @param {string} target The target to process see {@link Todo} * @returns The processed target number */ function processTarget ( target : string ) : number ; @link : \u4f60\u53ef\u4ee5\u50cf JSDoc \u4e00\u6837\u4f7f\u7528\u8fd9\u4e09\u79cd\u8bed\u6cd5: JavaScript //for an internal reference { @ link Todo } [ Todo ]{ @ link Todo } { @ link Todo | TodoClass } Anchors are supported : [ Todo ]{ @ link Todo # myproperty } //for an external link [ Google ]{ @ link http : //www.google.com} { @ link http : //www.apple.com|Apple} { @ link https : //github.com GitHub} @example : \u8981\u7ed9\u51fa\u6307\u4ee4\u3001\u7ec4\u4ef6\u548c\u7ba1\u9053\u88c5\u9970\u5668\u7684\u793a\u4f8b\uff0c\u8bf7\u4f7f\u7528@example \u6216 markdown: \u7f29\u8fdb\u7684\u8b66\u544a : TypeScript \u5bf9\u65b0\u884c\u6709\u5185\u90e8\u7a7a\u767d\uff0c\u5982\u679c\u4f60\u60f3\u4fdd\u6301\u4e00\u5b9a\u7a0b\u5ea6\u7684\u7f29\u8fdb\uff0c\u5c31\u50cf\u4e0b\u4e00\u4e2a\u4f8b\u5b50\u4e00\u6837\uff0c\u81f3\u5c11\u653e 13 \u4e2a\u7a7a\u683c\u5b57\u7b26\u3002 JavaScript /** * \u663e\u793a\u67d0\u4e00\u5929\u7684\u6240\u6709\u4e8b\u4ef6\u3002\u4f7f\u7528\u793a\u4f8b: * * `` ` * &lt;mwl-calendar-day-view * [viewDate]=\"viewDate\" * [events]=\"events\"&gt; * &lt;/mwl-calendar-day-view&gt; * `` ` */ /** * \u663e\u793a\u67d0\u4e00\u5929\u7684\u6240\u6709\u4e8b\u4ef6\u3002\u4f7f\u7528\u793a\u4f8b: * * @example * <mwl-calendar-day-view * [viewDate]=\"viewDate\" * [events]=\"events\"> * </mwl-calendar-day-view> */","title":"JSDoc \u6807\u7b7e"},{"location":"docs/compodoc/live-example-tab/","text":"\u7ec4\u4ef6\u3001\u6307\u4ee4\u548c\u670d\u52a1\u7684\u793a\u4f8b\u6807\u7b7e \u901a\u8fc7 \u6807\u7b7e\u7684\u5e2e\u52a9\uff0c\u53ef\u4ee5\u5c06 Live demo examples \u6807\u7b7e\u6dfb\u52a0\u5230\u7ec4\u4ef6\u3001\u6307\u4ee4\u548c\u670d\u52a1\u6587\u6863\u9875\u9762\u3002 JavaScript /** * Example of usage: * <example-url>http://localhost/demo/mysample.component.html</example-url> * <example-url>/demo/mysample.component.html</example-url> */","title":"\u73b0\u573a\u4f8b\u5b50\u9009\u9879\u5361"},{"location":"docs/compodoc/live-example-tab/#_1","text":"\u901a\u8fc7 \u6807\u7b7e\u7684\u5e2e\u52a9\uff0c\u53ef\u4ee5\u5c06 Live demo examples \u6807\u7b7e\u6dfb\u52a0\u5230\u7ec4\u4ef6\u3001\u6307\u4ee4\u548c\u670d\u52a1\u6587\u6863\u9875\u9762\u3002 JavaScript /** * Example of usage: * <example-url>http://localhost/demo/mysample.component.html</example-url> * <example-url>/demo/mysample.component.html</example-url> */","title":"\u7ec4\u4ef6\u3001\u6307\u4ee4\u548c\u670d\u52a1\u7684\u793a\u4f8b\u6807\u7b7e"},{"location":"docs/compodoc/miscellaneous/","text":"\u8c01\u5728\u4f7f\u7528\u5eb7\u6ce2\u591a\u514b? angular-starter angular-seed ngx-admin angular-calendar angular-gauge generator-angular2-library Ionic Firebase Starter Application angular-text-input-highlight ngx-wow ngx-table-editor ngqp \u8fd9\u4e9b\u662f \u6211\u4eec\u77e5\u9053\u7684 \u3002 \u5e0c\u671b\u60a8\u7684\u9879\u76ee\u5217\u5728\u8fd9\u91cc?\u7ed9\u6211\u4eec\u5199\u4fe1\u3002 \u4ed6\u4eec\u5bf9\u5eb7\u6ce2\u591a\u514b\u6709\u4ec0\u4e48\u770b\u6cd5? \u6211\u4e00\u76f4\u5728\u5411\u6211\u7684130\u4e2a\u7814\u8ba8\u4f1a\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4eba\u4ecb\u7ecdCompodoc ! \u2014 Laurent Duveau \ud83c\udde8\ud83c\udde6 (@LaurentDuveau) 5 d\u00e9cembre 2018 \u25b6\ufe0fDocumentation matters\u25c0\ufe0f If it is not documented, \u201cit does not exists\u201d for developers Need a help? Use Compodoc \ud83d\udcdaas do @Sonietta and @carlobonamico Join their talk at room 3! #codemotion pic.twitter.com/zEfe0OnfYo \u2014 Codemotion (@CodemotionIT) 29 novembre 2018 #compodoc is insane. Seriously one of the best tools for @angular \u2014 Zachary Hale (@Hale88Hale) 9 octobre 2018 #Compodoc - amazing documentation tool for your #Angular \\ #Nestjs application Big thanks to the author, @vogloblinsky , awesome! \u2014 Boris Malaichik (@BMalaichik) 1 octobre 2018 Just used #compodoc in one of our (inherited) projects! Gave me really great overview of what's going on in the application \ud83d\ude0b Big thanks to @vogloblinsky and everyone who is contributing to this great project! pic.twitter.com/SW0ZEQwpar \u2014 Sherry List \ud83d\udd1c \u2708\ufe0f \ud83c\udde8\ud83c\uddf4 (@sherrrylst) 25 juillet 2018 Such a great tool :) Compodoc - The missing documentation tool for your #Angular application https://t.co/uy6SIoIsI2 pic.twitter.com/NFNxREE4R4 \u2014 Nir kaufman (@nirkaufman) 23 f\u00e9vrier 2018 Compodoc - The missing documentation tool for your Angular application. Need to check out. https://t.co/iHeQg9Ue3H \u2014 David Boster (@davidboster) 4 f\u00e9vrier 2018 I love #Compodoc . If you use #Angular , you should use it. https://t.co/j8doRX1kpF \u2014 Leo Caseiro \ud83c\udde7\ud83c\uddf7 \ud83c\udde6\ud83c\uddfa (@leocaseiro) 5 janvier 2018 #compodoc is blowing my mind right now, just pointed it at an Angular4 app and it\u2019s generated beautiful docs with component trees, module visualisations, the works! Top work @vogloblinsky and @manekinekko \u2014 Mel Lota (@mlota) 13 d\u00e9cembre 2017 Wanna documenting ur #angular & #typescript code? Definitely check out Compodoc! By @vogloblinsky on #ngbe \u2014 Juri Strumpflohner (@juristr) 8 d\u00e9cembre 2017 7 Angular Tools That You Should Consider \ud83d\udd28 @code Snippets by @John_Papa , CompoDoc by @vogloblinsky , Augury by @rangleio and much more! pic.twitter.com/upEnn0S84X \u2014 Minko Gechev (@mgechev) 5 d\u00e9cembre 2017 Seriously, this is one of the coolest Angular projects we've seen yet. It allows you to totally visualize your components. by @vogloblinsky https://t.co/l8A9Rr814B \u2014 ng-conf (@ngconf) 18 d\u00e9cembre 2017 Swagger is some cool stuff. For front-end and Back-end @SwaggerApi and CompoDoc by @vogloblinsky makes a good combination #fullstack #developers \u2014 Saiyaff Farouk (@msaiyaff) 17 d\u00e9cembre 2017 #compodoc is blowing my mind right now, just pointed it at an Angular4 app and it\u2019s generated beautiful docs with component trees, module visualisations, the works! Top work @vogloblinsky and @manekinekko \u2014 Mel Lota (@mlota) 13 d\u00e9cembre 2017 Wanna documenting ur #angular & #typescript code? Definitely check out Compodoc! By @vogloblinsky on #ngbe \u2014 Juri Strumpflohner (@juristr) 8 d\u00e9cembre 2017 7 Angular Tools That You Should Consider \ud83d\udd28 @code Snippets by @John_Papa , CompoDoc by @vogloblinsky , Augury by @rangleio and much more! pic.twitter.com/upEnn0S84X \u2014 Minko Gechev (@mgechev) 5 d\u00e9cembre 2017 A good documentation tool for Angular project : Compodoc https://t.co/I3cFnwbMd4 \u2014 Maxime Bruguet (@MaximeBruguet) 25 novembre 2017 . @vogloblinsky we have been using #compodoc internally @CapitalOne Thanks for all the hardwork! #Angular #typescript https://t.co/ZzK5ZGf0t9 \u2014 Youssef Taghlabi (@YoussefTaghlabi) 31 octobre 2017 thx @vogloblinsky for compodoc https://t.co/DYr3SlTw18 ...it already helped a lot ;) \u2014 matthias rebel (@_rebeling) 17 juin 2017 Najwi\u0119ksze odkrycie dnia dzisiejszego - compodoc Budowanie dokumentacji z kodu projektu na @angular https://t.co/Vdx0L08Z5g #cool #stuff \u2014 Piotr Kowalski (@piecioshka) 22 mai 2017 how to document #angular2 #Angular applications ? have a look https://t.co/D3SdWdZ5pv they did a great job. #compodoc \u2014 carsten Piepel (@cpiepel_de) 17 mai 2017 Compodoc es una excelente herramienta para documentar todos nuestros proyectos de #angular2 https://t.co/iYHKVSq2no \u2014 tsugiteam (@tsugiteam) 4 mai 2017 Hey @vogloblinsky and @manekinekko the team here at work is falling in \u2764\ufe0f with #compodoc . Thank you x1000! https://t.co/wme8n3cVHv \u2014 Justin (@schwarty) 3 mai 2017 @vogloblinsky @schwarty @amcdnl @manekinekko @AngularAir Compodoc is the bees knees!! Thank you! \u2014 Alyssa Nicoll (@AlyssaNicoll) 3 mai 2017","title":"\u6742\u9879"},{"location":"docs/compodoc/miscellaneous/#_1","text":"angular-starter angular-seed ngx-admin angular-calendar angular-gauge generator-angular2-library Ionic Firebase Starter Application angular-text-input-highlight ngx-wow ngx-table-editor ngqp \u8fd9\u4e9b\u662f \u6211\u4eec\u77e5\u9053\u7684 \u3002 \u5e0c\u671b\u60a8\u7684\u9879\u76ee\u5217\u5728\u8fd9\u91cc?\u7ed9\u6211\u4eec\u5199\u4fe1\u3002","title":"\u8c01\u5728\u4f7f\u7528\u5eb7\u6ce2\u591a\u514b?"},{"location":"docs/compodoc/miscellaneous/#_2","text":"\u6211\u4e00\u76f4\u5728\u5411\u6211\u7684130\u4e2a\u7814\u8ba8\u4f1a\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4eba\u4ecb\u7ecdCompodoc ! \u2014 Laurent Duveau \ud83c\udde8\ud83c\udde6 (@LaurentDuveau) 5 d\u00e9cembre 2018 \u25b6\ufe0fDocumentation matters\u25c0\ufe0f If it is not documented, \u201cit does not exists\u201d for developers Need a help? Use Compodoc \ud83d\udcdaas do @Sonietta and @carlobonamico Join their talk at room 3! #codemotion pic.twitter.com/zEfe0OnfYo \u2014 Codemotion (@CodemotionIT) 29 novembre 2018 #compodoc is insane. Seriously one of the best tools for @angular \u2014 Zachary Hale (@Hale88Hale) 9 octobre 2018 #Compodoc - amazing documentation tool for your #Angular \\ #Nestjs application Big thanks to the author, @vogloblinsky , awesome! \u2014 Boris Malaichik (@BMalaichik) 1 octobre 2018 Just used #compodoc in one of our (inherited) projects! Gave me really great overview of what's going on in the application \ud83d\ude0b Big thanks to @vogloblinsky and everyone who is contributing to this great project! pic.twitter.com/SW0ZEQwpar \u2014 Sherry List \ud83d\udd1c \u2708\ufe0f \ud83c\udde8\ud83c\uddf4 (@sherrrylst) 25 juillet 2018 Such a great tool :) Compodoc - The missing documentation tool for your #Angular application https://t.co/uy6SIoIsI2 pic.twitter.com/NFNxREE4R4 \u2014 Nir kaufman (@nirkaufman) 23 f\u00e9vrier 2018 Compodoc - The missing documentation tool for your Angular application. Need to check out. https://t.co/iHeQg9Ue3H \u2014 David Boster (@davidboster) 4 f\u00e9vrier 2018 I love #Compodoc . If you use #Angular , you should use it. https://t.co/j8doRX1kpF \u2014 Leo Caseiro \ud83c\udde7\ud83c\uddf7 \ud83c\udde6\ud83c\uddfa (@leocaseiro) 5 janvier 2018 #compodoc is blowing my mind right now, just pointed it at an Angular4 app and it\u2019s generated beautiful docs with component trees, module visualisations, the works! Top work @vogloblinsky and @manekinekko \u2014 Mel Lota (@mlota) 13 d\u00e9cembre 2017 Wanna documenting ur #angular & #typescript code? Definitely check out Compodoc! By @vogloblinsky on #ngbe \u2014 Juri Strumpflohner (@juristr) 8 d\u00e9cembre 2017 7 Angular Tools That You Should Consider \ud83d\udd28 @code Snippets by @John_Papa , CompoDoc by @vogloblinsky , Augury by @rangleio and much more! pic.twitter.com/upEnn0S84X \u2014 Minko Gechev (@mgechev) 5 d\u00e9cembre 2017 Seriously, this is one of the coolest Angular projects we've seen yet. It allows you to totally visualize your components. by @vogloblinsky https://t.co/l8A9Rr814B \u2014 ng-conf (@ngconf) 18 d\u00e9cembre 2017 Swagger is some cool stuff. For front-end and Back-end @SwaggerApi and CompoDoc by @vogloblinsky makes a good combination #fullstack #developers \u2014 Saiyaff Farouk (@msaiyaff) 17 d\u00e9cembre 2017 #compodoc is blowing my mind right now, just pointed it at an Angular4 app and it\u2019s generated beautiful docs with component trees, module visualisations, the works! Top work @vogloblinsky and @manekinekko \u2014 Mel Lota (@mlota) 13 d\u00e9cembre 2017 Wanna documenting ur #angular & #typescript code? Definitely check out Compodoc! By @vogloblinsky on #ngbe \u2014 Juri Strumpflohner (@juristr) 8 d\u00e9cembre 2017 7 Angular Tools That You Should Consider \ud83d\udd28 @code Snippets by @John_Papa , CompoDoc by @vogloblinsky , Augury by @rangleio and much more! pic.twitter.com/upEnn0S84X \u2014 Minko Gechev (@mgechev) 5 d\u00e9cembre 2017 A good documentation tool for Angular project : Compodoc https://t.co/I3cFnwbMd4 \u2014 Maxime Bruguet (@MaximeBruguet) 25 novembre 2017 . @vogloblinsky we have been using #compodoc internally @CapitalOne Thanks for all the hardwork! #Angular #typescript https://t.co/ZzK5ZGf0t9 \u2014 Youssef Taghlabi (@YoussefTaghlabi) 31 octobre 2017 thx @vogloblinsky for compodoc https://t.co/DYr3SlTw18 ...it already helped a lot ;) \u2014 matthias rebel (@_rebeling) 17 juin 2017 Najwi\u0119ksze odkrycie dnia dzisiejszego - compodoc Budowanie dokumentacji z kodu projektu na @angular https://t.co/Vdx0L08Z5g #cool #stuff \u2014 Piotr Kowalski (@piecioshka) 22 mai 2017 how to document #angular2 #Angular applications ? have a look https://t.co/D3SdWdZ5pv they did a great job. #compodoc \u2014 carsten Piepel (@cpiepel_de) 17 mai 2017 Compodoc es una excelente herramienta para documentar todos nuestros proyectos de #angular2 https://t.co/iYHKVSq2no \u2014 tsugiteam (@tsugiteam) 4 mai 2017 Hey @vogloblinsky and @manekinekko the team here at work is falling in \u2764\ufe0f with #compodoc . Thank you x1000! https://t.co/wme8n3cVHv \u2014 Justin (@schwarty) 3 mai 2017 @vogloblinsky @schwarty @amcdnl @manekinekko @AngularAir Compodoc is the bees knees!! Thank you! \u2014 Alyssa Nicoll (@AlyssaNicoll) 3 mai 2017","title":"\u4ed6\u4eec\u5bf9\u5eb7\u6ce2\u591a\u514b\u6709\u4ec0\u4e48\u770b\u6cd5?"},{"location":"docs/compodoc/options/","text":"Bash compodoc <src> [ options ] \u6807\u7b7e \u63cf\u8ff0 -h, --help \u8f93\u51fa\u4f7f\u7528\u4fe1\u606f -V, --version \u8f93\u51fa\u7248\u672c\u53f7 -c, --config [config] \u914d\u7f6e\u6587\u4ef6: .compodocrc, .compodocrc.json, .compodocrc.yaml or compodoc property in package.json \u5c5e\u6027 -p, --tsconfig [config] tsconfig.json \u6587\u4ef6 -d, --output [folder] \u5728\u54ea\u91cc\u5b58\u50a8\u751f\u6210\u7684\u6587\u6863 -y, --extTheme [file] \u5916\u90e8\u9020\u578b\u4e3b\u9898 -n, --name [name] \u6587\u6863\u540d\u79f0 -a, --assetsFolder [folder] \u5728\u751f\u6210\u7684\u6587\u6863\u6587\u4ef6\u5939\u4e2d\u590d\u5236\u7684\u5916\u90e8\u8d44\u4ea7\u6587\u4ef6\u5939 -o, --open \u6253\u5f00\u751f\u6210\u7684\u6587\u6863 -t, --silent \u5728\u9759\u9ed8\u6a21\u5f0f\u4e0b\uff0c\u65e5\u5fd7\u6d88\u606f\u4e0d\u4f1a\u8bb0\u5f55\u5728\u63a7\u5236\u53f0\u4e2d -s, --serve \u670d\u52a1\u751f\u6210\u7684\u6587\u6863(\u9ed8\u8ba4\u4e3a http://localhost:8080/) -r, --port [port] \u66f4\u6539\u9ed8\u8ba4\u670d\u52a1\u7aef\u53e3 -w, --watch \u5728\u670d\u52a1\u548c\u5f3a\u5236\u6587\u6863\u91cd\u5efa\u540e\uff0c\u89c2\u5bdf\u6e90\u6587\u4ef6 -e, --exportFormat [format] \u5bfc\u51fa\u6307\u5b9a\u683c\u5f0f(json, html(\u9ed8\u8ba4)) --language [language] \u7528\u4e8e\u751f\u6210\u6587\u6863\u7684\u8bed\u8a00 (de-DE, en-US, es-ES, fr-FR, hu-HU, it-IT, ja-JP, ko-KR, nl-NL, pl-PL, pt-BR, sk-SK, zh-CN) (\u9ed8\u8ba4: en-US) --theme [theme] \u9009\u62e9\u4e00\u4e2a\u53ef\u7528\u7684\u4e3b\u9898\uff0c\u9ed8\u8ba4\u4e3a 'gitbook' (laravel, original, material, postmark, readthedocs, stripe, vagrant) --hideGenerator \u4e0d\u8981\u5728\u9875\u9762\u5e95\u90e8\u6253\u5370 Compodoc \u6807\u5fd7 --toggleMenuItems \u5173\u95ed\u83dc\u5355(default ['all'])\u503c\u4e2d\u7684\u9ed8\u8ba4\u9879: ['all'] \u6216\u8005\u662f ['modules','components','directives','controllers','classes','injectables','guards','interfaces','interceptors','pipes','miscellaneous','additionalPages']\u5176\u4e2d\u4e00\u4e2a) --navTabConfig \u7528\u4e24\u4e2a\u5b57\u7b26\u4e32\u5c5e\u6027\u6309\u6240\u9700\u987a\u5e8f\u5217\u51fa\u5bfc\u822a\u9009\u9879\u5361\u5bf9\u8c61 (\"id\" \u548c \"label\"). \u53cc\u5f15\u53f7\u5fc5\u987b\u7528'\\'\u8f6c\u4e49\u3002 \u53ef\u7528\u7684\u9009\u9879\u5361 IDs \u662f \"info\", \"readme\", \"source\", \"templateData\", \"tree\", \u548c \"example\". \u6ce8\u610f:\u67d0\u4e9b\u9009\u9879\u5361\u53ea\u4f1a\u5728\u9002\u7528\u4e8e\u7ed9\u5b9a\u4f9d\u8d56\u9879\u65f6\u663e\u793a --templates [folder] Handlebars \u6a21\u677f\u8986\u76d6\u5185\u7f6e\u6a21\u677f\u7684\u76ee\u5f55\u8def\u5f84 --includes [path] \u8981\u5305\u542b\u7684\u5916\u90e8\u6807\u8bb0\u6587\u4ef6\u7684\u8def\u5f84 --includesName [name] \u5916\u90e8\u6807\u8bb0\u6587\u4ef6\u7684\u9879\u76ee\u83dc\u5355\u540d\u79f0 (\u9ed8\u8ba4\u662f \"Additional documentation\") --coverageTest \u4f7f\u7528\u9608\u503c(\u9ed8\u8ba4 70)\u6d4b\u8bd5\u6587\u6863\u8986\u76d6\u7387\u7684\u547d\u4ee4 --coverageMinimumPerFile [minimum] \u6bcf\u4e2a\u6587\u4ef6\u7684\u6587\u6863\u8986\u76d6\u7387\u6d4b\u8bd5\u547d\u4ee4\u7684\u6700\u5c0f\u503c(\u9ed8\u8ba4\u4e3a 0) --coverageTestThresholdFail [boolean] \u6587\u6863\u8986\u76d6\u7684\u6d4b\u8bd5\u547d\u4ee4(\u5168\u5c40\u7684\u6216\u6bcf\u4e2a\u6587\u4ef6\u7684)\u5c06\u4f1a\u5931\u8d25\u5e76\u4ea7\u751f\u9519\u8bef\u6216\u8005\u53ea\u662f\u8b66\u544a\u7528\u6237(true: error, false: warn)(\u9ed8\u8ba4\u503c:true) --coverageTestShowOnlyFailed \u53ea\u663e\u793a\u8986\u76d6\u7387\u6d4b\u8bd5\u5931\u8d25\u7684\u6587\u4ef6 --unitTestCoverage [json-summary] \u8981\u5305\u542b\u5355\u5143\u6d4b\u8bd5\u8986\u76d6\u7387\uff0c\u8bf7\u6307\u5b9a istanbul JSON \u8986\u76d6\u7387\u6458\u8981\u6587\u4ef6 --disableSourceCode \u4e0d\u6dfb\u52a0\u6e90\u4ee3\u7801\u9009\u9879\u5361\u548c\u5230\u6e90\u4ee3\u7801\u7684\u94fe\u63a5 --disableDomTree \u4e0d\u6dfb\u52a0 dom \u6811\u6807\u7b7e --disableTemplateTab \u4e0d\u6dfb\u52a0\u6a21\u677f\u9009\u9879\u5361 --disableStyleTab \u4e0d\u6dfb\u52a0\u6837\u5f0f\u6807\u7b7e --disableGraph \u7981\u7528\u4f9d\u8d56\u5173\u7cfb\u56fe\u7684\u5448\u73b0 --disableCoverage \u4e0d\u6dfb\u52a0\u6587\u6863\u8986\u76d6\u7387\u62a5\u544a --disablePrivate \u5728\u751f\u6210\u7684\u6587\u6863\u4e2d\u4e0d\u663e\u793a\u79c1\u6709 --disableProtected \u5728\u751f\u6210\u7684\u6587\u6863\u4e2d\u4e0d\u663e\u793a\u53d7\u4fdd\u62a4 --disableInternal \u5728\u751f\u6210\u7684\u6587\u6863\u4e2d\u4e0d\u663e\u793a@internal --disableLifeCycleHooks \u6ca1\u6709\u5728\u751f\u6210\u7684\u6587\u6863\u4e2d\u663e\u793a Angular \u7684\u751f\u547d\u5468\u671f\u94a9\u5b50 --disableRoutesGraph \u4e0d\u6dfb\u52a0\u8def\u7531\u56fe --disableSearch \u4e0d\u6dfb\u52a0\u641c\u7d22\u8f93\u5165 --disableDependencies \u4e0d\u6dfb\u52a0\u4f9d\u8d56\u9879\u5217\u8868 --minimal \u53ea\u6709\u6587\u6863\u7684\u6700\u5c0f\u6a21\u5f0f\u3002\u6ca1\u6709\u641c\u7d22\uff0c\u6ca1\u6709\u56fe\u8868\uff0c\u6ca1\u6709\u8986\u76d6\u8303\u56f4\u3002 --customFavicon [path] \u4f7f\u7528\u81ea\u5b9a\u4e49\u56fe\u6807 --customLogo [path] \u4f7f\u7528\u81ea\u5b9a\u4e49 logo --gaID [id] \u8c37\u6b4c\u5206\u6790\u8ddf\u8e2a ID --gaSite [site] \u8c37\u6b4c\u5206\u6790\u7ad9\u70b9\u540d\u79f0(\u9ed8\u8ba4: auto)","title":"\u9009\u9879"},{"location":"docs/compodoc/routing/","text":"\u53c2\u8003 \u6837\u5f0f\u6307\u5357 \uff0c\u63d0\u4f9b\u4e00\u4e2a\u7c7b\u578b\u4e3a 'Routes' \u7684 const \u5bf9\u8c61\uff0c\u5177\u6709 \u552f\u4e00\u7684 \u540d\u79f0: JavaScript const APP_ROUTES : Routes = [ { path : 'about' , component : AboutComponent }, { path : '' , component : HomeComponent } ]; ... RouterModule . forRoot ( APP_ROUTES )","title":"\u8def\u7531"},{"location":"docs/compodoc/tab-configuration/","text":"\u81ea\u5b9a\u4e49\u9009\u9879\u5361\u987a\u5e8f\u548c\u6807\u7b7e The ordering of the tabs and the text used for their labels can be modified by setting the navTabConfig input either as a property in a compodoc configuration file or as an argument to the compodoc CLI command. The navTabConfig input is an array of tab configuration objects representing the superset of tabs that will be shown for the various dependencies in your project. The ordering of the array determines the left-to-right placement of the tabs in the compodoc output, and the string value of a tab object's label property determines the label displayed on the corresponding tab. \u5b9a\u4e49\u4e00\u4e2a\u6807\u7b7e Text Only { \"id\": \"info\", \"label\": \"Custom Label\" } The tab id is used to determine which tab to apply the custom placement and label to. The available tab id's are: \"info\" , \"readme\" , \"source\" , \"templateData\" , \"tree\" , and \"example\" . \u9700\u8981\u6ce8\u610f\u7684\u4e8b\u60c5 Certain tabs will only be shown if applicable to a given dependency: \"info\" , \"readme\" , and \"source\" tabs are applicable to all dependency types. \"templateData\" and \"tree\" tabs are applicable to Components. The \"example\" tab is applicable to Component, Directive, Injectable, and Pipe dependencies. Additionally, the \"example\" , \"readme\" , and \"templateData\" tabs will only be shown for dependencies that specify content for them. For instance, dependencies for which no examples are provided will not have an example tab. \u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u793a\u4f8b\u7528\u6cd5 Text Only { \"navTabConfig\": [ { \"id\": \"example\", \"label\": \"Overview\" }, { \"id\": \"info\", \"label\": \"API\" }, { \"id\": \"source\", \"label\": \"Source\" }, { \"id\": \"tree\", \"label\": \"DOM Tree\" } ], \"tsconfig\": \"./src/tsconfig.json\" } \u4f5c\u4e3a CLI \u53c2\u6570\u7684\u793a\u4f8b\u7528\u6cd5 Note: Double-quotes must be escaped with \"\\\". Text Only compodoc --navTabConfig '[{\\\"id\\\": \\\"example\\\",\\\"label\\\": \\\"Overview\\\"},{\\\"id\\\": \\\"info\\\",\\\"label\\\": \\\"API\\\"},{\\\"id\\\": \\\"source\\\",\\\"label\\\": \\\"Source\\\"}]' -p src/tsconfig.json -n 'Documentation Name' -s","title":"\u9009\u9879\u5361\u914d\u7f6e"},{"location":"docs/compodoc/tab-configuration/#_1","text":"The ordering of the tabs and the text used for their labels can be modified by setting the navTabConfig input either as a property in a compodoc configuration file or as an argument to the compodoc CLI command. The navTabConfig input is an array of tab configuration objects representing the superset of tabs that will be shown for the various dependencies in your project. The ordering of the array determines the left-to-right placement of the tabs in the compodoc output, and the string value of a tab object's label property determines the label displayed on the corresponding tab.","title":"\u81ea\u5b9a\u4e49\u9009\u9879\u5361\u987a\u5e8f\u548c\u6807\u7b7e"},{"location":"docs/compodoc/tab-configuration/#_2","text":"Text Only { \"id\": \"info\", \"label\": \"Custom Label\" } The tab id is used to determine which tab to apply the custom placement and label to. The available tab id's are: \"info\" , \"readme\" , \"source\" , \"templateData\" , \"tree\" , and \"example\" .","title":"\u5b9a\u4e49\u4e00\u4e2a\u6807\u7b7e"},{"location":"docs/compodoc/tab-configuration/#_3","text":"Certain tabs will only be shown if applicable to a given dependency: \"info\" , \"readme\" , and \"source\" tabs are applicable to all dependency types. \"templateData\" and \"tree\" tabs are applicable to Components. The \"example\" tab is applicable to Component, Directive, Injectable, and Pipe dependencies. Additionally, the \"example\" , \"readme\" , and \"templateData\" tabs will only be shown for dependencies that specify content for them. For instance, dependencies for which no examples are provided will not have an example tab.","title":"\u9700\u8981\u6ce8\u610f\u7684\u4e8b\u60c5"},{"location":"docs/compodoc/tab-configuration/#_4","text":"Text Only { \"navTabConfig\": [ { \"id\": \"example\", \"label\": \"Overview\" }, { \"id\": \"info\", \"label\": \"API\" }, { \"id\": \"source\", \"label\": \"Source\" }, { \"id\": \"tree\", \"label\": \"DOM Tree\" } ], \"tsconfig\": \"./src/tsconfig.json\" }","title":"\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u793a\u4f8b\u7528\u6cd5"},{"location":"docs/compodoc/tab-configuration/#cli","text":"Note: Double-quotes must be escaped with \"\\\". Text Only compodoc --navTabConfig '[{\\\"id\\\": \\\"example\\\",\\\"label\\\": \\\"Overview\\\"},{\\\"id\\\": \\\"info\\\",\\\"label\\\": \\\"API\\\"},{\\\"id\\\": \\\"source\\\",\\\"label\\\": \\\"Source\\\"}]' -p src/tsconfig.json -n 'Documentation Name' -s","title":"\u4f5c\u4e3a CLI \u53c2\u6570\u7684\u793a\u4f8b\u7528\u6cd5"},{"location":"docs/compodoc/themes/","text":"Default (gitbook) Material design Laravel Readthedocs Stripe Vagrant Postmark Original (first theme of 2016)","title":"\u4e3b\u9898"},{"location":"docs/compodoc/themes/#default-gitbook","text":"","title":"Default (gitbook)"},{"location":"docs/compodoc/themes/#material-design","text":"","title":"Material design"},{"location":"docs/compodoc/themes/#laravel","text":"","title":"Laravel"},{"location":"docs/compodoc/themes/#readthedocs","text":"","title":"Readthedocs"},{"location":"docs/compodoc/themes/#stripe","text":"","title":"Stripe"},{"location":"docs/compodoc/themes/#vagrant","text":"","title":"Vagrant"},{"location":"docs/compodoc/themes/#postmark","text":"","title":"Postmark"},{"location":"docs/compodoc/themes/#original-first-theme-of-2016","text":"","title":"Original (first theme of 2016)"},{"location":"docs/compodoc/tips-and-tricks/","text":"\u6837\u5f0f\u7684\u6587\u6863 \u6bcf\u4e2a\u7ec4\u4ef6\u3001\u6a21\u5757\u3001\u6307\u4ee4\u7b49\u7684\u6587\u6863 \u9644\u52a0\u7684\u6587\u6863 \u5355\u5b58\u50a8\u5e93\u4e2d\u51e0\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6587\u6863 \u6807\u8bb0\u6587\u4ef6\u4e2d\u7684\u8bed\u6cd5\u9ad8\u4eae\u663e\u793a \u4e0d\u5305\u62ec\u6587\u4ef6 \u5305\u62ec\u6587\u4ef6 \u6837\u5f0f\u7684\u6587\u6863 Text Only compodoc -p tsconfig.doc.json -y your_theme_styles/ \u5728\u4f60\u7684\u6587\u4ef6\u5939\u4e2d\uff0c\u4f60\u81f3\u5c11\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a style.css \u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u4ee5\u4e0b 7 \u4e2a\u5bfc\u5165\u6587\u4ef6\u3002 Text Only @import \"./reset.css\"; @import \"./bootstrap.min.css\"; @import \"./bootstrap-card.css\"; @import \"./prism.css\"; @import \"./ionicons.min.css\"; @import \"./compodoc.css\"; @import \"./tablesort.css\"; Compodoc \u4f7f\u7528 bootstrap 3.3.7\u3002\u60a8\u53ef\u4ee5\u8f7b\u677e\u5b9a\u5236 Compodoc\u3002 bootswatch.com \u53ef\u4ee5\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\u3002\u5982\u679c\u4f60\u60f3\u8986\u76d6\u9ed8\u8ba4\u7684\u4e3b\u9898\uff0c\u53ea\u9700\u63d0\u4f9b\u4e00\u4e2a bootstrap.min.css \u6587\u4ef6\uff0c\u5b83\u5c31\u4f1a\u8986\u76d6\u9ed8\u8ba4\u7684\u4e3b\u9898\u3002 Text Only \u2514\u2500\u2500 your_theme_styles/ \u251c\u2500\u2500 style.css // the main css file with default imports \u2514\u2500\u2500 bootstrap.min.css // your bootstrap theme \u6bcf\u4e2a\u7ec4\u4ef6\u3001\u6a21\u5757\u3001\u6307\u4ee4\u7b49\u7684\u6587\u6863 \u5728 JSDoc \u6ce8\u91ca\u4e4b\u95f4\u7684 xxx.component.ts \u6587\u4ef6\u4e2d\u7684\u6ce8\u91ca\u63cf\u8ff0\u53ef\u80fd\u6709\u70b9\u77ed\u3002 Compodoc \u5728\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u6839\u6587\u4ef6\u5939\u4e2d\u641c\u7d22\u4e00\u4e2a\u9ed8\u8ba4\u7684 xxx.component.md \u6587\u4ef6\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u7ec4\u4ef6\u9875\u9762\u7684\u4e00\u4e2a\u9009\u9879\u5361\u4e2d\u3002\u5bf9\u4e8e\u7c7b\u3001\u6a21\u5757\u7b49\u4e5f\u662f\u5982\u6b64\u3002 Text Only \u2514\u2500\u2500 my-component/ \u251c\u2500\u2500 my.component.ts \u251c\u2500\u2500 my.component.spec.ts \u251c\u2500\u2500 my.component.scss|css \u251c\u2500\u2500 my.component.html \u2514\u2500\u2500 my.component.md \u9644\u52a0\u7684\u6587\u6863 Compodoc \u652f\u6301\u6dfb\u52a0\u5916\u90e8 markdown \u6587\u4ef6\uff0c\u4ee5\u6269\u5c55\u5e94\u7528\u7a0b\u5e8f\u7684\u4ee3\u7801\u6ce8\u91ca\u548c\u4e3b README \u6587\u4ef6\u3002 \u521b\u5efa\u4e00\u4e2a\u5305\u542b markdown \u6587\u4ef6\u7684\u6587\u4ef6\u5939\uff0c\u5e76\u4f7f\u7528 --includes \u6807\u5fd7\u6765\u6269\u5c55\u6587\u6863\u3002 \u4f60\u7684\u6587\u4ef6\u5939\u5e94\u8be5\u5305\u542b\u4e00\u4e2a summary.json \u6587\u4ef6\u89e3\u91ca\u7ed3\u6784\u548c\u6587\u4ef6: Text Only summary.json [ { \"title\": \"A TITLE\", \"file\": \"a-file.md\" }, { \"title\": \"A TITLE\", \"file\": \"a-file.md\", \"children\": [ { \"title\": \"A TITLE\", \"file\": \"a-sub-folder/a-file.md\" } ] } ] \u94fe\u63a5\u50cf\u5e38\u89c4\u7684\u6807\u8bb0\u94fe\u63a5\u4e00\u6837\u53d7\u652f\u6301\u3002 \u5355\u5b58\u50a8\u5e93\u4e2d\u51e0\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6587\u6863 Nx \u662f\u4e00\u4e2a\u5f00\u6e90\u3001\u667a\u80fd\u3001\u5feb\u901f\u548c\u53ef\u6269\u5c55\u7684\u6784\u5efa\u7cfb\u7edf\u3002 \u5b83\u9075\u5faa\u7684\u65b9\u6cd5\u662f\uff0c\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u548c\u5e93\u53ef\u4ee5\u751f\u6d3b\u5728\u540c\u4e00\u4e2a\u5de5\u4f5c\u7a7a\u95f4(\u53c8\u540d\u201cmonorepo\u201d)\u3002 \u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u5355\u5b58\u50a8\u5e93\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u88ab Compodoc \u8bb0\u5f55\u4e0b\u6765\u3002 \u4f60\u53ea\u9700\u8981\u5728\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5355\u72ec\u8fd0\u884c Compodoc\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528 nx-examples \u7684\u4f8b\u5b50: Text Only . \u251c\u2500\u2500 apps \u2502 \u251c\u2500\u2500 demo \u2502 \u2502 \u2514\u2500\u2500 src \u2502 \u2502 \u2514\u2500\u2500 tsconfig.doc.json \u2502 \u251c\u2500\u2500 profile \u2502 \u251c\u2500\u2500 school \u2502 \u2514\u2500\u2500 teach \u2514\u2500\u2500 README.md \u50cf\u8fd9\u6837\u8fd0\u884c Compodoc: Bash cd apps/demo/src compodoc -p tsconfig.doc.json -s // or compodoc -p apps/demo/src/tsconfig.doc.json -s \u6807\u8bb0\u6587\u4ef6\u4e2d\u7684\u8bed\u6cd5\u9ad8\u4eae\u663e\u793a Compodoc \u4f7f\u7528 Marked \u8fdb\u884c\u6807\u8bb0\u89e3\u6790\u5e76\u7f16\u8bd1\u6210 html\u3002 \u6dfb\u52a0\u4e86 prismjs.js \u4ee5\u652f\u6301\u8bed\u6cd5\u9ad8\u4eae\u663e\u793a\u3002 \u53ea\u9700\u4f7f\u7528\u4e00\u4e2a\u6b63\u5e38\u7684\u4ee3\u7801\u5757\u5728\u60a8\u7684\u6807\u8bb0\u4e0e\u6b63\u786e\u7684\u8bed\u8a00: Github \u5e2e\u52a9 \u96c6\u6210\u8bed\u8a00\u5305\u62ec: json, bash, javascript, markdown, html, scss, typescript \u4e0d\u5305\u62ec\u6587\u4ef6 \u8981\u4ece\u6587\u6863\u4e2d\u6392\u9664\u6587\u4ef6\uff0c\u53ea\u9700\u4f7f\u7528 tsconfig.json \u6587\u4ef6\u7684 exclude \u5c5e\u6027\u3002 \u4f60\u53ef\u4ee5\u6392\u9664\u540d\u79f0\u4e3a app/myfile.ts \u6216 glob \u6a21\u5f0f **/*.spec.ts \u7684\u7279\u5b9a\u6587\u4ef6\u3002 \u5305\u62ec\u6587\u4ef6 \u8981\u5305\u542b\u6587\u6863\u4e2d\u7684\u6587\u4ef6\uff0c\u53ea\u9700\u4f7f\u7528 tsconfig.json \u6587\u4ef6\u7684 include \u5c5e\u6027\u3002 \u4f60\u53ef\u4ee5\u5305\u542b\u7279\u5b9a\u7684\u6587\u4ef6\u540d app/myfile.ts \u6216 glob \u6a21\u5f0f **/*.ts \u7684\u6587\u4ef6\u3002","title":"\u63d0\u793a\u548c\u6280\u5de7"},{"location":"docs/compodoc/tips-and-tricks/#_1","text":"Text Only compodoc -p tsconfig.doc.json -y your_theme_styles/ \u5728\u4f60\u7684\u6587\u4ef6\u5939\u4e2d\uff0c\u4f60\u81f3\u5c11\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a style.css \u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u4ee5\u4e0b 7 \u4e2a\u5bfc\u5165\u6587\u4ef6\u3002 Text Only @import \"./reset.css\"; @import \"./bootstrap.min.css\"; @import \"./bootstrap-card.css\"; @import \"./prism.css\"; @import \"./ionicons.min.css\"; @import \"./compodoc.css\"; @import \"./tablesort.css\"; Compodoc \u4f7f\u7528 bootstrap 3.3.7\u3002\u60a8\u53ef\u4ee5\u8f7b\u677e\u5b9a\u5236 Compodoc\u3002 bootswatch.com \u53ef\u4ee5\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\u3002\u5982\u679c\u4f60\u60f3\u8986\u76d6\u9ed8\u8ba4\u7684\u4e3b\u9898\uff0c\u53ea\u9700\u63d0\u4f9b\u4e00\u4e2a bootstrap.min.css \u6587\u4ef6\uff0c\u5b83\u5c31\u4f1a\u8986\u76d6\u9ed8\u8ba4\u7684\u4e3b\u9898\u3002 Text Only \u2514\u2500\u2500 your_theme_styles/ \u251c\u2500\u2500 style.css // the main css file with default imports \u2514\u2500\u2500 bootstrap.min.css // your bootstrap theme","title":"\u6837\u5f0f\u7684\u6587\u6863"},{"location":"docs/compodoc/tips-and-tricks/#_2","text":"\u5728 JSDoc \u6ce8\u91ca\u4e4b\u95f4\u7684 xxx.component.ts \u6587\u4ef6\u4e2d\u7684\u6ce8\u91ca\u63cf\u8ff0\u53ef\u80fd\u6709\u70b9\u77ed\u3002 Compodoc \u5728\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u6839\u6587\u4ef6\u5939\u4e2d\u641c\u7d22\u4e00\u4e2a\u9ed8\u8ba4\u7684 xxx.component.md \u6587\u4ef6\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u7ec4\u4ef6\u9875\u9762\u7684\u4e00\u4e2a\u9009\u9879\u5361\u4e2d\u3002\u5bf9\u4e8e\u7c7b\u3001\u6a21\u5757\u7b49\u4e5f\u662f\u5982\u6b64\u3002 Text Only \u2514\u2500\u2500 my-component/ \u251c\u2500\u2500 my.component.ts \u251c\u2500\u2500 my.component.spec.ts \u251c\u2500\u2500 my.component.scss|css \u251c\u2500\u2500 my.component.html \u2514\u2500\u2500 my.component.md","title":"\u6bcf\u4e2a\u7ec4\u4ef6\u3001\u6a21\u5757\u3001\u6307\u4ee4\u7b49\u7684\u6587\u6863"},{"location":"docs/compodoc/tips-and-tricks/#_3","text":"Compodoc \u652f\u6301\u6dfb\u52a0\u5916\u90e8 markdown \u6587\u4ef6\uff0c\u4ee5\u6269\u5c55\u5e94\u7528\u7a0b\u5e8f\u7684\u4ee3\u7801\u6ce8\u91ca\u548c\u4e3b README \u6587\u4ef6\u3002 \u521b\u5efa\u4e00\u4e2a\u5305\u542b markdown \u6587\u4ef6\u7684\u6587\u4ef6\u5939\uff0c\u5e76\u4f7f\u7528 --includes \u6807\u5fd7\u6765\u6269\u5c55\u6587\u6863\u3002 \u4f60\u7684\u6587\u4ef6\u5939\u5e94\u8be5\u5305\u542b\u4e00\u4e2a summary.json \u6587\u4ef6\u89e3\u91ca\u7ed3\u6784\u548c\u6587\u4ef6: Text Only summary.json [ { \"title\": \"A TITLE\", \"file\": \"a-file.md\" }, { \"title\": \"A TITLE\", \"file\": \"a-file.md\", \"children\": [ { \"title\": \"A TITLE\", \"file\": \"a-sub-folder/a-file.md\" } ] } ] \u94fe\u63a5\u50cf\u5e38\u89c4\u7684\u6807\u8bb0\u94fe\u63a5\u4e00\u6837\u53d7\u652f\u6301\u3002","title":"\u9644\u52a0\u7684\u6587\u6863"},{"location":"docs/compodoc/tips-and-tricks/#_4","text":"Nx \u662f\u4e00\u4e2a\u5f00\u6e90\u3001\u667a\u80fd\u3001\u5feb\u901f\u548c\u53ef\u6269\u5c55\u7684\u6784\u5efa\u7cfb\u7edf\u3002 \u5b83\u9075\u5faa\u7684\u65b9\u6cd5\u662f\uff0c\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u548c\u5e93\u53ef\u4ee5\u751f\u6d3b\u5728\u540c\u4e00\u4e2a\u5de5\u4f5c\u7a7a\u95f4(\u53c8\u540d\u201cmonorepo\u201d)\u3002 \u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u5355\u5b58\u50a8\u5e93\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u88ab Compodoc \u8bb0\u5f55\u4e0b\u6765\u3002 \u4f60\u53ea\u9700\u8981\u5728\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5355\u72ec\u8fd0\u884c Compodoc\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528 nx-examples \u7684\u4f8b\u5b50: Text Only . \u251c\u2500\u2500 apps \u2502 \u251c\u2500\u2500 demo \u2502 \u2502 \u2514\u2500\u2500 src \u2502 \u2502 \u2514\u2500\u2500 tsconfig.doc.json \u2502 \u251c\u2500\u2500 profile \u2502 \u251c\u2500\u2500 school \u2502 \u2514\u2500\u2500 teach \u2514\u2500\u2500 README.md \u50cf\u8fd9\u6837\u8fd0\u884c Compodoc: Bash cd apps/demo/src compodoc -p tsconfig.doc.json -s // or compodoc -p apps/demo/src/tsconfig.doc.json -s","title":"\u5355\u5b58\u50a8\u5e93\u4e2d\u51e0\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6587\u6863"},{"location":"docs/compodoc/tips-and-tricks/#_5","text":"Compodoc \u4f7f\u7528 Marked \u8fdb\u884c\u6807\u8bb0\u89e3\u6790\u5e76\u7f16\u8bd1\u6210 html\u3002 \u6dfb\u52a0\u4e86 prismjs.js \u4ee5\u652f\u6301\u8bed\u6cd5\u9ad8\u4eae\u663e\u793a\u3002 \u53ea\u9700\u4f7f\u7528\u4e00\u4e2a\u6b63\u5e38\u7684\u4ee3\u7801\u5757\u5728\u60a8\u7684\u6807\u8bb0\u4e0e\u6b63\u786e\u7684\u8bed\u8a00: Github \u5e2e\u52a9 \u96c6\u6210\u8bed\u8a00\u5305\u62ec: json, bash, javascript, markdown, html, scss, typescript","title":"\u6807\u8bb0\u6587\u4ef6\u4e2d\u7684\u8bed\u6cd5\u9ad8\u4eae\u663e\u793a"},{"location":"docs/compodoc/tips-and-tricks/#_6","text":"\u8981\u4ece\u6587\u6863\u4e2d\u6392\u9664\u6587\u4ef6\uff0c\u53ea\u9700\u4f7f\u7528 tsconfig.json \u6587\u4ef6\u7684 exclude \u5c5e\u6027\u3002 \u4f60\u53ef\u4ee5\u6392\u9664\u540d\u79f0\u4e3a app/myfile.ts \u6216 glob \u6a21\u5f0f **/*.spec.ts \u7684\u7279\u5b9a\u6587\u4ef6\u3002","title":"\u4e0d\u5305\u62ec\u6587\u4ef6"},{"location":"docs/compodoc/tips-and-tricks/#_7","text":"\u8981\u5305\u542b\u6587\u6863\u4e2d\u7684\u6587\u4ef6\uff0c\u53ea\u9700\u4f7f\u7528 tsconfig.json \u6587\u4ef6\u7684 include \u5c5e\u6027\u3002 \u4f60\u53ef\u4ee5\u5305\u542b\u7279\u5b9a\u7684\u6587\u4ef6\u540d app/myfile.ts \u6216 glob \u6a21\u5f0f **/*.ts \u7684\u6587\u4ef6\u3002","title":"\u5305\u62ec\u6587\u4ef6"},{"location":"docs/compodoc/tutorial/","text":"\u8fd9\u4e9b\u6587\u7ae0\u5f88\u597d\u5730\u89e3\u91ca\u4e86\u5982\u4f55\u5728\u4f60\u7684\u9879\u76ee\u4e2d\u4f7f\u7528 Compodoc: Alfredo Perez https://medium.com/@alfredo.perez.q/publish-angular-library-documentation-created-with-nx-using-travisci-and-github-pages-27854598239c Ionic Academy https://ionicacademy.com/ionic-code-documentation/ \u4ed6\u4eec\u8fd8\u5236\u4f5c\u4e86\u4e00\u4e2a 10 \u82f1\u5bf8\u7684\u89c6\u9891: Angular \u8bad\u7ec3","title":"\u6559\u7a0b"},{"location":"docs/compodoc/tutorial/#alfredo-perez","text":"https://medium.com/@alfredo.perez.q/publish-angular-library-documentation-created-with-nx-using-travisci-and-github-pages-27854598239c","title":"Alfredo Perez"},{"location":"docs/compodoc/tutorial/#ionic-academy","text":"https://ionicacademy.com/ionic-code-documentation/ \u4ed6\u4eec\u8fd8\u5236\u4f5c\u4e86\u4e00\u4e2a 10 \u82f1\u5bf8\u7684\u89c6\u9891:","title":"Ionic Academy"},{"location":"docs/compodoc/tutorial/#angular","text":"","title":"Angular \u8bad\u7ec3"},{"location":"docs/compodoc/usage/","text":"\u914d\u7f6e\u6587\u4ef6 \u60a8\u53ef\u4ee5\u5728\u9879\u76ee\u6587\u4ef6\u5939\u7684\u6839\u76ee\u5f55\u4e2d\u63d0\u4f9b\u914d\u7f6e\u6587\u4ef6\u3002 Compodoc \u5c06\u641c\u7d22\u5982\u4e0b\u6587\u4ef6: .compodocrc, .compodocrc.json, .compodocrc.yaml \u6216 package.json \u4e2d\u7684 Compodoc \u5c5e\u6027 \u8fd9\u91cc\u6709\u4e00\u4e2a JSON \u6a21\u5f0f: ./node_modules/@compodoc/compodoc/src/config/schema.json \u9009\u9879\u3001\u5f15\u53f7\u548c Windows \u4f7f\u7528 \u8bb0\u4f4f\uff0c\u4f7f\u7528\u591a\u4e2a\u5355\u8bcd\u7684\u9009\u9879\u9700\u8981\u5728\u53e5\u5b50\u5468\u56f4\u52a0\u5f15\u53f7\u3002 Bash compodoc -p tsconfig.doc.json -n 'My app documentation' \u4f7f\u7528 npm \u811a\u672c\uff0c\u547d\u4ee4\u88ab\u6258\u7ba1\u5728 package.json \u6587\u4ef6\u4e2d\u3002 \u4e0d\u8981\u5fd8\u8bb0\u5728 Windows \u7cfb\u7edf\u4e2d\u4f7f\u7528\u53cc\u5f15\u53f7\u8f6c\u4e49\u3002(npm 6. x) Bash { ... \"doc\" : \"npx compodoc -p tsconfig.doc.json -n \\\"My app documentation\\\"\" ... } \u6e32\u67d3\u6587\u6863 \u6587\u6863\u5728\u9ed8\u8ba4\u8f93\u51fa\u6587\u4ef6\u5939\u4e2d\u751f\u6210\uff0c\u7136\u540e\u5728\u8be5\u6587\u4ef6\u5939\u4e2d\u8fd0\u884c HTTP \u670d\u52a1\u5668\u3002 Bash compodoc -p tsconfig.doc.json \u63d0\u4f9b\u6e90\u6587\u4ef6\u5939\u65f6\u5448\u73b0\u6587\u6863 Bash compodoc src -p tsconfig.doc.json \u4f7f\u7528 compodoc \u63d0\u4f9b\u751f\u6210\u7684\u6587\u6863 \u6587\u6863\u5728\u9ed8\u8ba4\u8f93\u51fa\u6587\u4ef6\u5939\u6216\u7279\u5b9a\u6587\u4ef6\u5939\u4e2d\u751f\u6210\uff0c\u672c\u5730 HTTP \u670d\u52a1\u5668\u5728 http://localhost:8080 \u4e0a\u542f\u52a8 Bash compodoc -s # \u6216\u8005 compodoc -s -d ./doc \u6e32\u67d3\u6587\u6863\uff0c\u5e76\u7528 compodoc \u63d0\u4f9b\u5b83 \u6587\u6863\u751f\u6210\u5728\u9ed8\u8ba4\u8f93\u51fa\u6587\u4ef6\u5939\u4e2d\uff0c\u672c\u5730 HTTP \u670d\u52a1\u5668\u53ef\u4ee5\u5728 http://localhost:8080 \u4e0a\u627e\u5230 Bash compodoc -p tsconfig.doc.json -s","title":"\u4f7f\u7528"},{"location":"docs/compodoc/usage/#_1","text":"\u60a8\u53ef\u4ee5\u5728\u9879\u76ee\u6587\u4ef6\u5939\u7684\u6839\u76ee\u5f55\u4e2d\u63d0\u4f9b\u914d\u7f6e\u6587\u4ef6\u3002 Compodoc \u5c06\u641c\u7d22\u5982\u4e0b\u6587\u4ef6: .compodocrc, .compodocrc.json, .compodocrc.yaml \u6216 package.json \u4e2d\u7684 Compodoc \u5c5e\u6027 \u8fd9\u91cc\u6709\u4e00\u4e2a JSON \u6a21\u5f0f: ./node_modules/@compodoc/compodoc/src/config/schema.json","title":"\u914d\u7f6e\u6587\u4ef6"},{"location":"docs/compodoc/usage/#windows","text":"\u8bb0\u4f4f\uff0c\u4f7f\u7528\u591a\u4e2a\u5355\u8bcd\u7684\u9009\u9879\u9700\u8981\u5728\u53e5\u5b50\u5468\u56f4\u52a0\u5f15\u53f7\u3002 Bash compodoc -p tsconfig.doc.json -n 'My app documentation' \u4f7f\u7528 npm \u811a\u672c\uff0c\u547d\u4ee4\u88ab\u6258\u7ba1\u5728 package.json \u6587\u4ef6\u4e2d\u3002 \u4e0d\u8981\u5fd8\u8bb0\u5728 Windows \u7cfb\u7edf\u4e2d\u4f7f\u7528\u53cc\u5f15\u53f7\u8f6c\u4e49\u3002(npm 6. x) Bash { ... \"doc\" : \"npx compodoc -p tsconfig.doc.json -n \\\"My app documentation\\\"\" ... }","title":"\u9009\u9879\u3001\u5f15\u53f7\u548c Windows \u4f7f\u7528"},{"location":"docs/compodoc/usage/#_2","text":"\u6587\u6863\u5728\u9ed8\u8ba4\u8f93\u51fa\u6587\u4ef6\u5939\u4e2d\u751f\u6210\uff0c\u7136\u540e\u5728\u8be5\u6587\u4ef6\u5939\u4e2d\u8fd0\u884c HTTP \u670d\u52a1\u5668\u3002 Bash compodoc -p tsconfig.doc.json","title":"\u6e32\u67d3\u6587\u6863"},{"location":"docs/compodoc/usage/#_3","text":"Bash compodoc src -p tsconfig.doc.json","title":"\u63d0\u4f9b\u6e90\u6587\u4ef6\u5939\u65f6\u5448\u73b0\u6587\u6863"},{"location":"docs/compodoc/usage/#compodoc","text":"\u6587\u6863\u5728\u9ed8\u8ba4\u8f93\u51fa\u6587\u4ef6\u5939\u6216\u7279\u5b9a\u6587\u4ef6\u5939\u4e2d\u751f\u6210\uff0c\u672c\u5730 HTTP \u670d\u52a1\u5668\u5728 http://localhost:8080 \u4e0a\u542f\u52a8 Bash compodoc -s # \u6216\u8005 compodoc -s -d ./doc","title":"\u4f7f\u7528 compodoc \u63d0\u4f9b\u751f\u6210\u7684\u6587\u6863"},{"location":"docs/compodoc/usage/#compodoc_1","text":"\u6587\u6863\u751f\u6210\u5728\u9ed8\u8ba4\u8f93\u51fa\u6587\u4ef6\u5939\u4e2d\uff0c\u672c\u5730 HTTP \u670d\u52a1\u5668\u53ef\u4ee5\u5728 http://localhost:8080 \u4e0a\u627e\u5230 Bash compodoc -p tsconfig.doc.json -s","title":"\u6e32\u67d3\u6587\u6863\uff0c\u5e76\u7528 compodoc \u63d0\u4f9b\u5b83"},{"location":"docs/files/_index/","text":"https://wanago.io/courses/api-with-nestjs/","title":"files"},{"location":"docs/files/api-nestjs-uploading-files-to-server/","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5728\u672c\u7cfb\u5217\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u63cf\u8ff0\u4e86\u5728\u670d\u52a1\u5668\u4e0a\u5b58\u50a8\u6587\u4ef6\u7684\u4e24\u79cd\u65b9\u6cd5\u3002 \u5728\u7b2c 10 \u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5411 Amazon S3 \u4e0a\u4f20\u4e86\u6587\u4ef6\u3002 \u867d\u7136\u5b83\u7684\u53ef\u4f38\u7f29\u6027\u5f88\u5f3a\uff0c\u4f46\u51fa\u4e8e\u5404\u79cd\u539f\u56e0\uff0c\u6211\u4eec\u53ef\u80fd\u4e0d\u5e0c\u671b\u4f7f\u7528 AWS \u7b49\u4e91\u670d\u52a1\u3002 \u56e0\u6b64\uff0c\u5728\u672c\u7cfb\u5217\u7684\u7b2c 54 \u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u76f4\u63a5\u5728 PostgreSQL \u6570\u636e\u5e93\u4e2d\u5b58\u50a8\u6587\u4ef6\u3002 \u867d\u7136\u5b83\u6709\u4e00\u4e9b\u4f18\u52bf\uff0c\u4f46\u5b83\u53ef\u80fd\u88ab\u8ba4\u4e3a\u5728\u6027\u80fd\u65b9\u9762\u4e0d\u591f\u7406\u60f3\u3002 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u7814\u7a76\u5982\u4f55\u4f7f\u7528 NestJS \u5728\u670d\u52a1\u5668\u4e0a\u5b58\u50a8\u4e0a\u4f20\u7684\u6587\u4ef6\u3002 \u540c\u6837\uff0c\u6211\u4eec\u5c06\u4e00\u4e9b\u4fe1\u606f\u6301\u4e45\u5316\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u4f46\u8fd9\u4e00\u6b21\u53ea\u662f\u5143\u6570\u636e\u3002 \u5728\u670d\u52a1\u5668\u4e0a\u4fdd\u5b58\u6587\u4ef6 \u5e78\u8fd0\u7684\u662f\uff0cNestJS \u4f7f\u5f97\u5728\u670d\u52a1\u5668\u4e0a\u5b58\u50a8\u6587\u4ef6\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\u3002 \u6211\u4eec\u9700\u8981\u5411 FileInterceptor \u4f20\u9012\u989d\u5916\u7684\u53c2\u6570\u3002 users.service.ts; TypeScript import { UsersService } from \"./users.service\" ; import { Controller , Post , Req , UploadedFile , UseGuards , UseInterceptors } from \"@nestjs/common\" ; import JwtAuthenticationGuard from \"../authentication/jwt-authentication.guard\" ; import RequestWithUser from \"../authentication/requestWithUser.interface\" ; import { Express } from \"express\" ; import { FileInterceptor } from \"@nestjs/platform-express\" ; import { diskStorage } from \"multer\" ; @Controller ( \"users\" ) export class UsersController { constructor ( private readonly usersService : UsersService ) {} @Post ( \"avatar\" ) @UseGuards ( JwtAuthenticationGuard ) @UseInterceptors ( FileInterceptor ( \"file\" , { storage : diskStorage ({ destination : \"./uploadedFiles/avatars\" , }), }) ) async addAvatar ( @Req () request : RequestWithUser , @UploadedFile () file : Express.Multer.File ) { return this . usersService . addAvatar ( request . user . id , { path : file.path , filename : file.originalname , mimetype : file.mimetype , }); } } \u5f53\u6211\u4eec\u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\u65f6\uff0cNestJS \u5c06\u4e0a\u4f20\u7684\u6587\u4ef6\u5b58\u50a8\u5728 ./uploadefiles/avatars \u76ee\u5f55\u4e2d\u3002 \u4e0d\u8fc7\uff0c\u4e0a\u8ff0\u65b9\u6cd5\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\u3002 \u9996\u5148\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u591a\u4e2a\u7aef\u70b9\u6765\u63a5\u53d7\u6587\u4ef6\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u5b83\u4eec\u6bcf\u4e2a\u91cd\u590d\u914d\u7f6e\u7684\u67d0\u4e9b\u90e8\u5206\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u5e94\u8be5\u5c06\u76ee\u6807\u7684\u3002 /uploaddfiles \u90e8\u5206\u653e\u5728\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\u4e2d\uff0c\u4ee5\u6839\u636e\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u7684\u73af\u5883\u6765\u66f4\u6539\u5b83\u3002 \u6269\u5c55 FileInterceptor \u5b9e\u73b0\u4e0a\u8ff0\u76ee\u6807\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u6269\u5c55 FileInterceptor\u3002 \u5728\u67e5\u770b\u4e86 NestJS \u7684\u5e95\u5c42\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5b83\u4f7f\u7528\u4e86 mixin \u6a21\u5f0f\u3002 \u56e0\u4e3a FileInterceptor \u4e0d\u662f\u7c7b\uff0c\u6240\u4ee5\u4e0d\u80fd\u4f7f\u7528 extend \u5173\u952e\u5b57\u3002 \u6211\u4eec\u60f3\u8981\u6269\u5c55 FileInterceptor \u7684\u529f\u80fd\uff0c\u5f53: \u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u6765\u6ce8\u5165 ConfigService \uff0c \u80fd\u591f\u4ece\u63a7\u5236\u5668\u4f20\u9012\u989d\u5916\u7684\u5c5e\u6027\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u6211\u4eec\u7684 mixin: localFiles.interceptor.ts TypeScript import { FileInterceptor } from \"@nestjs/platform-express\" ; import { Injectable , mixin , NestInterceptor , Type } from \"@nestjs/common\" ; import { ConfigService } from \"@nestjs/config\" ; import { MulterOptions } from \"@nestjs/platform-express/multer/interfaces/multer-options.interface\" ; import { diskStorage } from \"multer\" ; interface LocalFilesInterceptorOptions { fieldName : string ; path? : string ; } function LocalFilesInterceptor ( options : LocalFilesInterceptorOptions ) : Type < NestInterceptor > { @Injectable () class Interceptor implements NestInterceptor { fileInterceptor : NestInterceptor ; constructor ( configService : ConfigService ) { const filesDestination = configService . get ( \"UPLOADED_FILES_DESTINATION\" ); const destination = ` ${ filesDestination }${ options . path } ` ; const multerOptions : MulterOptions = { storage : diskStorage ({ destination , }), }; this . fileInterceptor = new ( FileInterceptor ( options . fieldName , multerOptions ))(); } intercept ( ...args : Parameters < NestInterceptor [ \"intercept\" ] > ) { return this . fileInterceptor . intercept (... args ); } } return mixin ( Interceptor ); } export default LocalFilesInterceptor ; \u5728\u4e0a\u9762\uff0c\u6211\u4eec\u4f7f\u7528 UPLOADED_FILES_DESTINATION \u53d8\u91cf\uff0c\u5e76\u5c06\u5176\u4e0e\u63d0\u4f9b\u7684\u8def\u5f84\u8fde\u63a5\u8d77\u6765\u3002 \u4e3a\u6b64\uff0c\u8ba9\u6211\u4eec\u5b9a\u4e49\u5fc5\u8981\u7684\u73af\u5883\u53d8\u91cf\u3002 app.module.ts TypeScript import { Module } from \"@nestjs/common\" ; import { ConfigModule } from \"@nestjs/config\" ; import * as Joi from \"@hapi/joi\" ; @Module ({ imports : [ ConfigModule . forRoot ({ validationSchema : Joi.object ({ UPLOADED_FILES_DESTINATION : Joi.string (). required (), // ... }), }), // ... ], // ... }) export class AppModule { // ... } .env Text Only UPLOADED_FILES_DESTINATION=./uploadedFiles # ... \u5f53\u4e0a\u9762\u6240\u6709\u7684\u51c6\u5907\u5c31\u7eea\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u63a7\u5236\u5668\u4e2d\u4f7f\u7528 LocalFilesInterceptor: users.controller.ts TypeScript import { UsersService } from \"./users.service\" ; import { Controller , Post , Req , UploadedFile , UseGuards , UseInterceptors } from \"@nestjs/common\" ; import JwtAuthenticationGuard from \"../authentication/jwt-authentication.guard\" ; import RequestWithUser from \"../authentication/requestWithUser.interface\" ; import { Express } from \"express\" ; import LocalFilesInterceptor from \"../localFiles/localFiles.interceptor\" ; @Controller ( \"users\" ) export class UsersController { constructor ( private readonly usersService : UsersService ) {} @Post ( \"avatar\" ) @UseGuards ( JwtAuthenticationGuard ) @UseInterceptors ( LocalFilesInterceptor ({ fieldName : \"file\" , path : \"/avatars\" , }) ) async addAvatar ( @Req () request : RequestWithUser , @UploadedFile () file : Express.Multer.File ) { return this . usersService . addAvatar ( request . user . id , { path : file.path , filename : file.originalname , mimetype : file.mimetype , }); } } \u5c06\u5143\u6570\u636e\u4fdd\u5b58\u5728\u6570\u636e\u5e93\u4e2d \u9664\u4e86\u5c06\u6587\u4ef6\u5b58\u50a8\u5728\u670d\u52a1\u5668\u4e0a\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5c06\u6587\u4ef6\u7684\u5143\u6570\u636e\u4fdd\u5b58\u5728\u6570\u636e\u5e93\u4e2d\u3002 \u7531\u4e8e NestJS \u4e3a\u4e0a\u4f20\u7684\u6587\u4ef6\u751f\u6210\u4e00\u4e2a\u968f\u673a\u7684\u6587\u4ef6\u540d\uff0c\u6211\u4eec\u8fd8\u60f3\u5b58\u50a8\u539f\u59cb\u7684\u6587\u4ef6\u540d\u3002 \u8981\u5b8c\u6210\u4e0a\u8ff0\u6240\u6709\u5de5\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u5143\u6570\u636e\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f53\u3002 localFile.entity.ts TypeScript import { Column , Entity , PrimaryGeneratedColumn } from \"typeorm\" ; @Entity () class LocalFile { @PrimaryGeneratedColumn () public id : number ; @Column () filename : string ; @Column () path : string ; @Column () mimetype : string ; } export default LocalFile ; localFile . dto . ts ; interface LocalFileDto { filename : string ; path : string ; mimetype : string ; } \u6211\u4eec\u8fd8\u9700\u8981\u5728\u7528\u6237\u548c\u6587\u4ef6\u4e4b\u95f4\u521b\u5efa\u4e00\u4e2a\u5173\u7cfb\u3002 user.entity.ts TypeScript import { Column , Entity , JoinColumn , OneToOne , PrimaryGeneratedColumn } from \"typeorm\" ; import LocalFile from \"../localFiles/localFile.entity\" ; @Entity () class User { @PrimaryGeneratedColumn () public id : number ; @JoinColumn ({ name : \"avatarId\" }) @OneToOne (() => LocalFile , { nullable : true , }) public avatar? : LocalFile ; @Column ({ nullable : true }) public avatarId? : number ; // ... } export default User ; \u6211\u4eec\u5728\u4e0a\u9762\u6dfb\u52a0\u4e86 avatarId \u5217\uff0c\u8fd9\u6837\u7528\u6237\u7684\u5b9e\u4f53\u5c31\u53ef\u4ee5\u4fdd\u5b58\u89d2\u8272\u7684 id\uff0c\u800c\u4e0d\u7528\u8fde\u63a5\u89d2\u8272\u7684\u6240\u6709\u6570\u636e\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u521b\u5efa LocalFilesService \u7684\u57fa\u7840: localFiles.service.ts TypeScript import { Injectable } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository } from \"typeorm\" ; import LocalFile from \"./localFile.entity\" ; @Injectable () class LocalFilesService { constructor ( @InjectRepository ( LocalFile ) private localFilesRepository : Repository < LocalFile > ) {} async saveLocalFileData ( fileData : LocalFileDto ) { const newFile = await this . localFilesRepository . create ( fileData ); await this . localFilesRepository . save ( newFile ); return newFile ; } } export default LocalFilesService ; \u6700\u540e\u4e00\u6b65\u662f\u5728 UsersService \u4e2d\u4f7f\u7528 saveLocalFileData \u65b9\u6cd5: users.service.ts TypeScript import { Injectable } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository , Connection , In } from \"typeorm\" ; import User from \"./user.entity\" ; import LocalFilesService from \"../localFiles/localFiles.service\" ; @Injectable () export class UsersService { constructor ( @InjectRepository ( User ) private usersRepository : Repository < User > , private localFilesService : LocalFilesService ) {} async addAvatar ( userId : number , fileData : LocalFileDto ) { const avatar = await this . localFilesService . saveLocalFileData ( fileData ); await this . usersRepository . update ( userId , { avatarId : avatar.id , }); } // ... } \u68c0\u7d22\u6587\u4ef6 \u73b0\u5728\uff0c\u7528\u6237\u53ef\u4ee5\u68c0\u7d22\u4ed6\u4eec\u5316\u8eab\u7684 id\u3002 \u8981\u4e0b\u8f7d\u5177\u6709\u7ed9\u5b9a id \u7684\u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4f20\u8f93\u5185\u5bb9\u7684\u63a7\u5236\u5668\u3002 \u5b9e\u73b0\u4e0a\u8ff0\u529f\u80fd\u7684\u7b2c\u4e00\u6b65\u662f\u6269\u5c55 LocalFilesService: TypeScript import { Injectable , NotFoundException } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository } from \"typeorm\" ; import LocalFile from \"./localFile.entity\" ; @Injectable () class LocalFilesService { constructor ( @InjectRepository ( LocalFile ) private localFilesRepository : Repository < LocalFile > ) {} async getFileById ( fileId : number ) { const file = await this . localFilesRepository . findOne ( fileId ); if ( ! file ) { throw new NotFoundException (); } return file ; } // ... } export default LocalFilesService ; \u6211\u4eec\u8fd8\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u4f7f\u7528\u4e0a\u8ff0\u65b9\u6cd5\u7684\u63a7\u5236\u5668: localFiles.controller.ts TypeScript import { Controller , Get , Param , UseInterceptors , ClassSerializerInterceptor , StreamableFile , Res , ParseIntPipe , } from \"@nestjs/common\" ; import LocalFilesService from \"./localFiles.service\" ; import { Response } from \"express\" ; import { createReadStream } from \"fs\" ; import { join } from \"path\" ; @Controller ( \"local-files\" ) @UseInterceptors ( ClassSerializerInterceptor ) export default class LocalFilesController { constructor ( private readonly localFilesService : LocalFilesService ) {} @Get ( \":id\" ) async getDatabaseFileById ( @Param ( \"id\" , ParseIntPipe ) id : number , @Res ({ passthrough : true }) response : Response ) { const file = await this . localFilesService . getFileById ( id ); const stream = createReadStream ( join ( process . cwd (), file . path )); response . set ({ \"Content-Disposition\" : `inline; filename=\" ${ file . filename } \"` , \"Content-Type\" : file . mimetype , }); return new StreamableFile ( stream ); } } \u6211\u4eec\u5728\u672c\u7cfb\u5217\u7684\u524d\u4e00\u90e8\u5206\u4e2d\u4e86\u89e3\u4e86 StreamableFile \u7c7b\u548c Content-Disposition \u5934\u6587\u4ef6\u3002 \u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\u5141\u8bb8\u7528\u6237\u68c0\u7d22\u5177\u6709\u7ed9\u5b9a id \u7684\u6587\u4ef6\u3002 \u8fc7\u6ee4\u4f20\u5165\u7684\u6587\u4ef6 \u6211\u4eec\u4e0d\u5e94\u8be5\u603b\u662f\u76f8\u4fe1\u7528\u6237\u4e0a\u4f20\u7684\u6587\u4ef6\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4f7f\u7528 filfilter \u8fc7\u6ee4\u5b83\u4eec\uff0c\u5e76\u9650\u5236 multer \u652f\u6301\u7684\u5c5e\u6027\u3002 localFiles.interceptor.ts TypeScript import { FileInterceptor } from \"@nestjs/platform-express\" ; import { Injectable , mixin , NestInterceptor , Type } from \"@nestjs/common\" ; import { ConfigService } from \"@nestjs/config\" ; import { MulterOptions } from \"@nestjs/platform-express/multer/interfaces/multer-options.interface\" ; import { diskStorage } from \"multer\" ; interface LocalFilesInterceptorOptions { fieldName : string ; path? : string ; fileFilter? : MulterOptions [ \"fileFilter\" ]; limits? : MulterOptions [ \"limits\" ]; } function LocalFilesInterceptor ( options : LocalFilesInterceptorOptions ) : Type < NestInterceptor > { @Injectable () class Interceptor implements NestInterceptor { fileInterceptor : NestInterceptor ; constructor ( configService : ConfigService ) { const filesDestination = configService . get ( \"UPLOADED_FILES_DESTINATION\" ); const destination = ` ${ filesDestination }${ options . path } ` ; const multerOptions : MulterOptions = { storage : diskStorage ({ destination , }), fileFilter : options.fileFilter , limits : options.limits , }; this . fileInterceptor = new ( FileInterceptor ( options . fieldName , multerOptions ))(); } intercept ( ...args : Parameters < NestInterceptor [ \"intercept\" ] > ) { return this . fileInterceptor . intercept (... args ); } } return mixin ( Interceptor ); } export default LocalFilesInterceptor ; \u8ba9\u6211\u4eec\u53ea\u5141\u8bb8\u5728 mimetype \u4e2d\u5305\u542b\u201cimage\u201d\u4e14\u5c0f\u4e8e 1MB \u7684\u6587\u4ef6\u3002 TypeScript import { UsersService } from \"./users.service\" ; import { BadRequestException , Controller , Post , Req , UploadedFile , UseGuards , UseInterceptors } from \"@nestjs/common\" ; import JwtAuthenticationGuard from \"../authentication/jwt-authentication.guard\" ; import RequestWithUser from \"../authentication/requestWithUser.interface\" ; import { Express } from \"express\" ; import LocalFilesInterceptor from \"../localFiles/localFiles.interceptor\" ; @Controller ( \"users\" ) export class UsersController { constructor ( private readonly usersService : UsersService ) {} @Post ( \"avatar\" ) @UseGuards ( JwtAuthenticationGuard ) @UseInterceptors ( LocalFilesInterceptor ({ fieldName : \"file\" , path : \"/avatars\" , fileFilter : ( request , file , callback ) => { if ( ! file . mimetype . includes ( \"image\" )) { return callback ( new BadRequestException ( \"Provide a valid image\" ), false ); } callback ( null , true ); }, limits : { fileSize : Math.pow ( 1024 , 2 ), // 1MB }, }) ) async addAvatar ( @Req () request : RequestWithUser , @UploadedFile () file : Express.Multer.File ) { return this . usersService . addAvatar ( request . user . id , { path : file.path , filename : file.originalname , mimetype : file.mimetype , }); } } \u5982\u679c\u6587\u4ef6\u4e0d\u6ee1\u8db3\u5927\u5c0f\u8981\u6c42\uff0cNestJS \u629b\u51fa 413 Payload Too Large\u3002 \u4e0d\u53ea\u662f\u68c0\u67e5 mimetype \u548c\u4f7f\u7528\u6587\u4ef6\u7c7b\u578b\u5e93\u53ef\u80fd\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002 \u603b\u7ed3 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u901a\u8fc7 NestJS \u7ba1\u7406\u670d\u52a1\u5668\u4e0a\u6587\u4ef6\u7684\u57fa\u7840\u77e5\u8bc6\u3002 \u6211\u4eec\u5df2\u7ecf\u5b66\u4e60\u4e86\u5982\u4f55\u5c06\u5b83\u4eec\u5b58\u50a8\u5728\u670d\u52a1\u5668\u4e0a\u5e76\u8fd4\u56de\u7ed9\u7528\u6237\u3002 \u5f53\u8fd9\u6837\u505a\u65f6\uff0c\u6211\u4eec\u6269\u5c55\u4e86\u5185\u7f6e\u7684 FileInterceptor \u5e76\u5b9e\u73b0\u4e86\u8fc7\u6ee4\u3002 \u4ecd\u7136\u6709\u4e00\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u6269\u5c55\u672c\u6587\u4e2d\u7684\u4ee3\u7801\u3002 \u5982\u672c\u7cfb\u5217\u7b2c 15 \u90e8\u5206\u6240\u8ff0\uff0c\u60a8\u53ef\u4ee5\u81ea\u7531\u5730\u5b9e\u73b0\u6587\u4ef6\u5220\u9664\u548c\u4f7f\u7528\u4e8b\u52a1\u3002 \u901a\u8fc7\u5b66\u4e60\u5404\u79cd\u5b58\u50a8\u6587\u4ef6\u7684\u65b9\u6cd5\uff0c\u60a8\u73b0\u5728\u53ef\u4ee5\u81ea\u7531\u5730\u6bd4\u8f83\u5176\u4f18\u7f3a\u70b9\uff0c\u5e76\u4f7f\u7528\u6700\u9002\u5408\u81ea\u5df1\u9700\u6c42\u7684\u65b9\u6cd5\u3002","title":"Uploading files to the server"},{"location":"docs/files/api-nestjs-uploading-files-to-server/#_1","text":"\u5e78\u8fd0\u7684\u662f\uff0cNestJS \u4f7f\u5f97\u5728\u670d\u52a1\u5668\u4e0a\u5b58\u50a8\u6587\u4ef6\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\u3002 \u6211\u4eec\u9700\u8981\u5411 FileInterceptor \u4f20\u9012\u989d\u5916\u7684\u53c2\u6570\u3002 users.service.ts; TypeScript import { UsersService } from \"./users.service\" ; import { Controller , Post , Req , UploadedFile , UseGuards , UseInterceptors } from \"@nestjs/common\" ; import JwtAuthenticationGuard from \"../authentication/jwt-authentication.guard\" ; import RequestWithUser from \"../authentication/requestWithUser.interface\" ; import { Express } from \"express\" ; import { FileInterceptor } from \"@nestjs/platform-express\" ; import { diskStorage } from \"multer\" ; @Controller ( \"users\" ) export class UsersController { constructor ( private readonly usersService : UsersService ) {} @Post ( \"avatar\" ) @UseGuards ( JwtAuthenticationGuard ) @UseInterceptors ( FileInterceptor ( \"file\" , { storage : diskStorage ({ destination : \"./uploadedFiles/avatars\" , }), }) ) async addAvatar ( @Req () request : RequestWithUser , @UploadedFile () file : Express.Multer.File ) { return this . usersService . addAvatar ( request . user . id , { path : file.path , filename : file.originalname , mimetype : file.mimetype , }); } } \u5f53\u6211\u4eec\u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\u65f6\uff0cNestJS \u5c06\u4e0a\u4f20\u7684\u6587\u4ef6\u5b58\u50a8\u5728 ./uploadefiles/avatars \u76ee\u5f55\u4e2d\u3002 \u4e0d\u8fc7\uff0c\u4e0a\u8ff0\u65b9\u6cd5\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\u3002 \u9996\u5148\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u591a\u4e2a\u7aef\u70b9\u6765\u63a5\u53d7\u6587\u4ef6\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u5b83\u4eec\u6bcf\u4e2a\u91cd\u590d\u914d\u7f6e\u7684\u67d0\u4e9b\u90e8\u5206\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u5e94\u8be5\u5c06\u76ee\u6807\u7684\u3002 /uploaddfiles \u90e8\u5206\u653e\u5728\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\u4e2d\uff0c\u4ee5\u6839\u636e\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u7684\u73af\u5883\u6765\u66f4\u6539\u5b83\u3002","title":"\u5728\u670d\u52a1\u5668\u4e0a\u4fdd\u5b58\u6587\u4ef6"},{"location":"docs/files/api-nestjs-uploading-files-to-server/#fileinterceptor","text":"\u5b9e\u73b0\u4e0a\u8ff0\u76ee\u6807\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u6269\u5c55 FileInterceptor\u3002 \u5728\u67e5\u770b\u4e86 NestJS \u7684\u5e95\u5c42\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5b83\u4f7f\u7528\u4e86 mixin \u6a21\u5f0f\u3002 \u56e0\u4e3a FileInterceptor \u4e0d\u662f\u7c7b\uff0c\u6240\u4ee5\u4e0d\u80fd\u4f7f\u7528 extend \u5173\u952e\u5b57\u3002 \u6211\u4eec\u60f3\u8981\u6269\u5c55 FileInterceptor \u7684\u529f\u80fd\uff0c\u5f53: \u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u6765\u6ce8\u5165 ConfigService \uff0c \u80fd\u591f\u4ece\u63a7\u5236\u5668\u4f20\u9012\u989d\u5916\u7684\u5c5e\u6027\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u6211\u4eec\u7684 mixin: localFiles.interceptor.ts TypeScript import { FileInterceptor } from \"@nestjs/platform-express\" ; import { Injectable , mixin , NestInterceptor , Type } from \"@nestjs/common\" ; import { ConfigService } from \"@nestjs/config\" ; import { MulterOptions } from \"@nestjs/platform-express/multer/interfaces/multer-options.interface\" ; import { diskStorage } from \"multer\" ; interface LocalFilesInterceptorOptions { fieldName : string ; path? : string ; } function LocalFilesInterceptor ( options : LocalFilesInterceptorOptions ) : Type < NestInterceptor > { @Injectable () class Interceptor implements NestInterceptor { fileInterceptor : NestInterceptor ; constructor ( configService : ConfigService ) { const filesDestination = configService . get ( \"UPLOADED_FILES_DESTINATION\" ); const destination = ` ${ filesDestination }${ options . path } ` ; const multerOptions : MulterOptions = { storage : diskStorage ({ destination , }), }; this . fileInterceptor = new ( FileInterceptor ( options . fieldName , multerOptions ))(); } intercept ( ...args : Parameters < NestInterceptor [ \"intercept\" ] > ) { return this . fileInterceptor . intercept (... args ); } } return mixin ( Interceptor ); } export default LocalFilesInterceptor ; \u5728\u4e0a\u9762\uff0c\u6211\u4eec\u4f7f\u7528 UPLOADED_FILES_DESTINATION \u53d8\u91cf\uff0c\u5e76\u5c06\u5176\u4e0e\u63d0\u4f9b\u7684\u8def\u5f84\u8fde\u63a5\u8d77\u6765\u3002 \u4e3a\u6b64\uff0c\u8ba9\u6211\u4eec\u5b9a\u4e49\u5fc5\u8981\u7684\u73af\u5883\u53d8\u91cf\u3002 app.module.ts TypeScript import { Module } from \"@nestjs/common\" ; import { ConfigModule } from \"@nestjs/config\" ; import * as Joi from \"@hapi/joi\" ; @Module ({ imports : [ ConfigModule . forRoot ({ validationSchema : Joi.object ({ UPLOADED_FILES_DESTINATION : Joi.string (). required (), // ... }), }), // ... ], // ... }) export class AppModule { // ... } .env Text Only UPLOADED_FILES_DESTINATION=./uploadedFiles # ... \u5f53\u4e0a\u9762\u6240\u6709\u7684\u51c6\u5907\u5c31\u7eea\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u63a7\u5236\u5668\u4e2d\u4f7f\u7528 LocalFilesInterceptor: users.controller.ts TypeScript import { UsersService } from \"./users.service\" ; import { Controller , Post , Req , UploadedFile , UseGuards , UseInterceptors } from \"@nestjs/common\" ; import JwtAuthenticationGuard from \"../authentication/jwt-authentication.guard\" ; import RequestWithUser from \"../authentication/requestWithUser.interface\" ; import { Express } from \"express\" ; import LocalFilesInterceptor from \"../localFiles/localFiles.interceptor\" ; @Controller ( \"users\" ) export class UsersController { constructor ( private readonly usersService : UsersService ) {} @Post ( \"avatar\" ) @UseGuards ( JwtAuthenticationGuard ) @UseInterceptors ( LocalFilesInterceptor ({ fieldName : \"file\" , path : \"/avatars\" , }) ) async addAvatar ( @Req () request : RequestWithUser , @UploadedFile () file : Express.Multer.File ) { return this . usersService . addAvatar ( request . user . id , { path : file.path , filename : file.originalname , mimetype : file.mimetype , }); } }","title":"\u6269\u5c55 FileInterceptor"},{"location":"docs/files/api-nestjs-uploading-files-to-server/#_2","text":"\u9664\u4e86\u5c06\u6587\u4ef6\u5b58\u50a8\u5728\u670d\u52a1\u5668\u4e0a\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5c06\u6587\u4ef6\u7684\u5143\u6570\u636e\u4fdd\u5b58\u5728\u6570\u636e\u5e93\u4e2d\u3002 \u7531\u4e8e NestJS \u4e3a\u4e0a\u4f20\u7684\u6587\u4ef6\u751f\u6210\u4e00\u4e2a\u968f\u673a\u7684\u6587\u4ef6\u540d\uff0c\u6211\u4eec\u8fd8\u60f3\u5b58\u50a8\u539f\u59cb\u7684\u6587\u4ef6\u540d\u3002 \u8981\u5b8c\u6210\u4e0a\u8ff0\u6240\u6709\u5de5\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u5143\u6570\u636e\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f53\u3002 localFile.entity.ts TypeScript import { Column , Entity , PrimaryGeneratedColumn } from \"typeorm\" ; @Entity () class LocalFile { @PrimaryGeneratedColumn () public id : number ; @Column () filename : string ; @Column () path : string ; @Column () mimetype : string ; } export default LocalFile ; localFile . dto . ts ; interface LocalFileDto { filename : string ; path : string ; mimetype : string ; } \u6211\u4eec\u8fd8\u9700\u8981\u5728\u7528\u6237\u548c\u6587\u4ef6\u4e4b\u95f4\u521b\u5efa\u4e00\u4e2a\u5173\u7cfb\u3002 user.entity.ts TypeScript import { Column , Entity , JoinColumn , OneToOne , PrimaryGeneratedColumn } from \"typeorm\" ; import LocalFile from \"../localFiles/localFile.entity\" ; @Entity () class User { @PrimaryGeneratedColumn () public id : number ; @JoinColumn ({ name : \"avatarId\" }) @OneToOne (() => LocalFile , { nullable : true , }) public avatar? : LocalFile ; @Column ({ nullable : true }) public avatarId? : number ; // ... } export default User ; \u6211\u4eec\u5728\u4e0a\u9762\u6dfb\u52a0\u4e86 avatarId \u5217\uff0c\u8fd9\u6837\u7528\u6237\u7684\u5b9e\u4f53\u5c31\u53ef\u4ee5\u4fdd\u5b58\u89d2\u8272\u7684 id\uff0c\u800c\u4e0d\u7528\u8fde\u63a5\u89d2\u8272\u7684\u6240\u6709\u6570\u636e\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u521b\u5efa LocalFilesService \u7684\u57fa\u7840: localFiles.service.ts TypeScript import { Injectable } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository } from \"typeorm\" ; import LocalFile from \"./localFile.entity\" ; @Injectable () class LocalFilesService { constructor ( @InjectRepository ( LocalFile ) private localFilesRepository : Repository < LocalFile > ) {} async saveLocalFileData ( fileData : LocalFileDto ) { const newFile = await this . localFilesRepository . create ( fileData ); await this . localFilesRepository . save ( newFile ); return newFile ; } } export default LocalFilesService ; \u6700\u540e\u4e00\u6b65\u662f\u5728 UsersService \u4e2d\u4f7f\u7528 saveLocalFileData \u65b9\u6cd5: users.service.ts TypeScript import { Injectable } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository , Connection , In } from \"typeorm\" ; import User from \"./user.entity\" ; import LocalFilesService from \"../localFiles/localFiles.service\" ; @Injectable () export class UsersService { constructor ( @InjectRepository ( User ) private usersRepository : Repository < User > , private localFilesService : LocalFilesService ) {} async addAvatar ( userId : number , fileData : LocalFileDto ) { const avatar = await this . localFilesService . saveLocalFileData ( fileData ); await this . usersRepository . update ( userId , { avatarId : avatar.id , }); } // ... }","title":"\u5c06\u5143\u6570\u636e\u4fdd\u5b58\u5728\u6570\u636e\u5e93\u4e2d"},{"location":"docs/files/api-nestjs-uploading-files-to-server/#_3","text":"\u73b0\u5728\uff0c\u7528\u6237\u53ef\u4ee5\u68c0\u7d22\u4ed6\u4eec\u5316\u8eab\u7684 id\u3002 \u8981\u4e0b\u8f7d\u5177\u6709\u7ed9\u5b9a id \u7684\u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4f20\u8f93\u5185\u5bb9\u7684\u63a7\u5236\u5668\u3002 \u5b9e\u73b0\u4e0a\u8ff0\u529f\u80fd\u7684\u7b2c\u4e00\u6b65\u662f\u6269\u5c55 LocalFilesService: TypeScript import { Injectable , NotFoundException } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository } from \"typeorm\" ; import LocalFile from \"./localFile.entity\" ; @Injectable () class LocalFilesService { constructor ( @InjectRepository ( LocalFile ) private localFilesRepository : Repository < LocalFile > ) {} async getFileById ( fileId : number ) { const file = await this . localFilesRepository . findOne ( fileId ); if ( ! file ) { throw new NotFoundException (); } return file ; } // ... } export default LocalFilesService ; \u6211\u4eec\u8fd8\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u4f7f\u7528\u4e0a\u8ff0\u65b9\u6cd5\u7684\u63a7\u5236\u5668: localFiles.controller.ts TypeScript import { Controller , Get , Param , UseInterceptors , ClassSerializerInterceptor , StreamableFile , Res , ParseIntPipe , } from \"@nestjs/common\" ; import LocalFilesService from \"./localFiles.service\" ; import { Response } from \"express\" ; import { createReadStream } from \"fs\" ; import { join } from \"path\" ; @Controller ( \"local-files\" ) @UseInterceptors ( ClassSerializerInterceptor ) export default class LocalFilesController { constructor ( private readonly localFilesService : LocalFilesService ) {} @Get ( \":id\" ) async getDatabaseFileById ( @Param ( \"id\" , ParseIntPipe ) id : number , @Res ({ passthrough : true }) response : Response ) { const file = await this . localFilesService . getFileById ( id ); const stream = createReadStream ( join ( process . cwd (), file . path )); response . set ({ \"Content-Disposition\" : `inline; filename=\" ${ file . filename } \"` , \"Content-Type\" : file . mimetype , }); return new StreamableFile ( stream ); } } \u6211\u4eec\u5728\u672c\u7cfb\u5217\u7684\u524d\u4e00\u90e8\u5206\u4e2d\u4e86\u89e3\u4e86 StreamableFile \u7c7b\u548c Content-Disposition \u5934\u6587\u4ef6\u3002 \u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\u5141\u8bb8\u7528\u6237\u68c0\u7d22\u5177\u6709\u7ed9\u5b9a id \u7684\u6587\u4ef6\u3002","title":"\u68c0\u7d22\u6587\u4ef6"},{"location":"docs/files/api-nestjs-uploading-files-to-server/#_4","text":"\u6211\u4eec\u4e0d\u5e94\u8be5\u603b\u662f\u76f8\u4fe1\u7528\u6237\u4e0a\u4f20\u7684\u6587\u4ef6\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4f7f\u7528 filfilter \u8fc7\u6ee4\u5b83\u4eec\uff0c\u5e76\u9650\u5236 multer \u652f\u6301\u7684\u5c5e\u6027\u3002 localFiles.interceptor.ts TypeScript import { FileInterceptor } from \"@nestjs/platform-express\" ; import { Injectable , mixin , NestInterceptor , Type } from \"@nestjs/common\" ; import { ConfigService } from \"@nestjs/config\" ; import { MulterOptions } from \"@nestjs/platform-express/multer/interfaces/multer-options.interface\" ; import { diskStorage } from \"multer\" ; interface LocalFilesInterceptorOptions { fieldName : string ; path? : string ; fileFilter? : MulterOptions [ \"fileFilter\" ]; limits? : MulterOptions [ \"limits\" ]; } function LocalFilesInterceptor ( options : LocalFilesInterceptorOptions ) : Type < NestInterceptor > { @Injectable () class Interceptor implements NestInterceptor { fileInterceptor : NestInterceptor ; constructor ( configService : ConfigService ) { const filesDestination = configService . get ( \"UPLOADED_FILES_DESTINATION\" ); const destination = ` ${ filesDestination }${ options . path } ` ; const multerOptions : MulterOptions = { storage : diskStorage ({ destination , }), fileFilter : options.fileFilter , limits : options.limits , }; this . fileInterceptor = new ( FileInterceptor ( options . fieldName , multerOptions ))(); } intercept ( ...args : Parameters < NestInterceptor [ \"intercept\" ] > ) { return this . fileInterceptor . intercept (... args ); } } return mixin ( Interceptor ); } export default LocalFilesInterceptor ; \u8ba9\u6211\u4eec\u53ea\u5141\u8bb8\u5728 mimetype \u4e2d\u5305\u542b\u201cimage\u201d\u4e14\u5c0f\u4e8e 1MB \u7684\u6587\u4ef6\u3002 TypeScript import { UsersService } from \"./users.service\" ; import { BadRequestException , Controller , Post , Req , UploadedFile , UseGuards , UseInterceptors } from \"@nestjs/common\" ; import JwtAuthenticationGuard from \"../authentication/jwt-authentication.guard\" ; import RequestWithUser from \"../authentication/requestWithUser.interface\" ; import { Express } from \"express\" ; import LocalFilesInterceptor from \"../localFiles/localFiles.interceptor\" ; @Controller ( \"users\" ) export class UsersController { constructor ( private readonly usersService : UsersService ) {} @Post ( \"avatar\" ) @UseGuards ( JwtAuthenticationGuard ) @UseInterceptors ( LocalFilesInterceptor ({ fieldName : \"file\" , path : \"/avatars\" , fileFilter : ( request , file , callback ) => { if ( ! file . mimetype . includes ( \"image\" )) { return callback ( new BadRequestException ( \"Provide a valid image\" ), false ); } callback ( null , true ); }, limits : { fileSize : Math.pow ( 1024 , 2 ), // 1MB }, }) ) async addAvatar ( @Req () request : RequestWithUser , @UploadedFile () file : Express.Multer.File ) { return this . usersService . addAvatar ( request . user . id , { path : file.path , filename : file.originalname , mimetype : file.mimetype , }); } } \u5982\u679c\u6587\u4ef6\u4e0d\u6ee1\u8db3\u5927\u5c0f\u8981\u6c42\uff0cNestJS \u629b\u51fa 413 Payload Too Large\u3002 \u4e0d\u53ea\u662f\u68c0\u67e5 mimetype \u548c\u4f7f\u7528\u6587\u4ef6\u7c7b\u578b\u5e93\u53ef\u80fd\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002","title":"\u8fc7\u6ee4\u4f20\u5165\u7684\u6587\u4ef6"},{"location":"docs/files/api-nestjs-uploading-files-to-server/#_5","text":"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u901a\u8fc7 NestJS \u7ba1\u7406\u670d\u52a1\u5668\u4e0a\u6587\u4ef6\u7684\u57fa\u7840\u77e5\u8bc6\u3002 \u6211\u4eec\u5df2\u7ecf\u5b66\u4e60\u4e86\u5982\u4f55\u5c06\u5b83\u4eec\u5b58\u50a8\u5728\u670d\u52a1\u5668\u4e0a\u5e76\u8fd4\u56de\u7ed9\u7528\u6237\u3002 \u5f53\u8fd9\u6837\u505a\u65f6\uff0c\u6211\u4eec\u6269\u5c55\u4e86\u5185\u7f6e\u7684 FileInterceptor \u5e76\u5b9e\u73b0\u4e86\u8fc7\u6ee4\u3002 \u4ecd\u7136\u6709\u4e00\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u6269\u5c55\u672c\u6587\u4e2d\u7684\u4ee3\u7801\u3002 \u5982\u672c\u7cfb\u5217\u7b2c 15 \u90e8\u5206\u6240\u8ff0\uff0c\u60a8\u53ef\u4ee5\u81ea\u7531\u5730\u5b9e\u73b0\u6587\u4ef6\u5220\u9664\u548c\u4f7f\u7528\u4e8b\u52a1\u3002 \u901a\u8fc7\u5b66\u4e60\u5404\u79cd\u5b58\u50a8\u6587\u4ef6\u7684\u65b9\u6cd5\uff0c\u60a8\u73b0\u5728\u53ef\u4ee5\u81ea\u7531\u5730\u6bd4\u8f83\u5176\u4f18\u7f3a\u70b9\uff0c\u5e76\u4f7f\u7528\u6700\u9002\u5408\u81ea\u5df1\u9700\u6c42\u7684\u65b9\u6cd5\u3002","title":"\u603b\u7ed3"},{"location":"docs/http/_index/","text":"https://github.com/axios/axios","title":"http"},{"location":"docs/http/api-nestjs-error-handling-validation/","text":"https://wanago.io/2020/06/01/api-nestjs-error-handling-validation/ \u5728\u5904\u7406\u9519\u8bef\u548c\u9a8c\u8bc1\u6570\u636e\u65b9\u9762\uff0c NestJS \u975e\u5e38\u51fa\u8272\u3002 \u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u8981\u5f52\u529f\u4e8e\u4f7f\u7528\u88c5\u9970\u5668\u3002 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd NestJS \u63d0\u4f9b\u7684\u7279\u6027\uff0c\u4f8b\u5982\u5f02\u5e38\u8fc7\u6ee4\u5668\u548c\u9a8c\u8bc1\u7ba1\u9053\u3002 \u672c\u7cfb\u5217\u7684\u4ee3\u7801\u751f\u6210\u4e86\u8fd9\u4e2a \u5b58\u50a8\u5e93 \u3002 \u5b83\u7684\u76ee\u6807\u662f\u6210\u4e3a \u5b98\u65b9 Nest \u6846\u67b6 TypeScript \u5165\u95e8 \u7248\u7684\u6269\u5c55\u7248\u672c\u3002 \u5f02\u5e38\u8fc7\u6ee4\u5668 Nest \u6709\u4e00\u4e2a\u5f02\u5e38\u8fc7\u6ee4\u5668\uff0c\u8d1f\u8d23\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u9519\u8bef\u3002 \u6bcf\u5f53\u6211\u4eec\u81ea\u5df1\u4e0d\u5904\u7406\u5f02\u5e38\u65f6\uff0c\u5f02\u5e38\u8fc7\u6ee4\u5668\u5c31\u4f1a\u66ff\u6211\u4eec\u5904\u7406\u3002 \u5b83\u5904\u7406\u5f02\u5e38\u5e76\u4ee5\u7528\u6237\u53cb\u597d\u7684\u683c\u5f0f\u5c06\u5176\u53d1\u9001\u5230\u54cd\u5e94\u4e2d\u3002 \u9ed8\u8ba4\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668\u540d\u4e3a BaseExceptionFilter \u3002 \u6211\u4eec\u53ef\u4ee5\u67e5\u770b NestJS \u7684\u6e90\u4ee3\u7801\u5e76\u68c0\u67e5\u5b83\u7684\u884c\u4e3a\u3002 nest/packages/core/exceptions/base-exception-filter.ts TypeScript export class BaseExceptionFilter < T = any > implements ExceptionFilter < T > { // ... catch ( exception : T , host : ArgumentsHost ) { // ... if ( ! ( exception instanceof HttpException )) { return this . handleUnknownError ( exception , host , applicationRef ); } const res = exception . getResponse (); const message = isObject ( res ) ? res : { statusCode : exception.getStatus (), message : res , }; // ... } public handleUnknownError ( exception : T , host : ArgumentsHost , applicationRef : AbstractHttpAdapter | HttpServer ) { const body = { statusCode : HttpStatus.INTERNAL_SERVER_ERROR , message : MESSAGES.UNKNOWN_EXCEPTION_MESSAGE , }; // ... } } \u6bcf\u5f53\u5e94\u7528\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u9519\u8bef\u65f6\uff0c catch \u65b9\u6cd5\u5c31\u4f1a\u8fd0\u884c\u3002 \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u83b7\u5f97\u4e00\u4e9b\u57fa\u672c\u4fe1\u606f\u3002 HttpException Nest \u5e0c\u671b\u6211\u4eec\u4f7f\u7528 HttpException \u7c7b\u3002 \u5982\u679c\u6211\u4eec\u4e0d\u8fd9\u6837\u505a\uff0c\u5b83\u5c06\u9519\u8bef\u89e3\u91ca\u4e3a\u65e0\u610f\u7684\uff0c\u5e76\u4ee5 500 \u5185\u90e8\u670d\u52a1\u5668\u9519\u8bef\u54cd\u5e94\u3002 \u5728\u672c\u7cfb\u5217\u7684\u524d\u51e0\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u591a\u6b21\u4f7f\u7528\u4e86 HttpException : \u629b\u51fa\u65b0\u7684 HttpException('Post not found'\uff0c HttpStatus.NOT_FOUND) ; \u6784\u9020\u51fd\u6570\u63a5\u53d7\u4e24\u4e2a\u5fc5\u9700\u7684\u53c2\u6570:\u54cd\u5e94\u4f53\u548c\u72b6\u6001\u4ee3\u7801\u3002 \u5bf9\u4e8e\u540e\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u63d0\u4f9b\u7684 HttpStatus enum\u3002 \u5982\u679c\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u54cd\u5e94\u7684\u5b9a\u4e49\uff0cNestJS \u5c06\u5176\u5e8f\u5217\u5316\u4e3a\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u5c5e\u6027\u7684\u5bf9\u8c61: statusCode:\u5305\u542b\u6211\u4eec\u9009\u62e9\u7684 HTTP \u4ee3\u7801 message:\u6211\u4eec\u63d0\u4f9b\u7684\u63cf\u8ff0 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a\u5bf9\u8c61\u4f5c\u4e3a HttpException \u6784\u9020\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u6765\u91cd\u5199\u4e0a\u8ff0\u884c\u4e3a\u3002 \u6211\u4eec\u7ecf\u5e38\u53d1\u73b0\u81ea\u5df1\u4e0d\u6b62\u4e00\u6b21\u5730\u629b\u51fa\u7c7b\u4f3c\u7684\u5f02\u5e38\u3002 \u4e3a\u4e86\u907f\u514d\u4ee3\u7801\u91cd\u590d\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u81ea\u5b9a\u4e49\u5f02\u5e38\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u6269\u5c55 HttpException \u7c7b\u3002 posts/exception/postNotFund.exception.ts TypeScript import { HttpException , HttpStatus } from \"@nestjs/common\" ; class PostNotFoundException extends HttpException { constructor ( postId : number ) { super ( `Post with id ${ postId } not found` , HttpStatus . NOT_FOUND ); } } \u6211\u4eec\u7684\u81ea\u5b9a\u4e49 PostNotFoundException \u8c03\u7528 HttpException \u7684\u6784\u9020\u51fd\u6570\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0d\u5fc5\u5728\u6bcf\u6b21\u60f3\u8981\u629b\u51fa\u9519\u8bef\u65f6\u90fd\u5b9a\u4e49\u6d88\u606f\u6765\u6e05\u7406\u4ee3\u7801\u3002 NestJS \u6709\u4e00\u7ec4\u6269\u5c55 HttpException \u7684\u5f02\u5e38\u3002 \u5176\u4e2d\u4e00\u4e2a\u662f NotFoundException\u3002 \u6211\u4eec\u53ef\u4ee5\u91cd\u6784\u4e0a\u9762\u7684\u4ee3\u7801\u5e76\u4f7f\u7528\u5b83\u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u6587\u6863\u4e2d\u627e\u5230\u5b8c\u6574\u7684\u5185\u7f6e HTTP \u5f02\u5e38\u5217\u8868\u3002 posts/exception/postNotFund.exception.ts TypeScript import { NotFoundException } from \"@nestjs/common\" ; class PostNotFoundException extends NotFoundException { constructor ( postId : number ) { super ( `Post with id ${ postId } not found` ); } } NotFoundException \u7c7b\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u9644\u52a0\u7684\u9519\u8bef\u5c5e\u6027\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u7684\u6d88\u606f\u5c31\u7531 NotFoundException \u5b9a\u4e49\uff0c\u5e76\u4e14\u662f\u57fa\u4e8e\u72b6\u6001\u7684\u3002 \u6269\u5c55 BaseExceptionFilter \u9ed8\u8ba4\u7684 BaseExceptionFilter \u53ef\u4ee5\u5904\u7406\u5927\u591a\u6570\u5e38\u89c4\u60c5\u51b5\u3002 \u7136\u800c\uff0c\u6211\u4eec\u53ef\u80fd\u60f3\u8981\u4ee5\u67d0\u79cd\u65b9\u5f0f\u4fee\u6539\u5b83\u3002 \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u521b\u5efa\u4e00\u4e2a\u6269\u5c55\u5b83\u7684\u8fc7\u6ee4\u5668\u3002 utils/exceptionsLogger.filter.ts TypeScript import { Catch , ArgumentsHost } from \"@nestjs/common\" ; import { BaseExceptionFilter } from \"@nestjs/core\" ; @Catch () export class ExceptionsLoggerFilter extends BaseExceptionFilter { catch ( exception : unknown , host : ArgumentsHost ) { console . log ( \"Exception thrown\" , exception ); super . catch ( exception , host ); } } @Catch() \u88c5\u9970\u5668\u610f\u5473\u7740\u6211\u4eec\u5e0c\u671b\u8fc7\u6ee4\u5668\u6355\u83b7\u6240\u6709\u5f02\u5e38\u3002 \u6211\u4eec\u53ef\u4ee5\u5411\u5b83\u63d0\u4f9b\u4e00\u4e2a\u5f02\u5e38\u7c7b\u578b\u6216\u4e00\u4e2a\u5217\u8868\u3002 ArgumentsHost \u4f7f\u6211\u4eec\u65e0\u6cd5\u8bbf\u95ee\u5e94\u7528\u7a0b\u5e8f\u7684\u6267\u884c\u4e0a\u4e0b\u6587\u3002 \u6211\u4eec\u5c06\u5728\u672c\u7cfb\u5217\u7684\u540e\u7eed\u90e8\u5206\u5bf9\u6b64\u8fdb\u884c\u63a2\u8ba8\u3002 \u6211\u4eec\u53ef\u4ee5\u4ee5\u4e09\u79cd\u65b9\u5f0f\u4f7f\u7528\u6211\u4eec\u7684\u65b0\u8fc7\u6ee4\u5668\u3002 \u7b2c\u4e00\u4e2a\u662f\u901a\u8fc7 app.useGlobalFilters \u5728\u6240\u6709\u8def\u7531\u4e2d\u5168\u5c40\u4f7f\u7528\u5b83\u3002 main.ts TypeScript import { HttpAdapterHost , NestFactory } from \"@nestjs/core\" ; import { AppModule } from \"./app.module\" ; import * as cookieParser from \"cookie-parser\" ; import { ExceptionsLoggerFilter } from \"./utils/exceptionsLogger.filter\" ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); const { httpAdapter } = app . get ( HttpAdapterHost ); app . useGlobalFilters ( new ExceptionsLoggerFilter ( httpAdapter )); app . use ( cookieParser ()); await app . listen ( 3000 ); } bootstrap (); \u66f4\u597d\u7684\u5168\u5c40\u6ce8\u5165\u8fc7\u6ee4\u5668\u7684\u65b9\u6cd5\u662f\u5c06\u5b83\u6dfb\u52a0\u5230 AppModule \u4e2d\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5411\u8fc7\u6ee4\u5668\u4e2d\u6ce8\u5165\u989d\u5916\u7684\u4f9d\u8d56\u9879\u3002 TypeScript import { Module } from \"@nestjs/common\" ; import { ExceptionsLoggerFilter } from \"./utils/exceptionsLogger.filter\" ; import { APP_FILTER } from \"@nestjs/core\" ; @Module ({ // ... providers : [ { provide : APP_FILTER , useClass : ExceptionsLoggerFilter , }, ], }) export class AppModule {} \u7ed1\u5b9a\u8fc7\u6ee4\u5668\u7684\u7b2c\u4e09\u79cd\u65b9\u6cd5\u662f\u9644\u52a0 @UseFilters \u88c5\u9970\u5668\u3002 \u6211\u4eec\u53ef\u4ee5\u4e3a\u5b83\u63d0\u4f9b\u5355\u4e2a\u8fc7\u6ee4\u5668\uff0c\u6216\u591a\u4e2a\u8fc7\u6ee4\u5668\u3002 TypeScript @Get ( ':id' ) @UseFilters ( ExceptionsLoggerFilter ) getPostById ( @Param ( 'id' ) id : string ) { return this . postsService . getPostById ( Number ( id )); } \u4e0a\u9762\u7684\u65b9\u6cd5\u5e76\u4e0d\u662f\u8bb0\u5f55\u5f02\u5e38\u7684\u6700\u4f73\u65b9\u6cd5\u3002 NestJS \u6709\u4e00\u4e2a\u5185\u7f6e\u7684 Logger \uff0c\u6211\u4eec\u5c06\u5728\u672c\u7cfb\u5217\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u4e2d\u4ecb\u7ecd\u5b83\u3002 \u5b9e\u73b0 ExceptionFilter \u63a5\u53e3 \u5982\u679c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5b8c\u5168\u5b9a\u5236\u7684\u9519\u8bef\u884c\u4e3a\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u5934\u6784\u5efa\u8fc7\u6ee4\u5668\u3002 \u5b83\u9700\u8981\u5b9e\u73b0 ExceptionFilter \u63a5\u53e3\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50: TypeScript import { ExceptionFilter , Catch , ArgumentsHost , NotFoundException } from \"@nestjs/common\" ; import { Request , Response } from \"express\" ; @Catch ( NotFoundException ) export class HttpExceptionFilter implements ExceptionFilter { catch ( exception : NotFoundException , host : ArgumentsHost ) { const context = host . switchToHttp (); const response = context . getResponse < Response > (); const request = context . getRequest < Request > (); const status = exception . getStatus (); const message = exception . getMessage (); response . status ( status ). json ({ message , statusCode : status , time : new Date (). toISOString (), }); } } \u4e0a\u9762\u6709\u4e00\u4e9b\u503c\u5f97\u6ce8\u610f\u7684\u4e8b\u60c5\u3002 \u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e86 @Catch(NotFoundException) \uff0c\u6240\u4ee5\u8fd9\u4e2a\u8fc7\u6ee4\u5668\u53ea\u5bf9 NotFoundException \u8fd0\u884c\u3002 host.switchToHttp \u65b9\u6cd5\u8fd4\u56de\u5e26\u6709 HTTP \u4e0a\u4e0b\u6587\u4fe1\u606f\u7684 HttpArgumentsHost \u5bf9\u8c61\u3002 \u5728\u672c\u7cfb\u5217\u7684\u540e\u7eed\u90e8\u5206\u4e2d\uff0c\u5f53\u8ba8\u8bba\u6267\u884c\u4e0a\u4e0b\u6587\u65f6\uff0c\u6211\u4eec\u5c06\u5bf9\u5b83\u8fdb\u884c\u5927\u91cf\u63a2\u8ba8\u3002 \u9a8c\u8bc1 \u6211\u4eec\u80af\u5b9a\u5e94\u8be5\u9a8c\u8bc1\u5373\u5c06\u5230\u6765\u7684\u6570\u636e\u3002 \u5728 TypeScript Express \u7cfb\u5217\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u7c7b\u9a8c\u8bc1\u5668\u5e93\u3002 NestJS \u4e5f\u5408\u5e76\u4e86\u5b83\u3002 NestJS \u9644\u5e26\u4e86\u4e00\u7ec4\u5185\u7f6e\u7ba1\u9053\u3002 \u7ba1\u9053\u901a\u5e38\u7528\u4e8e\u8f6c\u6362\u8f93\u5165\u6570\u636e\u6216\u9a8c\u8bc1\u6570\u636e\u3002 \u4eca\u5929\u6211\u4eec\u53ea\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u7ba1\u9053\uff0c\u4f46\u5728\u672c\u7cfb\u5217\u7684\u540e\u7eed\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u7814\u7a76\u5982\u4f55\u521b\u5efa\u81ea\u5b9a\u4e49\u7ba1\u9053\u3002 \u8981\u5f00\u59cb\u9a8c\u8bc1\u6570\u636e\uff0c\u6211\u4eec\u9700\u8981 ValidationPipe\u3002 main.ts TypeScript import { NestFactory } from \"@nestjs/core\" ; import { AppModule } from \"./app.module\" ; import * as cookieParser from \"cookie-parser\" ; import { ValidationPipe } from \"@nestjs/common\" ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); app . useGlobalPipes ( new ValidationPipe ()); app . use ( cookieParser ()); await app . listen ( 3000 ); } bootstrap (); \u5728\u672c\u7cfb\u5217\u7684\u7b2c\u4e00\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u6570\u636e\u4f20\u8f93\u5bf9\u8c61\u3002 \u5b83\u4eec\u5b9a\u4e49\u5728\u8bf7\u6c42\u4e2d\u53d1\u9001\u7684\u6570\u636e\u7684\u683c\u5f0f\u3002 \u5b83\u4eec\u662f\u9644\u52a0\u9a8c\u8bc1\u7684\u5b8c\u7f8e\u5730\u65b9\u3002 NPM \u5b89\u88c5\u7c7b\u9a8c\u8bc1\u5668\u7c7b\u8f6c\u6362\u5668 \u4e3a\u4e86\u8ba9 ValidationPipe \u5de5\u4f5c\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u7c7b\u8f6c\u6362\u5668\u5e93 auth/dto/register.dto.ts TypeScript import { IsEmail , IsString , IsNotEmpty , MinLength } from \"class-validator\" ; export class RegisterDto { @IsEmail () email : string ; @IsString () @IsNotEmpty () name : string ; @IsString () @IsNotEmpty () @MinLength ( 7 ) password : string ; } export default RegisterDto ; \u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u4e86\u4e0a\u9762\u7684 RegisterDto \u548c @Body() \u88c5\u9970\u5668\uff0c ValidationPipe \u73b0\u5728\u68c0\u67e5\u6570\u636e\u3002 TypeScript @Post ( 'register' ) async register ( @Body () registrationData : RegisterDto ) { return this . authenticationService . register ( registrationData ); } \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7684\u88c5\u9970\u5668\u8fd8\u6709\u5f88\u591a\u3002 \u8981\u83b7\u5f97\u5b8c\u6574\u5217\u8868\uff0c\u8bf7\u67e5\u770b \u7c7b\u9a8c\u8bc1\u5668 \u6587\u6863\u3002 \u60a8\u8fd8\u53ef\u4ee5 \u521b\u5efa\u81ea\u5b9a\u4e49\u9a8c\u8bc1\u88c5\u9970\u5668 \u3002 \u9a8c\u8bc1\u53c2\u6570 \u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7c7b\u9a8c\u8bc1\u5668\u5e93\u6765\u9a8c\u8bc1\u53c2\u6570\u3002 utils/findOneParams.ts TypeScript import { IsNumberString } from 'class-validator' ; class FindOneParams { @IsNumberString () id : string ; } @Get ( ':id' ) getPostById ( @Param () { id } : FindOneParams ) { return this . postsService . getPostById ( Number ( id )); } \u8bf7\u6ce8\u610f\u6211\u4eec\u5728\u8fd9\u91cc\u4e0d\u518d\u4f7f\u7528 @Param('id') \u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u5206\u89e3\u6574\u4e2a params \u5bf9\u8c61\u3002 \u5982\u679c\u4f60\u4f7f\u7528 MongoDB \u800c\u4e0d\u662f Postgres\uff0c @IsMongoId() \u88c5\u9970\u5668\u53ef\u80fd\u4f1a\u5bf9\u4f60\u6709\u7528 \u5904\u7406 Patch \u5728 TypeScript Express \u7cfb\u5217 \u4e2d\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86 PUT \u548c PATCH \u65b9\u6cd5\u7684\u533a\u522b\u3002 \u603b\u800c\u8a00\u4e4b\uff0cPUT \u66ff\u6362\u5b9e\u4f53\uff0c\u800c PATCH \u5e94\u7528\u90e8\u5206\u4fee\u6539\u3002 \u5728\u6267\u884c\u90e8\u5206\u66f4\u6539\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8df3\u8fc7\u7f3a\u5931\u7684\u5c5e\u6027\u3002 \u5904\u7406 PATCH \u6700\u76f4\u63a5\u7684\u65b9\u6cd5\u662f\u5c06 skipMissingProperties \u4f20\u9012\u7ed9\u6211\u4eec\u7684 ValidationPipe\u3002 TypeScript app . useGlobalPipes ( new ValidationPipe ({ skipMissingProperties : true })); \u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u5c06\u8df3\u8fc7\u6211\u4eec\u6240\u6709 dto \u4e2d\u7f3a\u5c11\u7684\u5c5e\u6027\u3002 \u6211\u4eec\u5728\u53d1\u5e03\u6570\u636e\u65f6\u4e0d\u60f3\u8fd9\u6837\u505a\u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u66f4\u65b0\u6570\u636e\u65f6\u5411\u6240\u6709\u5c5e\u6027\u6dfb\u52a0 IsOptional \u3002 TypeScript import { IsString , IsNotEmpty , IsNumber , IsOptional } from \"class-validator\" ; export class UpdatePostDto { @IsNumber () @IsOptional () id : number ; @IsString () @IsNotEmpty () @IsOptional () content : string ; @IsString () @IsNotEmpty () @IsOptional () title : string ; } \u4e0d\u5e78\u7684\u662f\uff0c\u4e0a\u9762\u7684\u89e3\u51b3\u65b9\u6848\u4e0d\u662f\u5f88\u5e72\u51c0\u3002 \u8fd9\u91cc \u63d0\u4f9b\u4e86\u4e00\u4e9b\u89e3\u51b3\u65b9\u6848\u6765\u8986\u76d6 ValidationPipe \u7684\u9ed8\u8ba4\u884c\u4e3a\u3002 \u5728\u672c\u7cfb\u5217\u7684\u540e\u7eed\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u7814\u7a76\u5982\u4f55\u5b9e\u73b0 PUT \u800c\u4e0d\u662f PATCH \u603b\u7ed3 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u7814\u7a76\u4e86\u9519\u8bef\u5904\u7406\u548c\u9a8c\u8bc1\u5728 NestJS \u4e2d\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u7531\u4e8e\u4e86\u89e3\u4e86\u9ed8\u8ba4 BaseExceptionFilter \u5728\u5e95\u5c42\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u6211\u4eec\u73b0\u5728\u77e5\u9053\u4e86\u5982\u4f55\u6b63\u786e\u5730\u5904\u7406\u5404\u79cd\u5f02\u5e38\u3002 \u6211\u4eec\u4e5f\u77e5\u9053\u5982\u679c\u6709\u8fd9\u6837\u7684\u9700\u8981\uff0c\u5982\u4f55\u6539\u53d8\u9ed8\u8ba4\u884c\u4e3a\u3002 \u6211\u4eec\u8fd8\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528 ValidationPipe \u548c\u7c7b\u9a8c\u8bc1\u5668\u5e93\u6765\u9a8c\u8bc1\u4f20\u5165\u7684\u6570\u636e\u3002 \u5728 NestJS \u6846\u67b6\u4e2d\u8fd8\u6709\u5f88\u591a\u5185\u5bb9\u9700\u8981\u6d89\u53ca\uff0c\u6240\u4ee5\u8bf7\u7ee7\u7eed\u5173\u6ce8!","title":"\u9519\u8bef\u5904\u7406\u548c\u6570\u636e\u9a8c\u8bc1"},{"location":"docs/http/api-nestjs-error-handling-validation/#_1","text":"Nest \u6709\u4e00\u4e2a\u5f02\u5e38\u8fc7\u6ee4\u5668\uff0c\u8d1f\u8d23\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u9519\u8bef\u3002 \u6bcf\u5f53\u6211\u4eec\u81ea\u5df1\u4e0d\u5904\u7406\u5f02\u5e38\u65f6\uff0c\u5f02\u5e38\u8fc7\u6ee4\u5668\u5c31\u4f1a\u66ff\u6211\u4eec\u5904\u7406\u3002 \u5b83\u5904\u7406\u5f02\u5e38\u5e76\u4ee5\u7528\u6237\u53cb\u597d\u7684\u683c\u5f0f\u5c06\u5176\u53d1\u9001\u5230\u54cd\u5e94\u4e2d\u3002 \u9ed8\u8ba4\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668\u540d\u4e3a BaseExceptionFilter \u3002 \u6211\u4eec\u53ef\u4ee5\u67e5\u770b NestJS \u7684\u6e90\u4ee3\u7801\u5e76\u68c0\u67e5\u5b83\u7684\u884c\u4e3a\u3002 nest/packages/core/exceptions/base-exception-filter.ts TypeScript export class BaseExceptionFilter < T = any > implements ExceptionFilter < T > { // ... catch ( exception : T , host : ArgumentsHost ) { // ... if ( ! ( exception instanceof HttpException )) { return this . handleUnknownError ( exception , host , applicationRef ); } const res = exception . getResponse (); const message = isObject ( res ) ? res : { statusCode : exception.getStatus (), message : res , }; // ... } public handleUnknownError ( exception : T , host : ArgumentsHost , applicationRef : AbstractHttpAdapter | HttpServer ) { const body = { statusCode : HttpStatus.INTERNAL_SERVER_ERROR , message : MESSAGES.UNKNOWN_EXCEPTION_MESSAGE , }; // ... } } \u6bcf\u5f53\u5e94\u7528\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u9519\u8bef\u65f6\uff0c catch \u65b9\u6cd5\u5c31\u4f1a\u8fd0\u884c\u3002 \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u83b7\u5f97\u4e00\u4e9b\u57fa\u672c\u4fe1\u606f\u3002","title":"\u5f02\u5e38\u8fc7\u6ee4\u5668"},{"location":"docs/http/api-nestjs-error-handling-validation/#httpexception","text":"Nest \u5e0c\u671b\u6211\u4eec\u4f7f\u7528 HttpException \u7c7b\u3002 \u5982\u679c\u6211\u4eec\u4e0d\u8fd9\u6837\u505a\uff0c\u5b83\u5c06\u9519\u8bef\u89e3\u91ca\u4e3a\u65e0\u610f\u7684\uff0c\u5e76\u4ee5 500 \u5185\u90e8\u670d\u52a1\u5668\u9519\u8bef\u54cd\u5e94\u3002 \u5728\u672c\u7cfb\u5217\u7684\u524d\u51e0\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u591a\u6b21\u4f7f\u7528\u4e86 HttpException : \u629b\u51fa\u65b0\u7684 HttpException('Post not found'\uff0c HttpStatus.NOT_FOUND) ; \u6784\u9020\u51fd\u6570\u63a5\u53d7\u4e24\u4e2a\u5fc5\u9700\u7684\u53c2\u6570:\u54cd\u5e94\u4f53\u548c\u72b6\u6001\u4ee3\u7801\u3002 \u5bf9\u4e8e\u540e\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u63d0\u4f9b\u7684 HttpStatus enum\u3002 \u5982\u679c\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u54cd\u5e94\u7684\u5b9a\u4e49\uff0cNestJS \u5c06\u5176\u5e8f\u5217\u5316\u4e3a\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u5c5e\u6027\u7684\u5bf9\u8c61: statusCode:\u5305\u542b\u6211\u4eec\u9009\u62e9\u7684 HTTP \u4ee3\u7801 message:\u6211\u4eec\u63d0\u4f9b\u7684\u63cf\u8ff0 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a\u5bf9\u8c61\u4f5c\u4e3a HttpException \u6784\u9020\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u6765\u91cd\u5199\u4e0a\u8ff0\u884c\u4e3a\u3002 \u6211\u4eec\u7ecf\u5e38\u53d1\u73b0\u81ea\u5df1\u4e0d\u6b62\u4e00\u6b21\u5730\u629b\u51fa\u7c7b\u4f3c\u7684\u5f02\u5e38\u3002 \u4e3a\u4e86\u907f\u514d\u4ee3\u7801\u91cd\u590d\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u81ea\u5b9a\u4e49\u5f02\u5e38\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u6269\u5c55 HttpException \u7c7b\u3002 posts/exception/postNotFund.exception.ts TypeScript import { HttpException , HttpStatus } from \"@nestjs/common\" ; class PostNotFoundException extends HttpException { constructor ( postId : number ) { super ( `Post with id ${ postId } not found` , HttpStatus . NOT_FOUND ); } } \u6211\u4eec\u7684\u81ea\u5b9a\u4e49 PostNotFoundException \u8c03\u7528 HttpException \u7684\u6784\u9020\u51fd\u6570\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0d\u5fc5\u5728\u6bcf\u6b21\u60f3\u8981\u629b\u51fa\u9519\u8bef\u65f6\u90fd\u5b9a\u4e49\u6d88\u606f\u6765\u6e05\u7406\u4ee3\u7801\u3002 NestJS \u6709\u4e00\u7ec4\u6269\u5c55 HttpException \u7684\u5f02\u5e38\u3002 \u5176\u4e2d\u4e00\u4e2a\u662f NotFoundException\u3002 \u6211\u4eec\u53ef\u4ee5\u91cd\u6784\u4e0a\u9762\u7684\u4ee3\u7801\u5e76\u4f7f\u7528\u5b83\u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u6587\u6863\u4e2d\u627e\u5230\u5b8c\u6574\u7684\u5185\u7f6e HTTP \u5f02\u5e38\u5217\u8868\u3002 posts/exception/postNotFund.exception.ts TypeScript import { NotFoundException } from \"@nestjs/common\" ; class PostNotFoundException extends NotFoundException { constructor ( postId : number ) { super ( `Post with id ${ postId } not found` ); } } NotFoundException \u7c7b\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u9644\u52a0\u7684\u9519\u8bef\u5c5e\u6027\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u7684\u6d88\u606f\u5c31\u7531 NotFoundException \u5b9a\u4e49\uff0c\u5e76\u4e14\u662f\u57fa\u4e8e\u72b6\u6001\u7684\u3002","title":"HttpException"},{"location":"docs/http/api-nestjs-error-handling-validation/#baseexceptionfilter","text":"\u9ed8\u8ba4\u7684 BaseExceptionFilter \u53ef\u4ee5\u5904\u7406\u5927\u591a\u6570\u5e38\u89c4\u60c5\u51b5\u3002 \u7136\u800c\uff0c\u6211\u4eec\u53ef\u80fd\u60f3\u8981\u4ee5\u67d0\u79cd\u65b9\u5f0f\u4fee\u6539\u5b83\u3002 \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u521b\u5efa\u4e00\u4e2a\u6269\u5c55\u5b83\u7684\u8fc7\u6ee4\u5668\u3002 utils/exceptionsLogger.filter.ts TypeScript import { Catch , ArgumentsHost } from \"@nestjs/common\" ; import { BaseExceptionFilter } from \"@nestjs/core\" ; @Catch () export class ExceptionsLoggerFilter extends BaseExceptionFilter { catch ( exception : unknown , host : ArgumentsHost ) { console . log ( \"Exception thrown\" , exception ); super . catch ( exception , host ); } } @Catch() \u88c5\u9970\u5668\u610f\u5473\u7740\u6211\u4eec\u5e0c\u671b\u8fc7\u6ee4\u5668\u6355\u83b7\u6240\u6709\u5f02\u5e38\u3002 \u6211\u4eec\u53ef\u4ee5\u5411\u5b83\u63d0\u4f9b\u4e00\u4e2a\u5f02\u5e38\u7c7b\u578b\u6216\u4e00\u4e2a\u5217\u8868\u3002 ArgumentsHost \u4f7f\u6211\u4eec\u65e0\u6cd5\u8bbf\u95ee\u5e94\u7528\u7a0b\u5e8f\u7684\u6267\u884c\u4e0a\u4e0b\u6587\u3002 \u6211\u4eec\u5c06\u5728\u672c\u7cfb\u5217\u7684\u540e\u7eed\u90e8\u5206\u5bf9\u6b64\u8fdb\u884c\u63a2\u8ba8\u3002 \u6211\u4eec\u53ef\u4ee5\u4ee5\u4e09\u79cd\u65b9\u5f0f\u4f7f\u7528\u6211\u4eec\u7684\u65b0\u8fc7\u6ee4\u5668\u3002 \u7b2c\u4e00\u4e2a\u662f\u901a\u8fc7 app.useGlobalFilters \u5728\u6240\u6709\u8def\u7531\u4e2d\u5168\u5c40\u4f7f\u7528\u5b83\u3002 main.ts TypeScript import { HttpAdapterHost , NestFactory } from \"@nestjs/core\" ; import { AppModule } from \"./app.module\" ; import * as cookieParser from \"cookie-parser\" ; import { ExceptionsLoggerFilter } from \"./utils/exceptionsLogger.filter\" ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); const { httpAdapter } = app . get ( HttpAdapterHost ); app . useGlobalFilters ( new ExceptionsLoggerFilter ( httpAdapter )); app . use ( cookieParser ()); await app . listen ( 3000 ); } bootstrap (); \u66f4\u597d\u7684\u5168\u5c40\u6ce8\u5165\u8fc7\u6ee4\u5668\u7684\u65b9\u6cd5\u662f\u5c06\u5b83\u6dfb\u52a0\u5230 AppModule \u4e2d\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5411\u8fc7\u6ee4\u5668\u4e2d\u6ce8\u5165\u989d\u5916\u7684\u4f9d\u8d56\u9879\u3002 TypeScript import { Module } from \"@nestjs/common\" ; import { ExceptionsLoggerFilter } from \"./utils/exceptionsLogger.filter\" ; import { APP_FILTER } from \"@nestjs/core\" ; @Module ({ // ... providers : [ { provide : APP_FILTER , useClass : ExceptionsLoggerFilter , }, ], }) export class AppModule {} \u7ed1\u5b9a\u8fc7\u6ee4\u5668\u7684\u7b2c\u4e09\u79cd\u65b9\u6cd5\u662f\u9644\u52a0 @UseFilters \u88c5\u9970\u5668\u3002 \u6211\u4eec\u53ef\u4ee5\u4e3a\u5b83\u63d0\u4f9b\u5355\u4e2a\u8fc7\u6ee4\u5668\uff0c\u6216\u591a\u4e2a\u8fc7\u6ee4\u5668\u3002 TypeScript @Get ( ':id' ) @UseFilters ( ExceptionsLoggerFilter ) getPostById ( @Param ( 'id' ) id : string ) { return this . postsService . getPostById ( Number ( id )); } \u4e0a\u9762\u7684\u65b9\u6cd5\u5e76\u4e0d\u662f\u8bb0\u5f55\u5f02\u5e38\u7684\u6700\u4f73\u65b9\u6cd5\u3002 NestJS \u6709\u4e00\u4e2a\u5185\u7f6e\u7684 Logger \uff0c\u6211\u4eec\u5c06\u5728\u672c\u7cfb\u5217\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u4e2d\u4ecb\u7ecd\u5b83\u3002","title":"\u6269\u5c55 BaseExceptionFilter"},{"location":"docs/http/api-nestjs-error-handling-validation/#exceptionfilter","text":"\u5982\u679c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5b8c\u5168\u5b9a\u5236\u7684\u9519\u8bef\u884c\u4e3a\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u5934\u6784\u5efa\u8fc7\u6ee4\u5668\u3002 \u5b83\u9700\u8981\u5b9e\u73b0 ExceptionFilter \u63a5\u53e3\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50: TypeScript import { ExceptionFilter , Catch , ArgumentsHost , NotFoundException } from \"@nestjs/common\" ; import { Request , Response } from \"express\" ; @Catch ( NotFoundException ) export class HttpExceptionFilter implements ExceptionFilter { catch ( exception : NotFoundException , host : ArgumentsHost ) { const context = host . switchToHttp (); const response = context . getResponse < Response > (); const request = context . getRequest < Request > (); const status = exception . getStatus (); const message = exception . getMessage (); response . status ( status ). json ({ message , statusCode : status , time : new Date (). toISOString (), }); } } \u4e0a\u9762\u6709\u4e00\u4e9b\u503c\u5f97\u6ce8\u610f\u7684\u4e8b\u60c5\u3002 \u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e86 @Catch(NotFoundException) \uff0c\u6240\u4ee5\u8fd9\u4e2a\u8fc7\u6ee4\u5668\u53ea\u5bf9 NotFoundException \u8fd0\u884c\u3002 host.switchToHttp \u65b9\u6cd5\u8fd4\u56de\u5e26\u6709 HTTP \u4e0a\u4e0b\u6587\u4fe1\u606f\u7684 HttpArgumentsHost \u5bf9\u8c61\u3002 \u5728\u672c\u7cfb\u5217\u7684\u540e\u7eed\u90e8\u5206\u4e2d\uff0c\u5f53\u8ba8\u8bba\u6267\u884c\u4e0a\u4e0b\u6587\u65f6\uff0c\u6211\u4eec\u5c06\u5bf9\u5b83\u8fdb\u884c\u5927\u91cf\u63a2\u8ba8\u3002","title":"\u5b9e\u73b0 ExceptionFilter \u63a5\u53e3"},{"location":"docs/http/api-nestjs-error-handling-validation/#_2","text":"\u6211\u4eec\u80af\u5b9a\u5e94\u8be5\u9a8c\u8bc1\u5373\u5c06\u5230\u6765\u7684\u6570\u636e\u3002 \u5728 TypeScript Express \u7cfb\u5217\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u7c7b\u9a8c\u8bc1\u5668\u5e93\u3002 NestJS \u4e5f\u5408\u5e76\u4e86\u5b83\u3002 NestJS \u9644\u5e26\u4e86\u4e00\u7ec4\u5185\u7f6e\u7ba1\u9053\u3002 \u7ba1\u9053\u901a\u5e38\u7528\u4e8e\u8f6c\u6362\u8f93\u5165\u6570\u636e\u6216\u9a8c\u8bc1\u6570\u636e\u3002 \u4eca\u5929\u6211\u4eec\u53ea\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u7ba1\u9053\uff0c\u4f46\u5728\u672c\u7cfb\u5217\u7684\u540e\u7eed\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u7814\u7a76\u5982\u4f55\u521b\u5efa\u81ea\u5b9a\u4e49\u7ba1\u9053\u3002 \u8981\u5f00\u59cb\u9a8c\u8bc1\u6570\u636e\uff0c\u6211\u4eec\u9700\u8981 ValidationPipe\u3002 main.ts TypeScript import { NestFactory } from \"@nestjs/core\" ; import { AppModule } from \"./app.module\" ; import * as cookieParser from \"cookie-parser\" ; import { ValidationPipe } from \"@nestjs/common\" ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); app . useGlobalPipes ( new ValidationPipe ()); app . use ( cookieParser ()); await app . listen ( 3000 ); } bootstrap (); \u5728\u672c\u7cfb\u5217\u7684\u7b2c\u4e00\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u6570\u636e\u4f20\u8f93\u5bf9\u8c61\u3002 \u5b83\u4eec\u5b9a\u4e49\u5728\u8bf7\u6c42\u4e2d\u53d1\u9001\u7684\u6570\u636e\u7684\u683c\u5f0f\u3002 \u5b83\u4eec\u662f\u9644\u52a0\u9a8c\u8bc1\u7684\u5b8c\u7f8e\u5730\u65b9\u3002 NPM \u5b89\u88c5\u7c7b\u9a8c\u8bc1\u5668\u7c7b\u8f6c\u6362\u5668 \u4e3a\u4e86\u8ba9 ValidationPipe \u5de5\u4f5c\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u7c7b\u8f6c\u6362\u5668\u5e93 auth/dto/register.dto.ts TypeScript import { IsEmail , IsString , IsNotEmpty , MinLength } from \"class-validator\" ; export class RegisterDto { @IsEmail () email : string ; @IsString () @IsNotEmpty () name : string ; @IsString () @IsNotEmpty () @MinLength ( 7 ) password : string ; } export default RegisterDto ; \u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u4e86\u4e0a\u9762\u7684 RegisterDto \u548c @Body() \u88c5\u9970\u5668\uff0c ValidationPipe \u73b0\u5728\u68c0\u67e5\u6570\u636e\u3002 TypeScript @Post ( 'register' ) async register ( @Body () registrationData : RegisterDto ) { return this . authenticationService . register ( registrationData ); } \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7684\u88c5\u9970\u5668\u8fd8\u6709\u5f88\u591a\u3002 \u8981\u83b7\u5f97\u5b8c\u6574\u5217\u8868\uff0c\u8bf7\u67e5\u770b \u7c7b\u9a8c\u8bc1\u5668 \u6587\u6863\u3002 \u60a8\u8fd8\u53ef\u4ee5 \u521b\u5efa\u81ea\u5b9a\u4e49\u9a8c\u8bc1\u88c5\u9970\u5668 \u3002","title":"\u9a8c\u8bc1"},{"location":"docs/http/api-nestjs-error-handling-validation/#_3","text":"\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7c7b\u9a8c\u8bc1\u5668\u5e93\u6765\u9a8c\u8bc1\u53c2\u6570\u3002 utils/findOneParams.ts TypeScript import { IsNumberString } from 'class-validator' ; class FindOneParams { @IsNumberString () id : string ; } @Get ( ':id' ) getPostById ( @Param () { id } : FindOneParams ) { return this . postsService . getPostById ( Number ( id )); } \u8bf7\u6ce8\u610f\u6211\u4eec\u5728\u8fd9\u91cc\u4e0d\u518d\u4f7f\u7528 @Param('id') \u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u5206\u89e3\u6574\u4e2a params \u5bf9\u8c61\u3002 \u5982\u679c\u4f60\u4f7f\u7528 MongoDB \u800c\u4e0d\u662f Postgres\uff0c @IsMongoId() \u88c5\u9970\u5668\u53ef\u80fd\u4f1a\u5bf9\u4f60\u6709\u7528","title":"\u9a8c\u8bc1\u53c2\u6570"},{"location":"docs/http/api-nestjs-error-handling-validation/#patch","text":"\u5728 TypeScript Express \u7cfb\u5217 \u4e2d\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86 PUT \u548c PATCH \u65b9\u6cd5\u7684\u533a\u522b\u3002 \u603b\u800c\u8a00\u4e4b\uff0cPUT \u66ff\u6362\u5b9e\u4f53\uff0c\u800c PATCH \u5e94\u7528\u90e8\u5206\u4fee\u6539\u3002 \u5728\u6267\u884c\u90e8\u5206\u66f4\u6539\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8df3\u8fc7\u7f3a\u5931\u7684\u5c5e\u6027\u3002 \u5904\u7406 PATCH \u6700\u76f4\u63a5\u7684\u65b9\u6cd5\u662f\u5c06 skipMissingProperties \u4f20\u9012\u7ed9\u6211\u4eec\u7684 ValidationPipe\u3002 TypeScript app . useGlobalPipes ( new ValidationPipe ({ skipMissingProperties : true })); \u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u5c06\u8df3\u8fc7\u6211\u4eec\u6240\u6709 dto \u4e2d\u7f3a\u5c11\u7684\u5c5e\u6027\u3002 \u6211\u4eec\u5728\u53d1\u5e03\u6570\u636e\u65f6\u4e0d\u60f3\u8fd9\u6837\u505a\u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u66f4\u65b0\u6570\u636e\u65f6\u5411\u6240\u6709\u5c5e\u6027\u6dfb\u52a0 IsOptional \u3002 TypeScript import { IsString , IsNotEmpty , IsNumber , IsOptional } from \"class-validator\" ; export class UpdatePostDto { @IsNumber () @IsOptional () id : number ; @IsString () @IsNotEmpty () @IsOptional () content : string ; @IsString () @IsNotEmpty () @IsOptional () title : string ; } \u4e0d\u5e78\u7684\u662f\uff0c\u4e0a\u9762\u7684\u89e3\u51b3\u65b9\u6848\u4e0d\u662f\u5f88\u5e72\u51c0\u3002 \u8fd9\u91cc \u63d0\u4f9b\u4e86\u4e00\u4e9b\u89e3\u51b3\u65b9\u6848\u6765\u8986\u76d6 ValidationPipe \u7684\u9ed8\u8ba4\u884c\u4e3a\u3002 \u5728\u672c\u7cfb\u5217\u7684\u540e\u7eed\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u7814\u7a76\u5982\u4f55\u5b9e\u73b0 PUT \u800c\u4e0d\u662f PATCH","title":"\u5904\u7406 Patch"},{"location":"docs/http/api-nestjs-error-handling-validation/#_4","text":"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u7814\u7a76\u4e86\u9519\u8bef\u5904\u7406\u548c\u9a8c\u8bc1\u5728 NestJS \u4e2d\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u7531\u4e8e\u4e86\u89e3\u4e86\u9ed8\u8ba4 BaseExceptionFilter \u5728\u5e95\u5c42\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u6211\u4eec\u73b0\u5728\u77e5\u9053\u4e86\u5982\u4f55\u6b63\u786e\u5730\u5904\u7406\u5404\u79cd\u5f02\u5e38\u3002 \u6211\u4eec\u4e5f\u77e5\u9053\u5982\u679c\u6709\u8fd9\u6837\u7684\u9700\u8981\uff0c\u5982\u4f55\u6539\u53d8\u9ed8\u8ba4\u884c\u4e3a\u3002 \u6211\u4eec\u8fd8\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528 ValidationPipe \u548c\u7c7b\u9a8c\u8bc1\u5668\u5e93\u6765\u9a8c\u8bc1\u4f20\u5165\u7684\u6570\u636e\u3002 \u5728 NestJS \u6846\u67b6\u4e2d\u8fd8\u6709\u5f88\u591a\u5185\u5bb9\u9700\u8981\u6d89\u53ca\uff0c\u6240\u4ee5\u8bf7\u7ee7\u7eed\u5173\u6ce8!","title":"\u603b\u7ed3"},{"location":"docs/http/api-nestjs-stripe-events-webhooks/","text":"https://wanago.io/2021/07/05/api-nestjs-stripe-events-webhooks/ \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5728\u672c\u7cfb\u5217\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u901a\u8fc7\u53d1\u9001\u8bf7\u6c42\u4e0e Stripe \u8fdb\u884c\u4e86\u4ea4\u4e92\u3002 \u5b83\u8981\u4e48\u662f\u76f4\u63a5\u5728\u524d\u7aef\u8bf7\u6c42 Stripe API\uff0c\u8981\u4e48\u662f\u5728\u540e\u7aef\u8bf7\u6c42\u3002 \u6709\u4e86\u7f51\u94a9\uff0cStripe \u53ef\u4ee5\u7528\u53e6\u4e00\u79cd\u65b9\u5f0f\u4e0e\u6211\u4eec\u4ea4\u6d41\u3002 Webhook \u662f\u6211\u4eec API \u4e2d\u7684\u4e00\u4e2a URL, Stripe \u53ef\u4ee5\u8bf7\u6c42\u5b83\u5411\u6211\u4eec\u53d1\u9001\u5404\u79cd\u4e8b\u4ef6\uff0c\u5982\u4ed8\u6b3e\u4fe1\u606f\u6216\u5ba2\u6237\u66f4\u65b0\u4fe1\u606f\u3002 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8 webhook \u7684\u601d\u60f3\uff0c\u5e76\u5c06\u5176\u5b9e\u73b0\u5230\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4ee5\u907f\u514d\u5411 Stripe \u8be2\u95ee\u7528\u6237\u8ba2\u9605\u72b6\u6001\u3002 \u901a\u8fc7\u8fd9\u6837\u505a\uff0c\u6211\u4eec\u65e8\u5728\u63d0\u9ad8\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\u5e76\u907f\u514d\u8d85\u8fc7\u901f\u7387\u9650\u5236\u3002 \u5728 NestJS \u4e2d\u4f7f\u7528 Stripe webhook We aim to develop with Stripe webhooks while running the application on localhost. When working with webhooks, we expect Stripe to make requests to our API. By default, our app can\u2019t be accessed from outside while running locally. Because of that, we need an additional step to test webhooks. To perform it, we need Stripe CLI. We can download it here. We need to forward received events to our local API. To do it, we need to run the following: stripe listen --forward-to localhost:3000/webhook \u5904\u7406 webhook \u7b7e\u540d\u79d8\u5bc6 In response, we receive the webhook signing secret. We will need it in our API to validate requests made to our /webhook endpoint. A valid approach is to keep the webhook secret in our environment variables. app.module.ts TypeScript import { Module } from \"@nestjs/common\" ; import { ConfigModule } from \"@nestjs/config\" ; import * as Joi from \"@hapi/joi\" ; @Module ({ imports : [ ConfigModule . forRoot ({ validationSchema : Joi.object ({ STRIPE_WEBHOOK_SECRET : Joi.string (), // ... }), }), // ... ], controllers : [], providers : [], }) export class AppModule {} .env TypeScript STRIPE_WEBHOOK_SECRET = whsec_ ... # ... \u8bbf\u95ee\u8bf7\u6c42\u7684\u539f\u59cb\u4e3b\u4f53 NestJS \u4f7f\u7528 body-parser \u5e93\u6765\u89e3\u6790\u4f20\u5165\u7684\u8bf7\u6c42\u4f53\u3002 \u6b63\u56e0\u4e3a\u5982\u6b64\uff0c\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u539f\u59cb\u7684\u4e3b\u4f53\u3002 \u4e0d\u8fc7\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u7684\u5904\u7406 webhook \u7684 Stripe \u5305\u9700\u8981\u5b83\u3002 \u4e3a\u4e86\u5904\u7406\u4e0a\u8ff0\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4e2d\u95f4\u4ef6\uff0c\u5c06\u539f\u59cb\u4e3b\u4f53\u9644\u52a0\u5230\u8bf7\u6c42\u4e2d\u3002 rawBody.middleware.ts TypeScript import { Response } from \"express\" ; import { json } from \"body-parser\" ; import RequestWithRawBody from \"../stripeWebhook/requestWithRawBody.interface\" ; function rawBodyMiddleware () { return json ({ verify : ( request : RequestWithRawBody , response : Response , buffer : Buffer ) => { if ( request . url === \"/webhook\" && Buffer . isBuffer ( buffer )) { request . rawBody = Buffer . from ( buffer ); } return true ; }, }); } export default rawBodyMiddleware ; \u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u4e2d\u95f4\u4ef6\u7684\u77e5\u8bc6\uff0c\u8bf7\u67e5\u770b TypeScript Express \u6559\u7a0b#1\u3002 \u4e2d\u95f4\u4ef6\u3001\u8def\u7531\u548c\u63a7\u5236\u5668 \u4e0a\u9762\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 RequestWithRawBody \u63a5\u53e3\u3002 \u6211\u4eec\u9700\u8981\u5b9a\u4e49\u5b83\u3002 requestWithRawBody.interface.ts TypeScript import { Request } from \"express\" ; interface RequestWithRawBody extends Request { rawBody : Buffer ; } export default RequestWithRawBody ; \u4e3a\u4e86\u8ba9\u4e2d\u95f4\u4ef6\u5de5\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u5728 bootstrap \u51fd\u6570\u4e2d\u4f7f\u7528\u5b83\u3002 main.ts TypeScript import { NestFactory } from \"@nestjs/core\" ; import { AppModule } from \"./app.module\" ; import rawBodyMiddleware from \"./utils/rawBody.middleware\" ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); app . use ( rawBodyMiddleware ()); // ... await app . listen ( 3000 ); } bootstrap (); \u89e3\u6790 webhook \u8bf7\u6c42 \u5f53 Stripe \u8bf7\u6c42\u6211\u4eec\u7684 webhook \u8def\u7531\u65f6\uff0c\u6211\u4eec\u9700\u8981\u89e3\u6790\u8bf7\u6c42\u3002 \u8981\u6210\u529f\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u9700\u8981\u4e09\u4ef6\u4e8b: webhook \u7684\u5bc6\u94a5\uff0c\u539f\u59cb\u7684\u8bf7\u6c42\u8d1f\u8f7d\uff0cStripe \u7b7e\u540d\u7684\u8bf7\u6c42\u5934\u3002 \u901a\u8fc7 Stripe \u7b7e\u540d\u5934\uff0c\u6211\u4eec\u53ef\u4ee5\u9a8c\u8bc1\u4e8b\u4ef6\u662f\u7531 Stripe \u53d1\u9001\u7684\uff0c\u800c\u4e0d\u662f\u7531\u7b2c\u4e09\u65b9\u53d1\u9001\u7684\u3002 \u5f53\u6211\u4eec\u62e5\u6709\u4e86\u4e0a\u8ff0\u6240\u6709\u5185\u5bb9\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Stripe \u5e93\u6765\u6784\u9020\u4e8b\u4ef6\u6570\u636e\u3002 stripe.service.ts TypeScript import { Injectable } from \"@nestjs/common\" ; import { ConfigService } from \"@nestjs/config\" ; import Stripe from \"stripe\" ; @Injectable () export default class StripeService { private stripe : Stripe ; constructor ( private configService : ConfigService ) { this . stripe = new Stripe ( configService . get ( \"STRIPE_SECRET_KEY\" ), { apiVersion : \"2020-08-27\" , }); } public async constructEventFromPayload ( signature : string , payload : Buffer ) { const webhookSecret = this . configService . get ( \"STRIPE_WEBHOOK_SECRET\" ); return this . stripe . webhooks . constructEvent ( payload , signature , webhookSecret ); } // ... } \u4f7f\u7528 NestJS \u7ba1\u7406 Stripe webhook \u7684\u6700\u540e\u4e00\u6b65\u662f\u7528 /webhook \u8def\u7531\u521b\u5efa\u4e00\u4e2a\u63a7\u5236\u5668\u3002 stripeWebhook.controller.ts TypeScript import { Controller , Post , Headers , Req , BadRequestException } from \"@nestjs/common\" ; import StripeService from \"../stripe/stripe.service\" ; import RequestWithRawBody from \"./requestWithRawBody.interface\" ; @Controller ( \"webhook\" ) export default class StripeWebhookController { constructor ( private readonly stripeService : StripeService ) {} @Post () async handleIncomingEvents ( @Headers ( \"stripe-signature\" ) signature : string , @Req () request : RequestWithRawBody ) { if ( ! signature ) { throw new BadRequestException ( \"Missing stripe-signature header\" ); } const event = await this . stripeService . constructEventFromPayload ( signature , request . rawBody ); // ... } } \u8ddf\u8e2a\u8ba2\u9605\u7684\u72b6\u6001 \u6211\u4eec\u53ef\u4ee5\u7528 webhook \u505a\u7684\u4e00\u4ef6\u4e8b\u5c31\u662f\u8ddf\u8e2a\u8ba2\u9605\u7684\u72b6\u6001\u3002 \u4e3a\u6b64\uff0c\u8ba9\u6211\u4eec\u5c55\u5f00 User \u5b9e\u4f53\u3002 user.entity.ts TypeScript import { Column , Entity , PrimaryGeneratedColumn } from \"typeorm\" ; @Entity () class User { @PrimaryGeneratedColumn () public id : number ; @Column ({ unique : true }) public email : string ; @Column ({ nullable : true }) public monthlySubscriptionStatus? : string ; // ... } export default User ; We also need a way to set the monthlySubscriptionStatus property. To do that, we need a new method in our UsersService: users.service.ts TypeScript import { Injectable } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository , Connection , In } from \"typeorm\" ; import User from \"./user.entity\" ; import { FilesService } from \"../files/files.service\" ; import StripeService from \"../stripe/stripe.service\" ; @Injectable () export class UsersService { constructor ( @InjectRepository ( User ) private usersRepository : Repository < User > ) {} async updateMonthlySubscriptionStatus ( stripeCustomerId : string , monthlySubscriptionStatus : string ) { return this . usersRepository . update ({ stripeCustomerId }, { monthlySubscriptionStatus }); } // ... } To use the above logic, we need to expand our StripeWebhookController: stripeWebhook.controller.ts TypeScript import { Controller , Post , Headers , Req , BadRequestException } from \"@nestjs/common\" ; import StripeService from \"../stripe/stripe.service\" ; import RequestWithRawBody from \"./requestWithRawBody.interface\" ; import { UsersService } from \"../users/users.service\" ; import Stripe from \"stripe\" ; @Controller ( \"webhook\" ) export default class StripeWebhookController { constructor ( private readonly stripeService : StripeService , private readonly usersService : UsersService ) {} @Post () async handleIncomingEvents ( @Headers ( \"stripe-signature\" ) signature : string , @Req () request : RequestWithRawBody ) { if ( ! signature ) { throw new BadRequestException ( \"Missing stripe-signature header\" ); } const event = await this . stripeService . constructEventFromPayload ( signature , request . rawBody ); if ( event . type === \"customer.subscription.updated\" || event . type === \"customer.subscription.created\" ) { const data = event . data . object as Stripe . Subscription ; const customerId : string = data . customer as string ; const subscriptionStatus = data . status ; await this . usersService . updateMonthlySubscriptionStatus ( customerId , subscriptionStatus ); } } } Above, we had to sort out some TypeScript issues. Currently, Stripe recommends casting to deal with them. In our flow, Stripe calls our /webhook endpoint and sends us events. We check if they are connected to subscriptions by checking the event.type property. If that\u2019s the case, we can assume that the event.data.object property is a subscription. With that knowledge, we can update the monthlySubscriptionStatus property of a user. Webhook \u5e42\u7b49\u6027 According to the Stripe documentation, Stripe might occasionally send the same event more than once. They advise us to create a mechanism to guard the application against processing the same event multiple times and making our event processing idempotent. One way of doing so would be to keep the id of every processed event in the database. stripeEvent.entity.ts TypeScript import { Entity , PrimaryColumn } from 'typeorm' ; @Entity () class StripeEvent { @PrimaryColumn () public id : string ; } export default StripeEvent ; Please notice that above we define a primary column that is not auto - generated . We aim to use the event id from Stripe to populate this column . stripeWebhook . service . ts import { Injectable } from '@nestjs/common' ; import { InjectRepository } from '@nestjs/typeorm' ; import StripeEvent from './StripeEvent.entity' ; import { Repository } from 'typeorm' ; @Injectable () export default class StripeWebhookService { constructor ( @InjectRepository ( StripeEvent ) private eventsRepository : Repository < StripeEvent > ) {} createEvent ( id : string ) { return this . eventsRepository . insert ({ id }); } } A crucial thing to notice is that the createEvent throws an error when we try to use an id that already exists in the database . We can use it to improve our StripeWebhookController . stripeWebhook . controller . ts import { Controller , Post , Headers , Req , BadRequestException } from '@nestjs/common' ; import StripeService from '../stripe/stripe.service' ; import RequestWithRawBody from './requestWithRawBody.interface' ; import { UsersService } from '../users/users.service' ; import StripeWebhookService from './stripeWebhook.service' ; @Controller ( 'webhook' ) export default class StripeWebhookController { constructor ( private readonly stripeService : StripeService , private readonly usersService : UsersService , private readonly stripeWebhookService : StripeWebhookService ) {} @Post () async handleIncomingEvents ( @Headers ( 'stripe-signature' ) signature : string , @Req () request : RequestWithRawBody ) { if ( ! signature ) { throw new BadRequestException ( 'Missing stripe-signature header' ); } const event = await this . stripeService . constructEventFromPayload ( signature , request . rawBody ); if ( event . type === 'customer.subscription.updated' || event . type === 'customer.subscription.created' ) { return this . stripeWebhookService . processSubscriptionUpdate ( event ); } } } Since our controller keeps growing, let\u2019s move part of the logic to our StripeWebhookService. stripeWebhook.service.ts TypeScript import { BadRequestException , Injectable } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import StripeEvent from \"./StripeEvent.entity\" ; import { Repository } from \"typeorm\" ; import Stripe from \"stripe\" ; import PostgresErrorCode from \"../database/postgresErrorCode.enum\" ; import { UsersService } from \"../users/users.service\" ; @Injectable () export default class StripeWebhookService { constructor ( @InjectRepository ( StripeEvent ) private eventsRepository : Repository < StripeEvent > , private readonly usersService : UsersService ) {} createEvent ( id : string ) { return this . eventsRepository . insert ({ id }); } async processSubscriptionUpdate ( event : Stripe.Event ) { try { await this . createEvent ( event . id ); } catch ( error ) { if ( error ? . code === PostgresErrorCode . UniqueViolation ) { throw new BadRequestException ( \"This event was already processed\" ); } } const data = event . data . object as Stripe . Subscription ; const customerId : string = data . customer as string ; const subscriptionStatus = data . status ; await this . usersService . updateMonthlySubscriptionStatus ( customerId , subscriptionStatus ); } } With the above code, our endpoint throws an error when Stripe sends the same event again. Deleting old events with cron might be a good idea. If you want to do that, check out API with NestJS #25. Sending scheduled emails with cron and Nodemailer \u603b\u7ed3 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4e86\u89e3\u4e86\u66f4\u591a\u5173\u4e8e Stripe \u7684\u77e5\u8bc6\uff0c\u5e76\u901a\u8fc7\u54cd\u5e94 Stripe \u4e8b\u4ef6\u6539\u8fdb\u4e86\u5e94\u7528\u7a0b\u5e8f\u3002 \u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5fc5\u987b\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53d7\u6765\u81ea Stripe \u8bf7\u6c42\u7684 webhook\u3002 \u8fd9\u6837\u505a\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u5f00\u59cb\u8ddf\u8e2a\u8ba2\u9605\u72b6\u6001\u7684\u53d8\u5316\u3002 \u6211\u4eec\u8fd8\u786e\u4fdd\u4e0d\u4f1a\u5bf9\u540c\u4e00\u4e2a\u4e8b\u4ef6\u8fdb\u884c\u591a\u6b21\u89e3\u6790\u3002","title":"\u7528webhook\u5bf9Stripe\u4e8b\u4ef6\u505a\u51fa\u53cd\u5e94"},{"location":"docs/http/api-nestjs-stripe-events-webhooks/#nestjs-stripe-webhook","text":"We aim to develop with Stripe webhooks while running the application on localhost. When working with webhooks, we expect Stripe to make requests to our API. By default, our app can\u2019t be accessed from outside while running locally. Because of that, we need an additional step to test webhooks. To perform it, we need Stripe CLI. We can download it here. We need to forward received events to our local API. To do it, we need to run the following: stripe listen --forward-to localhost:3000/webhook","title":"\u5728 NestJS \u4e2d\u4f7f\u7528 Stripe webhook"},{"location":"docs/http/api-nestjs-stripe-events-webhooks/#webhook","text":"In response, we receive the webhook signing secret. We will need it in our API to validate requests made to our /webhook endpoint. A valid approach is to keep the webhook secret in our environment variables. app.module.ts TypeScript import { Module } from \"@nestjs/common\" ; import { ConfigModule } from \"@nestjs/config\" ; import * as Joi from \"@hapi/joi\" ; @Module ({ imports : [ ConfigModule . forRoot ({ validationSchema : Joi.object ({ STRIPE_WEBHOOK_SECRET : Joi.string (), // ... }), }), // ... ], controllers : [], providers : [], }) export class AppModule {} .env TypeScript STRIPE_WEBHOOK_SECRET = whsec_ ... # ...","title":"\u5904\u7406 webhook \u7b7e\u540d\u79d8\u5bc6"},{"location":"docs/http/api-nestjs-stripe-events-webhooks/#_1","text":"NestJS \u4f7f\u7528 body-parser \u5e93\u6765\u89e3\u6790\u4f20\u5165\u7684\u8bf7\u6c42\u4f53\u3002 \u6b63\u56e0\u4e3a\u5982\u6b64\uff0c\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u539f\u59cb\u7684\u4e3b\u4f53\u3002 \u4e0d\u8fc7\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u7684\u5904\u7406 webhook \u7684 Stripe \u5305\u9700\u8981\u5b83\u3002 \u4e3a\u4e86\u5904\u7406\u4e0a\u8ff0\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4e2d\u95f4\u4ef6\uff0c\u5c06\u539f\u59cb\u4e3b\u4f53\u9644\u52a0\u5230\u8bf7\u6c42\u4e2d\u3002 rawBody.middleware.ts TypeScript import { Response } from \"express\" ; import { json } from \"body-parser\" ; import RequestWithRawBody from \"../stripeWebhook/requestWithRawBody.interface\" ; function rawBodyMiddleware () { return json ({ verify : ( request : RequestWithRawBody , response : Response , buffer : Buffer ) => { if ( request . url === \"/webhook\" && Buffer . isBuffer ( buffer )) { request . rawBody = Buffer . from ( buffer ); } return true ; }, }); } export default rawBodyMiddleware ; \u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u4e2d\u95f4\u4ef6\u7684\u77e5\u8bc6\uff0c\u8bf7\u67e5\u770b TypeScript Express \u6559\u7a0b#1\u3002 \u4e2d\u95f4\u4ef6\u3001\u8def\u7531\u548c\u63a7\u5236\u5668 \u4e0a\u9762\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 RequestWithRawBody \u63a5\u53e3\u3002 \u6211\u4eec\u9700\u8981\u5b9a\u4e49\u5b83\u3002 requestWithRawBody.interface.ts TypeScript import { Request } from \"express\" ; interface RequestWithRawBody extends Request { rawBody : Buffer ; } export default RequestWithRawBody ; \u4e3a\u4e86\u8ba9\u4e2d\u95f4\u4ef6\u5de5\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u5728 bootstrap \u51fd\u6570\u4e2d\u4f7f\u7528\u5b83\u3002 main.ts TypeScript import { NestFactory } from \"@nestjs/core\" ; import { AppModule } from \"./app.module\" ; import rawBodyMiddleware from \"./utils/rawBody.middleware\" ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); app . use ( rawBodyMiddleware ()); // ... await app . listen ( 3000 ); } bootstrap ();","title":"\u8bbf\u95ee\u8bf7\u6c42\u7684\u539f\u59cb\u4e3b\u4f53"},{"location":"docs/http/api-nestjs-stripe-events-webhooks/#webhook_1","text":"\u5f53 Stripe \u8bf7\u6c42\u6211\u4eec\u7684 webhook \u8def\u7531\u65f6\uff0c\u6211\u4eec\u9700\u8981\u89e3\u6790\u8bf7\u6c42\u3002 \u8981\u6210\u529f\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u9700\u8981\u4e09\u4ef6\u4e8b: webhook \u7684\u5bc6\u94a5\uff0c\u539f\u59cb\u7684\u8bf7\u6c42\u8d1f\u8f7d\uff0cStripe \u7b7e\u540d\u7684\u8bf7\u6c42\u5934\u3002 \u901a\u8fc7 Stripe \u7b7e\u540d\u5934\uff0c\u6211\u4eec\u53ef\u4ee5\u9a8c\u8bc1\u4e8b\u4ef6\u662f\u7531 Stripe \u53d1\u9001\u7684\uff0c\u800c\u4e0d\u662f\u7531\u7b2c\u4e09\u65b9\u53d1\u9001\u7684\u3002 \u5f53\u6211\u4eec\u62e5\u6709\u4e86\u4e0a\u8ff0\u6240\u6709\u5185\u5bb9\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Stripe \u5e93\u6765\u6784\u9020\u4e8b\u4ef6\u6570\u636e\u3002 stripe.service.ts TypeScript import { Injectable } from \"@nestjs/common\" ; import { ConfigService } from \"@nestjs/config\" ; import Stripe from \"stripe\" ; @Injectable () export default class StripeService { private stripe : Stripe ; constructor ( private configService : ConfigService ) { this . stripe = new Stripe ( configService . get ( \"STRIPE_SECRET_KEY\" ), { apiVersion : \"2020-08-27\" , }); } public async constructEventFromPayload ( signature : string , payload : Buffer ) { const webhookSecret = this . configService . get ( \"STRIPE_WEBHOOK_SECRET\" ); return this . stripe . webhooks . constructEvent ( payload , signature , webhookSecret ); } // ... } \u4f7f\u7528 NestJS \u7ba1\u7406 Stripe webhook \u7684\u6700\u540e\u4e00\u6b65\u662f\u7528 /webhook \u8def\u7531\u521b\u5efa\u4e00\u4e2a\u63a7\u5236\u5668\u3002 stripeWebhook.controller.ts TypeScript import { Controller , Post , Headers , Req , BadRequestException } from \"@nestjs/common\" ; import StripeService from \"../stripe/stripe.service\" ; import RequestWithRawBody from \"./requestWithRawBody.interface\" ; @Controller ( \"webhook\" ) export default class StripeWebhookController { constructor ( private readonly stripeService : StripeService ) {} @Post () async handleIncomingEvents ( @Headers ( \"stripe-signature\" ) signature : string , @Req () request : RequestWithRawBody ) { if ( ! signature ) { throw new BadRequestException ( \"Missing stripe-signature header\" ); } const event = await this . stripeService . constructEventFromPayload ( signature , request . rawBody ); // ... } }","title":"\u89e3\u6790 webhook \u8bf7\u6c42"},{"location":"docs/http/api-nestjs-stripe-events-webhooks/#_2","text":"\u6211\u4eec\u53ef\u4ee5\u7528 webhook \u505a\u7684\u4e00\u4ef6\u4e8b\u5c31\u662f\u8ddf\u8e2a\u8ba2\u9605\u7684\u72b6\u6001\u3002 \u4e3a\u6b64\uff0c\u8ba9\u6211\u4eec\u5c55\u5f00 User \u5b9e\u4f53\u3002 user.entity.ts TypeScript import { Column , Entity , PrimaryGeneratedColumn } from \"typeorm\" ; @Entity () class User { @PrimaryGeneratedColumn () public id : number ; @Column ({ unique : true }) public email : string ; @Column ({ nullable : true }) public monthlySubscriptionStatus? : string ; // ... } export default User ; We also need a way to set the monthlySubscriptionStatus property. To do that, we need a new method in our UsersService: users.service.ts TypeScript import { Injectable } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository , Connection , In } from \"typeorm\" ; import User from \"./user.entity\" ; import { FilesService } from \"../files/files.service\" ; import StripeService from \"../stripe/stripe.service\" ; @Injectable () export class UsersService { constructor ( @InjectRepository ( User ) private usersRepository : Repository < User > ) {} async updateMonthlySubscriptionStatus ( stripeCustomerId : string , monthlySubscriptionStatus : string ) { return this . usersRepository . update ({ stripeCustomerId }, { monthlySubscriptionStatus }); } // ... } To use the above logic, we need to expand our StripeWebhookController: stripeWebhook.controller.ts TypeScript import { Controller , Post , Headers , Req , BadRequestException } from \"@nestjs/common\" ; import StripeService from \"../stripe/stripe.service\" ; import RequestWithRawBody from \"./requestWithRawBody.interface\" ; import { UsersService } from \"../users/users.service\" ; import Stripe from \"stripe\" ; @Controller ( \"webhook\" ) export default class StripeWebhookController { constructor ( private readonly stripeService : StripeService , private readonly usersService : UsersService ) {} @Post () async handleIncomingEvents ( @Headers ( \"stripe-signature\" ) signature : string , @Req () request : RequestWithRawBody ) { if ( ! signature ) { throw new BadRequestException ( \"Missing stripe-signature header\" ); } const event = await this . stripeService . constructEventFromPayload ( signature , request . rawBody ); if ( event . type === \"customer.subscription.updated\" || event . type === \"customer.subscription.created\" ) { const data = event . data . object as Stripe . Subscription ; const customerId : string = data . customer as string ; const subscriptionStatus = data . status ; await this . usersService . updateMonthlySubscriptionStatus ( customerId , subscriptionStatus ); } } } Above, we had to sort out some TypeScript issues. Currently, Stripe recommends casting to deal with them. In our flow, Stripe calls our /webhook endpoint and sends us events. We check if they are connected to subscriptions by checking the event.type property. If that\u2019s the case, we can assume that the event.data.object property is a subscription. With that knowledge, we can update the monthlySubscriptionStatus property of a user.","title":"\u8ddf\u8e2a\u8ba2\u9605\u7684\u72b6\u6001"},{"location":"docs/http/api-nestjs-stripe-events-webhooks/#webhook_2","text":"According to the Stripe documentation, Stripe might occasionally send the same event more than once. They advise us to create a mechanism to guard the application against processing the same event multiple times and making our event processing idempotent. One way of doing so would be to keep the id of every processed event in the database. stripeEvent.entity.ts TypeScript import { Entity , PrimaryColumn } from 'typeorm' ; @Entity () class StripeEvent { @PrimaryColumn () public id : string ; } export default StripeEvent ; Please notice that above we define a primary column that is not auto - generated . We aim to use the event id from Stripe to populate this column . stripeWebhook . service . ts import { Injectable } from '@nestjs/common' ; import { InjectRepository } from '@nestjs/typeorm' ; import StripeEvent from './StripeEvent.entity' ; import { Repository } from 'typeorm' ; @Injectable () export default class StripeWebhookService { constructor ( @InjectRepository ( StripeEvent ) private eventsRepository : Repository < StripeEvent > ) {} createEvent ( id : string ) { return this . eventsRepository . insert ({ id }); } } A crucial thing to notice is that the createEvent throws an error when we try to use an id that already exists in the database . We can use it to improve our StripeWebhookController . stripeWebhook . controller . ts import { Controller , Post , Headers , Req , BadRequestException } from '@nestjs/common' ; import StripeService from '../stripe/stripe.service' ; import RequestWithRawBody from './requestWithRawBody.interface' ; import { UsersService } from '../users/users.service' ; import StripeWebhookService from './stripeWebhook.service' ; @Controller ( 'webhook' ) export default class StripeWebhookController { constructor ( private readonly stripeService : StripeService , private readonly usersService : UsersService , private readonly stripeWebhookService : StripeWebhookService ) {} @Post () async handleIncomingEvents ( @Headers ( 'stripe-signature' ) signature : string , @Req () request : RequestWithRawBody ) { if ( ! signature ) { throw new BadRequestException ( 'Missing stripe-signature header' ); } const event = await this . stripeService . constructEventFromPayload ( signature , request . rawBody ); if ( event . type === 'customer.subscription.updated' || event . type === 'customer.subscription.created' ) { return this . stripeWebhookService . processSubscriptionUpdate ( event ); } } } Since our controller keeps growing, let\u2019s move part of the logic to our StripeWebhookService. stripeWebhook.service.ts TypeScript import { BadRequestException , Injectable } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import StripeEvent from \"./StripeEvent.entity\" ; import { Repository } from \"typeorm\" ; import Stripe from \"stripe\" ; import PostgresErrorCode from \"../database/postgresErrorCode.enum\" ; import { UsersService } from \"../users/users.service\" ; @Injectable () export default class StripeWebhookService { constructor ( @InjectRepository ( StripeEvent ) private eventsRepository : Repository < StripeEvent > , private readonly usersService : UsersService ) {} createEvent ( id : string ) { return this . eventsRepository . insert ({ id }); } async processSubscriptionUpdate ( event : Stripe.Event ) { try { await this . createEvent ( event . id ); } catch ( error ) { if ( error ? . code === PostgresErrorCode . UniqueViolation ) { throw new BadRequestException ( \"This event was already processed\" ); } } const data = event . data . object as Stripe . Subscription ; const customerId : string = data . customer as string ; const subscriptionStatus = data . status ; await this . usersService . updateMonthlySubscriptionStatus ( customerId , subscriptionStatus ); } } With the above code, our endpoint throws an error when Stripe sends the same event again. Deleting old events with cron might be a good idea. If you want to do that, check out API with NestJS #25. Sending scheduled emails with cron and Nodemailer","title":"Webhook \u5e42\u7b49\u6027"},{"location":"docs/http/api-nestjs-stripe-events-webhooks/#_3","text":"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4e86\u89e3\u4e86\u66f4\u591a\u5173\u4e8e Stripe \u7684\u77e5\u8bc6\uff0c\u5e76\u901a\u8fc7\u54cd\u5e94 Stripe \u4e8b\u4ef6\u6539\u8fdb\u4e86\u5e94\u7528\u7a0b\u5e8f\u3002 \u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5fc5\u987b\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53d7\u6765\u81ea Stripe \u8bf7\u6c42\u7684 webhook\u3002 \u8fd9\u6837\u505a\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u5f00\u59cb\u8ddf\u8e2a\u8ba2\u9605\u72b6\u6001\u7684\u53d8\u5316\u3002 \u6211\u4eec\u8fd8\u786e\u4fdd\u4e0d\u4f1a\u5bf9\u540c\u4e00\u4e2a\u4e8b\u4ef6\u8fdb\u884c\u591a\u6b21\u89e3\u6790\u3002","title":"\u603b\u7ed3"},{"location":"docs/http/axios-auth-refresh/","text":"https://github.com/Flyrell/axios-auth-refresh \u5e2e\u52a9\u60a8\u901a\u8fc7 axios interceptors \u5b9e\u73b0\u81ea\u52a8\u5237\u65b0\u6388\u6743\u7684\u5e93\u3002 \u5f53\u539f\u59cb\u8bf7\u6c42\u5931\u8d25\u65f6\uff0c\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u62e6\u622a\u5b83\uff0c\u5237\u65b0\u6388\u6743\u5e76\u7ee7\u7eed\u539f\u59cb\u8bf7\u6c42\uff0c\u800c\u4e0d\u9700\u8981\u4efb\u4f55\u7528\u6237\u4ea4\u4e92\u3002 \u5f53\u8bf7\u6c42\u7531\u4e8e\u6388\u6743\u800c\u5931\u8d25\u65f6\uff0c\u5c06\u53d1\u751f\u4ec0\u4e48\u5b8c\u5168\u53d6\u51b3\u4e8e\u60a8\u3002 \u60a8\u53ef\u4ee5\u4e3a\u65b0\u7684\u6388\u6743\u4ee4\u724c\u8fd0\u884c\u5237\u65b0\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u8fd0\u884c\u81ea\u5b9a\u4e49\u903b\u8f91\u3002 \u5728\u7b49\u5f85\u65b0\u7684\u6388\u6743\u4ee4\u724c\u65f6\uff0c\u63d2\u4ef6\u5c06\u6682\u505c\u5df2\u8fdb\u5165\u7684\u5176\u4ed6\u8bf7\u6c42\uff0c\u5e76\u5728\u65b0\u4ee4\u724c\u53ef\u7528\u65f6\u89e3\u6790\u5b83\u4eec\u3002 \u5b89\u88c5 \u4f7f\u7528 npm \u6216 yarn : Bash npm install axios-auth-refresh --save # or yarn add axios-auth-refresh \u8bed\u6cd5 TypeScript createAuthRefreshInterceptor ( axios : AxiosInstance , refreshAuthLogic : ( failedRequest : any ) => Promise < any > , options : AxiosAuthRefreshOptions = {} ) : number ; \u53c2\u6570 axios - Axios \u7684\u5b9e\u4f8b refreshAuthLogic - \u4e00\u4e2a\u7528\u4e8e\u5237\u65b0\u6388\u6743\u7684\u51fd\u6570( \u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa )\u3002 \u53ea\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u539f\u59cb\u8c03\u7528\u8fd4\u56de\u7684' failedRequest '\u3002 options - \u5bf9\u8c61\u7684\u62e6\u622a\u5668\u8bbe\u7f6e(\u53c2\u89c1 \u53ef\u7528\u9009\u9879 ) \u8fd4\u56de \u62e6\u622a\u5668 id \uff0c\u4ee5\u9632\u4f60\u60f3\u624b\u52a8\u62d2\u7edd\u5b83\u3002 \u4f7f\u7528 \u4e3a\u4e86\u6fc0\u6d3b\u62e6\u622a\u5668\uff0c\u60a8\u9700\u8981\u4ece \u9ed8\u8ba4\u5bfc\u51fa \u7684 axios-auth-refresh \u5bfc\u5165\u4e00\u4e2a\u51fd\u6570\uff0c\u5e76\u4f7f\u7528\u60f3\u8981\u62e6\u622a\u5668\u7684 axios \u5b9e\u4f8b \u8c03\u7528\u5b83\uff0c\u4ee5\u53ca\u9700\u8981\u7f16\u5199\u5237\u65b0\u6388\u6743\u903b\u8f91\u7684 \u5237\u65b0\u6388\u6743\u51fd\u6570 \u3002 \u7136\u540e\u62e6\u622a\u5668\u5c06\u88ab\u7ed1\u5b9a\u5230 axios \u5b9e\u4f8b\u4e0a\uff0c\u5f53\u4ece\u670d\u52a1\u5668(\u6216\u60a8\u5728\u9009\u9879\u4e2d\u63d0\u4f9b\u7684\u4efb\u4f55\u5176\u4ed6\u72b6\u6001\u4ee3\u7801)\u8fd4\u56de 401 (Unauthorized) \u72b6\u6001\u4ee3\u7801\u65f6\uff0c\u6307\u5b9a\u7684\u903b\u8f91\u5c31\u4f1a\u8fd0\u884c\u3002 \u5728 refreshAuthLogic \u5904\u7406\u671f\u95f4\u521b\u5efa\u7684\u6240\u6709\u65b0\u8bf7\u6c42\u90fd\u5c06\u88ab\u7ed1\u5b9a\u5230\u4ece refreshAuthLogic \u51fd\u6570\u8fd4\u56de\u7684 Promise \u4e0a\u3002\u8fd9\u610f\u5473\u7740\u5f53\u83b7\u53d6\u65b0\u7684\u8bbf\u95ee\u4ee4\u724c\u6216\u5237\u65b0\u903b\u8f91\u5931\u8d25\u65f6\uff0c\u8bf7\u6c42\u5c06\u5f97\u5230\u89e3\u51b3\u3002 JavaScript import axios from \"axios\" ; import createAuthRefreshInterceptor from \"axios-auth-refresh\" ; // Function that will be called to refresh authorization const refreshAuthLogic = ( failedRequest ) => axios . post ( \"https://www.example.com/auth/token/refresh\" ). then (( tokenRefreshResponse ) => { localStorage . setItem ( \"token\" , tokenRefreshResponse . data . token ); failedRequest . response . config . headers [ \"Authorization\" ] = \"Bearer \" + tokenRefreshResponse . data . token ; return Promise . resolve (); }); // Instantiate the interceptor createAuthRefreshInterceptor ( axios , refreshAuthLogic ); // Make a call. If it returns a 401 error, the refreshAuthLogic will be run, // and the request retried with the new token axios . get ( \"https://www.example.com/restricted/area\" ). then ( /* ... */ ). catch ( /* ... */ ); \u8df3\u8fc7\u62e6\u622a\u5668 \u7531\u4e8e\u9519\u8bef axios#2295 \u4e0d\u652f\u6301 v0.19.0\u3002 \u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf\u4fee\u590d\uff0c\u5c06\u5728 axios v0.19.1 \u4e2d\u53d1\u5e03 \u5bf9\u4e8e\u7279\u5b9a\u7684\u8c03\u7528\uff0c\u6709\u53ef\u80fd\u8df3\u8fc7\u62e6\u622a\u5668\u7684\u903b\u8f91\u3002 \u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f60\u9700\u8981\u4e3a\u6bcf\u4e2a\u4f60\u4e0d\u60f3\u62e6\u622a\u7684\u8bf7\u6c42\u4f20\u9012 skipAuthRefresh \u9009\u9879\u5230\u8bf7\u6c42\u914d\u7f6e\u3002 JavaScript axios . get ( \"https://www.example.com/\" , { skipAuthRefresh : true }); \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f TypeScript\uff0c\u4f60\u53ef\u4ee5\u4ece axios-auth-refresh \u4e2d\u5bfc\u5165\u81ea\u5b9a\u4e49\u8bf7\u6c42\u914d\u7f6e\u63a5\u53e3\u3002 TypeScript import { AxiosAuthRefreshRequestConfig } from \"axios-auth-refresh\" ; \u8bf7\u6c42\u62e6\u622a\u5668 \u7531\u4e8e\u8fd9\u4e2a\u63d2\u4ef6\u4f1a\u5728\u5237\u65b0\u4ee4\u724c\u7684\u540c\u65f6\u81ea\u52a8\u505c\u6b62\u5176\u4ed6\u8bf7\u6c42\uff0c\u6240\u4ee5\u5c06\u8bf7\u6c42\u903b\u8f91 \u5305\u88c5\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d \u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u4ee5\u786e\u4fdd\u6682\u505c\u7684\u8bf7\u6c42\u4f7f\u7528\u4e86\u65b0\u83b7\u53d6\u7684\u6570\u636e(\u6bd4\u5982\u4ee4\u724c)\u3002 \u53d1\u9001\u4ee4\u724c\u7684\u793a\u4f8b: JavaScript // Obtain the fresh token each time the function is called function getAccessToken () { return localStorage . getItem ( \"token\" ); } // Use interceptor to inject the token to requests axios . interceptors . request . use (( request ) => { request . headers [ \"Authorization\" ] = `Bearer ${ getAccessToken () } ` ; return request ; }); \u53ef\u7528\u9009\u9879 \u8981\u62e6\u622a\u7684\u72b6\u6001\u4ee3\u7801 \u60a8\u53ef\u4ee5\u6307\u5b9a\u591a\u4e2a\u5e0c\u671b\u62e6\u622a\u5668\u8fd0\u884c\u7684\u72b6\u6001\u4ee3\u7801\u3002 JavaScript { statusCodes : [ 401 , 403 ]; // default: [ 401 ] } \u81ea\u5b9a\u4e49\u62e6\u622a\u903b\u8f91 \u60a8\u53ef\u4ee5\u6307\u5b9a\u591a\u4e2a\u5e0c\u671b\u62e6\u622a\u5668\u8fd0\u884c\u7684\u72b6\u6001\u4ee3\u7801\u3002 JavaScript { shouldRefresh : ( error ) => error ? . response ? . data ? . business_error_code === 100385 ; } \u505c\u6b62\u8bf7\u6c42\u7684\u91cd\u8bd5\u5b9e\u4f8b \u60a8\u53ef\u4ee5\u6307\u5b9a\u7528\u4e8e\u91cd\u8bd5\u505c\u6b62\u7684\u8bf7\u6c42\u7684\u5b9e\u4f8b\u3002 \u9ed8\u8ba4\u503c\u4e3a undefined \uff0c\u5e76\u4f7f\u7528\u4f20\u9012\u7ed9 createAuthRefreshInterceptor \u51fd\u6570\u7684\u5b9e\u4f8b\u3002 JavaScript { retryInstance : someAxiosInstance ; // default: undefined } onRetry \u5728\u53d1\u9001\u505c\u6b62\u7684\u8bf7\u6c42\u4e4b\u524d\u56de\u8c03 \u4f60\u53ef\u4ee5\u6307\u5b9a onRetry \u56de\u8c03\uff0c\u5b83\u5c06\u5728\u6bcf\u4e2a\u6682\u505c\u7684\u8bf7\u6c42\u88ab\u8c03\u7528\u4e4b\u524d\uff0c\u4f7f\u7528\u8bf7\u6c42\u914d\u7f6e\u5bf9\u8c61\u8c03\u7528\u3002 JavaScript { onRetry : ( requestConfig ) => ({ ... requestConfig , baseURL : \"\" }); // default: undefined } \u5728\u201c\u5237\u65b0\u903b\u8f91\u201d\u8fd0\u884c\u65f6\u6682\u505c\u5b9e\u4f8b \u5f53\u60a8\u7684\u5237\u65b0\u903b\u8f91\u8fd0\u884c\u65f6\uff0c\u62e6\u622a\u5668\u5c06\u4e3a\u6bcf\u4e2a\u8fd4\u56de\u6307\u5b9a\u7684 options.statusCodes \u4e4b\u4e00\u7684\u8bf7\u6c42(\u9ed8\u8ba4\u4e3a HTTP 401)\u89e6\u53d1\u3002 \u4e3a\u4e86\u9632\u6b62\u62e6\u622a\u5668\u5faa\u73af(\u5f53\u4f60\u7684\u5237\u65b0\u903b\u8f91\u7531\u4e8e options.statusCodes \u4e2d\u6307\u5b9a\u7684\u4efb\u4f55\u72b6\u6001\u4ee3\u7801\u800c\u5931\u8d25\u65f6)\uff0c\u4f60\u9700\u8981\u5728 refreshAuthLogic \u51fd\u6570\u5185\u7684\u5237\u65b0\u8c03\u7528\u4e2d\u4f7f\u7528 skipAuthRefresh \u6807\u5fd7\u3002 \u5982\u679c\u60a8\u7684\u5237\u65b0\u903b\u8f91\u4e0d\u8fdb\u884c\u4efb\u4f55\u8c03\u7528\uff0c\u60a8\u5e94\u8be5\u8003\u8651\u5728\u521d\u59cb\u5316\u62e6\u622a\u5668\u65f6\u4f7f\u7528\u4ee5\u4e0b\u6807\u5fd7\uff0c\u4ee5\u4fbf\u5728\u5237\u65b0\u6302\u8d77\u65f6\u6682\u505c\u6574\u4e2a axios \u5b9e\u4f8b\u3002 \u8fd9\u5c06\u9632\u6b62\u62e6\u622a\u5668\u5bf9\u6bcf\u4e2a\u5931\u8d25\u7684\u8bf7\u6c42\u8fd0\u884c\u3002 JavaScript { pauseInstanceWhileRefreshing : true ; // default: false } \u62e6\u622a\u7f51\u7edc\u9519\u8bef \u5f53\u8fd4\u56de\u4e00\u4e2a HTTP 401 Unauthorized \u54cd\u5e94\u65f6\uff0c\u4e00\u4e9b CORS api \u53ef\u80fd\u4e0d\u4f1a\u8fd4\u56de CORS \u54cd\u5e94\u5934\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6d4f\u89c8\u5668\u5c06\u65e0\u6cd5\u8bfb\u53d6\u54cd\u5e94\u5934\u6765\u786e\u5b9a\u54cd\u5e94\u72b6\u6001\u4ee3\u7801\u3002 \u8981\u62e6\u622a any \u7f51\u7edc\u9519\u8bef\uff0c\u542f\u7528 interceptNetworkError \u9009\u9879\u3002 CAUTION: \u8fd9\u5e94\u8be5\u4f5c\u4e3a\u6700\u540e\u7684\u624b\u6bb5\u3002\u5982\u679c\u6b64\u65b9\u6cd5\u7528\u4e8e\u5904\u7406\u5e26\u6709 HTTP 401 \u54cd\u5e94\u7684\u4e0d\u652f\u6301 CORS \u7684 API\uff0c\u5219\u91cd\u8bd5\u903b\u8f91\u53ef\u4ee5\u6d4b\u8bd5\u5c1d\u8bd5\u5237\u65b0\u8eab\u4efd\u9a8c\u8bc1\u7684\u7f51\u7edc\u8fde\u901a\u6027\u3002 JavaScript { interceptNetworkError : true ; // default: undefined } \u5e93\u7684\u5176\u4ed6\u7528\u9014 \u8fd9\u4e2a\u5e93\u8fd8\u88ab\u7528\u4e8e: \u81ea\u52a8\u8bf7\u6c42\u8282\u6d41 @amcsi Google2FA \u7684 OTP \u6311\u6218 @LeoniePhiline \u4f60\u628a\u5b83\u7528\u5728\u522b\u7684\u5730\u65b9\u4e86\u5417?\u7528\u4f60\u7684\u7528\u4f8b\u521b\u5efa\u4e00\u4e2a\u516c\u5171\u5173\u7cfb\u6765\u5206\u4eab\u5b83\u3002 \u66f4\u65b0\u65e5\u5fd7 v3.1.0 axios v0.21.1 \u652f\u6301 interceptNetworkError . See #133 . v3.0.0 skipWhileRefresh flag has been deprecated due to its unclear name and its logic has been moved to pauseInstanceWhileRefreshing flag pauseInstanceWhileRefreshing is set to false by default \u60f3\u8981\u5e2e\u52a9\u5417? \u67e5\u770b \u8d21\u732e\u6307\u5357 \u6216\u6211\u7684 patreon page! \u7279\u522b\u611f\u8c22 JetBrains \u4e3a\u6211\u4eec\u7684\u5e93\u63d0\u4f9b\u4e86 IDE","title":"axios-auth-refresh"},{"location":"docs/http/axios-auth-refresh/#_1","text":"\u4f7f\u7528 npm \u6216 yarn : Bash npm install axios-auth-refresh --save # or yarn add axios-auth-refresh","title":"\u5b89\u88c5"},{"location":"docs/http/axios-auth-refresh/#_2","text":"TypeScript createAuthRefreshInterceptor ( axios : AxiosInstance , refreshAuthLogic : ( failedRequest : any ) => Promise < any > , options : AxiosAuthRefreshOptions = {} ) : number ;","title":"\u8bed\u6cd5"},{"location":"docs/http/axios-auth-refresh/#_3","text":"axios - Axios \u7684\u5b9e\u4f8b refreshAuthLogic - \u4e00\u4e2a\u7528\u4e8e\u5237\u65b0\u6388\u6743\u7684\u51fd\u6570( \u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa )\u3002 \u53ea\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u539f\u59cb\u8c03\u7528\u8fd4\u56de\u7684' failedRequest '\u3002 options - \u5bf9\u8c61\u7684\u62e6\u622a\u5668\u8bbe\u7f6e(\u53c2\u89c1 \u53ef\u7528\u9009\u9879 )","title":"\u53c2\u6570"},{"location":"docs/http/axios-auth-refresh/#_4","text":"\u62e6\u622a\u5668 id \uff0c\u4ee5\u9632\u4f60\u60f3\u624b\u52a8\u62d2\u7edd\u5b83\u3002","title":"\u8fd4\u56de"},{"location":"docs/http/axios-auth-refresh/#_5","text":"\u4e3a\u4e86\u6fc0\u6d3b\u62e6\u622a\u5668\uff0c\u60a8\u9700\u8981\u4ece \u9ed8\u8ba4\u5bfc\u51fa \u7684 axios-auth-refresh \u5bfc\u5165\u4e00\u4e2a\u51fd\u6570\uff0c\u5e76\u4f7f\u7528\u60f3\u8981\u62e6\u622a\u5668\u7684 axios \u5b9e\u4f8b \u8c03\u7528\u5b83\uff0c\u4ee5\u53ca\u9700\u8981\u7f16\u5199\u5237\u65b0\u6388\u6743\u903b\u8f91\u7684 \u5237\u65b0\u6388\u6743\u51fd\u6570 \u3002 \u7136\u540e\u62e6\u622a\u5668\u5c06\u88ab\u7ed1\u5b9a\u5230 axios \u5b9e\u4f8b\u4e0a\uff0c\u5f53\u4ece\u670d\u52a1\u5668(\u6216\u60a8\u5728\u9009\u9879\u4e2d\u63d0\u4f9b\u7684\u4efb\u4f55\u5176\u4ed6\u72b6\u6001\u4ee3\u7801)\u8fd4\u56de 401 (Unauthorized) \u72b6\u6001\u4ee3\u7801\u65f6\uff0c\u6307\u5b9a\u7684\u903b\u8f91\u5c31\u4f1a\u8fd0\u884c\u3002 \u5728 refreshAuthLogic \u5904\u7406\u671f\u95f4\u521b\u5efa\u7684\u6240\u6709\u65b0\u8bf7\u6c42\u90fd\u5c06\u88ab\u7ed1\u5b9a\u5230\u4ece refreshAuthLogic \u51fd\u6570\u8fd4\u56de\u7684 Promise \u4e0a\u3002\u8fd9\u610f\u5473\u7740\u5f53\u83b7\u53d6\u65b0\u7684\u8bbf\u95ee\u4ee4\u724c\u6216\u5237\u65b0\u903b\u8f91\u5931\u8d25\u65f6\uff0c\u8bf7\u6c42\u5c06\u5f97\u5230\u89e3\u51b3\u3002 JavaScript import axios from \"axios\" ; import createAuthRefreshInterceptor from \"axios-auth-refresh\" ; // Function that will be called to refresh authorization const refreshAuthLogic = ( failedRequest ) => axios . post ( \"https://www.example.com/auth/token/refresh\" ). then (( tokenRefreshResponse ) => { localStorage . setItem ( \"token\" , tokenRefreshResponse . data . token ); failedRequest . response . config . headers [ \"Authorization\" ] = \"Bearer \" + tokenRefreshResponse . data . token ; return Promise . resolve (); }); // Instantiate the interceptor createAuthRefreshInterceptor ( axios , refreshAuthLogic ); // Make a call. If it returns a 401 error, the refreshAuthLogic will be run, // and the request retried with the new token axios . get ( \"https://www.example.com/restricted/area\" ). then ( /* ... */ ). catch ( /* ... */ );","title":"\u4f7f\u7528"},{"location":"docs/http/axios-auth-refresh/#_6","text":"\u7531\u4e8e\u9519\u8bef axios#2295 \u4e0d\u652f\u6301 v0.19.0\u3002 \u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf\u4fee\u590d\uff0c\u5c06\u5728 axios v0.19.1 \u4e2d\u53d1\u5e03 \u5bf9\u4e8e\u7279\u5b9a\u7684\u8c03\u7528\uff0c\u6709\u53ef\u80fd\u8df3\u8fc7\u62e6\u622a\u5668\u7684\u903b\u8f91\u3002 \u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f60\u9700\u8981\u4e3a\u6bcf\u4e2a\u4f60\u4e0d\u60f3\u62e6\u622a\u7684\u8bf7\u6c42\u4f20\u9012 skipAuthRefresh \u9009\u9879\u5230\u8bf7\u6c42\u914d\u7f6e\u3002 JavaScript axios . get ( \"https://www.example.com/\" , { skipAuthRefresh : true }); \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f TypeScript\uff0c\u4f60\u53ef\u4ee5\u4ece axios-auth-refresh \u4e2d\u5bfc\u5165\u81ea\u5b9a\u4e49\u8bf7\u6c42\u914d\u7f6e\u63a5\u53e3\u3002 TypeScript import { AxiosAuthRefreshRequestConfig } from \"axios-auth-refresh\" ;","title":"\u8df3\u8fc7\u62e6\u622a\u5668"},{"location":"docs/http/axios-auth-refresh/#_7","text":"\u7531\u4e8e\u8fd9\u4e2a\u63d2\u4ef6\u4f1a\u5728\u5237\u65b0\u4ee4\u724c\u7684\u540c\u65f6\u81ea\u52a8\u505c\u6b62\u5176\u4ed6\u8bf7\u6c42\uff0c\u6240\u4ee5\u5c06\u8bf7\u6c42\u903b\u8f91 \u5305\u88c5\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d \u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u4ee5\u786e\u4fdd\u6682\u505c\u7684\u8bf7\u6c42\u4f7f\u7528\u4e86\u65b0\u83b7\u53d6\u7684\u6570\u636e(\u6bd4\u5982\u4ee4\u724c)\u3002 \u53d1\u9001\u4ee4\u724c\u7684\u793a\u4f8b: JavaScript // Obtain the fresh token each time the function is called function getAccessToken () { return localStorage . getItem ( \"token\" ); } // Use interceptor to inject the token to requests axios . interceptors . request . use (( request ) => { request . headers [ \"Authorization\" ] = `Bearer ${ getAccessToken () } ` ; return request ; });","title":"\u8bf7\u6c42\u62e6\u622a\u5668"},{"location":"docs/http/axios-auth-refresh/#_8","text":"","title":"\u53ef\u7528\u9009\u9879"},{"location":"docs/http/axios-auth-refresh/#_9","text":"\u60a8\u53ef\u4ee5\u6307\u5b9a\u591a\u4e2a\u5e0c\u671b\u62e6\u622a\u5668\u8fd0\u884c\u7684\u72b6\u6001\u4ee3\u7801\u3002 JavaScript { statusCodes : [ 401 , 403 ]; // default: [ 401 ] }","title":"\u8981\u62e6\u622a\u7684\u72b6\u6001\u4ee3\u7801"},{"location":"docs/http/axios-auth-refresh/#_10","text":"\u60a8\u53ef\u4ee5\u6307\u5b9a\u591a\u4e2a\u5e0c\u671b\u62e6\u622a\u5668\u8fd0\u884c\u7684\u72b6\u6001\u4ee3\u7801\u3002 JavaScript { shouldRefresh : ( error ) => error ? . response ? . data ? . business_error_code === 100385 ; }","title":"\u81ea\u5b9a\u4e49\u62e6\u622a\u903b\u8f91"},{"location":"docs/http/axios-auth-refresh/#_11","text":"\u60a8\u53ef\u4ee5\u6307\u5b9a\u7528\u4e8e\u91cd\u8bd5\u505c\u6b62\u7684\u8bf7\u6c42\u7684\u5b9e\u4f8b\u3002 \u9ed8\u8ba4\u503c\u4e3a undefined \uff0c\u5e76\u4f7f\u7528\u4f20\u9012\u7ed9 createAuthRefreshInterceptor \u51fd\u6570\u7684\u5b9e\u4f8b\u3002 JavaScript { retryInstance : someAxiosInstance ; // default: undefined }","title":"\u505c\u6b62\u8bf7\u6c42\u7684\u91cd\u8bd5\u5b9e\u4f8b"},{"location":"docs/http/axios-auth-refresh/#onretry","text":"\u4f60\u53ef\u4ee5\u6307\u5b9a onRetry \u56de\u8c03\uff0c\u5b83\u5c06\u5728\u6bcf\u4e2a\u6682\u505c\u7684\u8bf7\u6c42\u88ab\u8c03\u7528\u4e4b\u524d\uff0c\u4f7f\u7528\u8bf7\u6c42\u914d\u7f6e\u5bf9\u8c61\u8c03\u7528\u3002 JavaScript { onRetry : ( requestConfig ) => ({ ... requestConfig , baseURL : \"\" }); // default: undefined }","title":"onRetry \u5728\u53d1\u9001\u505c\u6b62\u7684\u8bf7\u6c42\u4e4b\u524d\u56de\u8c03"},{"location":"docs/http/axios-auth-refresh/#_12","text":"\u5f53\u60a8\u7684\u5237\u65b0\u903b\u8f91\u8fd0\u884c\u65f6\uff0c\u62e6\u622a\u5668\u5c06\u4e3a\u6bcf\u4e2a\u8fd4\u56de\u6307\u5b9a\u7684 options.statusCodes \u4e4b\u4e00\u7684\u8bf7\u6c42(\u9ed8\u8ba4\u4e3a HTTP 401)\u89e6\u53d1\u3002 \u4e3a\u4e86\u9632\u6b62\u62e6\u622a\u5668\u5faa\u73af(\u5f53\u4f60\u7684\u5237\u65b0\u903b\u8f91\u7531\u4e8e options.statusCodes \u4e2d\u6307\u5b9a\u7684\u4efb\u4f55\u72b6\u6001\u4ee3\u7801\u800c\u5931\u8d25\u65f6)\uff0c\u4f60\u9700\u8981\u5728 refreshAuthLogic \u51fd\u6570\u5185\u7684\u5237\u65b0\u8c03\u7528\u4e2d\u4f7f\u7528 skipAuthRefresh \u6807\u5fd7\u3002 \u5982\u679c\u60a8\u7684\u5237\u65b0\u903b\u8f91\u4e0d\u8fdb\u884c\u4efb\u4f55\u8c03\u7528\uff0c\u60a8\u5e94\u8be5\u8003\u8651\u5728\u521d\u59cb\u5316\u62e6\u622a\u5668\u65f6\u4f7f\u7528\u4ee5\u4e0b\u6807\u5fd7\uff0c\u4ee5\u4fbf\u5728\u5237\u65b0\u6302\u8d77\u65f6\u6682\u505c\u6574\u4e2a axios \u5b9e\u4f8b\u3002 \u8fd9\u5c06\u9632\u6b62\u62e6\u622a\u5668\u5bf9\u6bcf\u4e2a\u5931\u8d25\u7684\u8bf7\u6c42\u8fd0\u884c\u3002 JavaScript { pauseInstanceWhileRefreshing : true ; // default: false }","title":"\u5728\u201c\u5237\u65b0\u903b\u8f91\u201d\u8fd0\u884c\u65f6\u6682\u505c\u5b9e\u4f8b"},{"location":"docs/http/axios-auth-refresh/#_13","text":"\u5f53\u8fd4\u56de\u4e00\u4e2a HTTP 401 Unauthorized \u54cd\u5e94\u65f6\uff0c\u4e00\u4e9b CORS api \u53ef\u80fd\u4e0d\u4f1a\u8fd4\u56de CORS \u54cd\u5e94\u5934\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6d4f\u89c8\u5668\u5c06\u65e0\u6cd5\u8bfb\u53d6\u54cd\u5e94\u5934\u6765\u786e\u5b9a\u54cd\u5e94\u72b6\u6001\u4ee3\u7801\u3002 \u8981\u62e6\u622a any \u7f51\u7edc\u9519\u8bef\uff0c\u542f\u7528 interceptNetworkError \u9009\u9879\u3002 CAUTION: \u8fd9\u5e94\u8be5\u4f5c\u4e3a\u6700\u540e\u7684\u624b\u6bb5\u3002\u5982\u679c\u6b64\u65b9\u6cd5\u7528\u4e8e\u5904\u7406\u5e26\u6709 HTTP 401 \u54cd\u5e94\u7684\u4e0d\u652f\u6301 CORS \u7684 API\uff0c\u5219\u91cd\u8bd5\u903b\u8f91\u53ef\u4ee5\u6d4b\u8bd5\u5c1d\u8bd5\u5237\u65b0\u8eab\u4efd\u9a8c\u8bc1\u7684\u7f51\u7edc\u8fde\u901a\u6027\u3002 JavaScript { interceptNetworkError : true ; // default: undefined }","title":"\u62e6\u622a\u7f51\u7edc\u9519\u8bef"},{"location":"docs/http/axios-auth-refresh/#_14","text":"\u8fd9\u4e2a\u5e93\u8fd8\u88ab\u7528\u4e8e: \u81ea\u52a8\u8bf7\u6c42\u8282\u6d41 @amcsi Google2FA \u7684 OTP \u6311\u6218 @LeoniePhiline \u4f60\u628a\u5b83\u7528\u5728\u522b\u7684\u5730\u65b9\u4e86\u5417?\u7528\u4f60\u7684\u7528\u4f8b\u521b\u5efa\u4e00\u4e2a\u516c\u5171\u5173\u7cfb\u6765\u5206\u4eab\u5b83\u3002","title":"\u5e93\u7684\u5176\u4ed6\u7528\u9014"},{"location":"docs/http/axios-auth-refresh/#_15","text":"v3.1.0 axios v0.21.1 \u652f\u6301 interceptNetworkError . See #133 . v3.0.0 skipWhileRefresh flag has been deprecated due to its unclear name and its logic has been moved to pauseInstanceWhileRefreshing flag pauseInstanceWhileRefreshing is set to false by default","title":"\u66f4\u65b0\u65e5\u5fd7"},{"location":"docs/http/axios-auth-refresh/#_16","text":"\u67e5\u770b \u8d21\u732e\u6307\u5357 \u6216\u6211\u7684 patreon page!","title":"\u60f3\u8981\u5e2e\u52a9\u5417?"},{"location":"docs/http/axios-auth-refresh/#jetbrains-ide","text":"","title":"\u7279\u522b\u611f\u8c22JetBrains\u4e3a\u6211\u4eec\u7684\u5e93\u63d0\u4f9b\u4e86 IDE"},{"location":"docs/http/axios/","text":"Promise based HTTP client for the browser and node.js New axios docs website: click here \u529f\u80fd Make XMLHttpRequests from the browser Make http requests from node.js Supports the Promise API Intercept request and response Transform request and response data Cancel requests Automatic transforms for JSON data Client side support for protecting against XSRF \u6d4f\u89c8\u5668\u652f\u6301 Latest \u2714 Latest \u2714 Latest \u2714 Latest \u2714 Latest \u2714 11 \u2714 \u5b89\u88c5 Using npm: Bash $ npm install axios Using bower: Bash $ bower install axios Using yarn: Bash $ yarn add axios Using jsDelivr CDN: HTML < script src = \"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\" ></ script > Using unpkg CDN: HTML < script src = \"https://unpkg.com/axios/dist/axios.min.js\" ></ script > \u793a\u4f8b note: CommonJS usage In order to gain the TypeScript typings (for intellisense / autocomplete) while using CommonJS imports with require() use the following approach: JavaScript const axios = require ( \"axios\" ). default ; // axios.<method> will now provide autocomplete and parameter typings Performing a GET request JavaScript const axios = require ( \"axios\" ). default ; // Make a request for a user with a given ID axios . get ( \"/user?ID=12345\" ) . then ( function ( response ) { // handle success console . log ( response ); }) . catch ( function ( error ) { // handle error console . log ( error ); }) . then ( function () { // always executed }); // Optionally the request above could also be done as axios . get ( \"/user\" , { params : { ID : 12345 , }, }) . then ( function ( response ) { console . log ( response ); }) . catch ( function ( error ) { console . log ( error ); }) . then ( function () { // always executed }); // Want to use async/await? Add the `async` keyword to your outer function/method. async function getUser () { try { const response = await axios . get ( \"/user?ID=12345\" ); console . log ( response ); } catch ( error ) { console . error ( error ); } } NOTE: async/await is part of ECMAScript 2017 and is not supported in Internet Explorer and older browsers, so use with caution. Performing a POST request JavaScript axios . post ( \"/user\" , { firstName : \"Fred\" , lastName : \"Flintstone\" , }) . then ( function ( response ) { console . log ( response ); }) . catch ( function ( error ) { console . log ( error ); }); Performing multiple concurrent requests JavaScript function getUserAccount () { return axios . get ( \"/user/12345\" ); } function getUserPermissions () { return axios . get ( \"/user/12345/permissions\" ); } Promise . all ([ getUserAccount (), getUserPermissions ()]). then ( function ( results ) { const acct = results [ 0 ]; const perm = results [ 1 ]; }); axios API Requests can be made by passing the relevant config to axios . axios(config) JavaScript // Send a POST request axios ({ method : \"post\" , url : \"/user/12345\" , data : { firstName : \"Fred\" , lastName : \"Flintstone\" , }, }); JavaScript // GET request for remote image in node.js axios ({ method : \"get\" , url : \"http://bit.ly/2mTM3nY\" , responseType : \"stream\" , }). then ( function ( response ) { response . data . pipe ( fs . createWriteStream ( \"ada_lovelace.jpg\" )); }); axios(url[, config]) JavaScript // Send a GET request (default method) axios ( \"/user/12345\" ); \u8bf7\u6c42\u65b9\u6cd5\u7684\u522b\u540d For convenience, aliases have been provided for all common request methods. axios.request(config) axios.get(url[, config]) axios.delete(url[, config]) axios.head(url[, config]) axios.options(url[, config]) axios.post(url[, data[, config]]) axios.put(url[, data[, config]]) axios.patch(url[, data[, config]]) NOTE When using the alias methods url , method , and data properties don't need to be specified in config. \u5e76\u53d1\u6027(\u5f03\u7528) Please use Promise.all to replace the below functions. Helper functions for dealing with concurrent requests. axios.all(iterable) axios.spread(callback) \u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b You can create a new instance of axios with a custom config. axios.create([config]) JavaScript const instance = axios . create ({ baseURL : \"https://some-domain.com/api/\" , timeout : 1000 , headers : { \"X-Custom-Header\" : \"foobar\" }, }); \u5b9e\u4f8b\u65b9\u6cd5 The available instance methods are listed below. The specified config will be merged with the instance config. axios#request(config) axios#get(url[, config]) axios#delete(url[, config]) axios#head(url[, config]) axios#options(url[, config]) axios#post(url[, data[, config]]) axios#put(url[, data[, config]]) axios#patch(url[, data[, config]]) axios#getUri([config]) \u8bf7\u6c42\u914d\u7f6e These are the available config options for making requests. Only the url is required. Requests will default to GET if method is not specified. JavaScript { // `url` is the server URL that will be used for the request url : '/user' , // `method` is the request method to be used when making the request method : 'get' , // default // `baseURL` will be prepended to `url` unless `url` is absolute. // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs // to methods of that instance. baseURL : 'https://some-domain.com/api/' , // `transformRequest` allows changes to the request data before it is sent to the server // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE' // The last function in the array must return a string or an instance of Buffer, ArrayBuffer, // FormData or Stream // You may modify the headers object. transformRequest : [ function ( data , headers ) { // Do whatever you want to transform the data return data ; }], // `transformResponse` allows changes to the response data to be made before // it is passed to then/catch transformResponse : [ function ( data ) { // Do whatever you want to transform the data return data ; }], // `headers` are custom headers to be sent headers : { 'X-Requested-With' : 'XMLHttpRequest' }, // `params` are the URL parameters to be sent with the request // Must be a plain object or a URLSearchParams object params : { ID : 12345 }, // `paramsSerializer` is an optional function in charge of serializing `params` // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/) paramsSerializer : function ( params ) { return Qs . stringify ( params , { arrayFormat : 'brackets' }) }, // `data` is the data to be sent as the request body // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH' // When no `transformRequest` is set, must be of one of the following types: // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams // - Browser only: FormData, File, Blob // - Node only: Stream, Buffer data : { firstName : 'Fred' }, // syntax alternative to send data into the body // method post // only the value is sent, not the key data : 'Country=Brasil&City=Belo Horizonte' , // `timeout` specifies the number of milliseconds before the request times out. // If the request takes longer than `timeout`, the request will be aborted. timeout : 1000 , // default is `0` (no timeout) // `withCredentials` indicates whether or not cross-site Access-Control requests // should be made using credentials withCredentials : false , // default // `adapter` allows custom handling of requests which makes testing easier. // Return a promise and supply a valid response (see lib/adapters/README.md). adapter : function ( config ) { /* ... */ }, // `auth` indicates that HTTP Basic auth should be used, and supplies credentials. // This will set an `Authorization` header, overwriting any existing // `Authorization` custom headers you have set using `headers`. // Please note that only HTTP Basic auth is configurable through this parameter. // For Bearer tokens and such, use `Authorization` custom headers instead. auth : { username : 'janedoe' , password : 's00pers3cret' }, // `responseType` indicates the type of data that the server will respond with // options are: 'arraybuffer', 'document', 'json', 'text', 'stream' // browser only: 'blob' responseType : 'json' , // default // `responseEncoding` indicates encoding to use for decoding responses (Node.js only) // Note: Ignored for `responseType` of 'stream' or client-side requests responseEncoding : 'utf8' , // default // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token xsrfCookieName : 'XSRF-TOKEN' , // default // `xsrfHeaderName` is the name of the http header that carries the xsrf token value xsrfHeaderName : 'X-XSRF-TOKEN' , // default // `onUploadProgress` allows handling of progress events for uploads // browser only onUploadProgress : function ( progressEvent ) { // Do whatever you want with the native progress event }, // `onDownloadProgress` allows handling of progress events for downloads // browser only onDownloadProgress : function ( progressEvent ) { // Do whatever you want with the native progress event }, // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js maxContentLength : 2000 , // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed maxBodyLength : 2000 , // `validateStatus` defines whether to resolve or reject the promise for a given // HTTP response status code. If `validateStatus` returns `true` (or is set to `null` // or `undefined`), the promise will be resolved; otherwise, the promise will be // rejected. validateStatus : function ( status ) { return status >= 200 && status < 300 ; // default }, // `maxRedirects` defines the maximum number of redirects to follow in node.js. // If set to 0, no redirects will be followed. maxRedirects : 21 , // default // `beforeRedirect` defines a function that will be called before redirect. // Use this to adjust the request options upon redirecting, // to inspect the latest response headers, // or to cancel the request by throwing an error // If maxRedirects is set to 0, `beforeRedirect` is not used. beforeRedirect : ( options , { headers }) => { if ( options . hostname === \"example.com\" ) { options . auth = \"user:password\" ; } }; // `socketPath` defines a UNIX Socket to be used in node.js. // e.g. '/var/run/docker.sock' to send requests to the docker daemon. // Only either `socketPath` or `proxy` can be specified. // If both are specified, `socketPath` is used. socketPath : null , // default // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http // and https requests, respectively, in node.js. This allows options to be added like // `keepAlive` that are not enabled by default. httpAgent : new http . Agent ({ keepAlive : true }), httpsAgent : new https . Agent ({ keepAlive : true }), // `proxy` defines the hostname, port, and protocol of the proxy server. // You can also define your proxy using the conventional `http_proxy` and // `https_proxy` environment variables. If you are using environment variables // for your proxy configuration, you can also define a `no_proxy` environment // variable as a comma-separated list of domains that should not be proxied. // Use `false` to disable proxies, ignoring environment variables. // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and // supplies credentials. // This will set an `Proxy-Authorization` header, overwriting any existing // `Proxy-Authorization` custom headers you have set using `headers`. // If the proxy server uses HTTPS, then you must set the protocol to `https`. proxy : { protocol : 'https' , host : '127.0.0.1' , port : 9000 , auth : { username : 'mikeymike' , password : 'rapunz3l' } }, // `cancelToken` specifies a cancel token that can be used to cancel the request // (see Cancellation section below for details) cancelToken : new CancelToken ( function ( cancel ) { }), // an alternative way to cancel Axios requests using AbortController signal : new AbortController (). signal , // `decompress` indicates whether or not the response body should be decompressed // automatically. If set to `true` will also remove the 'content-encoding' header // from the responses objects of all decompressed responses // - Node only (XHR cannot turn off decompression) decompress : true // default // `insecureHTTPParser` boolean. // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers. // This may allow interoperability with non-conformant HTTP implementations. // Using the insecure parser should be avoided. // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none insecureHTTPParser : undefined // default // transitional options for backward compatibility that may be removed in the newer versions transitional : { // silent JSON parsing mode // `true` - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour) // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json') silentJSONParsing : true , // default value for the current Axios version // try to parse the response string as JSON even if `responseType` is not 'json' forcedJSONParsing : true , // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts clarifyTimeoutError : false , }, env : { // The FormData class to be used to automatically serialize the payload into a FormData object FormData : window ? . FormData || global ? . FormData } } \u54cd\u5e94\u6a21\u5f0f The response for a request contains the following information. JavaScript { // `data` is the response that was provided by the server data : {}, // `status` is the HTTP status code from the server response status : 200 , // `statusText` is the HTTP status message from the server response statusText : 'OK' , // `headers` the HTTP headers that the server responded with // All header names are lower cased and can be accessed using the bracket notation. // Example: `response.headers['content-type']` headers : {}, // `config` is the config that was provided to `axios` for the request config : {}, // `request` is the request that generated this response // It is the last ClientRequest instance in node.js (in redirects) // and an XMLHttpRequest instance in the browser request : {} } When using then , you will receive the response as follows: JavaScript axios . get ( \"/user/12345\" ). then ( function ( response ) { console . log ( response . data ); console . log ( response . status ); console . log ( response . statusText ); console . log ( response . headers ); console . log ( response . config ); }); When using catch , or passing a rejection callback as second parameter of then , the response will be available through the error object as explained in the Handling Errors section. \u914d\u7f6e\u9ed8\u8ba4 \u60a8\u53ef\u4ee5\u6307\u5b9a\u5c06\u5e94\u7528\u4e8e\u6bcf\u4e2a\u8bf7\u6c42\u7684\u9ed8\u8ba4\u914d\u7f6e\u3002 \u5168\u5c40 axios \u9ed8\u8ba4 JavaScript axios . defaults . baseURL = \"https://api.example.com\" ; // Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them. // See below for an example using Custom instance defaults instead. axios . defaults . headers . common [ \"Authorization\" ] = AUTH_TOKEN ; axios . defaults . headers . post [ \"Content-Type\" ] = \"application/x-www-form-urlencoded\" ; \u81ea\u5b9a\u4e49\u5b9e\u4f8b\u9ed8\u8ba4 JavaScript // Set config defaults when creating the instance const instance = axios . create ({ baseURL : \"https://api.example.com\" , }); // Alter defaults after instance has been created instance . defaults . headers . common [ \"Authorization\" ] = AUTH_TOKEN ; \u914d\u7f6e\u4f18\u5148\u987a\u5e8f Config will be merged with an order of precedence. The order is library defaults found in lib/defaults.js , then defaults property of the instance, and finally config argument for the request. The latter will take precedence over the former. Here's an example. JavaScript // Create an instance using the config defaults provided by the library // At this point the timeout config value is `0` as is the default for the library const instance = axios . create (); // Override timeout default for the library // Now all requests using this instance will wait 2.5 seconds before timing out instance . defaults . timeout = 2500 ; // Override timeout for this request as it's known to take a long time instance . get ( \"/longRequest\" , { timeout : 5000 , }); \u62e6\u622a\u5668 You can intercept requests or responses before they are handled by then or catch . JavaScript // Add a request interceptor axios . interceptors . request . use ( function ( config ) { // Do something before request is sent return config ; }, function ( error ) { // Do something with request error return Promise . reject ( error ); } ); // Add a response interceptor axios . interceptors . response . use ( function ( response ) { // Any status code that lie within the range of 2xx cause this function to trigger // Do something with response data return response ; }, function ( error ) { // Any status codes that falls outside the range of 2xx cause this function to trigger // Do something with response error return Promise . reject ( error ); } ); If you need to remove an interceptor later you can. JavaScript const myInterceptor = axios . interceptors . request . use ( function () { /*...*/ }); axios . interceptors . request . eject ( myInterceptor ); You can add interceptors to a custom instance of axios. JavaScript const instance = axios . create (); instance . interceptors . request . use ( function () { /*...*/ }); When you add request interceptors, they are presumed to be asynchronous by default. This can cause a delay in the execution of your axios request when the main thread is blocked (a promise is created under the hood for the interceptor and your request gets put on the bottom of the call stack). If your request interceptors are synchronous you can add a flag to the options object that will tell axios to run the code synchronously and avoid any delays in request execution. JavaScript axios . interceptors . request . use ( function ( config ) { config . headers . test = \"I am only a header!\" ; return config ; }, null , { synchronous : true } ); If you want to execute a particular interceptor based on a runtime check, you can add a runWhen function to the options object. The interceptor will not be executed if and only if the return of runWhen is false . The function will be called with the config object (don't forget that you can bind your own arguments to it as well.) This can be handy when you have an asynchronous request interceptor that only needs to run at certain times. JavaScript function onGetCall ( config ) { return config . method === \"get\" ; } axios . interceptors . request . use ( function ( config ) { config . headers . test = \"special get headers\" ; return config ; }, null , { runWhen : onGetCall } ); \u591a\u4e2a\u62e6\u622a\u5668 Given you add multiple response interceptors and when the response was fulfilled then each interceptor is executed then they are executed in the order they were added then only the last interceptor's result is returned then every interceptor receives the result of it's predecessor and when the fulfillment-interceptor throws then the following fulfillment-interceptor is not called then the following rejection-interceptor is called once caught, another following fulfill-interceptor is called again (just like in a promise chain). Read the interceptor tests for seeing all this in code. \u5904\u7406\u9519\u8bef JavaScript axios . get ( \"/user/12345\" ). catch ( function ( error ) { if ( error . response ) { // The request was made and the server responded with a status code // that falls out of the range of 2xx console . log ( error . response . data ); console . log ( error . response . status ); console . log ( error . response . headers ); } else if ( error . request ) { // The request was made but no response was received // `error.request` is an instance of XMLHttpRequest in the browser and an instance of // http.ClientRequest in node.js console . log ( error . request ); } else { // Something happened in setting up the request that triggered an Error console . log ( \"Error\" , error . message ); } console . log ( error . config ); }); Using the validateStatus config option, you can define HTTP code(s) that should throw an error. JavaScript axios . get ( \"/user/12345\" , { validateStatus : function ( status ) { return status < 500 ; // Resolve only if the status code is less than 500 }, }); Using toJSON you get an object with more information about the HTTP error. JavaScript axios . get ( \"/user/12345\" ). catch ( function ( error ) { console . log ( error . toJSON ()); }); \u53d6\u6d88 AbortController Starting from v0.22.0 Axios supports AbortController to cancel requests in fetch API way: JavaScript const controller = new AbortController (); axios . get ( \"/foo/bar\" , { signal : controller . signal , }) . then ( function ( response ) { //... }); // cancel the request controller . abort (); CancelToken \ud83d\udc4edeprecated You can also cancel a request using a CancelToken . The axios cancel token API is based on the withdrawn cancelable promises proposal . This API is deprecated since v0.22.0 and shouldn't be used in new projects You can create a cancel token using the CancelToken.source factory as shown below: JavaScript const CancelToken = axios . CancelToken ; const source = CancelToken . source (); axios . get ( \"/user/12345\" , { cancelToken : source . token , }) . catch ( function ( thrown ) { if ( axios . isCancel ( thrown )) { console . log ( \"Request canceled\" , thrown . message ); } else { // handle error } }); axios . post ( \"/user/12345\" , { name : \"new name\" , }, { cancelToken : source . token , } ); // cancel the request (the message parameter is optional) source . cancel ( \"Operation canceled by the user.\" ); You can also create a cancel token by passing an executor function to the CancelToken constructor: JavaScript const CancelToken = axios . CancelToken ; let cancel ; axios . get ( \"/user/12345\" , { cancelToken : new CancelToken ( function executor ( c ) { // An executor function receives a cancel function as a parameter cancel = c ; }), }); // cancel the request cancel (); Note: you can cancel several requests with the same cancel token/abort controller. If a cancellation token is already cancelled at the moment of starting an Axios request, then the request is cancelled immediately, without any attempts to make real request. During the transition period, you can use both cancellation APIs, even for the same request: \u4f7f\u7528 application/x-www-form-urlencoded \u683c\u5f0f By default, axios serializes JavaScript objects to JSON . To send data in the application/x-www-form-urlencoded format instead, you can use one of the following options. \u6d4f\u89c8\u5668 In a browser, you can use the URLSearchParams API as follows: JavaScript const params = new URLSearchParams (); params . append ( \"param1\" , \"value1\" ); params . append ( \"param2\" , \"value2\" ); axios . post ( \"/foo\" , params ); Note that URLSearchParams is not supported by all browsers (see caniuse.com ), but there is a polyfill available (make sure to polyfill the global environment). Alternatively, you can encode data using the qs library: JavaScript const qs = require ( \"qs\" ); axios . post ( \"/foo\" , qs . stringify ({ bar : 123 })); Or in another way (ES6), JavaScript import qs from \"qs\" ; const data = { bar : 123 }; const options = { method : \"POST\" , headers : { \"content-type\" : \"application/x-www-form-urlencoded\" }, data : qs . stringify ( data ), url , }; axios ( options ); Node.js \u67e5\u8be2\u5b57\u7b26\u4e32 In node.js, you can use the querystring module as follows: JavaScript const querystring = require ( \"querystring\" ); axios . post ( \"http://something.com/\" , querystring . stringify ({ foo : \"bar\" })); or 'URLSearchParams' from 'url module' as follows: JavaScript const url = require ( \"url\" ); const params = new url . URLSearchParams ({ foo : \"bar\" }); axios . post ( \"http://something.com/\" , params . toString ()); You can also use the qs library. NOTE: The qs library is preferable if you need to stringify nested objects, as the querystring method has known issues with that use case. \u8868\u5355\u6570\u636e \ud83c\udd95 \u81ea\u52a8\u5e8f\u5217\u5316 Starting from v0.27.0 , Axios supports automatic object serialization to a FormData object if the request Content-Type header is set to multipart/form-data . The following request will submit the data in a FormData format (Browser & Node.js): JavaScript import axios from \"axios\" ; axios . post ( \"https://httpbin.org/post\" , { x : 1 }, { headers : { \"Content-Type\" : \"multipart/form-data\" , }, } ) . then (({ data }) => console . log ( data )); In the node.js build, the ( form-data ) polyfill is used by default. You can overload the FormData class by setting the env.FormData config variable, but you probably won't need it in most cases: JavaScript const axios = require ( \"axios\" ); var FormData = require ( \"form-data\" ); axios . post ( \"https://httpbin.org/post\" , { x : 1 , buf : new Buffer ( 10 ) }, { headers : { \"Content-Type\" : \"multipart/form-data\" , }, } ) . then (({ data }) => console . log ( data )); Axios FormData serializer supports some special endings to perform the following operations: {} - serialize the value with JSON.stringify [] - unwrap the array like object as separate fields with the same key JavaScript const axios = require ( \"axios\" ); axios . post ( \"https://httpbin.org/post\" , { \"myObj{}\" : { x : 1 , s : \"foo\" }, \"files[]\" : document . querySelector ( \"#fileInput\" ). files , }, { headers : { \"Content-Type\" : \"multipart/form-data\" , }, } ) . then (({ data }) => console . log ( data )); Axios supports the following shortcut methods: postForm , putForm , patchForm which are just the corresponding http methods with a header preset: Content-Type : multipart/form-data . FileList object can be passed directly: JavaScript await axios . postForm ( \"https://httpbin.org/post\" , document . querySelector ( \"#fileInput\" ). files ); All files will be sent with the same field names: files[] ; \u624b\u52a8 FormData \u4f20\u9012 In node.js, you can use the form-data library as follows: JavaScript const FormData = require ( \"form-data\" ); const form = new FormData (); form . append ( \"my_field\" , \"my value\" ); form . append ( \"my_buffer\" , new Buffer ( 10 )); form . append ( \"my_file\" , fs . createReadStream ( \"/foo/bar.jpg\" )); axios . post ( \"https://example.com\" , form ); Semver Until axios reaches a 1.0 release, breaking changes will be released with a new minor version. For example 0.5.1 , and 0.5.4 will have the same API, but 0.6.0 will have breaking changes. Promises axios depends on a native ES6 Promise implementation to be supported . If your environment doesn't support ES6 Promises, you can polyfill . TypeScript axios includes TypeScript definitions and a type guard for axios errors. TypeScript let user : User = null ; try { const { data } = await axios . get ( \"/user?ID=12345\" ); user = data . userDetails ; } catch ( error ) { if ( axios . isAxiosError ( error )) { handleAxiosError ( error ); } else { handleUnexpectedError ( error ); } } \u5728\u7ebf\u4e00\u952e\u8bbe\u7f6e \u60a8\u53ef\u4ee5\u4f7f\u7528 Gitpod \u4f5c\u4e3a\u4e00\u4e2a\u5728\u7ebf IDE(\u5bf9\u4e8e\u5f00\u653e\u6e90\u7801\u662f\u514d\u8d39\u7684)\u6765\u5728\u7ebf\u8d21\u732e\u6216\u8fd0\u884c\u793a\u4f8b\u3002 \u8d44\u6e90 Changelog Upgrade Guide Ecosystem Contributing Guide Code of Conduct \u529f\u52b3 axios \u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d7\u5230\u4e86 AngularJS \u4e2d\u63d0\u4f9b\u7684 $http \u670d\u52a1 \u7684\u542f\u53d1\u3002 \u6700\u7ec8\uff0caxios \u81f4\u529b\u4e8e\u63d0\u4f9b\u4e00\u4e2a\u72ec\u7acb\u7684\u3001\u7c7b\u4f3c\u4e8e\u201c$http\u201d\u7684\u670d\u52a1\uff0c\u4ee5\u4fbf\u5728 AngularJS \u4e4b\u5916\u4f7f\u7528\u3002 \u8bc1\u4e66 MIT","title":"axios"},{"location":"docs/http/axios/#_1","text":"Make XMLHttpRequests from the browser Make http requests from node.js Supports the Promise API Intercept request and response Transform request and response data Cancel requests Automatic transforms for JSON data Client side support for protecting against XSRF","title":"\u529f\u80fd"},{"location":"docs/http/axios/#_2","text":"Latest \u2714 Latest \u2714 Latest \u2714 Latest \u2714 Latest \u2714 11 \u2714","title":"\u6d4f\u89c8\u5668\u652f\u6301"},{"location":"docs/http/axios/#_3","text":"Using npm: Bash $ npm install axios Using bower: Bash $ bower install axios Using yarn: Bash $ yarn add axios Using jsDelivr CDN: HTML < script src = \"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\" ></ script > Using unpkg CDN: HTML < script src = \"https://unpkg.com/axios/dist/axios.min.js\" ></ script >","title":"\u5b89\u88c5"},{"location":"docs/http/axios/#_4","text":"","title":"\u793a\u4f8b"},{"location":"docs/http/axios/#note-commonjs-usage","text":"In order to gain the TypeScript typings (for intellisense / autocomplete) while using CommonJS imports with require() use the following approach: JavaScript const axios = require ( \"axios\" ). default ; // axios.<method> will now provide autocomplete and parameter typings Performing a GET request JavaScript const axios = require ( \"axios\" ). default ; // Make a request for a user with a given ID axios . get ( \"/user?ID=12345\" ) . then ( function ( response ) { // handle success console . log ( response ); }) . catch ( function ( error ) { // handle error console . log ( error ); }) . then ( function () { // always executed }); // Optionally the request above could also be done as axios . get ( \"/user\" , { params : { ID : 12345 , }, }) . then ( function ( response ) { console . log ( response ); }) . catch ( function ( error ) { console . log ( error ); }) . then ( function () { // always executed }); // Want to use async/await? Add the `async` keyword to your outer function/method. async function getUser () { try { const response = await axios . get ( \"/user?ID=12345\" ); console . log ( response ); } catch ( error ) { console . error ( error ); } } NOTE: async/await is part of ECMAScript 2017 and is not supported in Internet Explorer and older browsers, so use with caution. Performing a POST request JavaScript axios . post ( \"/user\" , { firstName : \"Fred\" , lastName : \"Flintstone\" , }) . then ( function ( response ) { console . log ( response ); }) . catch ( function ( error ) { console . log ( error ); }); Performing multiple concurrent requests JavaScript function getUserAccount () { return axios . get ( \"/user/12345\" ); } function getUserPermissions () { return axios . get ( \"/user/12345/permissions\" ); } Promise . all ([ getUserAccount (), getUserPermissions ()]). then ( function ( results ) { const acct = results [ 0 ]; const perm = results [ 1 ]; });","title":"note: CommonJS usage"},{"location":"docs/http/axios/#axios-api","text":"Requests can be made by passing the relevant config to axios .","title":"axios API"},{"location":"docs/http/axios/#axiosconfig","text":"JavaScript // Send a POST request axios ({ method : \"post\" , url : \"/user/12345\" , data : { firstName : \"Fred\" , lastName : \"Flintstone\" , }, }); JavaScript // GET request for remote image in node.js axios ({ method : \"get\" , url : \"http://bit.ly/2mTM3nY\" , responseType : \"stream\" , }). then ( function ( response ) { response . data . pipe ( fs . createWriteStream ( \"ada_lovelace.jpg\" )); });","title":"axios(config)"},{"location":"docs/http/axios/#axiosurl-config","text":"JavaScript // Send a GET request (default method) axios ( \"/user/12345\" );","title":"axios(url[, config])"},{"location":"docs/http/axios/#_5","text":"For convenience, aliases have been provided for all common request methods.","title":"\u8bf7\u6c42\u65b9\u6cd5\u7684\u522b\u540d"},{"location":"docs/http/axios/#axiosrequestconfig","text":"","title":"axios.request(config)"},{"location":"docs/http/axios/#axiosgeturl-config","text":"","title":"axios.get(url[, config])"},{"location":"docs/http/axios/#axiosdeleteurl-config","text":"","title":"axios.delete(url[, config])"},{"location":"docs/http/axios/#axiosheadurl-config","text":"","title":"axios.head(url[, config])"},{"location":"docs/http/axios/#axiosoptionsurl-config","text":"","title":"axios.options(url[, config])"},{"location":"docs/http/axios/#axiosposturl-data-config","text":"","title":"axios.post(url[, data[, config]])"},{"location":"docs/http/axios/#axiosputurl-data-config","text":"","title":"axios.put(url[, data[, config]])"},{"location":"docs/http/axios/#axiospatchurl-data-config","text":"","title":"axios.patch(url[, data[, config]])"},{"location":"docs/http/axios/#note","text":"When using the alias methods url , method , and data properties don't need to be specified in config.","title":"NOTE"},{"location":"docs/http/axios/#_6","text":"Please use Promise.all to replace the below functions. Helper functions for dealing with concurrent requests. axios.all(iterable) axios.spread(callback)","title":"\u5e76\u53d1\u6027(\u5f03\u7528)"},{"location":"docs/http/axios/#_7","text":"You can create a new instance of axios with a custom config.","title":"\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b"},{"location":"docs/http/axios/#axioscreateconfig","text":"JavaScript const instance = axios . create ({ baseURL : \"https://some-domain.com/api/\" , timeout : 1000 , headers : { \"X-Custom-Header\" : \"foobar\" }, });","title":"axios.create([config])"},{"location":"docs/http/axios/#_8","text":"The available instance methods are listed below. The specified config will be merged with the instance config.","title":"\u5b9e\u4f8b\u65b9\u6cd5"},{"location":"docs/http/axios/#axiosrequestconfig_1","text":"","title":"axios#request(config)"},{"location":"docs/http/axios/#axiosgeturl-config_1","text":"","title":"axios#get(url[, config])"},{"location":"docs/http/axios/#axiosdeleteurl-config_1","text":"","title":"axios#delete(url[, config])"},{"location":"docs/http/axios/#axiosheadurl-config_1","text":"","title":"axios#head(url[, config])"},{"location":"docs/http/axios/#axiosoptionsurl-config_1","text":"","title":"axios#options(url[, config])"},{"location":"docs/http/axios/#axiosposturl-data-config_1","text":"","title":"axios#post(url[, data[, config]])"},{"location":"docs/http/axios/#axiosputurl-data-config_1","text":"","title":"axios#put(url[, data[, config]])"},{"location":"docs/http/axios/#axiospatchurl-data-config_1","text":"","title":"axios#patch(url[, data[, config]])"},{"location":"docs/http/axios/#axiosgeturiconfig","text":"","title":"axios#getUri([config])"},{"location":"docs/http/axios/#_9","text":"These are the available config options for making requests. Only the url is required. Requests will default to GET if method is not specified. JavaScript { // `url` is the server URL that will be used for the request url : '/user' , // `method` is the request method to be used when making the request method : 'get' , // default // `baseURL` will be prepended to `url` unless `url` is absolute. // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs // to methods of that instance. baseURL : 'https://some-domain.com/api/' , // `transformRequest` allows changes to the request data before it is sent to the server // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE' // The last function in the array must return a string or an instance of Buffer, ArrayBuffer, // FormData or Stream // You may modify the headers object. transformRequest : [ function ( data , headers ) { // Do whatever you want to transform the data return data ; }], // `transformResponse` allows changes to the response data to be made before // it is passed to then/catch transformResponse : [ function ( data ) { // Do whatever you want to transform the data return data ; }], // `headers` are custom headers to be sent headers : { 'X-Requested-With' : 'XMLHttpRequest' }, // `params` are the URL parameters to be sent with the request // Must be a plain object or a URLSearchParams object params : { ID : 12345 }, // `paramsSerializer` is an optional function in charge of serializing `params` // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/) paramsSerializer : function ( params ) { return Qs . stringify ( params , { arrayFormat : 'brackets' }) }, // `data` is the data to be sent as the request body // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH' // When no `transformRequest` is set, must be of one of the following types: // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams // - Browser only: FormData, File, Blob // - Node only: Stream, Buffer data : { firstName : 'Fred' }, // syntax alternative to send data into the body // method post // only the value is sent, not the key data : 'Country=Brasil&City=Belo Horizonte' , // `timeout` specifies the number of milliseconds before the request times out. // If the request takes longer than `timeout`, the request will be aborted. timeout : 1000 , // default is `0` (no timeout) // `withCredentials` indicates whether or not cross-site Access-Control requests // should be made using credentials withCredentials : false , // default // `adapter` allows custom handling of requests which makes testing easier. // Return a promise and supply a valid response (see lib/adapters/README.md). adapter : function ( config ) { /* ... */ }, // `auth` indicates that HTTP Basic auth should be used, and supplies credentials. // This will set an `Authorization` header, overwriting any existing // `Authorization` custom headers you have set using `headers`. // Please note that only HTTP Basic auth is configurable through this parameter. // For Bearer tokens and such, use `Authorization` custom headers instead. auth : { username : 'janedoe' , password : 's00pers3cret' }, // `responseType` indicates the type of data that the server will respond with // options are: 'arraybuffer', 'document', 'json', 'text', 'stream' // browser only: 'blob' responseType : 'json' , // default // `responseEncoding` indicates encoding to use for decoding responses (Node.js only) // Note: Ignored for `responseType` of 'stream' or client-side requests responseEncoding : 'utf8' , // default // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token xsrfCookieName : 'XSRF-TOKEN' , // default // `xsrfHeaderName` is the name of the http header that carries the xsrf token value xsrfHeaderName : 'X-XSRF-TOKEN' , // default // `onUploadProgress` allows handling of progress events for uploads // browser only onUploadProgress : function ( progressEvent ) { // Do whatever you want with the native progress event }, // `onDownloadProgress` allows handling of progress events for downloads // browser only onDownloadProgress : function ( progressEvent ) { // Do whatever you want with the native progress event }, // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js maxContentLength : 2000 , // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed maxBodyLength : 2000 , // `validateStatus` defines whether to resolve or reject the promise for a given // HTTP response status code. If `validateStatus` returns `true` (or is set to `null` // or `undefined`), the promise will be resolved; otherwise, the promise will be // rejected. validateStatus : function ( status ) { return status >= 200 && status < 300 ; // default }, // `maxRedirects` defines the maximum number of redirects to follow in node.js. // If set to 0, no redirects will be followed. maxRedirects : 21 , // default // `beforeRedirect` defines a function that will be called before redirect. // Use this to adjust the request options upon redirecting, // to inspect the latest response headers, // or to cancel the request by throwing an error // If maxRedirects is set to 0, `beforeRedirect` is not used. beforeRedirect : ( options , { headers }) => { if ( options . hostname === \"example.com\" ) { options . auth = \"user:password\" ; } }; // `socketPath` defines a UNIX Socket to be used in node.js. // e.g. '/var/run/docker.sock' to send requests to the docker daemon. // Only either `socketPath` or `proxy` can be specified. // If both are specified, `socketPath` is used. socketPath : null , // default // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http // and https requests, respectively, in node.js. This allows options to be added like // `keepAlive` that are not enabled by default. httpAgent : new http . Agent ({ keepAlive : true }), httpsAgent : new https . Agent ({ keepAlive : true }), // `proxy` defines the hostname, port, and protocol of the proxy server. // You can also define your proxy using the conventional `http_proxy` and // `https_proxy` environment variables. If you are using environment variables // for your proxy configuration, you can also define a `no_proxy` environment // variable as a comma-separated list of domains that should not be proxied. // Use `false` to disable proxies, ignoring environment variables. // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and // supplies credentials. // This will set an `Proxy-Authorization` header, overwriting any existing // `Proxy-Authorization` custom headers you have set using `headers`. // If the proxy server uses HTTPS, then you must set the protocol to `https`. proxy : { protocol : 'https' , host : '127.0.0.1' , port : 9000 , auth : { username : 'mikeymike' , password : 'rapunz3l' } }, // `cancelToken` specifies a cancel token that can be used to cancel the request // (see Cancellation section below for details) cancelToken : new CancelToken ( function ( cancel ) { }), // an alternative way to cancel Axios requests using AbortController signal : new AbortController (). signal , // `decompress` indicates whether or not the response body should be decompressed // automatically. If set to `true` will also remove the 'content-encoding' header // from the responses objects of all decompressed responses // - Node only (XHR cannot turn off decompression) decompress : true // default // `insecureHTTPParser` boolean. // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers. // This may allow interoperability with non-conformant HTTP implementations. // Using the insecure parser should be avoided. // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none insecureHTTPParser : undefined // default // transitional options for backward compatibility that may be removed in the newer versions transitional : { // silent JSON parsing mode // `true` - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour) // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json') silentJSONParsing : true , // default value for the current Axios version // try to parse the response string as JSON even if `responseType` is not 'json' forcedJSONParsing : true , // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts clarifyTimeoutError : false , }, env : { // The FormData class to be used to automatically serialize the payload into a FormData object FormData : window ? . FormData || global ? . FormData } }","title":"\u8bf7\u6c42\u914d\u7f6e"},{"location":"docs/http/axios/#_10","text":"The response for a request contains the following information. JavaScript { // `data` is the response that was provided by the server data : {}, // `status` is the HTTP status code from the server response status : 200 , // `statusText` is the HTTP status message from the server response statusText : 'OK' , // `headers` the HTTP headers that the server responded with // All header names are lower cased and can be accessed using the bracket notation. // Example: `response.headers['content-type']` headers : {}, // `config` is the config that was provided to `axios` for the request config : {}, // `request` is the request that generated this response // It is the last ClientRequest instance in node.js (in redirects) // and an XMLHttpRequest instance in the browser request : {} } When using then , you will receive the response as follows: JavaScript axios . get ( \"/user/12345\" ). then ( function ( response ) { console . log ( response . data ); console . log ( response . status ); console . log ( response . statusText ); console . log ( response . headers ); console . log ( response . config ); }); When using catch , or passing a rejection callback as second parameter of then , the response will be available through the error object as explained in the Handling Errors section.","title":"\u54cd\u5e94\u6a21\u5f0f"},{"location":"docs/http/axios/#_11","text":"\u60a8\u53ef\u4ee5\u6307\u5b9a\u5c06\u5e94\u7528\u4e8e\u6bcf\u4e2a\u8bf7\u6c42\u7684\u9ed8\u8ba4\u914d\u7f6e\u3002","title":"\u914d\u7f6e\u9ed8\u8ba4"},{"location":"docs/http/axios/#axios","text":"JavaScript axios . defaults . baseURL = \"https://api.example.com\" ; // Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them. // See below for an example using Custom instance defaults instead. axios . defaults . headers . common [ \"Authorization\" ] = AUTH_TOKEN ; axios . defaults . headers . post [ \"Content-Type\" ] = \"application/x-www-form-urlencoded\" ;","title":"\u5168\u5c40 axios \u9ed8\u8ba4"},{"location":"docs/http/axios/#_12","text":"JavaScript // Set config defaults when creating the instance const instance = axios . create ({ baseURL : \"https://api.example.com\" , }); // Alter defaults after instance has been created instance . defaults . headers . common [ \"Authorization\" ] = AUTH_TOKEN ;","title":"\u81ea\u5b9a\u4e49\u5b9e\u4f8b\u9ed8\u8ba4"},{"location":"docs/http/axios/#_13","text":"Config will be merged with an order of precedence. The order is library defaults found in lib/defaults.js , then defaults property of the instance, and finally config argument for the request. The latter will take precedence over the former. Here's an example. JavaScript // Create an instance using the config defaults provided by the library // At this point the timeout config value is `0` as is the default for the library const instance = axios . create (); // Override timeout default for the library // Now all requests using this instance will wait 2.5 seconds before timing out instance . defaults . timeout = 2500 ; // Override timeout for this request as it's known to take a long time instance . get ( \"/longRequest\" , { timeout : 5000 , });","title":"\u914d\u7f6e\u4f18\u5148\u987a\u5e8f"},{"location":"docs/http/axios/#_14","text":"You can intercept requests or responses before they are handled by then or catch . JavaScript // Add a request interceptor axios . interceptors . request . use ( function ( config ) { // Do something before request is sent return config ; }, function ( error ) { // Do something with request error return Promise . reject ( error ); } ); // Add a response interceptor axios . interceptors . response . use ( function ( response ) { // Any status code that lie within the range of 2xx cause this function to trigger // Do something with response data return response ; }, function ( error ) { // Any status codes that falls outside the range of 2xx cause this function to trigger // Do something with response error return Promise . reject ( error ); } ); If you need to remove an interceptor later you can. JavaScript const myInterceptor = axios . interceptors . request . use ( function () { /*...*/ }); axios . interceptors . request . eject ( myInterceptor ); You can add interceptors to a custom instance of axios. JavaScript const instance = axios . create (); instance . interceptors . request . use ( function () { /*...*/ }); When you add request interceptors, they are presumed to be asynchronous by default. This can cause a delay in the execution of your axios request when the main thread is blocked (a promise is created under the hood for the interceptor and your request gets put on the bottom of the call stack). If your request interceptors are synchronous you can add a flag to the options object that will tell axios to run the code synchronously and avoid any delays in request execution. JavaScript axios . interceptors . request . use ( function ( config ) { config . headers . test = \"I am only a header!\" ; return config ; }, null , { synchronous : true } ); If you want to execute a particular interceptor based on a runtime check, you can add a runWhen function to the options object. The interceptor will not be executed if and only if the return of runWhen is false . The function will be called with the config object (don't forget that you can bind your own arguments to it as well.) This can be handy when you have an asynchronous request interceptor that only needs to run at certain times. JavaScript function onGetCall ( config ) { return config . method === \"get\" ; } axios . interceptors . request . use ( function ( config ) { config . headers . test = \"special get headers\" ; return config ; }, null , { runWhen : onGetCall } );","title":"\u62e6\u622a\u5668"},{"location":"docs/http/axios/#_15","text":"Given you add multiple response interceptors and when the response was fulfilled then each interceptor is executed then they are executed in the order they were added then only the last interceptor's result is returned then every interceptor receives the result of it's predecessor and when the fulfillment-interceptor throws then the following fulfillment-interceptor is not called then the following rejection-interceptor is called once caught, another following fulfill-interceptor is called again (just like in a promise chain). Read the interceptor tests for seeing all this in code.","title":"\u591a\u4e2a\u62e6\u622a\u5668"},{"location":"docs/http/axios/#_16","text":"JavaScript axios . get ( \"/user/12345\" ). catch ( function ( error ) { if ( error . response ) { // The request was made and the server responded with a status code // that falls out of the range of 2xx console . log ( error . response . data ); console . log ( error . response . status ); console . log ( error . response . headers ); } else if ( error . request ) { // The request was made but no response was received // `error.request` is an instance of XMLHttpRequest in the browser and an instance of // http.ClientRequest in node.js console . log ( error . request ); } else { // Something happened in setting up the request that triggered an Error console . log ( \"Error\" , error . message ); } console . log ( error . config ); }); Using the validateStatus config option, you can define HTTP code(s) that should throw an error. JavaScript axios . get ( \"/user/12345\" , { validateStatus : function ( status ) { return status < 500 ; // Resolve only if the status code is less than 500 }, }); Using toJSON you get an object with more information about the HTTP error. JavaScript axios . get ( \"/user/12345\" ). catch ( function ( error ) { console . log ( error . toJSON ()); });","title":"\u5904\u7406\u9519\u8bef"},{"location":"docs/http/axios/#_17","text":"","title":"\u53d6\u6d88"},{"location":"docs/http/axios/#abortcontroller","text":"Starting from v0.22.0 Axios supports AbortController to cancel requests in fetch API way: JavaScript const controller = new AbortController (); axios . get ( \"/foo/bar\" , { signal : controller . signal , }) . then ( function ( response ) { //... }); // cancel the request controller . abort ();","title":"AbortController"},{"location":"docs/http/axios/#canceltoken-deprecated","text":"You can also cancel a request using a CancelToken . The axios cancel token API is based on the withdrawn cancelable promises proposal . This API is deprecated since v0.22.0 and shouldn't be used in new projects You can create a cancel token using the CancelToken.source factory as shown below: JavaScript const CancelToken = axios . CancelToken ; const source = CancelToken . source (); axios . get ( \"/user/12345\" , { cancelToken : source . token , }) . catch ( function ( thrown ) { if ( axios . isCancel ( thrown )) { console . log ( \"Request canceled\" , thrown . message ); } else { // handle error } }); axios . post ( \"/user/12345\" , { name : \"new name\" , }, { cancelToken : source . token , } ); // cancel the request (the message parameter is optional) source . cancel ( \"Operation canceled by the user.\" ); You can also create a cancel token by passing an executor function to the CancelToken constructor: JavaScript const CancelToken = axios . CancelToken ; let cancel ; axios . get ( \"/user/12345\" , { cancelToken : new CancelToken ( function executor ( c ) { // An executor function receives a cancel function as a parameter cancel = c ; }), }); // cancel the request cancel (); Note: you can cancel several requests with the same cancel token/abort controller. If a cancellation token is already cancelled at the moment of starting an Axios request, then the request is cancelled immediately, without any attempts to make real request. During the transition period, you can use both cancellation APIs, even for the same request:","title":"CancelToken \ud83d\udc4edeprecated"},{"location":"docs/http/axios/#applicationx-www-form-urlencoded","text":"By default, axios serializes JavaScript objects to JSON . To send data in the application/x-www-form-urlencoded format instead, you can use one of the following options.","title":"\u4f7f\u7528 application/x-www-form-urlencoded \u683c\u5f0f"},{"location":"docs/http/axios/#_18","text":"In a browser, you can use the URLSearchParams API as follows: JavaScript const params = new URLSearchParams (); params . append ( \"param1\" , \"value1\" ); params . append ( \"param2\" , \"value2\" ); axios . post ( \"/foo\" , params ); Note that URLSearchParams is not supported by all browsers (see caniuse.com ), but there is a polyfill available (make sure to polyfill the global environment). Alternatively, you can encode data using the qs library: JavaScript const qs = require ( \"qs\" ); axios . post ( \"/foo\" , qs . stringify ({ bar : 123 })); Or in another way (ES6), JavaScript import qs from \"qs\" ; const data = { bar : 123 }; const options = { method : \"POST\" , headers : { \"content-type\" : \"application/x-www-form-urlencoded\" }, data : qs . stringify ( data ), url , }; axios ( options );","title":"\u6d4f\u89c8\u5668"},{"location":"docs/http/axios/#nodejs","text":"","title":"Node.js"},{"location":"docs/http/axios/#_19","text":"In node.js, you can use the querystring module as follows: JavaScript const querystring = require ( \"querystring\" ); axios . post ( \"http://something.com/\" , querystring . stringify ({ foo : \"bar\" })); or 'URLSearchParams' from 'url module' as follows: JavaScript const url = require ( \"url\" ); const params = new url . URLSearchParams ({ foo : \"bar\" }); axios . post ( \"http://something.com/\" , params . toString ()); You can also use the qs library. NOTE: The qs library is preferable if you need to stringify nested objects, as the querystring method has known issues with that use case.","title":"\u67e5\u8be2\u5b57\u7b26\u4e32"},{"location":"docs/http/axios/#_20","text":"","title":"\u8868\u5355\u6570\u636e"},{"location":"docs/http/axios/#_21","text":"Starting from v0.27.0 , Axios supports automatic object serialization to a FormData object if the request Content-Type header is set to multipart/form-data . The following request will submit the data in a FormData format (Browser & Node.js): JavaScript import axios from \"axios\" ; axios . post ( \"https://httpbin.org/post\" , { x : 1 }, { headers : { \"Content-Type\" : \"multipart/form-data\" , }, } ) . then (({ data }) => console . log ( data )); In the node.js build, the ( form-data ) polyfill is used by default. You can overload the FormData class by setting the env.FormData config variable, but you probably won't need it in most cases: JavaScript const axios = require ( \"axios\" ); var FormData = require ( \"form-data\" ); axios . post ( \"https://httpbin.org/post\" , { x : 1 , buf : new Buffer ( 10 ) }, { headers : { \"Content-Type\" : \"multipart/form-data\" , }, } ) . then (({ data }) => console . log ( data )); Axios FormData serializer supports some special endings to perform the following operations: {} - serialize the value with JSON.stringify [] - unwrap the array like object as separate fields with the same key JavaScript const axios = require ( \"axios\" ); axios . post ( \"https://httpbin.org/post\" , { \"myObj{}\" : { x : 1 , s : \"foo\" }, \"files[]\" : document . querySelector ( \"#fileInput\" ). files , }, { headers : { \"Content-Type\" : \"multipart/form-data\" , }, } ) . then (({ data }) => console . log ( data )); Axios supports the following shortcut methods: postForm , putForm , patchForm which are just the corresponding http methods with a header preset: Content-Type : multipart/form-data . FileList object can be passed directly: JavaScript await axios . postForm ( \"https://httpbin.org/post\" , document . querySelector ( \"#fileInput\" ). files ); All files will be sent with the same field names: files[] ;","title":"\ud83c\udd95 \u81ea\u52a8\u5e8f\u5217\u5316"},{"location":"docs/http/axios/#formdata","text":"In node.js, you can use the form-data library as follows: JavaScript const FormData = require ( \"form-data\" ); const form = new FormData (); form . append ( \"my_field\" , \"my value\" ); form . append ( \"my_buffer\" , new Buffer ( 10 )); form . append ( \"my_file\" , fs . createReadStream ( \"/foo/bar.jpg\" )); axios . post ( \"https://example.com\" , form );","title":"\u624b\u52a8 FormData \u4f20\u9012"},{"location":"docs/http/axios/#semver","text":"Until axios reaches a 1.0 release, breaking changes will be released with a new minor version. For example 0.5.1 , and 0.5.4 will have the same API, but 0.6.0 will have breaking changes.","title":"Semver"},{"location":"docs/http/axios/#promises","text":"axios depends on a native ES6 Promise implementation to be supported . If your environment doesn't support ES6 Promises, you can polyfill .","title":"Promises"},{"location":"docs/http/axios/#typescript","text":"axios includes TypeScript definitions and a type guard for axios errors. TypeScript let user : User = null ; try { const { data } = await axios . get ( \"/user?ID=12345\" ); user = data . userDetails ; } catch ( error ) { if ( axios . isAxiosError ( error )) { handleAxiosError ( error ); } else { handleUnexpectedError ( error ); } }","title":"TypeScript"},{"location":"docs/http/axios/#_22","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528 Gitpod \u4f5c\u4e3a\u4e00\u4e2a\u5728\u7ebf IDE(\u5bf9\u4e8e\u5f00\u653e\u6e90\u7801\u662f\u514d\u8d39\u7684)\u6765\u5728\u7ebf\u8d21\u732e\u6216\u8fd0\u884c\u793a\u4f8b\u3002","title":"\u5728\u7ebf\u4e00\u952e\u8bbe\u7f6e"},{"location":"docs/http/axios/#_23","text":"Changelog Upgrade Guide Ecosystem Contributing Guide Code of Conduct","title":"\u8d44\u6e90"},{"location":"docs/http/axios/#_24","text":"axios \u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d7\u5230\u4e86 AngularJS \u4e2d\u63d0\u4f9b\u7684 $http \u670d\u52a1 \u7684\u542f\u53d1\u3002 \u6700\u7ec8\uff0caxios \u81f4\u529b\u4e8e\u63d0\u4f9b\u4e00\u4e2a\u72ec\u7acb\u7684\u3001\u7c7b\u4f3c\u4e8e\u201c$http\u201d\u7684\u670d\u52a1\uff0c\u4ee5\u4fbf\u5728 AngularJS \u4e4b\u5916\u4f7f\u7528\u3002","title":"\u529f\u52b3"},{"location":"docs/http/axios/#_25","text":"MIT","title":"\u8bc1\u4e66"},{"location":"docs/http/nest-axios-interceptor/","text":"https://github.com/narando/nest-axios-interceptor \u4e3a NestJS HttpModule/HttpService \u8f7b\u677e\u6784\u5efa\u548c\u914d\u7f6e axios \u62e6\u622a\u5668 \u3002 \u7279\u6027 \u5b9a\u4e49 axios \u62e6\u622a\u5668 HttpService.axiosRef \u4e0a\u7684\u6ce8\u518c\u62e6\u622a\u5668 \u8bf7\u6c42\u914d\u7f6e\u4e2d\u81ea\u5b9a\u4e49\u9009\u9879\u7684\u7c7b\u578b\u5b89\u5168\u5904\u7406 \u4f7f\u7528 \u26a0\ufe0f \u5982\u679c\u4f60\u60f3\u5728 NestJS \u7248\u672c 6 \u6216 7 \u4e2d\u4f7f\u7528@narando/nest-axios-interceptor\uff0c\u8bf7\u4f7f\u7528 v1 \u7248\u672c\u3002 v2 \u7248\u672c\u53ea\u517c\u5bb9 NestJS Version 8 \u548c@nestjs/axios \u5305\u3002 \u5b89\u88c5 \u5b89\u88c5\u8fd9\u4e2a\u6a21\u5757: Bash $ npm i @narando/nest-axios-interceptor \u521b\u5efa\u4e00\u4e2a AxiosInterceptor \u521b\u5efa\u4e00\u4e2a\u65b0\u6a21\u5757\u5e76\u5bfc\u5165 HttpModule : TypeScript // cats.module.ts import { HttpModule , HttpService } from \"@nestjs/axios\" ; @Module ({ imports : [ HttpModule ], providers : [ HttpService ], }) export class CatsModule {} \u7528\u8fd9\u4e2a\u6837\u677f\u6587\u4ef6\u5f15\u5bfc\u4f60\u7684\u65b0\u62e6\u622a\u5668: TypeScript // logging.axios-interceptor.ts import { Injectable } from \"@nestjs/common\" ; import { HttpService } from \"@nestjs/axios\" ; import type { AxiosRequestConfig , AxiosResponse } from \"axios\" ; import { AxiosInterceptor , AxiosFulfilledInterceptor , AxiosRejectedInterceptor } from \"@narando/nest-axios-interceptor\" ; @Injectable () export class LoggingAxiosInterceptor extends AxiosInterceptor { constructor ( httpService : HttpService ) { super ( httpService ); } // requestFulfilled(): AxiosFulfilledInterceptor<AxiosRequestConfig> {} // requestRejected(): AxiosRejectedInterceptor {} // responseFulfilled(): AxiosFulfilledInterceptor<AxiosResponse> {} // responseRejected(): AxiosRejectedInterceptor {} } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u62e6\u622a\u5668\u4e3a\u6240\u6709 4 \u4e2a\u53ef\u80fd\u7684\u4e8b\u4ef6\u4f7f\u7528\u6807\u8bc6\u51fd\u6570(no-op)\u3002 \u8981\u6dfb\u52a0\u60a8\u7684\u884c\u4e3a\uff0c\u8986\u76d6\u60a8\u60f3\u8981\u5904\u7406\u7684\u4e8b\u4ef6\u7684\u7c7b\u65b9\u6cd5\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5c06\u5728\u62e6\u622a\u5668\u4e2d\u4f7f\u7528\u7684\u51fd\u6570\u3002 TypeScript // logging.axios-interceptor.ts @Injectable () export class LoggingAxiosInterceptor extends AxiosInterceptor { constructor ( httpService : HttpService ) { super ( httpService ); } requestFulfilled () : AxiosFulfilledInterceptor < AxiosRequestConfig > { return ( config ) => { // Log outgoing request console . log ( `Request: ${ config . method } ${ config . path } ` ); return config ; }; } // requestRejected(): AxiosRejectedInterceptor {} // responseFulfilled(): AxiosFulfilledInterceptor<AxiosResponse> {} // responseRejected(): AxiosRejectedInterceptor {} } \u4e3a\u8bf7\u6c42\u914d\u7f6e\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u9009\u9879 \u5982\u679c\u4f60\u60f3\u628a\u6570\u636e\u4ece\u4e00\u4e2a\u62e6\u622a\u5668\u4f20\u9012\u5230\u53e6\u4e00\u4e2a\u62e6\u622a\u5668\uff0c\u628a\u5b83\u6dfb\u52a0\u5230\u8bf7\u6c42\u914d\u7f6e\u5bf9\u8c61\u4e2d\u3002 \u9996\u5148\uff0c\u5b9a\u4e49\u65b0\u7684\u8bf7\u6c42\u914d\u7f6e\u7c7b\u578b\u3002\u4e3a\u4e86\u907f\u514d\u4e0e\u5176\u4ed6\u62e6\u622a\u5668\u7684\u51b2\u7a81\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u4e00\u4e2a Symbol\uff0c\u5e76\u5c06\u5176\u7528\u4f5c object \u7684\u952e: TypeScript // logging.axios-interceptor.ts const LOGGING_CONFIG_KEY = Symbol ( \"kLoggingAxiosInterceptor\" ); // Merging our custom properties with the base config interface LoggingConfig extends AxiosRequestConfig { [ LOGGING_CONFIG_KEY ] : { id : number ; }; } \u73b0\u5728\u6211\u4eec\u5fc5\u987b\u66f4\u65b0\u62e6\u622a\u5668\u6765\u4f7f\u7528\u8fd9\u4e2a\u65b0\u7684\u914d\u7f6e: Diff // logging.axios-interceptor.ts @Injectable() - export class LoggingAxiosInterceptor extends AxiosInterceptor { + export class LoggingAxiosInterceptor extends AxiosInterceptor<LoggingConfig> { constructor(httpService: HttpService) { super(httpService); } - requestFulfilled(): AxiosFulfilledInterceptor<AxiosRequestConfig> { + requestFulfilled(): AxiosFulfilledInterceptor<LoggingConfig> { return (config) => { // Log outgoing request console.log(`Request: ${config.method} ${config.path}`); return config; }; } // requestRejected(): AxiosRejectedInterceptor {} - // responseFulfilled(): AxiosFulfilledInterceptor<AxiosResponse> {} + // responseFulfilled(): AxiosFulfilledInterceptor<AxiosResponseCustomConfig<LoggingConfig>> {} // responseRejected(): AxiosRejectedInterceptor {} } \u6709\u4e86\u66f4\u65b0\u7684\u7c7b\u578b\uff0c\u4f60\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u6269\u5c55\u914d\u7f6e: TypeScript // logging.axios-interceptor.ts const LOGGING_CONFIG_KEY = Symbol ( \"kLoggingAxiosInterceptor\" ); @Injectable () export class LoggingAxiosInterceptor extends AxiosInterceptor < LoggingConfig > { constructor ( httpService : HttpService ) { super ( httpService ); } requestFulfilled () : AxiosFulfilledInterceptor < LoggingConfig > { return ( config ) => { const requestId = 1234 ; config [ LOGGING_CONFIG_KEY ] = { id : requestId , }; // Log outgoing request console . log ( `Request(ID= ${ requestId } ): ${ config . method } ${ config . path } ` ); return config ; }; } // requestRejected(): AxiosRejectedInterceptor {} responseFulfilled () : AxiosFulfilledInterceptor < AxiosResponseCustomConfig < LoggingConfig >> { return ( response ) => { const requestId = response . config [ LOGGING_CONFIG_KEY ]. id ; // Log response console . log ( `Response(ID= ${ requestId } ): ${ response . status } ` ); return response ; }; } // responseRejected(): AxiosRejectedInterceptor {} } \u5904\u7406\u9519\u8bef \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0caxios error (rejected)\u62e6\u622a\u5668\u4f20\u9012\u7c7b\u578b\u4e3a any \u7684\u9519\u8bef\u3002\u8fd9\u5e76\u4e0d\u662f\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u7528\u5b83\u505a\u4efb\u4f55\u4e8b\u60c5\u3002 \u5728\u5185\u90e8\uff0c axios \u5c06\u6240\u6709\u9519\u8bef\u5c01\u88c5\u5728\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5bf9\u8c61 AxiosError \u4e2d\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u65b9\u6cd5 isAxiosError \u6765\u65ad\u8a00\u4f20\u9012\u7684\u9519\u8bef\u786e\u5b9e\u662f AxiosError \u7c7b\u578b\u7684\uff0c\u7136\u540e\u6309\u6211\u4eec\u60f3\u8981\u7684\u65b9\u5f0f\u5904\u7406\u5b83: TypeScript // logging.axios-interceptor.ts @Injectable () export class LoggingAxiosInterceptor extends AxiosInterceptor { constructor ( httpService : HttpService ) { super ( httpService ); } // requestFulfilled(): AxiosFulfilledInterceptor<AxiosRequestConfig> {} // requestRejected(): AxiosRejectedInterceptor {} // responseFulfilled(): AxiosFulfilledInterceptor<AxiosResponse> {} responseRejected () : AxiosRejectedInterceptor { return ( err ) => { if ( this . isAxiosError ( err )) { const { config , response } = err ; console . log ( `Error ${ response . status } in request \" ${ config . method } ${ config . path } ` ); } else { console . error ( \"Unexpected generic error\" , err ); } throw err ; }; } } \u8bb8\u53ef\u8bc1 \u6b64\u5b58\u50a8\u5e93\u662f\u5728 MIT License \u4e0b\u53d1\u5e03\u7684\u3002","title":"@narando/nest-axios-interceptor"},{"location":"docs/http/nest-axios-interceptor/#_1","text":"\u5b9a\u4e49 axios \u62e6\u622a\u5668 HttpService.axiosRef \u4e0a\u7684\u6ce8\u518c\u62e6\u622a\u5668 \u8bf7\u6c42\u914d\u7f6e\u4e2d\u81ea\u5b9a\u4e49\u9009\u9879\u7684\u7c7b\u578b\u5b89\u5168\u5904\u7406","title":"\u7279\u6027"},{"location":"docs/http/nest-axios-interceptor/#_2","text":"\u26a0\ufe0f \u5982\u679c\u4f60\u60f3\u5728 NestJS \u7248\u672c 6 \u6216 7 \u4e2d\u4f7f\u7528@narando/nest-axios-interceptor\uff0c\u8bf7\u4f7f\u7528 v1 \u7248\u672c\u3002 v2 \u7248\u672c\u53ea\u517c\u5bb9 NestJS Version 8 \u548c@nestjs/axios \u5305\u3002","title":"\u4f7f\u7528"},{"location":"docs/http/nest-axios-interceptor/#_3","text":"\u5b89\u88c5\u8fd9\u4e2a\u6a21\u5757: Bash $ npm i @narando/nest-axios-interceptor","title":"\u5b89\u88c5"},{"location":"docs/http/nest-axios-interceptor/#axiosinterceptor","text":"\u521b\u5efa\u4e00\u4e2a\u65b0\u6a21\u5757\u5e76\u5bfc\u5165 HttpModule : TypeScript // cats.module.ts import { HttpModule , HttpService } from \"@nestjs/axios\" ; @Module ({ imports : [ HttpModule ], providers : [ HttpService ], }) export class CatsModule {} \u7528\u8fd9\u4e2a\u6837\u677f\u6587\u4ef6\u5f15\u5bfc\u4f60\u7684\u65b0\u62e6\u622a\u5668: TypeScript // logging.axios-interceptor.ts import { Injectable } from \"@nestjs/common\" ; import { HttpService } from \"@nestjs/axios\" ; import type { AxiosRequestConfig , AxiosResponse } from \"axios\" ; import { AxiosInterceptor , AxiosFulfilledInterceptor , AxiosRejectedInterceptor } from \"@narando/nest-axios-interceptor\" ; @Injectable () export class LoggingAxiosInterceptor extends AxiosInterceptor { constructor ( httpService : HttpService ) { super ( httpService ); } // requestFulfilled(): AxiosFulfilledInterceptor<AxiosRequestConfig> {} // requestRejected(): AxiosRejectedInterceptor {} // responseFulfilled(): AxiosFulfilledInterceptor<AxiosResponse> {} // responseRejected(): AxiosRejectedInterceptor {} } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u62e6\u622a\u5668\u4e3a\u6240\u6709 4 \u4e2a\u53ef\u80fd\u7684\u4e8b\u4ef6\u4f7f\u7528\u6807\u8bc6\u51fd\u6570(no-op)\u3002 \u8981\u6dfb\u52a0\u60a8\u7684\u884c\u4e3a\uff0c\u8986\u76d6\u60a8\u60f3\u8981\u5904\u7406\u7684\u4e8b\u4ef6\u7684\u7c7b\u65b9\u6cd5\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5c06\u5728\u62e6\u622a\u5668\u4e2d\u4f7f\u7528\u7684\u51fd\u6570\u3002 TypeScript // logging.axios-interceptor.ts @Injectable () export class LoggingAxiosInterceptor extends AxiosInterceptor { constructor ( httpService : HttpService ) { super ( httpService ); } requestFulfilled () : AxiosFulfilledInterceptor < AxiosRequestConfig > { return ( config ) => { // Log outgoing request console . log ( `Request: ${ config . method } ${ config . path } ` ); return config ; }; } // requestRejected(): AxiosRejectedInterceptor {} // responseFulfilled(): AxiosFulfilledInterceptor<AxiosResponse> {} // responseRejected(): AxiosRejectedInterceptor {} }","title":"\u521b\u5efa\u4e00\u4e2a AxiosInterceptor"},{"location":"docs/http/nest-axios-interceptor/#_4","text":"\u5982\u679c\u4f60\u60f3\u628a\u6570\u636e\u4ece\u4e00\u4e2a\u62e6\u622a\u5668\u4f20\u9012\u5230\u53e6\u4e00\u4e2a\u62e6\u622a\u5668\uff0c\u628a\u5b83\u6dfb\u52a0\u5230\u8bf7\u6c42\u914d\u7f6e\u5bf9\u8c61\u4e2d\u3002 \u9996\u5148\uff0c\u5b9a\u4e49\u65b0\u7684\u8bf7\u6c42\u914d\u7f6e\u7c7b\u578b\u3002\u4e3a\u4e86\u907f\u514d\u4e0e\u5176\u4ed6\u62e6\u622a\u5668\u7684\u51b2\u7a81\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u4e00\u4e2a Symbol\uff0c\u5e76\u5c06\u5176\u7528\u4f5c object \u7684\u952e: TypeScript // logging.axios-interceptor.ts const LOGGING_CONFIG_KEY = Symbol ( \"kLoggingAxiosInterceptor\" ); // Merging our custom properties with the base config interface LoggingConfig extends AxiosRequestConfig { [ LOGGING_CONFIG_KEY ] : { id : number ; }; } \u73b0\u5728\u6211\u4eec\u5fc5\u987b\u66f4\u65b0\u62e6\u622a\u5668\u6765\u4f7f\u7528\u8fd9\u4e2a\u65b0\u7684\u914d\u7f6e: Diff // logging.axios-interceptor.ts @Injectable() - export class LoggingAxiosInterceptor extends AxiosInterceptor { + export class LoggingAxiosInterceptor extends AxiosInterceptor<LoggingConfig> { constructor(httpService: HttpService) { super(httpService); } - requestFulfilled(): AxiosFulfilledInterceptor<AxiosRequestConfig> { + requestFulfilled(): AxiosFulfilledInterceptor<LoggingConfig> { return (config) => { // Log outgoing request console.log(`Request: ${config.method} ${config.path}`); return config; }; } // requestRejected(): AxiosRejectedInterceptor {} - // responseFulfilled(): AxiosFulfilledInterceptor<AxiosResponse> {} + // responseFulfilled(): AxiosFulfilledInterceptor<AxiosResponseCustomConfig<LoggingConfig>> {} // responseRejected(): AxiosRejectedInterceptor {} } \u6709\u4e86\u66f4\u65b0\u7684\u7c7b\u578b\uff0c\u4f60\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u6269\u5c55\u914d\u7f6e: TypeScript // logging.axios-interceptor.ts const LOGGING_CONFIG_KEY = Symbol ( \"kLoggingAxiosInterceptor\" ); @Injectable () export class LoggingAxiosInterceptor extends AxiosInterceptor < LoggingConfig > { constructor ( httpService : HttpService ) { super ( httpService ); } requestFulfilled () : AxiosFulfilledInterceptor < LoggingConfig > { return ( config ) => { const requestId = 1234 ; config [ LOGGING_CONFIG_KEY ] = { id : requestId , }; // Log outgoing request console . log ( `Request(ID= ${ requestId } ): ${ config . method } ${ config . path } ` ); return config ; }; } // requestRejected(): AxiosRejectedInterceptor {} responseFulfilled () : AxiosFulfilledInterceptor < AxiosResponseCustomConfig < LoggingConfig >> { return ( response ) => { const requestId = response . config [ LOGGING_CONFIG_KEY ]. id ; // Log response console . log ( `Response(ID= ${ requestId } ): ${ response . status } ` ); return response ; }; } // responseRejected(): AxiosRejectedInterceptor {} }","title":"\u4e3a\u8bf7\u6c42\u914d\u7f6e\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u9009\u9879"},{"location":"docs/http/nest-axios-interceptor/#_5","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0caxios error (rejected)\u62e6\u622a\u5668\u4f20\u9012\u7c7b\u578b\u4e3a any \u7684\u9519\u8bef\u3002\u8fd9\u5e76\u4e0d\u662f\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u7528\u5b83\u505a\u4efb\u4f55\u4e8b\u60c5\u3002 \u5728\u5185\u90e8\uff0c axios \u5c06\u6240\u6709\u9519\u8bef\u5c01\u88c5\u5728\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5bf9\u8c61 AxiosError \u4e2d\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u65b9\u6cd5 isAxiosError \u6765\u65ad\u8a00\u4f20\u9012\u7684\u9519\u8bef\u786e\u5b9e\u662f AxiosError \u7c7b\u578b\u7684\uff0c\u7136\u540e\u6309\u6211\u4eec\u60f3\u8981\u7684\u65b9\u5f0f\u5904\u7406\u5b83: TypeScript // logging.axios-interceptor.ts @Injectable () export class LoggingAxiosInterceptor extends AxiosInterceptor { constructor ( httpService : HttpService ) { super ( httpService ); } // requestFulfilled(): AxiosFulfilledInterceptor<AxiosRequestConfig> {} // requestRejected(): AxiosRejectedInterceptor {} // responseFulfilled(): AxiosFulfilledInterceptor<AxiosResponse> {} responseRejected () : AxiosRejectedInterceptor { return ( err ) => { if ( this . isAxiosError ( err )) { const { config , response } = err ; console . log ( `Error ${ response . status } in request \" ${ config . method } ${ config . path } ` ); } else { console . error ( \"Unexpected generic error\" , err ); } throw err ; }; } }","title":"\u5904\u7406\u9519\u8bef"},{"location":"docs/http/nest-axios-interceptor/#_6","text":"\u6b64\u5b58\u50a8\u5e93\u662f\u5728 MIT License \u4e0b\u53d1\u5e03\u7684\u3002","title":"\u8bb8\u53ef\u8bc1"},{"location":"docs/http/node-cache-manager/","text":"https://github.com/BryanDonovan/node-cache-manager \u4e00\u4e2a\u7528\u4e8e nodejs \u7684\u7f13\u5b58\u6a21\u5757\uff0c\u5141\u8bb8\u5728\u7f13\u5b58\u3001\u5206\u7ea7\u7f13\u5b58\u548c\u4e00\u81f4\u7684\u63a5\u53e3\u4e2d\u8f7b\u677e\u5305\u88c5\u51fd\u6570\u3002 \u7279\u6027 \u5728\u7f13\u5b58\u4e2d\u5305\u88c5\u4efb\u4f55\u51fd\u6570\u7684\u7b80\u5355\u65b9\u6cd5\u3002 \u5206\u7ea7\u7f13\u5b58\u2014\u2014\u6570\u636e\u5b58\u50a8\u5728\u6bcf\u4e2a\u7f13\u5b58\u4e2d\uff0c\u5e76\u9996\u5148\u4ece\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u7f13\u5b58\u4e2d\u83b7\u53d6\u3002 \u4f7f\u7528\u4efb\u4f55\u4f60\u60f3\u8981\u7684\u7f13\u5b58\uff0c\u53ea\u8981\u5b83\u6709\u76f8\u540c\u7684 API\u3002 \u901a\u8fc7 mocha \uff0c istanbul \u548c sinon \u5b9e\u73b0 100%\u7684\u6d4b\u8bd5\u8986\u76d6\u7387\u3002 Express.js \u4f8b\u5b50 \u53c2\u89c1 Express.js cache-manager \u793a\u4f8b\u5e94\u7528 \u4e86\u89e3\u5982\u4f55\u5728\u4f60\u7684\u5e94\u7528\u4e2d\u4f7f\u7528 node-cache-manager \u3002 \u5b89\u88c5 Bash npm install cache-manager \u5b58\u50a8\u5f15\u64ce node-cache-manager-redis (uses sol-redis-pool ) node-cache-manager-redis-store (uses node_redis ) node-cache-manager-ioredis (uses ioredis ) node-cache-manager-mongodb node-cache-manager-mongoose node-cache-manager-fs-binary node-cache-manager-fs-hash node-cache-manager-hazelcast node-cache-manager-memcached-store node-cache-manager-memory-store node-cache-manager-couchbase \u6982\u8ff0 wrap \u51fd\u6570 \u9996\u5148 \uff0c\u5b83\u5305\u542b\u4e00\u4e2a wrap \u51fd\u6570\uff0c\u53ef\u4ee5\u8ba9\u4f60\u5728\u7f13\u5b58\u4e2d\u5305\u88c5\u4efb\u4f55\u51fd\u6570\u3002 (\u6ce8\u610f\uff0c\u8fd9\u662f\u53d7\u5230 node-caching \u7684\u542f\u53d1\u3002) \u8fd9\u53ef\u80fd\u5c31\u662f\u60a8\u6b63\u5728\u5bfb\u627e\u7684\u529f\u80fd\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u8fd9\u6837\u505a: JavaScript function getCachedUser ( id , cb ) { memoryCache . get ( id , function ( err , result ) { if ( err ) { return cb ( err ); } if ( result ) { return cb ( null , result ); } getUser ( id , function ( err , result ) { if ( err ) { return cb ( err ); } memoryCache . set ( id , result ); cb ( null , result ); }); }); } ... \u4f60\u53ef\u4ee5\u4f7f\u7528 wrap \u51fd\u6570: JavaScript function getCachedUser ( id , cb ) { memoryCache . wrap ( id , function ( cacheCallback ) { getUser ( id , cacheCallback ); }, { ttl : ttl }, cb ); } \u5185\u5b58\u7f13\u5b58 \u7b2c\u4e8c \uff0c node-cache-manager \u5177\u6709\u5185\u7f6e\u7684\u5185\u5b58\u7f13\u5b58(\u4f7f\u7528 node-lru-cache )\uff0c\u4e0e\u4f60\u671f\u671b\u5728\u5927\u591a\u6570\u7f13\u5b58\u4e2d\u7684\u6807\u51c6\u51fd\u6570: Lua set ( key , val , { ttl : ttl }, cb ) // * see note below get ( key , cb ) del ( key , cb ) mset ( key1 , val1 , key2 , val2 , { ttl : ttl }, cb ) // set several keys at once mget ( key1 , key2 , key3 , cb ) // get several keys at once // * Note that depending on the underlying store , you may be able to pass the // ttl as the third param , like this : set ( key , val , ttl , cb ) // ... or pass no ttl at all : set ( key , val , cb ) \u5206\u7ea7\u7f13\u5b58 \u7b2c\u4e09 \uff0c node-cache-manager \u5141\u8bb8\u4f60\u8bbe\u7f6e\u5206\u7ea7\u7f13\u5b58\u7b56\u7565\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u53ef\u80fd\u662f\u6709\u9650\u7684\u4f7f\u7528\uff0c\u4f46\u60f3\u8c61\u4e00\u4e0b\u8fd9\u6837\u4e00\u4e2a\u573a\u666f:\u4f60\u671f\u671b\u5927\u91cf\u7684\u6d41\u91cf\uff0c\u5e76\u4e0d\u60f3\u6bcf\u6b21\u8bf7\u6c42\u90fd\u51b2\u51fb\u4f60\u7684\u4e3b\u7f13\u5b58(\u5982 Redis)\u3002 \u60a8\u51b3\u5b9a\u5c06\u6700\u5e38\u89c1\u7684\u8bf7\u6c42\u6570\u636e\u5b58\u50a8\u5728\u5185\u5b58\u7f13\u5b58\u4e2d\uff0c\u53ef\u80fd\u5177\u6709\u975e\u5e38\u77ed\u7684\u8d85\u65f6\u65f6\u95f4\u548c/\u6216\u8f83\u5c0f\u7684\u6570\u636e\u5927\u5c0f\u9650\u5236\u3002 \u4f46\u4f60\u8fd8\u662f\u60f3\u628a\u6570\u636e\u5b58\u50a8\u5728 Redis \u4e2d\uff0c\u4ee5\u5907\u5907\u4efd\uff0c\u4ee5\u53ca\u5904\u7406\u90a3\u4e9b\u4e0d\u50cf\u4f60\u60f3\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u7684\u8bf7\u6c42\u90a3\u6837\u5e38\u89c1\u7684\u8bf7\u6c42\u3002 \u8fd9\u662f node-cache-manager \u53ef\u4ee5\u8f7b\u677e\u4e14\u900f\u660e\u5730\u5904\u7406\u7684\u3002 \u8bbe\u7f6e\u591a\u4e2a\u952e \u7b2c\u56db \uff0c\u5b83\u5141\u8bb8\u4f60\u83b7\u5f97\u548c\u8bbe\u7f6e\u591a\u4e2a\u952e\uff0c\u4e00\u6b21\u4e3a\u7f13\u5b58\u5b58\u50a8\uff0c\u652f\u6301\u5b83\u3002 \u8fd9\u610f\u5473\u7740\u5f53\u83b7\u5f97\u591a\u4e2a\u952e\u65f6\uff0c\u5b83\u5c06\u4ece\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u5f00\u59cb\u901a\u8fc7\u4e0d\u540c\u7684\u7f13\u5b58(\u89c1\u4e0b\u9762\u7684\u591a\u5b58\u50a8)\uff0c\u5e76\u5408\u5e76\u5b83\u5728\u6bcf\u4e2a\u7ea7\u522b\u4e0a\u627e\u5230\u7684\u503c\u3002 \u7528\u6cd5\u793a\u4f8b \u53c2\u89c1\u4e0b\u9762\u7684\u793a\u4f8b\u548c\u793a\u4f8b\u76ee\u5f55\u4e2d\u7684\u793a\u4f8b\u3002 \u53c2\u89c1 examples/redis_example \uff0c\u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u8fde\u63a5\u6c60\u5b9e\u73b0 Redis \u7f13\u5b58\u5b58\u50a8\u3002 \u5355\u4e00\u7684\u5b58\u50a8 JavaScript var cacheManager = require ( \"cache-manager\" ); var memoryCache = cacheManager . caching ({ store : \"memory\" , max : 100 , ttl : 10 /*seconds*/ }); var ttl = 5 ; // Note: callback is optional in set() and del(). // Note: memory cache clones values before setting them unless `shouldCloneBeforeSet` is set to false memoryCache . set ( \"foo\" , \"bar\" , { ttl : ttl }, function ( err ) { if ( err ) { throw err ; } memoryCache . get ( \"foo\" , function ( err , result ) { console . log ( result ); // >> 'bar' memoryCache . del ( \"foo\" , function ( err ) {}); }); }); function getUser ( id , cb ) { setTimeout ( function () { console . log ( \"Returning user from slow database.\" ); cb ( null , { id : id , name : \"Bob\" }); }, 100 ); } var userId = 123 ; var key = \"user_\" + userId ; // Note: ttl is optional in wrap() memoryCache . wrap ( key , function ( cb ) { getUser ( userId , cb ); }, { ttl : ttl }, function ( err , user ) { console . log ( user ); // Second time fetches user from memoryCache memoryCache . wrap ( key , function ( cb ) { getUser ( userId , cb ); }, function ( err , user ) { console . log ( user ); } ); } ); // Outputs: // Returning user from slow database. // { id: 123, name: 'Bob' } // { id: 123, name: 'Bob' } ttl \u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f20\u5165\u4e00\u4e2a\u51fd\u6570\u6765\u52a8\u6001\u8ba1\u7b97\u3002\u4f8b\u5982, JavaScript var opts = { ttl : function ( user ) { if ( user . id === 1 ) { return 0.1 ; } else { return 0.5 ; } } }; memoryCache . wrap ( key , function ( cb ) { getUser ( userId , cb ); }, opts , function ( err , user ) { console . log ( user ); } \u4f60\u53ef\u4ee5\u4e00\u6b21\u62ff\u51e0\u4e2a\u952e\u3002 \u8bf7\u6ce8\u610f\uff0c\u8fd9\u5c06\u8fd4\u56de\u5b83\u5728\u7f13\u5b58\u4e2d\u627e\u5230\u7684\u4efb\u4f55\u8bb0\u5f55\uff0c\u7531\u7528\u6237\u6839\u636e\u6240\u63d0\u4f9b\u7684\u952e\u68c0\u67e5\u7ed3\u679c\uff0c\u5e76\u8c03\u7528\u5e95\u5c42\u6570\u636e\u5b58\u50a8\u6765\u586b\u5145\u7f3a\u5931\u7684\u8bb0\u5f55\u3002 \u5728\u5b9e\u8df5\u4e2d\uff0c\u5982\u679c\u4f60\u53ea\u662f\u4f7f\u7528 wrap \u51fd\u6570\u5728\u7f13\u5b58\u4e2d\u8bbe\u7f6e\u8fd9\u4e9b\u8bb0\u5f55\uff0c\u8fd9\u5e94\u8be5\u4e0d\u662f\u4e00\u4e2a\u5927\u95ee\u9898\u3002 \u9644\u6ce8: \u7406\u60f3\u60c5\u51b5\u4e0b\uff0c wrap \u51fd\u6570\u5c06\u4ece\u7f13\u5b58\u4e2d\u83b7\u5f97\u5b83\u6240\u80fd\u5f97\u5230\u7684\uff0c\u5e76\u4ece\u6570\u636e\u5b58\u50a8\u4e2d\u586b\u5145\u7f3a\u5931\u7684\u8bb0\u5f55\uff0c\u4f46\u6211\u65e0\u6cd5\u60f3\u5230\u4e00\u79cd\u9002\u7528\u4e8e\u6240\u6709\u60c5\u51b5\u7684\u65b9\u6cd5\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002 \u53e6\u4e00\u79cd\u9009\u62e9\u662f\uff0c\u5982\u679c\u627e\u5230\u4e86\u6240\u6709\u8bb0\u5f55\uff0c\u5219\u53ea\u8fd4\u56de\u7f13\u5b58\u4e2d\u7684\u6570\u636e\uff0c\u4f46\u8fd9\u5c06\u7834\u574f\u591a\u7f13\u5b58\u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1 caching.unit.js \u4e2d\u7684\u5355\u5143\u6d4b\u8bd5\u3002 \u4f8b\u5b50: JavaScript var key1 = \"user_1\" ; var key2 = \"user_1\" ; memoryCache . wrap ( key1 , key2 , function ( cb ) { getManyUser ([ key1 , key2 ], cb ); }, function ( err , users ) { console . log ( users [ 0 ]); console . log ( users [ 1 ]); } ); \u4f7f\u7528 mset()\u548c mget()\u8bbe\u7f6e/\u83b7\u53d6\u51e0\u4e2a\u952e\u7684\u793a\u4f8b JavaScript memoryCache . mset ( \"foo\" , \"bar\" , \"foo2\" , \"bar2\" , { ttl : ttl }, function ( err ) { if ( err ) { throw err ; } memoryCache . mget ( \"foo\" , \"foo2\" , function ( err , result ) { console . log ( result ); // >> ['bar', 'bar2'] // Delete keys with del() passing arguments... memoryCache . del ( \"foo\" , \"foo2\" , function ( err ) {}); // ...passing an Array of keys memoryCache . del ([ \"foo\" , \"foo2\" ], function ( err ) {}); }); }); \u4f8b\u5b50\u4e2d\u4f7f\u7528\u7684\u627f\u8bfa JavaScript memoryCache . wrap ( key , function () { return getUserPromise ( userId ); }) . then ( function ( user ) { console . log ( \"User:\" , user ); }); \u5982\u679c\u60a8\u4f7f\u7528\u7684 Node \u7248\u672c\u4e0d\u5305\u62ec\u672c\u673a\u627f\u8bfa\uff0c\u60a8\u53ef\u4ee5\u5728\u4f20\u9012\u7ed9\u7f13\u5b58\u6a21\u5757\u7684\u9009\u9879\u4e2d\u6307\u5b9a\u627f\u8bfa\u4f9d\u8d56\u9879\u3002\u4f8b\u5982, JavaScript var Promise = require ( \"es6-promise\" ). Promise ; cache = caching ({ store : store , promiseDependency : Promise }); \u4f7f\u7528\u5f02\u6b65/\u7b49\u5f85\u793a\u4f8b JavaScript try { let user = await memoryCache . wrap ( key , function () { return getUserPromise ( userId ); }); } catch ( err ) { // error handling } \u63d0\u793a:\u5e94\u8be5\u7528 try - catch \u5c01\u88c5 await \u8c03\u7528\u6765\u5904\u7406 promise \u9519\u8bef\u3002 Express \u5e94\u7528\u4f7f\u7528\u793a\u4f8b (\u53c2\u89c1 Express.js \u7f13\u5b58\u7ba1\u7406\u5668\u793a\u4f8b\u5e94\u7528 ). JavaScript function respond ( res , err , data ) { if ( err ) { res . json ( 500 , err ); } else { res . json ( 200 , data ); } } app . get ( \"/foo/bar\" , function ( req , res ) { var cacheKey = \"foo-bar:\" + JSON . stringify ( req . query ); var ttl = 10 ; memoryCache . wrap ( cacheKey , function ( cacheCallback ) { DB . find ( req . query , cacheCallback ); }, { ttl : ttl }, function ( err , result ) { respond ( res , err , result ); } ); }); \u5b9a\u5236\u5e97 \u4f60\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u4e0e\u5185\u7f6e\u5185\u5b58\u5b58\u50a8\u76f8\u540c\u7684 API(\u5982 redis \u6216 memcached \u5b58\u50a8)\u6765\u4f7f\u7528\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u5b58\u50a8\u3002 \u8981\u4f7f\u7528\u81ea\u5df1\u7684\u5b58\u50a8\uff0c\u53ea\u9700\u4f20\u5165\u5b83\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002 E.g., JavaScript var myStore = require ( \"your-homemade-store\" ); var cache = cacheManager . caching ({ store : myStore }); Multi-Store JavaScript var multiCache = cacheManager . multiCaching ([ memoryCache , someOtherCache ]); userId2 = 456 ; key2 = \"user_\" + userId ; ttl = 5 ; // Sets in all caches. // The \"ttl\" option can also be a function (see example below) multiCache . set ( \"foo2\" , \"bar2\" , { ttl : ttl }, function ( err ) { if ( err ) { throw err ; } // Fetches from highest priority cache that has the key. multiCache . get ( \"foo2\" , function ( err , result ) { console . log ( result ); // >> 'bar2' // Delete from all caches multiCache . del ( \"foo2\" ); }); }); // Set the ttl value by context depending on the store. function getTTL ( data , store ) { if ( store === \"redis\" ) { return 6000 ; } return 3000 ; } // Sets multiple keys in all caches. // You can pass as many key,value pair as you want multiCache . mset ( \"key\" , \"value\" , \"key2\" , \"value2\" , { ttl : getTTL }, function ( err ) { if ( err ) { throw err ; } // mget() fetches from highest priority cache. // If the first cache does not return all the keys, // the next cache is fetched with the keys that were not found. // This is done recursively until either: // - all have been found // - all caches has been fetched multiCache . mget ( \"key\" , \"key2\" , function ( err , result ) { console . log ( result [ 0 ]); console . log ( result [ 1 ]); // >> 'bar2' // >> 'bar3' // Delete from all caches multiCache . del ( \"key\" , \"key2\" ); // ...or with an Array multiCache . del ([ \"key\" , \"key2\" ]); }); }); // Note: options with ttl are optional in wrap() multiCache . wrap ( key2 , function ( cb ) { getUser ( userId2 , cb ); }, { ttl : ttl }, function ( err , user ) { console . log ( user ); // Second time fetches user from memoryCache, since it's highest priority. // If the data expires in the memory cache, the next fetch would pull it from // the 'someOtherCache', and set the data in memory again. multiCache . wrap ( key2 , function ( cb ) { getUser ( userId2 , cb ); }, function ( err , user ) { console . log ( user ); } ); } ); // Multiple keys multiCache . wrap ( \"key1\" , \"key2\" , function ( cb ) { getManyUser ([ \"key1\" , \"key2\" ], cb ); }, { ttl : ttl }, function ( err , users ) { console . log ( users [ 0 ]); console . log ( users [ 1 ]); } ); \u6307\u5b9a\u5728 wrap \u51fd\u6570\u4e2d\u7f13\u5b58\u4ec0\u4e48 caching \u548c multicaching \u6a21\u5757\u90fd\u5141\u8bb8\u4f60\u4f20\u5165\u4e00\u4e2a\u540d\u4e3a isCacheableValue \u7684\u56de\u8c03\u51fd\u6570\uff0c wrap \u51fd\u6570\u4f1a\u6839\u636e\u4ece\u7f13\u5b58\u6216\u5305\u88c5\u51fd\u6570\u8fd4\u56de\u7684\u6bcf\u4e2a\u503c\u6765\u8c03\u7528\u8fd9\u4e2a\u56de\u8c03\u51fd\u6570\u3002 \u8fd9\u8ba9\u4f60\u53ef\u4ee5\u901a\u8fc7 wrap \u6765\u6307\u5b9a\u54ea\u4e9b\u503c\u5e94\u8be5\u7f13\u5b58\uff0c\u54ea\u4e9b\u503c\u4e0d\u5e94\u8be5\u7f13\u5b58\u3002 \u5982\u679c\u51fd\u6570\u8fd4\u56de true \uff0c\u5b83\u5c06\u88ab\u5b58\u50a8\u5728\u7f13\u5b58\u4e2d\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7f13\u5b58\u4f1a\u7f13\u5b58\u9664 undefined \u4e4b\u5916\u7684\u6240\u6709\u5185\u5bb9\u3002 \u6ce8\u610f: caching \u548c multicaching \u4e2d\u7684 set \u51fd\u6570\u4e0d\u4f7f\u7528 isCacheableValue \u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u4e0d\u60f3\u7f13\u5b58 false \u548c null \uff0c\u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u4f20\u5165\u4e00\u4e2a\u51fd\u6570: JavaScript var isCacheableValue = function ( value ) { return value !== null && value !== false && value !== undefined ; }; \u7136\u540e\u50cf\u8fd9\u6837\u5c06\u5b83\u4f20\u9012\u7ed9' caching ': JavaScript var memoryCache = cacheManager . caching ({ store : \"memory\" , isCacheableValue : isCacheableValue }); \u7136\u540e\u50cf\u8fd9\u6837\u5c06\u5b83\u4f20\u9012\u7ed9\u201cmulticaching\u201d: JavaScript var multiCache = cacheManager . multiCaching ([ memoryCache , someOtherCache ], { isCacheableValue : isCacheableValue , }); \u5728\u540e\u53f0\u5237\u65b0\u7f13\u5b58\u952e caching \u548c multicaching \u6a21\u5757\u90fd\u652f\u6301\u5728\u4f7f\u7528 wrap \u51fd\u6570\u65f6\u5728\u540e\u53f0\u5237\u65b0\u8fc7\u671f\u7f13\u5b58\u952e\u7684\u673a\u5236\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728\u521b\u5efa\u7f13\u5b58\u5b58\u50a8\u65f6\u6dfb\u52a0\u201crefreshThreshold\u201d\u5c5e\u6027\u6765\u5b9e\u73b0\u3002 \u5982\u679c\u8bbe\u7f6e\u4e86 refreshThreshold \u5e76\u4e14 ttl \u65b9\u6cd5\u5bf9\u5df2\u7528\u5b58\u50a8\u533a\u53ef\u7528\uff0c\u5219\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u4e00\u4e2a\u503c\u540e\u5c06\u68c0\u67e5 ttl \u3002 \u5982\u679c\u5269\u4f59\u7684 TTL \u5c0f\u4e8e refreshThreshold \uff0c\u7cfb\u7edf\u5c06\u751f\u6210\u4e00\u4e2a\u540e\u53f0 worker \u6765\u66f4\u65b0\u8be5\u503c\uff0c\u9075\u5faa\u4e0e\u6807\u51c6\u6293\u53d6\u76f8\u540c\u7684\u89c4\u5219\u3002 \u540c\u65f6\uff0c\u7cfb\u7edf\u5c06\u8fd4\u56de\u65e7\u503c\uff0c\u76f4\u5230\u8fc7\u671f\u3002 \u5728\u591a\u7f13\u5b58\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u4e8e\u5237\u65b0\u7684\u5b58\u50a8\u533a\u662f\u9996\u5148\u627e\u5230\u952e\u7684\u5b58\u50a8\u533a(\u4f18\u5148\u7ea7\u6700\u9ad8)\u3002 \u7136\u540e\u5c06\u5728\u6240\u6709\u5b58\u50a8\u4e2d\u8bbe\u7f6e\u8be5\u503c\u3002 NOTES: \u5728\u591a\u7f13\u5b58\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u88ab\u68c0\u67e5\u5237\u65b0\u7684\u5b58\u50a8\u662f\u4e00\u4e2a\u952e\u5c06\u88ab\u9996\u5148\u627e\u5230(\u6700\u9ad8\u4f18\u5148\u7ea7)\u3002 \u5982\u679c\u9608\u503c\u5f88\u4f4e\uff0c\u5de5\u4f5c\u51fd\u6570\u5f88\u6162\uff0c\u952e\u53ef\u80fd\u4f1a\u8fc7\u671f\uff0c\u4f60\u53ef\u80fd\u4f1a\u9047\u5230\u4e00\u4e2a\u66f4\u65b0\u503c\u7684\u7ade\u8d5b\u6761\u4ef6\u3002 \u540e\u53f0\u5237\u65b0\u673a\u5236\u76ee\u524d\u4e0d\u652f\u6301\u63d0\u4f9b\u591a\u952e wrap \u529f\u80fd\u3002 \u7f13\u5b58\u5b58\u50a8\u9700\u8981\u63d0\u4f9b ttl \u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u50cf\u8fd9\u6837\u5c06 refreshThreshold \u4f20\u9012\u7ed9 caching : JavaScript var redisStore = require ( \"cache-manager-ioredis\" ); var redisCache = cacheManager . caching ({ store : redisStore , refreshThreshold : 3 , isCacheableValue : isCacheableValue }); \u5f53\u4ece Redis \u4e2d\u68c0\u7d22\u5230\u4e00\u4e2a\u5269\u4f59 TTL < 3sec \u7684\u503c\u65f6\uff0c\u8be5\u503c\u5c06\u5728\u540e\u53f0\u66f4\u65b0\u3002 \u5f00\u53d1\u73af\u5883 \u4f60\u53ef\u4ee5\u7981\u7528\u771f\u6b63\u7684\u7f13\u5b58\uff0c\u4f46\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u201cnone\u201d\u5b58\u50a8\u6765\u5b9e\u73b0\u6240\u6709\u7684\u56de\u8c03\u529f\u80fd\u3002 \u6587\u6863 \u751f\u6210 JSDOC 3 \u6587\u6863: Bash make docs \u6d4b\u8bd5 \u8981\u8fd0\u884c\u6d4b\u8bd5\uff0c\u8bf7\u9996\u5148\u8fd0\u884c: Bash npm install -d \u8fd0\u884c\u6d4b\u8bd5\u548c JShint: Bash make \u8d21\u732e \u5982\u679c\u4f60\u60f3\u4e3a\u9879\u76ee\u505a\u51fa\u8d21\u732e\uff0c\u8bf7\u5206\u53c9\u5b83\uff0c\u5e76\u5411\u6211\u4eec\u53d1\u9001\u4e00\u4e2a\u62c9\u8bf7\u6c42\u3002 \u8bf7\u4e3a\u4efb\u4f55\u65b0\u529f\u80fd\u6216 bug \u4fee\u590d\u6dfb\u52a0\u6d4b\u8bd5\u3002 \u540c\u6837\u5728\u63d0\u4ea4 pull \u8bf7\u6c42\u4e4b\u524d\u8fd0\u884c' make '\u3002 \u8bb8\u53ef\u8bc1 node-cache-manager \u662f\u5728 MIT \u8bb8\u53ef\u8bc1\u4e0b\u6388\u6743\u7684\u3002","title":"node-cache-manager - \u7075\u6d3b\u7684NodeJS\u7f13\u5b58\u6a21\u5757"},{"location":"docs/http/node-cache-manager/#_1","text":"\u5728\u7f13\u5b58\u4e2d\u5305\u88c5\u4efb\u4f55\u51fd\u6570\u7684\u7b80\u5355\u65b9\u6cd5\u3002 \u5206\u7ea7\u7f13\u5b58\u2014\u2014\u6570\u636e\u5b58\u50a8\u5728\u6bcf\u4e2a\u7f13\u5b58\u4e2d\uff0c\u5e76\u9996\u5148\u4ece\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u7f13\u5b58\u4e2d\u83b7\u53d6\u3002 \u4f7f\u7528\u4efb\u4f55\u4f60\u60f3\u8981\u7684\u7f13\u5b58\uff0c\u53ea\u8981\u5b83\u6709\u76f8\u540c\u7684 API\u3002 \u901a\u8fc7 mocha \uff0c istanbul \u548c sinon \u5b9e\u73b0 100%\u7684\u6d4b\u8bd5\u8986\u76d6\u7387\u3002","title":"\u7279\u6027"},{"location":"docs/http/node-cache-manager/#expressjs","text":"\u53c2\u89c1 Express.js cache-manager \u793a\u4f8b\u5e94\u7528 \u4e86\u89e3\u5982\u4f55\u5728\u4f60\u7684\u5e94\u7528\u4e2d\u4f7f\u7528 node-cache-manager \u3002","title":"Express.js \u4f8b\u5b50"},{"location":"docs/http/node-cache-manager/#_2","text":"Bash npm install cache-manager","title":"\u5b89\u88c5"},{"location":"docs/http/node-cache-manager/#_3","text":"node-cache-manager-redis (uses sol-redis-pool ) node-cache-manager-redis-store (uses node_redis ) node-cache-manager-ioredis (uses ioredis ) node-cache-manager-mongodb node-cache-manager-mongoose node-cache-manager-fs-binary node-cache-manager-fs-hash node-cache-manager-hazelcast node-cache-manager-memcached-store node-cache-manager-memory-store node-cache-manager-couchbase","title":"\u5b58\u50a8\u5f15\u64ce"},{"location":"docs/http/node-cache-manager/#_4","text":"","title":"\u6982\u8ff0"},{"location":"docs/http/node-cache-manager/#wrap","text":"\u9996\u5148 \uff0c\u5b83\u5305\u542b\u4e00\u4e2a wrap \u51fd\u6570\uff0c\u53ef\u4ee5\u8ba9\u4f60\u5728\u7f13\u5b58\u4e2d\u5305\u88c5\u4efb\u4f55\u51fd\u6570\u3002 (\u6ce8\u610f\uff0c\u8fd9\u662f\u53d7\u5230 node-caching \u7684\u542f\u53d1\u3002) \u8fd9\u53ef\u80fd\u5c31\u662f\u60a8\u6b63\u5728\u5bfb\u627e\u7684\u529f\u80fd\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u8fd9\u6837\u505a: JavaScript function getCachedUser ( id , cb ) { memoryCache . get ( id , function ( err , result ) { if ( err ) { return cb ( err ); } if ( result ) { return cb ( null , result ); } getUser ( id , function ( err , result ) { if ( err ) { return cb ( err ); } memoryCache . set ( id , result ); cb ( null , result ); }); }); } ... \u4f60\u53ef\u4ee5\u4f7f\u7528 wrap \u51fd\u6570: JavaScript function getCachedUser ( id , cb ) { memoryCache . wrap ( id , function ( cacheCallback ) { getUser ( id , cacheCallback ); }, { ttl : ttl }, cb ); }","title":"wrap \u51fd\u6570"},{"location":"docs/http/node-cache-manager/#_5","text":"\u7b2c\u4e8c \uff0c node-cache-manager \u5177\u6709\u5185\u7f6e\u7684\u5185\u5b58\u7f13\u5b58(\u4f7f\u7528 node-lru-cache )\uff0c\u4e0e\u4f60\u671f\u671b\u5728\u5927\u591a\u6570\u7f13\u5b58\u4e2d\u7684\u6807\u51c6\u51fd\u6570: Lua set ( key , val , { ttl : ttl }, cb ) // * see note below get ( key , cb ) del ( key , cb ) mset ( key1 , val1 , key2 , val2 , { ttl : ttl }, cb ) // set several keys at once mget ( key1 , key2 , key3 , cb ) // get several keys at once // * Note that depending on the underlying store , you may be able to pass the // ttl as the third param , like this : set ( key , val , ttl , cb ) // ... or pass no ttl at all : set ( key , val , cb )","title":"\u5185\u5b58\u7f13\u5b58"},{"location":"docs/http/node-cache-manager/#_6","text":"\u7b2c\u4e09 \uff0c node-cache-manager \u5141\u8bb8\u4f60\u8bbe\u7f6e\u5206\u7ea7\u7f13\u5b58\u7b56\u7565\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u53ef\u80fd\u662f\u6709\u9650\u7684\u4f7f\u7528\uff0c\u4f46\u60f3\u8c61\u4e00\u4e0b\u8fd9\u6837\u4e00\u4e2a\u573a\u666f:\u4f60\u671f\u671b\u5927\u91cf\u7684\u6d41\u91cf\uff0c\u5e76\u4e0d\u60f3\u6bcf\u6b21\u8bf7\u6c42\u90fd\u51b2\u51fb\u4f60\u7684\u4e3b\u7f13\u5b58(\u5982 Redis)\u3002 \u60a8\u51b3\u5b9a\u5c06\u6700\u5e38\u89c1\u7684\u8bf7\u6c42\u6570\u636e\u5b58\u50a8\u5728\u5185\u5b58\u7f13\u5b58\u4e2d\uff0c\u53ef\u80fd\u5177\u6709\u975e\u5e38\u77ed\u7684\u8d85\u65f6\u65f6\u95f4\u548c/\u6216\u8f83\u5c0f\u7684\u6570\u636e\u5927\u5c0f\u9650\u5236\u3002 \u4f46\u4f60\u8fd8\u662f\u60f3\u628a\u6570\u636e\u5b58\u50a8\u5728 Redis \u4e2d\uff0c\u4ee5\u5907\u5907\u4efd\uff0c\u4ee5\u53ca\u5904\u7406\u90a3\u4e9b\u4e0d\u50cf\u4f60\u60f3\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u7684\u8bf7\u6c42\u90a3\u6837\u5e38\u89c1\u7684\u8bf7\u6c42\u3002 \u8fd9\u662f node-cache-manager \u53ef\u4ee5\u8f7b\u677e\u4e14\u900f\u660e\u5730\u5904\u7406\u7684\u3002","title":"\u5206\u7ea7\u7f13\u5b58"},{"location":"docs/http/node-cache-manager/#_7","text":"\u7b2c\u56db \uff0c\u5b83\u5141\u8bb8\u4f60\u83b7\u5f97\u548c\u8bbe\u7f6e\u591a\u4e2a\u952e\uff0c\u4e00\u6b21\u4e3a\u7f13\u5b58\u5b58\u50a8\uff0c\u652f\u6301\u5b83\u3002 \u8fd9\u610f\u5473\u7740\u5f53\u83b7\u5f97\u591a\u4e2a\u952e\u65f6\uff0c\u5b83\u5c06\u4ece\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u5f00\u59cb\u901a\u8fc7\u4e0d\u540c\u7684\u7f13\u5b58(\u89c1\u4e0b\u9762\u7684\u591a\u5b58\u50a8)\uff0c\u5e76\u5408\u5e76\u5b83\u5728\u6bcf\u4e2a\u7ea7\u522b\u4e0a\u627e\u5230\u7684\u503c\u3002","title":"\u8bbe\u7f6e\u591a\u4e2a\u952e"},{"location":"docs/http/node-cache-manager/#_8","text":"\u53c2\u89c1\u4e0b\u9762\u7684\u793a\u4f8b\u548c\u793a\u4f8b\u76ee\u5f55\u4e2d\u7684\u793a\u4f8b\u3002 \u53c2\u89c1 examples/redis_example \uff0c\u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u8fde\u63a5\u6c60\u5b9e\u73b0 Redis \u7f13\u5b58\u5b58\u50a8\u3002","title":"\u7528\u6cd5\u793a\u4f8b"},{"location":"docs/http/node-cache-manager/#_9","text":"JavaScript var cacheManager = require ( \"cache-manager\" ); var memoryCache = cacheManager . caching ({ store : \"memory\" , max : 100 , ttl : 10 /*seconds*/ }); var ttl = 5 ; // Note: callback is optional in set() and del(). // Note: memory cache clones values before setting them unless `shouldCloneBeforeSet` is set to false memoryCache . set ( \"foo\" , \"bar\" , { ttl : ttl }, function ( err ) { if ( err ) { throw err ; } memoryCache . get ( \"foo\" , function ( err , result ) { console . log ( result ); // >> 'bar' memoryCache . del ( \"foo\" , function ( err ) {}); }); }); function getUser ( id , cb ) { setTimeout ( function () { console . log ( \"Returning user from slow database.\" ); cb ( null , { id : id , name : \"Bob\" }); }, 100 ); } var userId = 123 ; var key = \"user_\" + userId ; // Note: ttl is optional in wrap() memoryCache . wrap ( key , function ( cb ) { getUser ( userId , cb ); }, { ttl : ttl }, function ( err , user ) { console . log ( user ); // Second time fetches user from memoryCache memoryCache . wrap ( key , function ( cb ) { getUser ( userId , cb ); }, function ( err , user ) { console . log ( user ); } ); } ); // Outputs: // Returning user from slow database. // { id: 123, name: 'Bob' } // { id: 123, name: 'Bob' } ttl \u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f20\u5165\u4e00\u4e2a\u51fd\u6570\u6765\u52a8\u6001\u8ba1\u7b97\u3002\u4f8b\u5982, JavaScript var opts = { ttl : function ( user ) { if ( user . id === 1 ) { return 0.1 ; } else { return 0.5 ; } } }; memoryCache . wrap ( key , function ( cb ) { getUser ( userId , cb ); }, opts , function ( err , user ) { console . log ( user ); } \u4f60\u53ef\u4ee5\u4e00\u6b21\u62ff\u51e0\u4e2a\u952e\u3002 \u8bf7\u6ce8\u610f\uff0c\u8fd9\u5c06\u8fd4\u56de\u5b83\u5728\u7f13\u5b58\u4e2d\u627e\u5230\u7684\u4efb\u4f55\u8bb0\u5f55\uff0c\u7531\u7528\u6237\u6839\u636e\u6240\u63d0\u4f9b\u7684\u952e\u68c0\u67e5\u7ed3\u679c\uff0c\u5e76\u8c03\u7528\u5e95\u5c42\u6570\u636e\u5b58\u50a8\u6765\u586b\u5145\u7f3a\u5931\u7684\u8bb0\u5f55\u3002 \u5728\u5b9e\u8df5\u4e2d\uff0c\u5982\u679c\u4f60\u53ea\u662f\u4f7f\u7528 wrap \u51fd\u6570\u5728\u7f13\u5b58\u4e2d\u8bbe\u7f6e\u8fd9\u4e9b\u8bb0\u5f55\uff0c\u8fd9\u5e94\u8be5\u4e0d\u662f\u4e00\u4e2a\u5927\u95ee\u9898\u3002 \u9644\u6ce8: \u7406\u60f3\u60c5\u51b5\u4e0b\uff0c wrap \u51fd\u6570\u5c06\u4ece\u7f13\u5b58\u4e2d\u83b7\u5f97\u5b83\u6240\u80fd\u5f97\u5230\u7684\uff0c\u5e76\u4ece\u6570\u636e\u5b58\u50a8\u4e2d\u586b\u5145\u7f3a\u5931\u7684\u8bb0\u5f55\uff0c\u4f46\u6211\u65e0\u6cd5\u60f3\u5230\u4e00\u79cd\u9002\u7528\u4e8e\u6240\u6709\u60c5\u51b5\u7684\u65b9\u6cd5\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002 \u53e6\u4e00\u79cd\u9009\u62e9\u662f\uff0c\u5982\u679c\u627e\u5230\u4e86\u6240\u6709\u8bb0\u5f55\uff0c\u5219\u53ea\u8fd4\u56de\u7f13\u5b58\u4e2d\u7684\u6570\u636e\uff0c\u4f46\u8fd9\u5c06\u7834\u574f\u591a\u7f13\u5b58\u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1 caching.unit.js \u4e2d\u7684\u5355\u5143\u6d4b\u8bd5\u3002 \u4f8b\u5b50: JavaScript var key1 = \"user_1\" ; var key2 = \"user_1\" ; memoryCache . wrap ( key1 , key2 , function ( cb ) { getManyUser ([ key1 , key2 ], cb ); }, function ( err , users ) { console . log ( users [ 0 ]); console . log ( users [ 1 ]); } );","title":"\u5355\u4e00\u7684\u5b58\u50a8"},{"location":"docs/http/node-cache-manager/#mset-mget","text":"JavaScript memoryCache . mset ( \"foo\" , \"bar\" , \"foo2\" , \"bar2\" , { ttl : ttl }, function ( err ) { if ( err ) { throw err ; } memoryCache . mget ( \"foo\" , \"foo2\" , function ( err , result ) { console . log ( result ); // >> ['bar', 'bar2'] // Delete keys with del() passing arguments... memoryCache . del ( \"foo\" , \"foo2\" , function ( err ) {}); // ...passing an Array of keys memoryCache . del ([ \"foo\" , \"foo2\" ], function ( err ) {}); }); });","title":"\u4f7f\u7528 mset()\u548c mget()\u8bbe\u7f6e/\u83b7\u53d6\u51e0\u4e2a\u952e\u7684\u793a\u4f8b"},{"location":"docs/http/node-cache-manager/#_10","text":"JavaScript memoryCache . wrap ( key , function () { return getUserPromise ( userId ); }) . then ( function ( user ) { console . log ( \"User:\" , user ); }); \u5982\u679c\u60a8\u4f7f\u7528\u7684 Node \u7248\u672c\u4e0d\u5305\u62ec\u672c\u673a\u627f\u8bfa\uff0c\u60a8\u53ef\u4ee5\u5728\u4f20\u9012\u7ed9\u7f13\u5b58\u6a21\u5757\u7684\u9009\u9879\u4e2d\u6307\u5b9a\u627f\u8bfa\u4f9d\u8d56\u9879\u3002\u4f8b\u5982, JavaScript var Promise = require ( \"es6-promise\" ). Promise ; cache = caching ({ store : store , promiseDependency : Promise });","title":"\u4f8b\u5b50\u4e2d\u4f7f\u7528\u7684\u627f\u8bfa"},{"location":"docs/http/node-cache-manager/#_11","text":"JavaScript try { let user = await memoryCache . wrap ( key , function () { return getUserPromise ( userId ); }); } catch ( err ) { // error handling } \u63d0\u793a:\u5e94\u8be5\u7528 try - catch \u5c01\u88c5 await \u8c03\u7528\u6765\u5904\u7406 promise \u9519\u8bef\u3002","title":"\u4f7f\u7528\u5f02\u6b65/\u7b49\u5f85\u793a\u4f8b"},{"location":"docs/http/node-cache-manager/#express","text":"(\u53c2\u89c1 Express.js \u7f13\u5b58\u7ba1\u7406\u5668\u793a\u4f8b\u5e94\u7528 ). JavaScript function respond ( res , err , data ) { if ( err ) { res . json ( 500 , err ); } else { res . json ( 200 , data ); } } app . get ( \"/foo/bar\" , function ( req , res ) { var cacheKey = \"foo-bar:\" + JSON . stringify ( req . query ); var ttl = 10 ; memoryCache . wrap ( cacheKey , function ( cacheCallback ) { DB . find ( req . query , cacheCallback ); }, { ttl : ttl }, function ( err , result ) { respond ( res , err , result ); } ); });","title":"Express \u5e94\u7528\u4f7f\u7528\u793a\u4f8b"},{"location":"docs/http/node-cache-manager/#_12","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u4e0e\u5185\u7f6e\u5185\u5b58\u5b58\u50a8\u76f8\u540c\u7684 API(\u5982 redis \u6216 memcached \u5b58\u50a8)\u6765\u4f7f\u7528\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u5b58\u50a8\u3002 \u8981\u4f7f\u7528\u81ea\u5df1\u7684\u5b58\u50a8\uff0c\u53ea\u9700\u4f20\u5165\u5b83\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002 E.g., JavaScript var myStore = require ( \"your-homemade-store\" ); var cache = cacheManager . caching ({ store : myStore });","title":"\u5b9a\u5236\u5e97"},{"location":"docs/http/node-cache-manager/#multi-store","text":"JavaScript var multiCache = cacheManager . multiCaching ([ memoryCache , someOtherCache ]); userId2 = 456 ; key2 = \"user_\" + userId ; ttl = 5 ; // Sets in all caches. // The \"ttl\" option can also be a function (see example below) multiCache . set ( \"foo2\" , \"bar2\" , { ttl : ttl }, function ( err ) { if ( err ) { throw err ; } // Fetches from highest priority cache that has the key. multiCache . get ( \"foo2\" , function ( err , result ) { console . log ( result ); // >> 'bar2' // Delete from all caches multiCache . del ( \"foo2\" ); }); }); // Set the ttl value by context depending on the store. function getTTL ( data , store ) { if ( store === \"redis\" ) { return 6000 ; } return 3000 ; } // Sets multiple keys in all caches. // You can pass as many key,value pair as you want multiCache . mset ( \"key\" , \"value\" , \"key2\" , \"value2\" , { ttl : getTTL }, function ( err ) { if ( err ) { throw err ; } // mget() fetches from highest priority cache. // If the first cache does not return all the keys, // the next cache is fetched with the keys that were not found. // This is done recursively until either: // - all have been found // - all caches has been fetched multiCache . mget ( \"key\" , \"key2\" , function ( err , result ) { console . log ( result [ 0 ]); console . log ( result [ 1 ]); // >> 'bar2' // >> 'bar3' // Delete from all caches multiCache . del ( \"key\" , \"key2\" ); // ...or with an Array multiCache . del ([ \"key\" , \"key2\" ]); }); }); // Note: options with ttl are optional in wrap() multiCache . wrap ( key2 , function ( cb ) { getUser ( userId2 , cb ); }, { ttl : ttl }, function ( err , user ) { console . log ( user ); // Second time fetches user from memoryCache, since it's highest priority. // If the data expires in the memory cache, the next fetch would pull it from // the 'someOtherCache', and set the data in memory again. multiCache . wrap ( key2 , function ( cb ) { getUser ( userId2 , cb ); }, function ( err , user ) { console . log ( user ); } ); } ); // Multiple keys multiCache . wrap ( \"key1\" , \"key2\" , function ( cb ) { getManyUser ([ \"key1\" , \"key2\" ], cb ); }, { ttl : ttl }, function ( err , users ) { console . log ( users [ 0 ]); console . log ( users [ 1 ]); } );","title":"Multi-Store"},{"location":"docs/http/node-cache-manager/#wrap_1","text":"caching \u548c multicaching \u6a21\u5757\u90fd\u5141\u8bb8\u4f60\u4f20\u5165\u4e00\u4e2a\u540d\u4e3a isCacheableValue \u7684\u56de\u8c03\u51fd\u6570\uff0c wrap \u51fd\u6570\u4f1a\u6839\u636e\u4ece\u7f13\u5b58\u6216\u5305\u88c5\u51fd\u6570\u8fd4\u56de\u7684\u6bcf\u4e2a\u503c\u6765\u8c03\u7528\u8fd9\u4e2a\u56de\u8c03\u51fd\u6570\u3002 \u8fd9\u8ba9\u4f60\u53ef\u4ee5\u901a\u8fc7 wrap \u6765\u6307\u5b9a\u54ea\u4e9b\u503c\u5e94\u8be5\u7f13\u5b58\uff0c\u54ea\u4e9b\u503c\u4e0d\u5e94\u8be5\u7f13\u5b58\u3002 \u5982\u679c\u51fd\u6570\u8fd4\u56de true \uff0c\u5b83\u5c06\u88ab\u5b58\u50a8\u5728\u7f13\u5b58\u4e2d\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7f13\u5b58\u4f1a\u7f13\u5b58\u9664 undefined \u4e4b\u5916\u7684\u6240\u6709\u5185\u5bb9\u3002 \u6ce8\u610f: caching \u548c multicaching \u4e2d\u7684 set \u51fd\u6570\u4e0d\u4f7f\u7528 isCacheableValue \u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u4e0d\u60f3\u7f13\u5b58 false \u548c null \uff0c\u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u4f20\u5165\u4e00\u4e2a\u51fd\u6570: JavaScript var isCacheableValue = function ( value ) { return value !== null && value !== false && value !== undefined ; }; \u7136\u540e\u50cf\u8fd9\u6837\u5c06\u5b83\u4f20\u9012\u7ed9' caching ': JavaScript var memoryCache = cacheManager . caching ({ store : \"memory\" , isCacheableValue : isCacheableValue }); \u7136\u540e\u50cf\u8fd9\u6837\u5c06\u5b83\u4f20\u9012\u7ed9\u201cmulticaching\u201d: JavaScript var multiCache = cacheManager . multiCaching ([ memoryCache , someOtherCache ], { isCacheableValue : isCacheableValue , });","title":"\u6307\u5b9a\u5728wrap\u51fd\u6570\u4e2d\u7f13\u5b58\u4ec0\u4e48"},{"location":"docs/http/node-cache-manager/#_13","text":"caching \u548c multicaching \u6a21\u5757\u90fd\u652f\u6301\u5728\u4f7f\u7528 wrap \u51fd\u6570\u65f6\u5728\u540e\u53f0\u5237\u65b0\u8fc7\u671f\u7f13\u5b58\u952e\u7684\u673a\u5236\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728\u521b\u5efa\u7f13\u5b58\u5b58\u50a8\u65f6\u6dfb\u52a0\u201crefreshThreshold\u201d\u5c5e\u6027\u6765\u5b9e\u73b0\u3002 \u5982\u679c\u8bbe\u7f6e\u4e86 refreshThreshold \u5e76\u4e14 ttl \u65b9\u6cd5\u5bf9\u5df2\u7528\u5b58\u50a8\u533a\u53ef\u7528\uff0c\u5219\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u4e00\u4e2a\u503c\u540e\u5c06\u68c0\u67e5 ttl \u3002 \u5982\u679c\u5269\u4f59\u7684 TTL \u5c0f\u4e8e refreshThreshold \uff0c\u7cfb\u7edf\u5c06\u751f\u6210\u4e00\u4e2a\u540e\u53f0 worker \u6765\u66f4\u65b0\u8be5\u503c\uff0c\u9075\u5faa\u4e0e\u6807\u51c6\u6293\u53d6\u76f8\u540c\u7684\u89c4\u5219\u3002 \u540c\u65f6\uff0c\u7cfb\u7edf\u5c06\u8fd4\u56de\u65e7\u503c\uff0c\u76f4\u5230\u8fc7\u671f\u3002 \u5728\u591a\u7f13\u5b58\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u4e8e\u5237\u65b0\u7684\u5b58\u50a8\u533a\u662f\u9996\u5148\u627e\u5230\u952e\u7684\u5b58\u50a8\u533a(\u4f18\u5148\u7ea7\u6700\u9ad8)\u3002 \u7136\u540e\u5c06\u5728\u6240\u6709\u5b58\u50a8\u4e2d\u8bbe\u7f6e\u8be5\u503c\u3002 NOTES: \u5728\u591a\u7f13\u5b58\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u88ab\u68c0\u67e5\u5237\u65b0\u7684\u5b58\u50a8\u662f\u4e00\u4e2a\u952e\u5c06\u88ab\u9996\u5148\u627e\u5230(\u6700\u9ad8\u4f18\u5148\u7ea7)\u3002 \u5982\u679c\u9608\u503c\u5f88\u4f4e\uff0c\u5de5\u4f5c\u51fd\u6570\u5f88\u6162\uff0c\u952e\u53ef\u80fd\u4f1a\u8fc7\u671f\uff0c\u4f60\u53ef\u80fd\u4f1a\u9047\u5230\u4e00\u4e2a\u66f4\u65b0\u503c\u7684\u7ade\u8d5b\u6761\u4ef6\u3002 \u540e\u53f0\u5237\u65b0\u673a\u5236\u76ee\u524d\u4e0d\u652f\u6301\u63d0\u4f9b\u591a\u952e wrap \u529f\u80fd\u3002 \u7f13\u5b58\u5b58\u50a8\u9700\u8981\u63d0\u4f9b ttl \u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u50cf\u8fd9\u6837\u5c06 refreshThreshold \u4f20\u9012\u7ed9 caching : JavaScript var redisStore = require ( \"cache-manager-ioredis\" ); var redisCache = cacheManager . caching ({ store : redisStore , refreshThreshold : 3 , isCacheableValue : isCacheableValue }); \u5f53\u4ece Redis \u4e2d\u68c0\u7d22\u5230\u4e00\u4e2a\u5269\u4f59 TTL < 3sec \u7684\u503c\u65f6\uff0c\u8be5\u503c\u5c06\u5728\u540e\u53f0\u66f4\u65b0\u3002","title":"\u5728\u540e\u53f0\u5237\u65b0\u7f13\u5b58\u952e"},{"location":"docs/http/node-cache-manager/#_14","text":"\u4f60\u53ef\u4ee5\u7981\u7528\u771f\u6b63\u7684\u7f13\u5b58\uff0c\u4f46\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u201cnone\u201d\u5b58\u50a8\u6765\u5b9e\u73b0\u6240\u6709\u7684\u56de\u8c03\u529f\u80fd\u3002","title":"\u5f00\u53d1\u73af\u5883"},{"location":"docs/http/node-cache-manager/#_15","text":"\u751f\u6210 JSDOC 3 \u6587\u6863: Bash make docs","title":"\u6587\u6863"},{"location":"docs/http/node-cache-manager/#_16","text":"\u8981\u8fd0\u884c\u6d4b\u8bd5\uff0c\u8bf7\u9996\u5148\u8fd0\u884c: Bash npm install -d \u8fd0\u884c\u6d4b\u8bd5\u548c JShint: Bash make","title":"\u6d4b\u8bd5"},{"location":"docs/http/node-cache-manager/#_17","text":"\u5982\u679c\u4f60\u60f3\u4e3a\u9879\u76ee\u505a\u51fa\u8d21\u732e\uff0c\u8bf7\u5206\u53c9\u5b83\uff0c\u5e76\u5411\u6211\u4eec\u53d1\u9001\u4e00\u4e2a\u62c9\u8bf7\u6c42\u3002 \u8bf7\u4e3a\u4efb\u4f55\u65b0\u529f\u80fd\u6216 bug \u4fee\u590d\u6dfb\u52a0\u6d4b\u8bd5\u3002 \u540c\u6837\u5728\u63d0\u4ea4 pull \u8bf7\u6c42\u4e4b\u524d\u8fd0\u884c' make '\u3002","title":"\u8d21\u732e"},{"location":"docs/http/node-cache-manager/#_18","text":"node-cache-manager \u662f\u5728 MIT \u8bb8\u53ef\u8bc1\u4e0b\u6388\u6743\u7684\u3002","title":"\u8bb8\u53ef\u8bc1"},{"location":"docs/logs/_index/","text":"https://github.com/axios/axios","title":"logs"},{"location":"docs/logs/api-nestjs-logging-typeorm/","text":"\u968f\u7740\u5e94\u7528\u7a0b\u5e8f\u7684\u53d1\u5c55\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u4eba\u5f00\u59cb\u4f9d\u8d56\u5b83\u3002 \u5728\u8fd9\u6837\u7684\u65f6\u523b\uff0c\u786e\u4fdd\u6211\u4eec\u7684 API \u6b63\u5e38\u5de5\u4f5c\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u65b9\u6cd5\u5bf9\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u6545\u969c\u6392\u9664\uff0c\u4ee5\u68c0\u6d4b\u5f02\u5e38\uff0c\u5e76\u80fd\u591f\u627e\u5230\u5f02\u5e38\u7684\u6765\u6e90\u3002 \u672c\u6587\u4ecb\u7ecd\u4e86\u5982\u4f55\u8bb0\u5f55\u5e94\u7528\u7a0b\u5e8f\u4e2d\u53d1\u751f\u7684\u4e8b\u60c5\u3002 \u5185\u7f6e\u5230 NestJS \u4e2d\u7684 Logger \u5e78\u8fd0\u7684\u662f\uff0cNestJS \u81ea\u5e26\u4e86\u4e00\u4e2a\u5185\u7f6e\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u3002 \u5728\u4f7f\u7528\u5b83\u4e4b\u524d\uff0c\u6211\u4eec\u5e94\u8be5\u521b\u5efa\u5b83\u7684\u5b9e\u4f8b\u3002 posts.service.ts TypeScript import { Injectable , Logger } from \"@nestjs/common\" ; @Injectable () export default class PostsService { private readonly logger = new Logger ( PostsService . name ); // ... } \u867d\u7136\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4ece @nestjs/common \u5bfc\u5165\u7684 Logger\uff0c\u4f46\u4e3a\u6bcf\u4e2a\u670d\u52a1\u521b\u5efa\u4e00\u4e2a\u5168\u65b0\u7684\u5b9e\u4f8b\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5b9e\u8df5\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u4e3a Logger \u7684\u6784\u9020\u51fd\u6570\u63d0\u4f9b\u670d\u52a1\u7684\u540d\u79f0\u3002 \u65e5\u5fd7\u7ea7\u522b Logger \u7684\u4e00\u4e2a\u5173\u952e\u4e4b\u5904\u5728\u4e8e\u5b83\u5e26\u6709\u4e00\u4e9b\u65b9\u6cd5: error warn log verbose debug \u4e0a\u8ff0\u65b9\u6cd5\u5bf9\u5e94\u4e8e\u6211\u4eec\u53ef\u4ee5\u4e3a\u5e94\u7528\u7a0b\u5e8f\u914d\u7f6e\u7684\u65e5\u5fd7\u7ea7\u522b\u3002 main.ts TypeScript import { NestFactory } from \"@nestjs/core\" ; import { AppModule } from \"./app.module\" ; import getLogLevels from \"./utils/getLogLevels\" ; async function bootstrap () { const app = await NestFactory . create ( AppModule , { logger : getLogLevels ( process . env . NODE_ENV === \"production\" ), }); // ... } bootstrap (); \u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u4e0a\u9762\u7684 ConfigService \u6765\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\uff0c\u56e0\u4e3a\u5b83\u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 getLogLevels.ts TypeScript import { LogLevel } from \"@nestjs/common/services/logger.service\" ; function getLogLevels ( isProduction : boolean ) : LogLevel [] { if ( isProduction ) { return [ \"log\" , \"warn\" , \"error\" ]; } return [ \"error\" , \"warn\" , \"log\" , \"verbose\" , \"debug\" ]; } export default getLogLevels ; \u7531\u4e8e\u4e0a\u8ff0\u8bbe\u7f6e\uff0c\u8c03\u8bd5\u548c\u8be6\u7ec6\u65b9\u6cd5\u4e0d\u4f1a\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4ea7\u751f\u65e5\u5fd7\u3002 \u5982\u679c\u6211\u4eec\u770b\u4e00\u4e0b isLogLevelEnabled \u51fd\u6570\uff0c\u6211\u4eec\u4f1a\u6ce8\u610f\u5230\u63d0\u4f9b ['debug'] \u4f1a\u6253\u5f00\u6240\u6709\u65e5\u5fd7\u7ea7\u522b\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u8be6\u7ec6\u65e5\u5fd7\u7ea7\u522b\u3002 \u8fd9\u662f\u56e0\u4e3a NestJS \u5047\u8bbe\uff0c\u5982\u679c\u8981\u663e\u793a\u8be6\u7ec6\u65e5\u5fd7\uff0c\u8fd8\u9700\u8981\u663e\u793a\u6240\u6709\u8f83\u4f4e\u7ea7\u522b\u7684\u65e5\u5fd7\u3002 \u56e0\u6b64\uff0c ['debug'] \u4e0e ['error', 'warn', 'log', 'verbose', 'debug'] \u76f8\u540c\u3002 \u6211\u4eec\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u6bcf\u4e2a\u65e5\u5fd7\u7ea7\u522b\u7684\u91cd\u8981\u6027\u3002 \u5728\u5b8c\u6210\u4e0a\u8ff0\u6240\u6709\u5de5\u4f5c\u4e4b\u540e\uff0c\u8ba9\u6211\u4eec\u5f00\u59cb\u4f7f\u7528\u8bb0\u5f55\u5668\u3002 posts.service.ts TypeScript import { Injectable , Logger } from \"@nestjs/common\" ; import Post from \"./post.entity\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository } from \"typeorm\" ; import PostNotFoundException from \"./exceptions/postNotFound.exception\" ; @Injectable () export default class PostsService { private readonly logger = new Logger ( PostsService . name ); constructor ( @InjectRepository ( Post ) private postsRepository : Repository < Post > ) {} async getPostById ( id : number ) { const post = await this . postsRepository . findOne ( id , { relations : [ \"author\" ] }); if ( post ) { return post ; } this . logger . warn ( \"Tried to access a post that does not exist\" ); throw new PostNotFoundException ( id ); } // ... } \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u4f20\u9012 PostsService.name \u5bfc\u81f4 PostService \u4f5c\u4e3a\u65e5\u5fd7\u6d88\u606f\u7684\u524d\u7f00\u51fa\u73b0\u3002 \u5728\u4e2d\u95f4\u4ef6\u4e2d\u4f7f\u7528\u65e5\u5fd7\u8bb0\u5f55\u5668 \u5c3d\u7ba1\u4e0a\u8ff0\u65b9\u6cd5\u53ef\u80fd\u5f88\u65b9\u4fbf\uff0c\u4f46\u624b\u52a8\u7f16\u5199\u65e5\u5fd7\u6d88\u606f\u53ef\u80fd\u5f88\u9ebb\u70e6\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e2d\u95f4\u4ef6\u751f\u6210\u65e5\u5fd7\u3002 logs.middleware.ts TypeScript import { Injectable , Logger , NestMiddleware } from \"@nestjs/common\" ; import { Request , Response , NextFunction } from \"express\" ; @Injectable () class LogsMiddleware implements NestMiddleware { private readonly logger = new Logger ( \"HTTP\" ); use ( request : Request , response : Response , next : NextFunction ) { response . on ( \"finish\" , () => { const { method , originalUrl } = request ; const { statusCode , statusMessage } = response ; const message = ` ${ method } ${ originalUrl } ${ statusCode } ${ statusMessage } ` ; if ( statusCode >= 500 ) { return this . logger . error ( message ); } if ( statusCode >= 400 ) { return this . logger . warn ( message ); } return this . logger . log ( message ); }); next (); } } export default LogsMiddleware ; \u67e5\u770b MDN \u6587\u6863\u4ee5\u9605\u8bfb\u66f4\u591a\u5173\u4e8e HTTP \u54cd\u5e94\u72b6\u6001\u7801\u7684\u4fe1\u606f\u3002 \u5728\u4e0a\u9762\uff0c\u6211\u4eec\u6536\u96c6\u4e86\u5173\u4e8e\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u4fe1\u606f\uff0c\u5e76\u6839\u636e\u72b6\u6001\u4ee3\u7801\u5bf9\u5176\u8fdb\u884c\u65e5\u5fd7\u8bb0\u5f55\u3002 \u5f53\u7136\uff0c\u8bf7\u6c42\u548c\u54cd\u5e94\u5bf9\u8c61\u5305\u542b\u66f4\u591a\u6709\u7528\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u60a8\u53ef\u4ee5\u968f\u610f\u7f16\u5199\u66f4\u8be6\u7ec6\u7684\u65e5\u5fd7\u3002 \u6700\u540e\u4e00\u6b65\u662f\u4e3a\u6211\u4eec\u6240\u6709\u7684\u8def\u7531\u5e94\u7528\u6211\u4eec\u7684\u4e2d\u95f4\u4ef6\u3002 app.module.ts TypeScript import { MiddlewareConsumer , Module } from \"@nestjs/common\" ; import { PostsModule } from \"./posts/posts.module\" ; import { DatabaseModule } from \"./database/database.module\" ; import LogsMiddleware from \"./utils/logs.middleware\" ; @Module ({ imports : [ PostsModule , DatabaseModule , // ... ], // ... }) export class AppModule { configure ( consumer : MiddlewareConsumer ) { consumer . apply ( LogsMiddleware ). forRoutes ( \"*\" ); } } \u4f7f\u7528 TypeORM \u8bb0\u5f55\u5668 \u6211\u4eec\u53ef\u4ee5\u505a\u7684\u53e6\u4e00\u4ef6\u6709\u7528\u7684\u4e8b\u60c5\u662f\u8bb0\u5f55\u5e94\u7528\u7a0b\u5e8f\u4e2d\u53d1\u751f\u7684\u6240\u6709 SQL \u67e5\u8be2\u3002 \u4e3a\u4e86\u5b9e\u73b0 TypeORM\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0 Logger \u63a5\u53e3: databaseLogger.ts TypeScript import { Logger as TypeOrmLogger } from \"typeorm\" ; import { Logger as NestLogger } from \"@nestjs/common\" ; class DatabaseLogger implements TypeOrmLogger { private readonly logger = new NestLogger ( \"SQL\" ); logQuery ( query : string , parameters? : unknown []) { this . logger . log ( ` ${ query } -- Parameters: ${ this . stringifyParameters ( parameters ) } ` ); } logQueryError ( error : string , query : string , parameters? : unknown []) { this . logger . error ( ` ${ query } -- Parameters: ${ this . stringifyParameters ( parameters ) } -- ${ error } ` ); } logQuerySlow ( time : number , query : string , parameters? : unknown []) { this . logger . warn ( `Time: ${ time } -- Parameters: ${ this . stringifyParameters ( parameters ) } -- ${ query } ` ); } logMigration ( message : string ) { this . logger . log ( message ); } logSchemaBuild ( message : string ) { this . logger . log ( message ); } log ( level : \"log\" | \"info\" | \"warn\" , message : string ) { if ( level === \"log\" ) { return this . logger . log ( message ); } if ( level === \"info\" ) { return this . logger . debug ( message ); } if ( level === \"warn\" ) { return this . logger . warn ( message ); } } private stringifyParameters ( parameters? : unknown []) { try { return JSON . stringify ( parameters ); } catch { return \"\" ; } } } export default DatabaseLogger ; The last step is to use the above class in our TypeORM configuration: database.module.ts TypeScript import { Module } from \"@nestjs/common\" ; import { TypeOrmModule } from \"@nestjs/typeorm\" ; import { ConfigModule , ConfigService } from \"@nestjs/config\" ; import DatabaseLogger from \"./databaseLogger\" ; @Module ({ imports : [ TypeOrmModule . forRootAsync ({ imports : [ ConfigModule ], inject : [ ConfigService ], useFactory : ( configService : ConfigService ) => ({ type : \"postgres\" , logger : new DatabaseLogger (), host : configService.get ( \"POSTGRES_HOST\" ), // ... }), }), ], }) export class DatabaseModule {} \u5f53\u6211\u4eec\u5f00\u59cb\u67e5\u770b\u6765\u81ea TypeORM \u7684\u65e5\u5fd7\u65f6\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u5b83\u7ecf\u5e38\u4ea7\u751f\u76f8\u5f53\u957f\u7684\u67e5\u8be2\u3002 \u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u68c0\u7d22\u8bd5\u56fe\u767b\u5f55\u7684\u7528\u6237\u7684\u6570\u636e\u65f6\uff0c\u4f1a\u53d1\u751f\u4e0b\u9762\u7684\u67e5\u8be2: \u5c06\u65e5\u5fd7\u4fdd\u5b58\u5230 PostgreSQL \u6570\u636e\u5e93\u4e2d \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u5c06\u6240\u6709\u6d88\u606f\u8bb0\u5f55\u5230\u63a7\u5236\u53f0\u3002 \u867d\u7136\u5728\u6211\u4eec\u7684\u673a\u5668\u4e0a\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u8fd9\u53ef\u80fd\u5de5\u4f5c\u5f97\u5f88\u597d\uff0c\u4f46\u5728\u5df2\u90e8\u7f72\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u6ca1\u6709\u591a\u5927\u610f\u4e49\u3002 \u6709\u5f88\u591a\u670d\u52a1\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u6536\u96c6\u548c\u7ba1\u7406\u65e5\u5fd7\uff0c\u6bd4\u5982 DataDog \u548c Loggly\u3002 \u4e0d\u8fc7\uff0c\u5b83\u4eec\u4e0d\u662f\u514d\u8d39\u7684\u3002 \u56e0\u6b64\uff0c\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u65e5\u5fd7\u4fdd\u5b58\u5230 PostgreSQL \u6570\u636e\u5e93\u4e2d\u3002 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u4e3a\u6211\u4eec\u7684\u65e5\u5fd7\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f53: log.entity.ts TypeScript import { Column , CreateDateColumn , Entity , PrimaryGeneratedColumn } from \"typeorm\" ; @Entity () class Log { @PrimaryGeneratedColumn () public id : number ; @Column () public context : string ; @Column () public message : string ; @Column () public level : string ; @CreateDateColumn () creationDate : Date ; } export default Log ; Above, we use the @CreateDateColum decorator. If you want to know more about dates in PostgreSQL, check out Managing date and time with PostgreSQL and TypeORM Once we\u2019ve got the above done, let\u2019s create a service that allows us to create logs: logs.service.ts TypeScript import { Injectable } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository } from \"typeorm\" ; import Log from \"./log.entity\" ; import CreateLogDto from \"./dto/createLog.dto\" ; @Injectable () export default class LogsService { constructor ( @InjectRepository ( Log ) private logsRepository : Repository < Log > ) {} async createLog ( log : CreateLogDto ) { const newLog = await this . logsRepository . create ( log ); await this . logsRepository . save ( newLog , { data : { isCreatingLogs : true , }, }); return newLog ; } } Above, you can notice that we pass isCreatingLogs: true when saving our logs to the database. The above is because we need to overcome the issue of an infinite loop. When we store logs in the database, it causes SQL queries to be logged. When we log SQL queries, they are saved to the database, causing an infinite loop. Because of that, we need to adjust our DatabaseLogger slightly: databaseLogger.ts TypeScript import { Logger as TypeOrmLogger , QueryRunner } from \"typeorm\" ; import { Logger as NestLogger } from \"@nestjs/common\" ; class DatabaseLogger implements TypeOrmLogger { private readonly logger = new NestLogger ( \"SQL\" ); logQuery ( query : string , parameters? : unknown [], queryRunner? : QueryRunner ) { if ( queryRunner ? . data ? . isCreatingLogs ) { return ; } this . logger . log ( ` ${ query } -- Parameters: ${ this . stringifyParameters ( parameters ) } ` ); } logQueryError ( error : string , query : string , parameters? : unknown [], queryRunner? : QueryRunner ) { if ( queryRunner ? . data ? . isCreatingLogs ) { return ; } this . logger . error ( ` ${ query } -- Parameters: ${ this . stringifyParameters ( parameters ) } -- ${ error } ` ); } logQuerySlow ( time : number , query : string , parameters? : unknown [], queryRunner? : QueryRunner ) { if ( queryRunner ? . data ? . isCreatingLogs ) { return ; } this . logger . warn ( `Time: ${ time } -- Parameters: ${ this . stringifyParameters ( parameters ) } -- ${ query } ` ); } logMigration ( message : string ) { this . logger . log ( message ); } logSchemaBuild ( message : string ) { this . logger . log ( message ); } log ( level : \"log\" | \"info\" | \"warn\" , message : string , queryRunner? : QueryRunner ) { if ( queryRunner ? . data ? . isCreatingLogs ) { return ; } if ( level === \"log\" ) { return this . logger . log ( message ); } if ( level === \"info\" ) { return this . logger . debug ( message ); } if ( level === \"warn\" ) { return this . logger . warn ( message ); } } private stringifyParameters ( parameters? : unknown []) { try { return JSON . stringify ( parameters ); } catch { return \"\" ; } } } export default DatabaseLogger ; Above, we don\u2019t log SQL queries if they are involved in creating logs. Now we need to extend the logger built into NestJS and use the LogsService: customLogger.ts TypeScript import { Injectable , ConsoleLogger } from \"@nestjs/common\" ; import { ConsoleLoggerOptions } from \"@nestjs/common/services/console-logger.service\" ; import { ConfigService } from \"@nestjs/config\" ; import getLogLevels from \"../utils/getLogLevels\" ; import LogsService from \"./logs.service\" ; @Injectable () class CustomLogger extends ConsoleLogger { private readonly logsService : LogsService ; constructor ( context : string , options : ConsoleLoggerOptions , configService : ConfigService , logsService : LogsService ) { const environment = configService . get ( \"NODE_ENV\" ); super ( context , { ... options , logLevels : getLogLevels ( environment === \"production\" ), }); this . logsService = logsService ; } log ( message : string , context? : string ) { super . log . apply ( this , [ message , context ]); this . logsService . createLog ({ message , context , level : \"log\" , }); } error ( message : string , stack? : string , context? : string ) { super . error . apply ( this , [ message , stack , context ]); this . logsService . createLog ({ message , context , level : \"error\" , }); } warn ( message : string , context? : string ) { super . warn . apply ( this , [ message , context ]); this . logsService . createLog ({ message , context , level : \"error\" , }); } debug ( message : string , context? : string ) { super . debug . apply ( this , [ message , context ]); this . logsService . createLog ({ message , context , level : \"error\" , }); } verbose ( message : string , context? : string ) { super . debug . apply ( this , [ message , context ]); this . logsService . createLog ({ message , context , level : \"error\" , }); } } export default CustomLogger ; We also need to create the LoggerModule so that we can add it into our AppModule: logger.module.ts TypeScript import { Module } from \"@nestjs/common\" ; import CustomLogger from \"./customLogger\" ; import { ConfigModule } from \"@nestjs/config\" ; import LogsService from \"./logs.service\" ; import { TypeOrmModule } from \"@nestjs/typeorm\" ; import Log from \"./log.entity\" ; @Module ({ imports : [ ConfigModule , TypeOrmModule . forFeature ([ Log ])], providers : [ CustomLogger , LogsService ], exports : [ CustomLogger ], }) export class LoggerModule {} \u6700\u540e\u4e00\u6b65\u662f\u8c03\u7528 useLogger \u65b9\u6cd5\uff0c\u5c06\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u8bb0\u5f55\u5668\u6ce8\u5165\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d: main.ts TypeScript import { NestFactory } from \"@nestjs/core\" ; import { AppModule } from \"./app.module\" ; import CustomLogger from \"./logger/customLogger\" ; async function bootstrap () { const app = await NestFactory . create ( AppModule , { bufferLogs : true , }); app . useLogger ( app . get ( CustomLogger )); // ... } bootstrap (); \u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e9b\u6570\u636e\u5b58\u50a8\u5728\u5355\u72ec\u7684\u5217\u4e2d\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 HTTP \u65b9\u6cd5\u6765\u67e5\u8be2\u65e5\u5fd7\uff0c\u53ea\u67e5\u627e POST \u8bf7\u6c42\u3002 \u603b\u7ed3 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u4f7f\u7528 NestJS \u548c TypeORM \u8fdb\u884c\u65e5\u5fd7\u8bb0\u5f55\u7684\u57fa\u7840\u77e5\u8bc6\u3002 \u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u5404\u79cd\u65e5\u5fd7\u7ea7\u522b\uff0c\u4ee5\u53ca\u5982\u4f55\u76f4\u63a5\u548c\u901a\u8fc7\u4e2d\u95f4\u4ef6\u8bb0\u5f55\u6d88\u606f\u3002 \u6211\u4eec\u8fd8\u5b66\u4e60\u4e86\u5982\u4f55\u5c06\u65e5\u5fd7\u4fdd\u5b58\u5230 SQL \u6570\u636e\u5e93\u4e2d\u3002 \u8fd9\u6837\u505a\u6709\u4e00\u4e9b\u597d\u5904\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5355\u72ec\u7684\u5217\u4e2d\u5b58\u50a8\u66f4\u591a\u7684\u6570\u636e\uff0c\u5e76\u5728\u67e5\u8be2\u6570\u636e\u65f6\u4f7f\u7528\u5b83\u4eec\u3002 \u5373\u4f7f\u5c06\u65e5\u5fd7\u4fdd\u5b58\u5230 SQL \u6570\u636e\u5e93\u4e2d\u6709\u4e00\u4e9b\u4f18\u52bf\uff0c\u4f46\u5982\u679c\u65e5\u5fd7\u5f88\u591a\uff0c\u6027\u80fd\u53ef\u80fd\u4e0d\u662f\u6700\u597d\u7684\u3002 \u6b64\u5916\uff0c\u5b83\u53ef\u80fd\u4f1a\u586b\u6ee1\u6211\u4eec\u6570\u636e\u5e93\u7684\u53ef\u7528\u7a7a\u95f4\u3002 \u56e0\u6b64\uff0c\u7814\u7a76\u8bf8\u5982 DataDog \u548c Loggly \u8fd9\u6837\u7684\u670d\u52a1\u53ef\u80fd\u662f\u4e2a\u597d\u4e3b\u610f\u3002 \u4e0d\u8fc7\uff0c\u8fd9\u662f\u53e6\u4e00\u7bc7\u6587\u7ae0\u7684\u4e3b\u9898\uff0c\u8bf7\u7ee7\u7eed\u5173\u6ce8!","title":"\u4ecb\u7ecd\u4f7f\u7528\u5185\u7f6e\u8bb0\u5f55\u5668\u548cTypeORM\u8fdb\u884c\u65e5\u5fd7\u8bb0\u5f55"},{"location":"docs/logs/api-nestjs-logging-typeorm/#nestjs-logger","text":"\u5e78\u8fd0\u7684\u662f\uff0cNestJS \u81ea\u5e26\u4e86\u4e00\u4e2a\u5185\u7f6e\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u3002 \u5728\u4f7f\u7528\u5b83\u4e4b\u524d\uff0c\u6211\u4eec\u5e94\u8be5\u521b\u5efa\u5b83\u7684\u5b9e\u4f8b\u3002 posts.service.ts TypeScript import { Injectable , Logger } from \"@nestjs/common\" ; @Injectable () export default class PostsService { private readonly logger = new Logger ( PostsService . name ); // ... } \u867d\u7136\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4ece @nestjs/common \u5bfc\u5165\u7684 Logger\uff0c\u4f46\u4e3a\u6bcf\u4e2a\u670d\u52a1\u521b\u5efa\u4e00\u4e2a\u5168\u65b0\u7684\u5b9e\u4f8b\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5b9e\u8df5\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u4e3a Logger \u7684\u6784\u9020\u51fd\u6570\u63d0\u4f9b\u670d\u52a1\u7684\u540d\u79f0\u3002","title":"\u5185\u7f6e\u5230 NestJS \u4e2d\u7684 Logger"},{"location":"docs/logs/api-nestjs-logging-typeorm/#_1","text":"Logger \u7684\u4e00\u4e2a\u5173\u952e\u4e4b\u5904\u5728\u4e8e\u5b83\u5e26\u6709\u4e00\u4e9b\u65b9\u6cd5: error warn log verbose debug \u4e0a\u8ff0\u65b9\u6cd5\u5bf9\u5e94\u4e8e\u6211\u4eec\u53ef\u4ee5\u4e3a\u5e94\u7528\u7a0b\u5e8f\u914d\u7f6e\u7684\u65e5\u5fd7\u7ea7\u522b\u3002 main.ts TypeScript import { NestFactory } from \"@nestjs/core\" ; import { AppModule } from \"./app.module\" ; import getLogLevels from \"./utils/getLogLevels\" ; async function bootstrap () { const app = await NestFactory . create ( AppModule , { logger : getLogLevels ( process . env . NODE_ENV === \"production\" ), }); // ... } bootstrap (); \u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u4e0a\u9762\u7684 ConfigService \u6765\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\uff0c\u56e0\u4e3a\u5b83\u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 getLogLevels.ts TypeScript import { LogLevel } from \"@nestjs/common/services/logger.service\" ; function getLogLevels ( isProduction : boolean ) : LogLevel [] { if ( isProduction ) { return [ \"log\" , \"warn\" , \"error\" ]; } return [ \"error\" , \"warn\" , \"log\" , \"verbose\" , \"debug\" ]; } export default getLogLevels ; \u7531\u4e8e\u4e0a\u8ff0\u8bbe\u7f6e\uff0c\u8c03\u8bd5\u548c\u8be6\u7ec6\u65b9\u6cd5\u4e0d\u4f1a\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4ea7\u751f\u65e5\u5fd7\u3002 \u5982\u679c\u6211\u4eec\u770b\u4e00\u4e0b isLogLevelEnabled \u51fd\u6570\uff0c\u6211\u4eec\u4f1a\u6ce8\u610f\u5230\u63d0\u4f9b ['debug'] \u4f1a\u6253\u5f00\u6240\u6709\u65e5\u5fd7\u7ea7\u522b\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u8be6\u7ec6\u65e5\u5fd7\u7ea7\u522b\u3002 \u8fd9\u662f\u56e0\u4e3a NestJS \u5047\u8bbe\uff0c\u5982\u679c\u8981\u663e\u793a\u8be6\u7ec6\u65e5\u5fd7\uff0c\u8fd8\u9700\u8981\u663e\u793a\u6240\u6709\u8f83\u4f4e\u7ea7\u522b\u7684\u65e5\u5fd7\u3002 \u56e0\u6b64\uff0c ['debug'] \u4e0e ['error', 'warn', 'log', 'verbose', 'debug'] \u76f8\u540c\u3002 \u6211\u4eec\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u6bcf\u4e2a\u65e5\u5fd7\u7ea7\u522b\u7684\u91cd\u8981\u6027\u3002 \u5728\u5b8c\u6210\u4e0a\u8ff0\u6240\u6709\u5de5\u4f5c\u4e4b\u540e\uff0c\u8ba9\u6211\u4eec\u5f00\u59cb\u4f7f\u7528\u8bb0\u5f55\u5668\u3002 posts.service.ts TypeScript import { Injectable , Logger } from \"@nestjs/common\" ; import Post from \"./post.entity\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository } from \"typeorm\" ; import PostNotFoundException from \"./exceptions/postNotFound.exception\" ; @Injectable () export default class PostsService { private readonly logger = new Logger ( PostsService . name ); constructor ( @InjectRepository ( Post ) private postsRepository : Repository < Post > ) {} async getPostById ( id : number ) { const post = await this . postsRepository . findOne ( id , { relations : [ \"author\" ] }); if ( post ) { return post ; } this . logger . warn ( \"Tried to access a post that does not exist\" ); throw new PostNotFoundException ( id ); } // ... } \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u4f20\u9012 PostsService.name \u5bfc\u81f4 PostService \u4f5c\u4e3a\u65e5\u5fd7\u6d88\u606f\u7684\u524d\u7f00\u51fa\u73b0\u3002","title":"\u65e5\u5fd7\u7ea7\u522b"},{"location":"docs/logs/api-nestjs-logging-typeorm/#_2","text":"\u5c3d\u7ba1\u4e0a\u8ff0\u65b9\u6cd5\u53ef\u80fd\u5f88\u65b9\u4fbf\uff0c\u4f46\u624b\u52a8\u7f16\u5199\u65e5\u5fd7\u6d88\u606f\u53ef\u80fd\u5f88\u9ebb\u70e6\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e2d\u95f4\u4ef6\u751f\u6210\u65e5\u5fd7\u3002 logs.middleware.ts TypeScript import { Injectable , Logger , NestMiddleware } from \"@nestjs/common\" ; import { Request , Response , NextFunction } from \"express\" ; @Injectable () class LogsMiddleware implements NestMiddleware { private readonly logger = new Logger ( \"HTTP\" ); use ( request : Request , response : Response , next : NextFunction ) { response . on ( \"finish\" , () => { const { method , originalUrl } = request ; const { statusCode , statusMessage } = response ; const message = ` ${ method } ${ originalUrl } ${ statusCode } ${ statusMessage } ` ; if ( statusCode >= 500 ) { return this . logger . error ( message ); } if ( statusCode >= 400 ) { return this . logger . warn ( message ); } return this . logger . log ( message ); }); next (); } } export default LogsMiddleware ; \u67e5\u770b MDN \u6587\u6863\u4ee5\u9605\u8bfb\u66f4\u591a\u5173\u4e8e HTTP \u54cd\u5e94\u72b6\u6001\u7801\u7684\u4fe1\u606f\u3002 \u5728\u4e0a\u9762\uff0c\u6211\u4eec\u6536\u96c6\u4e86\u5173\u4e8e\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u4fe1\u606f\uff0c\u5e76\u6839\u636e\u72b6\u6001\u4ee3\u7801\u5bf9\u5176\u8fdb\u884c\u65e5\u5fd7\u8bb0\u5f55\u3002 \u5f53\u7136\uff0c\u8bf7\u6c42\u548c\u54cd\u5e94\u5bf9\u8c61\u5305\u542b\u66f4\u591a\u6709\u7528\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u60a8\u53ef\u4ee5\u968f\u610f\u7f16\u5199\u66f4\u8be6\u7ec6\u7684\u65e5\u5fd7\u3002 \u6700\u540e\u4e00\u6b65\u662f\u4e3a\u6211\u4eec\u6240\u6709\u7684\u8def\u7531\u5e94\u7528\u6211\u4eec\u7684\u4e2d\u95f4\u4ef6\u3002 app.module.ts TypeScript import { MiddlewareConsumer , Module } from \"@nestjs/common\" ; import { PostsModule } from \"./posts/posts.module\" ; import { DatabaseModule } from \"./database/database.module\" ; import LogsMiddleware from \"./utils/logs.middleware\" ; @Module ({ imports : [ PostsModule , DatabaseModule , // ... ], // ... }) export class AppModule { configure ( consumer : MiddlewareConsumer ) { consumer . apply ( LogsMiddleware ). forRoutes ( \"*\" ); } }","title":"\u5728\u4e2d\u95f4\u4ef6\u4e2d\u4f7f\u7528\u65e5\u5fd7\u8bb0\u5f55\u5668"},{"location":"docs/logs/api-nestjs-logging-typeorm/#typeorm","text":"\u6211\u4eec\u53ef\u4ee5\u505a\u7684\u53e6\u4e00\u4ef6\u6709\u7528\u7684\u4e8b\u60c5\u662f\u8bb0\u5f55\u5e94\u7528\u7a0b\u5e8f\u4e2d\u53d1\u751f\u7684\u6240\u6709 SQL \u67e5\u8be2\u3002 \u4e3a\u4e86\u5b9e\u73b0 TypeORM\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0 Logger \u63a5\u53e3: databaseLogger.ts TypeScript import { Logger as TypeOrmLogger } from \"typeorm\" ; import { Logger as NestLogger } from \"@nestjs/common\" ; class DatabaseLogger implements TypeOrmLogger { private readonly logger = new NestLogger ( \"SQL\" ); logQuery ( query : string , parameters? : unknown []) { this . logger . log ( ` ${ query } -- Parameters: ${ this . stringifyParameters ( parameters ) } ` ); } logQueryError ( error : string , query : string , parameters? : unknown []) { this . logger . error ( ` ${ query } -- Parameters: ${ this . stringifyParameters ( parameters ) } -- ${ error } ` ); } logQuerySlow ( time : number , query : string , parameters? : unknown []) { this . logger . warn ( `Time: ${ time } -- Parameters: ${ this . stringifyParameters ( parameters ) } -- ${ query } ` ); } logMigration ( message : string ) { this . logger . log ( message ); } logSchemaBuild ( message : string ) { this . logger . log ( message ); } log ( level : \"log\" | \"info\" | \"warn\" , message : string ) { if ( level === \"log\" ) { return this . logger . log ( message ); } if ( level === \"info\" ) { return this . logger . debug ( message ); } if ( level === \"warn\" ) { return this . logger . warn ( message ); } } private stringifyParameters ( parameters? : unknown []) { try { return JSON . stringify ( parameters ); } catch { return \"\" ; } } } export default DatabaseLogger ; The last step is to use the above class in our TypeORM configuration: database.module.ts TypeScript import { Module } from \"@nestjs/common\" ; import { TypeOrmModule } from \"@nestjs/typeorm\" ; import { ConfigModule , ConfigService } from \"@nestjs/config\" ; import DatabaseLogger from \"./databaseLogger\" ; @Module ({ imports : [ TypeOrmModule . forRootAsync ({ imports : [ ConfigModule ], inject : [ ConfigService ], useFactory : ( configService : ConfigService ) => ({ type : \"postgres\" , logger : new DatabaseLogger (), host : configService.get ( \"POSTGRES_HOST\" ), // ... }), }), ], }) export class DatabaseModule {} \u5f53\u6211\u4eec\u5f00\u59cb\u67e5\u770b\u6765\u81ea TypeORM \u7684\u65e5\u5fd7\u65f6\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u5b83\u7ecf\u5e38\u4ea7\u751f\u76f8\u5f53\u957f\u7684\u67e5\u8be2\u3002 \u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u68c0\u7d22\u8bd5\u56fe\u767b\u5f55\u7684\u7528\u6237\u7684\u6570\u636e\u65f6\uff0c\u4f1a\u53d1\u751f\u4e0b\u9762\u7684\u67e5\u8be2:","title":"\u4f7f\u7528 TypeORM \u8bb0\u5f55\u5668"},{"location":"docs/logs/api-nestjs-logging-typeorm/#postgresql","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u5c06\u6240\u6709\u6d88\u606f\u8bb0\u5f55\u5230\u63a7\u5236\u53f0\u3002 \u867d\u7136\u5728\u6211\u4eec\u7684\u673a\u5668\u4e0a\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u8fd9\u53ef\u80fd\u5de5\u4f5c\u5f97\u5f88\u597d\uff0c\u4f46\u5728\u5df2\u90e8\u7f72\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u6ca1\u6709\u591a\u5927\u610f\u4e49\u3002 \u6709\u5f88\u591a\u670d\u52a1\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u6536\u96c6\u548c\u7ba1\u7406\u65e5\u5fd7\uff0c\u6bd4\u5982 DataDog \u548c Loggly\u3002 \u4e0d\u8fc7\uff0c\u5b83\u4eec\u4e0d\u662f\u514d\u8d39\u7684\u3002 \u56e0\u6b64\uff0c\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u65e5\u5fd7\u4fdd\u5b58\u5230 PostgreSQL \u6570\u636e\u5e93\u4e2d\u3002 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u4e3a\u6211\u4eec\u7684\u65e5\u5fd7\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f53: log.entity.ts TypeScript import { Column , CreateDateColumn , Entity , PrimaryGeneratedColumn } from \"typeorm\" ; @Entity () class Log { @PrimaryGeneratedColumn () public id : number ; @Column () public context : string ; @Column () public message : string ; @Column () public level : string ; @CreateDateColumn () creationDate : Date ; } export default Log ; Above, we use the @CreateDateColum decorator. If you want to know more about dates in PostgreSQL, check out Managing date and time with PostgreSQL and TypeORM Once we\u2019ve got the above done, let\u2019s create a service that allows us to create logs: logs.service.ts TypeScript import { Injectable } from \"@nestjs/common\" ; import { InjectRepository } from \"@nestjs/typeorm\" ; import { Repository } from \"typeorm\" ; import Log from \"./log.entity\" ; import CreateLogDto from \"./dto/createLog.dto\" ; @Injectable () export default class LogsService { constructor ( @InjectRepository ( Log ) private logsRepository : Repository < Log > ) {} async createLog ( log : CreateLogDto ) { const newLog = await this . logsRepository . create ( log ); await this . logsRepository . save ( newLog , { data : { isCreatingLogs : true , }, }); return newLog ; } } Above, you can notice that we pass isCreatingLogs: true when saving our logs to the database. The above is because we need to overcome the issue of an infinite loop. When we store logs in the database, it causes SQL queries to be logged. When we log SQL queries, they are saved to the database, causing an infinite loop. Because of that, we need to adjust our DatabaseLogger slightly: databaseLogger.ts TypeScript import { Logger as TypeOrmLogger , QueryRunner } from \"typeorm\" ; import { Logger as NestLogger } from \"@nestjs/common\" ; class DatabaseLogger implements TypeOrmLogger { private readonly logger = new NestLogger ( \"SQL\" ); logQuery ( query : string , parameters? : unknown [], queryRunner? : QueryRunner ) { if ( queryRunner ? . data ? . isCreatingLogs ) { return ; } this . logger . log ( ` ${ query } -- Parameters: ${ this . stringifyParameters ( parameters ) } ` ); } logQueryError ( error : string , query : string , parameters? : unknown [], queryRunner? : QueryRunner ) { if ( queryRunner ? . data ? . isCreatingLogs ) { return ; } this . logger . error ( ` ${ query } -- Parameters: ${ this . stringifyParameters ( parameters ) } -- ${ error } ` ); } logQuerySlow ( time : number , query : string , parameters? : unknown [], queryRunner? : QueryRunner ) { if ( queryRunner ? . data ? . isCreatingLogs ) { return ; } this . logger . warn ( `Time: ${ time } -- Parameters: ${ this . stringifyParameters ( parameters ) } -- ${ query } ` ); } logMigration ( message : string ) { this . logger . log ( message ); } logSchemaBuild ( message : string ) { this . logger . log ( message ); } log ( level : \"log\" | \"info\" | \"warn\" , message : string , queryRunner? : QueryRunner ) { if ( queryRunner ? . data ? . isCreatingLogs ) { return ; } if ( level === \"log\" ) { return this . logger . log ( message ); } if ( level === \"info\" ) { return this . logger . debug ( message ); } if ( level === \"warn\" ) { return this . logger . warn ( message ); } } private stringifyParameters ( parameters? : unknown []) { try { return JSON . stringify ( parameters ); } catch { return \"\" ; } } } export default DatabaseLogger ; Above, we don\u2019t log SQL queries if they are involved in creating logs. Now we need to extend the logger built into NestJS and use the LogsService: customLogger.ts TypeScript import { Injectable , ConsoleLogger } from \"@nestjs/common\" ; import { ConsoleLoggerOptions } from \"@nestjs/common/services/console-logger.service\" ; import { ConfigService } from \"@nestjs/config\" ; import getLogLevels from \"../utils/getLogLevels\" ; import LogsService from \"./logs.service\" ; @Injectable () class CustomLogger extends ConsoleLogger { private readonly logsService : LogsService ; constructor ( context : string , options : ConsoleLoggerOptions , configService : ConfigService , logsService : LogsService ) { const environment = configService . get ( \"NODE_ENV\" ); super ( context , { ... options , logLevels : getLogLevels ( environment === \"production\" ), }); this . logsService = logsService ; } log ( message : string , context? : string ) { super . log . apply ( this , [ message , context ]); this . logsService . createLog ({ message , context , level : \"log\" , }); } error ( message : string , stack? : string , context? : string ) { super . error . apply ( this , [ message , stack , context ]); this . logsService . createLog ({ message , context , level : \"error\" , }); } warn ( message : string , context? : string ) { super . warn . apply ( this , [ message , context ]); this . logsService . createLog ({ message , context , level : \"error\" , }); } debug ( message : string , context? : string ) { super . debug . apply ( this , [ message , context ]); this . logsService . createLog ({ message , context , level : \"error\" , }); } verbose ( message : string , context? : string ) { super . debug . apply ( this , [ message , context ]); this . logsService . createLog ({ message , context , level : \"error\" , }); } } export default CustomLogger ; We also need to create the LoggerModule so that we can add it into our AppModule: logger.module.ts TypeScript import { Module } from \"@nestjs/common\" ; import CustomLogger from \"./customLogger\" ; import { ConfigModule } from \"@nestjs/config\" ; import LogsService from \"./logs.service\" ; import { TypeOrmModule } from \"@nestjs/typeorm\" ; import Log from \"./log.entity\" ; @Module ({ imports : [ ConfigModule , TypeOrmModule . forFeature ([ Log ])], providers : [ CustomLogger , LogsService ], exports : [ CustomLogger ], }) export class LoggerModule {} \u6700\u540e\u4e00\u6b65\u662f\u8c03\u7528 useLogger \u65b9\u6cd5\uff0c\u5c06\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u8bb0\u5f55\u5668\u6ce8\u5165\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d: main.ts TypeScript import { NestFactory } from \"@nestjs/core\" ; import { AppModule } from \"./app.module\" ; import CustomLogger from \"./logger/customLogger\" ; async function bootstrap () { const app = await NestFactory . create ( AppModule , { bufferLogs : true , }); app . useLogger ( app . get ( CustomLogger )); // ... } bootstrap (); \u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e9b\u6570\u636e\u5b58\u50a8\u5728\u5355\u72ec\u7684\u5217\u4e2d\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 HTTP \u65b9\u6cd5\u6765\u67e5\u8be2\u65e5\u5fd7\uff0c\u53ea\u67e5\u627e POST \u8bf7\u6c42\u3002","title":"\u5c06\u65e5\u5fd7\u4fdd\u5b58\u5230 PostgreSQL \u6570\u636e\u5e93\u4e2d"},{"location":"docs/logs/api-nestjs-logging-typeorm/#_3","text":"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u4f7f\u7528 NestJS \u548c TypeORM \u8fdb\u884c\u65e5\u5fd7\u8bb0\u5f55\u7684\u57fa\u7840\u77e5\u8bc6\u3002 \u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u5404\u79cd\u65e5\u5fd7\u7ea7\u522b\uff0c\u4ee5\u53ca\u5982\u4f55\u76f4\u63a5\u548c\u901a\u8fc7\u4e2d\u95f4\u4ef6\u8bb0\u5f55\u6d88\u606f\u3002 \u6211\u4eec\u8fd8\u5b66\u4e60\u4e86\u5982\u4f55\u5c06\u65e5\u5fd7\u4fdd\u5b58\u5230 SQL \u6570\u636e\u5e93\u4e2d\u3002 \u8fd9\u6837\u505a\u6709\u4e00\u4e9b\u597d\u5904\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5355\u72ec\u7684\u5217\u4e2d\u5b58\u50a8\u66f4\u591a\u7684\u6570\u636e\uff0c\u5e76\u5728\u67e5\u8be2\u6570\u636e\u65f6\u4f7f\u7528\u5b83\u4eec\u3002 \u5373\u4f7f\u5c06\u65e5\u5fd7\u4fdd\u5b58\u5230 SQL \u6570\u636e\u5e93\u4e2d\u6709\u4e00\u4e9b\u4f18\u52bf\uff0c\u4f46\u5982\u679c\u65e5\u5fd7\u5f88\u591a\uff0c\u6027\u80fd\u53ef\u80fd\u4e0d\u662f\u6700\u597d\u7684\u3002 \u6b64\u5916\uff0c\u5b83\u53ef\u80fd\u4f1a\u586b\u6ee1\u6211\u4eec\u6570\u636e\u5e93\u7684\u53ef\u7528\u7a7a\u95f4\u3002 \u56e0\u6b64\uff0c\u7814\u7a76\u8bf8\u5982 DataDog \u548c Loggly \u8fd9\u6837\u7684\u670d\u52a1\u53ef\u80fd\u662f\u4e2a\u597d\u4e3b\u610f\u3002 \u4e0d\u8fc7\uff0c\u8fd9\u662f\u53e6\u4e00\u7bc7\u6587\u7ae0\u7684\u4e3b\u9898\uff0c\u8bf7\u7ee7\u7eed\u5173\u6ce8!","title":"\u603b\u7ed3"},{"location":"docs/mongodb/_index/","text":"https://wanago.io/courses/api-with-nestjs/","title":"mongodb"},{"location":"docs/mongodb/indexes/","text":"The bigger our database is, the more demanding our queries become in terms of computing power. A common way of tackling this problem is by creating indexes. In this article, we explore this concept and create indexes with MongoDB and Mongoose. When performing a MongoDB query, the database must scan every document in a given collection to find matching documents. MongoDB can limit the number of records to inspect if we have an appropriate index in our database. Since it makes it easier to search for the documents in the database, indexes can speed up finding, updating, and deleting. Under the hood, indexes are data structures that store a small part of the collection\u2019s data in an easy-to-traverse way. It includes the ordered values of a particular field of the documents. It makes MongoDB indexes similar to indexes in databases such as PostgreSQL. When we define indexes, MongoDB needs to store additional data to speed up our queries. But, unfortunately, it slows down our write queries. It also takes up more memory. Therefore, we need to create indexes sparingly. \u552f\u4e00\u7d22\u5f15 The unique index makes sure that we don\u2019t store duplicate values. We can create it by passing unique: true to the @Prop decorator. user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import { Transform } from \"class-transformer\" ; export type UserDocument = User & Document ; @Schema ({ toJSON : { getters : true , virtuals : true , }, }) export class User { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop ({ unique : true }) email : string ; // ... } const UserSchema = SchemaFactory . createForClass ( User ); It is important to know that MongoDB creates a unique index on the _id field when creating a collection. Therefore, we sometimes refer to it as the primary index. We take advantage of the above in the last part of this series, where we implement pagination and sort documents by the _id field. When we sort documents using a field without an index, MongoDB performs sorting at query time. It takes time and resources to do that and makes our app response slower. However, having the right index can help us avoid sorting results at query time because the results are already sorted in the index. Therefore, we can return them immediately. We need to keep in mind that making a property unique creates an index and slows down our write queries. \u4f7f\u7528 Mongoose \u5b9e\u73b0\u7d22\u5f15 With MongoDB, we can also define secondary indexes that don\u2019t make properties unique. post.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import { Transform , Type } from \"class-transformer\" ; export type PostDocument = Post & Document ; @Schema () export class Post { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop ({ index : true }) title : string ; // ... } export const PostSchema = SchemaFactory . createForClass ( Post ); By doing the above, we speed up queries, such as when we look for a post with a specific title, for example. We also speed up queries where we sort posts by the title alphabetically. \u6587\u672c\u7d22\u5f15 MongoDB \u8fd8\u5b9e\u73b0\u4e86\u6587\u672c\u7d22\u5f15\uff0c\u652f\u6301\u5bf9\u5b57\u7b26\u4e32\u5185\u5bb9\u7684\u641c\u7d22\u67e5\u8be2\u3002 \u8981\u5b9a\u4e49\u6587\u672c\u7d22\u5f15\uff0c\u9700\u8981\u4f7f\u7528 index() \u65b9\u6cd5\u3002 post.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import { Transform } from \"class-transformer\" ; export type PostDocument = Post & Document ; @Schema () export class Post { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop () title : string ; // ... } const PostSchema = SchemaFactory . createForClass ( Post ); PostSchema . index ({ title : \"text\" }); export { PostSchema }; \u8bbe\u7f6e\u6587\u672c\u7d22\u5f15\u65f6\uff0c\u53ef\u4ee5\u5229\u7528 $text \u64cd\u4f5c\u7b26\u3002 \u5b83\u5bf9\u7528\u6587\u672c\u7d22\u5f15\u7d22\u5f15\u7684\u5b57\u6bb5\u7684\u5185\u5bb9\u6267\u884c\u6587\u672c\u641c\u7d22\u3002 \u4e00\u4e2a\u96c6\u5408\u4e0d\u80fd\u6709\u4e00\u4e2a\u4ee5\u4e0a\u7684\u6587\u672c\u7d22\u5f15\u3002 \u8ba9\u6211\u4eec\u901a\u8fc7\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u67e5\u8be2\u53c2\u6570\u6765\u5b9e\u73b0\u641c\u7d22\u5e16\u5b50\u7684\u529f\u80fd\u3002 post.controller.ts TypeScript import { Controller , Get , Query , UseInterceptors } from \"@nestjs/common\" ; import PostsService from \"./posts.service\" ; import MongooseClassSerializerInterceptor from \"../utils/mongooseClassSerializer.interceptor\" ; import { Post as PostModel } from \"./post.schema\" ; import { PaginationParams } from \"../utils/paginationParams\" ; @Controller ( \"posts\" ) @UseInterceptors ( MongooseClassSerializerInterceptor ( PostModel )) export default class PostsController { constructor ( private readonly postsService : PostsService ) {} @Get () async getAllPosts ( @Query () { skip , limit , startId } : PaginationParams , @Query ( \"searchQuery\" ) searchQuery : string ) { return this . postsService . findAll ( skip , limit , startId , searchQuery ); } //... } \u6211\u4eec\u8fd8\u9700\u8981\u5c06 $text \u67e5\u8be2\u6dfb\u52a0\u5230\u670d\u52a1\u4e2d\u3002 post.service.ts TypeScript import { FilterQuery , Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async findAll ( documentsToSkip = 0 , limitOfDocuments? : number , startId? : string , searchQuery? : string ) { const filters : FilterQuery < PostDocument > = startId ? { _id : { $gt : startId } } : {}; if ( searchQuery ) filters . $text = { $search : searchQuery }; const findQuery = this . postModel . find ( filters ) . sort ({ _id : 1 }) . skip ( documentsToSkip ) . populate ( \"author\" ) . populate ( \"categories\" ); if ( limitOfDocuments ) findQuery . limit ( limitOfDocuments ); const results = await findQuery ; const count = await this . postModel . count (); return { results , count }; } // ... } export default PostsService ; \u611f\u8c22\u4ee5\u4e0a\uff0cMongoDB \u53ef\u4ee5\u641c\u7d22\u6211\u4eec\u7684\u6587\u7ae0\u6807\u9898\u3002 $text \u67e5\u8be2\u6709\u66f4\u591a\u7684\u53c2\u6570\uff0c\u6bd4\u5982 $caseSensitive \u5e03\u5c14\u503c\u3002 \u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b\u5b98\u65b9\u6587\u6863\u3002 \u590d\u5408\u7d22\u5f15 The $text query searches through all of the fields indexed with the text index. With MongoDB, we can create compound indexes where the index structure holds references to multiple fields. TypeScript PostSchema . index ({ title : \"text\" , content : \"text\" }); Thanks to doing the above, the $text query will search both through the titles and contents of posts. Besides the text indexes, we can also create regular compound indexes. user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import { Transform } from \"class-transformer\" ; export type UserDocument = User & Document ; @Schema ({ toJSON : { getters : true , virtuals : true } }) export class User { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop () firstName : string ; @Prop () lastName : string ; // ... } const UserSchema = SchemaFactory . createForClass ( User ); UserSchema . index ({ firstName : 1 , lastName : 1 }); export { UserSchema }; Doing the above creates a compound index on the firstName and lastName fields. It can speed queries such as the ones where we look for a user with a specific first name and last name. By using 1, we create an ascending index. When we use -1, we create a descending index. The direction doesn\u2019t matter for single key indexes because MongoDB can traverse the index in either direction. It can be significant for compound indexes, though. The official documentation and this Stackoverflow page provide a good explanation. @Prop({ index: true }) \u88c5\u9970\u5668\u521b\u5efa\u4e86\u4e00\u4e2a\u5347\u5e8f\u7d22\u5f15\u3002 \u603b\u7ed3 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86 MongoDB \u4e2d\u7684\u7d22\u5f15\u95ee\u9898\u3002 \u6211\u4eec\u5df2\u7ecf\u89e3\u91ca\u4e86\u4e0d\u540c\u7c7b\u578b\u7684\u7d22\u5f15\uff0c\u4f8b\u5982\u60df\u4e00\u7d22\u5f15\u3001\u5355\u5b57\u6bb5\u7d22\u5f15\u548c\u590d\u5408\u7d22\u5f15\u3002 \u6211\u4eec\u8fd8\u5b66\u4e60\u4e86\u6587\u672c\u7d22\u5f15\u5e76\u4f7f\u7528\u5b83\u4eec\u5b9e\u73b0\u4e86\u641c\u7d22\u529f\u80fd\u3002 \u6211\u4eec\u8fd8\u4e86\u89e3\u5230\uff0c\u521b\u9020\u4f18\u52bf\u53ef\u4ee5\u52a0\u5feb\u67d0\u4e9b\u67e5\u8be2\u7684\u901f\u5ea6\uff0c\u540c\u65f6\u964d\u4f4e\u5176\u4ed6\u67e5\u8be2\u7684\u901f\u5ea6\u3002","title":"\u4f7f\u7528MongoDB\u548cMongoose\u5b9a\u4e49\u7d22\u5f15"},{"location":"docs/mongodb/indexes/#_1","text":"The unique index makes sure that we don\u2019t store duplicate values. We can create it by passing unique: true to the @Prop decorator. user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import { Transform } from \"class-transformer\" ; export type UserDocument = User & Document ; @Schema ({ toJSON : { getters : true , virtuals : true , }, }) export class User { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop ({ unique : true }) email : string ; // ... } const UserSchema = SchemaFactory . createForClass ( User ); It is important to know that MongoDB creates a unique index on the _id field when creating a collection. Therefore, we sometimes refer to it as the primary index. We take advantage of the above in the last part of this series, where we implement pagination and sort documents by the _id field. When we sort documents using a field without an index, MongoDB performs sorting at query time. It takes time and resources to do that and makes our app response slower. However, having the right index can help us avoid sorting results at query time because the results are already sorted in the index. Therefore, we can return them immediately. We need to keep in mind that making a property unique creates an index and slows down our write queries.","title":"\u552f\u4e00\u7d22\u5f15"},{"location":"docs/mongodb/indexes/#mongoose","text":"With MongoDB, we can also define secondary indexes that don\u2019t make properties unique. post.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import { Transform , Type } from \"class-transformer\" ; export type PostDocument = Post & Document ; @Schema () export class Post { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop ({ index : true }) title : string ; // ... } export const PostSchema = SchemaFactory . createForClass ( Post ); By doing the above, we speed up queries, such as when we look for a post with a specific title, for example. We also speed up queries where we sort posts by the title alphabetically.","title":"\u4f7f\u7528 Mongoose \u5b9e\u73b0\u7d22\u5f15"},{"location":"docs/mongodb/indexes/#_2","text":"MongoDB \u8fd8\u5b9e\u73b0\u4e86\u6587\u672c\u7d22\u5f15\uff0c\u652f\u6301\u5bf9\u5b57\u7b26\u4e32\u5185\u5bb9\u7684\u641c\u7d22\u67e5\u8be2\u3002 \u8981\u5b9a\u4e49\u6587\u672c\u7d22\u5f15\uff0c\u9700\u8981\u4f7f\u7528 index() \u65b9\u6cd5\u3002 post.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import { Transform } from \"class-transformer\" ; export type PostDocument = Post & Document ; @Schema () export class Post { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop () title : string ; // ... } const PostSchema = SchemaFactory . createForClass ( Post ); PostSchema . index ({ title : \"text\" }); export { PostSchema }; \u8bbe\u7f6e\u6587\u672c\u7d22\u5f15\u65f6\uff0c\u53ef\u4ee5\u5229\u7528 $text \u64cd\u4f5c\u7b26\u3002 \u5b83\u5bf9\u7528\u6587\u672c\u7d22\u5f15\u7d22\u5f15\u7684\u5b57\u6bb5\u7684\u5185\u5bb9\u6267\u884c\u6587\u672c\u641c\u7d22\u3002 \u4e00\u4e2a\u96c6\u5408\u4e0d\u80fd\u6709\u4e00\u4e2a\u4ee5\u4e0a\u7684\u6587\u672c\u7d22\u5f15\u3002 \u8ba9\u6211\u4eec\u901a\u8fc7\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u67e5\u8be2\u53c2\u6570\u6765\u5b9e\u73b0\u641c\u7d22\u5e16\u5b50\u7684\u529f\u80fd\u3002 post.controller.ts TypeScript import { Controller , Get , Query , UseInterceptors } from \"@nestjs/common\" ; import PostsService from \"./posts.service\" ; import MongooseClassSerializerInterceptor from \"../utils/mongooseClassSerializer.interceptor\" ; import { Post as PostModel } from \"./post.schema\" ; import { PaginationParams } from \"../utils/paginationParams\" ; @Controller ( \"posts\" ) @UseInterceptors ( MongooseClassSerializerInterceptor ( PostModel )) export default class PostsController { constructor ( private readonly postsService : PostsService ) {} @Get () async getAllPosts ( @Query () { skip , limit , startId } : PaginationParams , @Query ( \"searchQuery\" ) searchQuery : string ) { return this . postsService . findAll ( skip , limit , startId , searchQuery ); } //... } \u6211\u4eec\u8fd8\u9700\u8981\u5c06 $text \u67e5\u8be2\u6dfb\u52a0\u5230\u670d\u52a1\u4e2d\u3002 post.service.ts TypeScript import { FilterQuery , Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async findAll ( documentsToSkip = 0 , limitOfDocuments? : number , startId? : string , searchQuery? : string ) { const filters : FilterQuery < PostDocument > = startId ? { _id : { $gt : startId } } : {}; if ( searchQuery ) filters . $text = { $search : searchQuery }; const findQuery = this . postModel . find ( filters ) . sort ({ _id : 1 }) . skip ( documentsToSkip ) . populate ( \"author\" ) . populate ( \"categories\" ); if ( limitOfDocuments ) findQuery . limit ( limitOfDocuments ); const results = await findQuery ; const count = await this . postModel . count (); return { results , count }; } // ... } export default PostsService ; \u611f\u8c22\u4ee5\u4e0a\uff0cMongoDB \u53ef\u4ee5\u641c\u7d22\u6211\u4eec\u7684\u6587\u7ae0\u6807\u9898\u3002 $text \u67e5\u8be2\u6709\u66f4\u591a\u7684\u53c2\u6570\uff0c\u6bd4\u5982 $caseSensitive \u5e03\u5c14\u503c\u3002 \u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b\u5b98\u65b9\u6587\u6863\u3002","title":"\u6587\u672c\u7d22\u5f15"},{"location":"docs/mongodb/indexes/#_3","text":"The $text query searches through all of the fields indexed with the text index. With MongoDB, we can create compound indexes where the index structure holds references to multiple fields. TypeScript PostSchema . index ({ title : \"text\" , content : \"text\" }); Thanks to doing the above, the $text query will search both through the titles and contents of posts. Besides the text indexes, we can also create regular compound indexes. user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import { Transform } from \"class-transformer\" ; export type UserDocument = User & Document ; @Schema ({ toJSON : { getters : true , virtuals : true } }) export class User { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop () firstName : string ; @Prop () lastName : string ; // ... } const UserSchema = SchemaFactory . createForClass ( User ); UserSchema . index ({ firstName : 1 , lastName : 1 }); export { UserSchema }; Doing the above creates a compound index on the firstName and lastName fields. It can speed queries such as the ones where we look for a user with a specific first name and last name. By using 1, we create an ascending index. When we use -1, we create a descending index. The direction doesn\u2019t matter for single key indexes because MongoDB can traverse the index in either direction. It can be significant for compound indexes, though. The official documentation and this Stackoverflow page provide a good explanation. @Prop({ index: true }) \u88c5\u9970\u5668\u521b\u5efa\u4e86\u4e00\u4e2a\u5347\u5e8f\u7d22\u5f15\u3002","title":"\u590d\u5408\u7d22\u5f15"},{"location":"docs/mongodb/indexes/#_4","text":"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86 MongoDB \u4e2d\u7684\u7d22\u5f15\u95ee\u9898\u3002 \u6211\u4eec\u5df2\u7ecf\u89e3\u91ca\u4e86\u4e0d\u540c\u7c7b\u578b\u7684\u7d22\u5f15\uff0c\u4f8b\u5982\u60df\u4e00\u7d22\u5f15\u3001\u5355\u5b57\u6bb5\u7d22\u5f15\u548c\u590d\u5408\u7d22\u5f15\u3002 \u6211\u4eec\u8fd8\u5b66\u4e60\u4e86\u6587\u672c\u7d22\u5f15\u5e76\u4f7f\u7528\u5b83\u4eec\u5b9e\u73b0\u4e86\u641c\u7d22\u529f\u80fd\u3002 \u6211\u4eec\u8fd8\u4e86\u89e3\u5230\uff0c\u521b\u9020\u4f18\u52bf\u53ef\u4ee5\u52a0\u5feb\u67d0\u4e9b\u67e5\u8be2\u7684\u901f\u5ea6\uff0c\u540c\u65f6\u964d\u4f4e\u5176\u4ed6\u67e5\u8be2\u7684\u901f\u5ea6\u3002","title":"\u603b\u7ed3"},{"location":"docs/mongodb/introduction/","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5728\u672c\u7cfb\u5217\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u4e3b\u8981\u8ba8\u8bba\u5982\u4f55\u4f7f\u7528 SQL \u548c Postgres \u6570\u636e\u5e93\u3002 \u867d\u7136 PostgreSQL \u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\uff0c\u4f46\u5b83\u503c\u5f97\u4e00\u8bd5\u3002 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u4e86\u89e3 MongoDB \u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4ee5\u53ca\u5b83\u4e0e SQL \u6570\u636e\u5e93\u7684\u533a\u522b\u3002 \u6211\u4eec\u8fd8\u4f7f\u7528 MongoDB \u548c NestJS \u521b\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u60a8\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u6587\u7ae0\u4e2d\u5728\u8fd9\u4e2a\u5b58\u50a8\u5e93\u4e2d\u627e\u5230\u6e90\u4ee3\u7801\u3002 MongoDB vs. SQL Databases MongoDB \u7684\u8bbe\u8ba1\u539f\u5219\u4e0e\u4f20\u7edf\u7684 SQL \u6570\u636e\u5e93\u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002 MongoDB \u6ca1\u6709\u4f7f\u7528\u8868\u548c\u884c\u6765\u8868\u793a\u6570\u636e\uff0c\u800c\u662f\u5c06\u5176\u5b58\u50a8\u4e3a\u7c7b\u4f3c json \u7684\u6587\u6863\u3002 \u56e0\u6b64\uff0c\u719f\u6089 JavaScript \u7684\u5f00\u53d1\u4eba\u5458\u6bd4\u8f83\u5bb9\u6613\u638c\u63e1\u3002 MongoDB \u4e2d\u7684\u6587\u6863\u7531\u952e\u548c\u503c\u5bf9\u7ec4\u6210\u3002 \u5b83\u4eec\u7684\u91cd\u8981\u65b9\u9762\u662f\uff0c\u5728\u7ed9\u5b9a\u96c6\u5408\u4e2d\u7684\u6587\u6863\u4e2d\u952e\u53ef\u4ee5\u4e0d\u540c\u3002 \u8fd9\u662f MongoDB \u548c SQL \u6570\u636e\u5e93\u4e4b\u95f4\u7684\u4e00\u4e2a\u5f88\u5927\u7684\u533a\u522b\u3002 \u5b83\u4f7f MongoDB \u66f4\u52a0\u7075\u6d3b\uff0c\u7ed3\u6784\u66f4\u677e\u6563\u3002 \u56e0\u6b64\uff0c\u5b83\u65e2\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4f18\u70b9\uff0c\u4e5f\u53ef\u4ee5\u88ab\u89c6\u4e3a\u7f3a\u70b9\u3002 MongoDB \u7684\u4f18\u70b9\u548c\u7f3a\u70b9 Since MongoDB and SQL databases differ so much, choosing the right tool for a given job is crucial. Since NoSQL databases put fewer restrictions on the data, it might be a good choice for an application evolving quickly. We still might need to update our data as our schema changes. For example, we might want to add a new property containing the user\u2019s avatar URL. When it happens, we still should deal with documents not containing our new property. We can do that by writing a script that puts a default value for old documents. Alternatively, we can assume that this field can be missing and handle it differently on the application level. On the contrary, adding a new property to an existing SQL database requires writing a migration that explicitly handles the new property. This might seem like a bit of a chore in a lot of cases. However, with MongoDB, it is not required. This might make the work easier and faster, but we need to watch out and not lose the integrity of our data. If you want to know more about SQL migrations, check out The basics of migrations using TypeORM and Postgres SQL databases such as Postgres keep the data in tables consisting of columns and rows. A big part of the design process is defining relationships between the above tables. For example, a user can be an author of an article. On the other hand, MongoDB is a non-relational database. Therefore, while we can mimic SQL-style relationships with MongoDB, they will not be as efficient and foolproof. Using MongoDB with NestJS So far, in this series, we\u2019ve used Docker to set up the architecture for our project. We can easily achieve that with MongoDB also. docker-compose.yml Text Only version: \"3\" services: mongo: image: mongo:latest environment: MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME} MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD} MONGO_INITDB_DATABASE: ${MONGO_DATABASE} ports: - '27017:27017' Above, you can see that we refer to a few variables. Let\u2019s put them into our .env file: .env Text Only MONGO_USERNAME=admin MONGO_PASSWORD=admin MONGO_DATABASE=nestjs MONGO_HOST=localhost:27017 In the previous parts of this series, we\u2019ve used TypeORM to connect to our PostgreSQL database and manage our data. For MongoDB, the most popular library is Mongoose. Bash npm install --save @nestjs/mongoose mongoose Let\u2019s use Mongoose to connect to our database. To do that, we need to define a URI connection string: app.module.ts TypeScript import { Module } from \"@nestjs/common\" ; import { MongooseModule } from \"@nestjs/mongoose\" ; import { ConfigModule , ConfigService } from \"@nestjs/config\" ; import PostsModule from \"./posts/posts.module\" ; import * as Joi from \"@hapi/joi\" ; @Module ({ imports : [ ConfigModule . forRoot ({ validationSchema : Joi.object ({ MONGO_USERNAME : Joi.string (). required (), MONGO_PASSWORD : Joi.string (). required (), MONGO_DATABASE : Joi.string (). required (), MONGO_PATH : Joi.string (). required (), }), }), MongooseModule . forRootAsync ({ imports : [ ConfigModule ], useFactory : async ( configService : ConfigService ) => { const username = configService . get ( \"MONGO_USERNAME\" ); const password = configService . get ( \"MONGO_PASSWORD\" ); const database = configService . get ( \"MONGO_DATABASE\" ); const host = configService . get ( \"MONGO_HOST\" ); return { uri : `mongodb:// ${ username } : ${ password } @ ${ host } ` , dbName : database }; }, inject : [ ConfigService ], }), PostsModule , ], controllers : [], providers : [], }) export class AppModule {} \u4fdd\u5b58\u548c\u68c0\u7d22\u6570\u636e With MongoDB, we operate on documents grouped into collections. To start saving and retrieving data with MongoDB and Mongoose, we first need to define a schema. This might seem surprising at first because MongoDB is considered schemaless. Even though MongoDB is flexible, Mongoose uses schemas to operate on collections and define their shape. \u5b9a\u4e49\u4e00\u4e2a\u6a21\u5f0f \u6bcf\u4e2a\u6a21\u5f0f\u6620\u5c04\u5230\u4e00\u4e2a MongoDB \u96c6\u5408\u3002 \u5b83\u8fd8\u5b9a\u4e49\u4e86\u5176\u4e2d\u6587\u6863\u7684\u5f62\u72b6\u3002 post.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document } from \"mongoose\" ; export type PostDocument = Post & Document ; @Schema () export class Post { @Prop () title : string ; @Prop () content : string ; } export const PostSchema = SchemaFactory . createForClass ( Post ); \u4f7f\u7528 @Schema() \u88c5\u9970\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u7c7b\u6807\u8bb0\u4e3a\u6a21\u5f0f\u5b9a\u4e49\uff0c\u5e76\u5c06\u5176\u6620\u5c04\u5230 MongoDB \u96c6\u5408\u3002 \u6211\u4eec\u4f7f\u7528 @Prop() \u88c5\u9970\u5668\u6765\u786e\u5b9a\u6587\u6863\u7684\u5c5e\u6027\u3002 \u591a\u4e8f\u4e86 TypeScript \u5143\u6570\u636e\uff0c\u6211\u4eec\u7684\u5c5e\u6027\u7684\u6a21\u5f0f\u7c7b\u578b\u662f\u81ea\u52a8\u63a8\u65ad\u51fa\u6765\u7684\u3002 \u6211\u4eec\u5c06\u5728\u540e\u7eed\u6587\u7ae0\u4e2d\u5c55\u5f00\u5b9a\u4e49\u6a21\u5f0f\u7684\u4e3b\u9898\u3002 \u4f7f\u7528\u6a21\u578b Mongoose \u5c06\u6211\u4eec\u7684\u6a21\u5f0f\u5305\u88c5\u6210\u6a21\u578b\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u6765\u521b\u5efa\u548c\u8bfb\u53d6\u6587\u6863\u3002 \u4e3a\u4e86\u8ba9\u6211\u4eec\u7684\u670d\u52a1\u4f7f\u7528\u6a21\u578b\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5176\u6dfb\u52a0\u5230\u6211\u4eec\u7684\u6a21\u5757\u4e2d\u3002 posts.module.ts TypeScript import { Module } from \"@nestjs/common\" ; import { MongooseModule } from \"@nestjs/mongoose\" ; import PostsController from \"./posts.controller\" ; import PostsService from \"./posts.service\" ; import { Post , PostSchema } from \"./post.schema\" ; @Module ({ imports : [ MongooseModule . forFeature ([{ name : Post.name , schema : PostSchema }])], controllers : [ PostsController ], providers : [ PostsService ], }) class PostsModule {} export default PostsModule ; \u6211\u4eec\u8fd8\u9700\u8981\u5c06\u6a21\u578b\u6ce8\u5165\u5230\u6211\u4eec\u7684\u670d\u52a1\u4e2d: posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} } export default PostsService ; \u4e00\u65e6\u6211\u4eec\u8fd9\u6837\u505a\u4e86\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u4e0e\u6211\u4eec\u7684\u6536\u85cf\u8fdb\u884c\u4ea4\u4e92\u4e86\u3002 \u83b7\u53d6\u6240\u6709\u5b9e\u4f53 \u6211\u4eec\u80fd\u505a\u7684\u6700\u57fa\u672c\u7684\u4e8b\u60c5\u662f\u83b7\u53d6\u6240\u6709\u6587\u6863\u7684\u5217\u8868\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981 find() \u65b9\u6cd5: posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async findAll () { return this . postModel . find (); } } \u83b7\u53d6\u5355\u4e2a\u5b9e\u4f53 Every document we create is assigned with a string id. If we want to fetch a single document, we can use the findById method: posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; import { NotFoundException } from \"@nestjs/common\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async findOne ( id : string ) { const post = await this . postModel . findById ( id ); if ( ! post ) { throw new NotFoundException (); } return post ; } // ... } \u521b\u5efa\u5b9e\u4f53 In the fourth part of this series, we\u2019ve tackled data validation. Let\u2019s create a Data Transfer Object for our entity. post.dto.ts TypeScript import { IsString , IsNotEmpty } from \"class-validator\" ; export class PostDto { @IsString () @IsNotEmpty () title : string ; @IsString () @IsNotEmpty () content : string ; } export default PostDto ; We can now use it when creating a new instance of our model and saving it. posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; import PostDto from \"./dto/post.dto\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} create ( postData : PostDto ) { const createdPost = new this . postModel ( postData ); return createdPost . save (); } // ... } \u66f4\u65b0\u5b9e\u4f53 We might also need to update an entity we\u2019ve already created. To do that, we can use the findByIdAndUpdate method: posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; import { NotFoundException } from \"@nestjs/common\" ; import PostDto from \"./dto/post.dto\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async update ( id : string , postData : PostDto ) { const post = await this . postModel . findByIdAndUpdate ( id , postData ). setOptions ({ overwrite : true , new : true }); if ( ! post ) { throw new NotFoundException (); } return post ; } // ... } Above, a few important things are happening. Thanks to using the new: true parameter, the findByIdAndUpdate method returns an updated version of our entity. By using overwrite: true, we indicate that we want to replace a whole document instead of performing a partial update. This is what differentiates the PUT and PATCH HTTP methods. If you want to know more, check out TypeScript Express tutorial #15. Using PUT vs PATCH in MongoDB with Mongoose. \u5220\u9664\u5b9e\u4f53 To delete an existing entity, we need to use the findByIdAndDelete method: posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; import { NotFoundException } from \"@nestjs/common\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async delete ( postId : string ) { const result = await this . postModel . findByIdAndDelete ( postId ); if ( ! result ) { throw new NotFoundException (); } } // ... } \u5b9a\u4e49\u4e00\u4e2a\u63a7\u5236\u5668 \u4e00\u65e6\u6211\u4eec\u7684\u670d\u52a1\u542f\u52a8\u5e76\u8fd0\u884c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u63a7\u5236\u5668\u4e2d\u4f7f\u7528\u5b83: posts.controller.ts TypeScript import { Body , Controller , Delete , Get , Param , Post , Put } from \"@nestjs/common\" ; import PostsService from \"./posts.service\" ; import ParamsWithId from \"../utils/paramsWithId\" ; import PostDto from \"./dto/post.dto\" ; @Controller ( \"posts\" ) export default class PostsController { constructor ( private readonly postsService : PostsService ) {} @Get () async getAllPosts () { return this . postsService . findAll (); } @Get ( \":id\" ) async getPost ( @Param () { id } : ParamsWithId ) { return this . postsService . findOne ( id ); } @Post () async createPost ( @Body () post : PostDto ) { return this . postsService . create ( post ); } @Delete ( \":id\" ) async deletePost ( @Param () { id } : ParamsWithId ) { return this . postsService . delete ( id ); } @Put ( \":id\" ) async updatePost ( @Param () { id } : ParamsWithId , @Body () post : PostDto ) { return this . postsService . update ( id , post ); } } \u4e0a\u9762\u7684\u5173\u952e\u90e8\u5206\u662f\u6211\u4eec\u5df2\u7ecf\u5b9a\u4e49\u4e86 ParamsWithId \u7c7b\u3002 \u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u53ef\u4ee5\u9a8c\u8bc1\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684 MongoDB id: paramsWithId.ts TypeScript import { IsMongoId } from \"class-validator\" ; class ParamsWithId { @IsMongoId () id : string ; } export default ParamsWithId ; Summary In this article, we\u2019ve learned the very basics of how to use MongoDB with NestJS. To do that, we\u2019ve created a local MongoDB database using Docker Compose and connected it with NestJS and Mongoose. To better grasp MongoDB, we\u2019ve also compared it to SQL databases such as Postgres. There are still a lot of things to cover when it comes to MongoDB, so stay tuned!","title":"MongoDB\u6982\u8bba"},{"location":"docs/mongodb/introduction/#mongodb-vs-sql-databases","text":"MongoDB \u7684\u8bbe\u8ba1\u539f\u5219\u4e0e\u4f20\u7edf\u7684 SQL \u6570\u636e\u5e93\u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002 MongoDB \u6ca1\u6709\u4f7f\u7528\u8868\u548c\u884c\u6765\u8868\u793a\u6570\u636e\uff0c\u800c\u662f\u5c06\u5176\u5b58\u50a8\u4e3a\u7c7b\u4f3c json \u7684\u6587\u6863\u3002 \u56e0\u6b64\uff0c\u719f\u6089 JavaScript \u7684\u5f00\u53d1\u4eba\u5458\u6bd4\u8f83\u5bb9\u6613\u638c\u63e1\u3002 MongoDB \u4e2d\u7684\u6587\u6863\u7531\u952e\u548c\u503c\u5bf9\u7ec4\u6210\u3002 \u5b83\u4eec\u7684\u91cd\u8981\u65b9\u9762\u662f\uff0c\u5728\u7ed9\u5b9a\u96c6\u5408\u4e2d\u7684\u6587\u6863\u4e2d\u952e\u53ef\u4ee5\u4e0d\u540c\u3002 \u8fd9\u662f MongoDB \u548c SQL \u6570\u636e\u5e93\u4e4b\u95f4\u7684\u4e00\u4e2a\u5f88\u5927\u7684\u533a\u522b\u3002 \u5b83\u4f7f MongoDB \u66f4\u52a0\u7075\u6d3b\uff0c\u7ed3\u6784\u66f4\u677e\u6563\u3002 \u56e0\u6b64\uff0c\u5b83\u65e2\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4f18\u70b9\uff0c\u4e5f\u53ef\u4ee5\u88ab\u89c6\u4e3a\u7f3a\u70b9\u3002","title":"MongoDB vs. SQL Databases"},{"location":"docs/mongodb/introduction/#mongodb","text":"Since MongoDB and SQL databases differ so much, choosing the right tool for a given job is crucial. Since NoSQL databases put fewer restrictions on the data, it might be a good choice for an application evolving quickly. We still might need to update our data as our schema changes. For example, we might want to add a new property containing the user\u2019s avatar URL. When it happens, we still should deal with documents not containing our new property. We can do that by writing a script that puts a default value for old documents. Alternatively, we can assume that this field can be missing and handle it differently on the application level. On the contrary, adding a new property to an existing SQL database requires writing a migration that explicitly handles the new property. This might seem like a bit of a chore in a lot of cases. However, with MongoDB, it is not required. This might make the work easier and faster, but we need to watch out and not lose the integrity of our data. If you want to know more about SQL migrations, check out The basics of migrations using TypeORM and Postgres SQL databases such as Postgres keep the data in tables consisting of columns and rows. A big part of the design process is defining relationships between the above tables. For example, a user can be an author of an article. On the other hand, MongoDB is a non-relational database. Therefore, while we can mimic SQL-style relationships with MongoDB, they will not be as efficient and foolproof.","title":"MongoDB \u7684\u4f18\u70b9\u548c\u7f3a\u70b9"},{"location":"docs/mongodb/introduction/#using-mongodb-with-nestjs","text":"So far, in this series, we\u2019ve used Docker to set up the architecture for our project. We can easily achieve that with MongoDB also. docker-compose.yml Text Only version: \"3\" services: mongo: image: mongo:latest environment: MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME} MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD} MONGO_INITDB_DATABASE: ${MONGO_DATABASE} ports: - '27017:27017' Above, you can see that we refer to a few variables. Let\u2019s put them into our .env file: .env Text Only MONGO_USERNAME=admin MONGO_PASSWORD=admin MONGO_DATABASE=nestjs MONGO_HOST=localhost:27017 In the previous parts of this series, we\u2019ve used TypeORM to connect to our PostgreSQL database and manage our data. For MongoDB, the most popular library is Mongoose. Bash npm install --save @nestjs/mongoose mongoose Let\u2019s use Mongoose to connect to our database. To do that, we need to define a URI connection string: app.module.ts TypeScript import { Module } from \"@nestjs/common\" ; import { MongooseModule } from \"@nestjs/mongoose\" ; import { ConfigModule , ConfigService } from \"@nestjs/config\" ; import PostsModule from \"./posts/posts.module\" ; import * as Joi from \"@hapi/joi\" ; @Module ({ imports : [ ConfigModule . forRoot ({ validationSchema : Joi.object ({ MONGO_USERNAME : Joi.string (). required (), MONGO_PASSWORD : Joi.string (). required (), MONGO_DATABASE : Joi.string (). required (), MONGO_PATH : Joi.string (). required (), }), }), MongooseModule . forRootAsync ({ imports : [ ConfigModule ], useFactory : async ( configService : ConfigService ) => { const username = configService . get ( \"MONGO_USERNAME\" ); const password = configService . get ( \"MONGO_PASSWORD\" ); const database = configService . get ( \"MONGO_DATABASE\" ); const host = configService . get ( \"MONGO_HOST\" ); return { uri : `mongodb:// ${ username } : ${ password } @ ${ host } ` , dbName : database }; }, inject : [ ConfigService ], }), PostsModule , ], controllers : [], providers : [], }) export class AppModule {}","title":"Using MongoDB with NestJS"},{"location":"docs/mongodb/introduction/#_1","text":"With MongoDB, we operate on documents grouped into collections. To start saving and retrieving data with MongoDB and Mongoose, we first need to define a schema. This might seem surprising at first because MongoDB is considered schemaless. Even though MongoDB is flexible, Mongoose uses schemas to operate on collections and define their shape.","title":"\u4fdd\u5b58\u548c\u68c0\u7d22\u6570\u636e"},{"location":"docs/mongodb/introduction/#_2","text":"\u6bcf\u4e2a\u6a21\u5f0f\u6620\u5c04\u5230\u4e00\u4e2a MongoDB \u96c6\u5408\u3002 \u5b83\u8fd8\u5b9a\u4e49\u4e86\u5176\u4e2d\u6587\u6863\u7684\u5f62\u72b6\u3002 post.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document } from \"mongoose\" ; export type PostDocument = Post & Document ; @Schema () export class Post { @Prop () title : string ; @Prop () content : string ; } export const PostSchema = SchemaFactory . createForClass ( Post ); \u4f7f\u7528 @Schema() \u88c5\u9970\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u7c7b\u6807\u8bb0\u4e3a\u6a21\u5f0f\u5b9a\u4e49\uff0c\u5e76\u5c06\u5176\u6620\u5c04\u5230 MongoDB \u96c6\u5408\u3002 \u6211\u4eec\u4f7f\u7528 @Prop() \u88c5\u9970\u5668\u6765\u786e\u5b9a\u6587\u6863\u7684\u5c5e\u6027\u3002 \u591a\u4e8f\u4e86 TypeScript \u5143\u6570\u636e\uff0c\u6211\u4eec\u7684\u5c5e\u6027\u7684\u6a21\u5f0f\u7c7b\u578b\u662f\u81ea\u52a8\u63a8\u65ad\u51fa\u6765\u7684\u3002 \u6211\u4eec\u5c06\u5728\u540e\u7eed\u6587\u7ae0\u4e2d\u5c55\u5f00\u5b9a\u4e49\u6a21\u5f0f\u7684\u4e3b\u9898\u3002","title":"\u5b9a\u4e49\u4e00\u4e2a\u6a21\u5f0f"},{"location":"docs/mongodb/introduction/#_3","text":"Mongoose \u5c06\u6211\u4eec\u7684\u6a21\u5f0f\u5305\u88c5\u6210\u6a21\u578b\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u6765\u521b\u5efa\u548c\u8bfb\u53d6\u6587\u6863\u3002 \u4e3a\u4e86\u8ba9\u6211\u4eec\u7684\u670d\u52a1\u4f7f\u7528\u6a21\u578b\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5176\u6dfb\u52a0\u5230\u6211\u4eec\u7684\u6a21\u5757\u4e2d\u3002 posts.module.ts TypeScript import { Module } from \"@nestjs/common\" ; import { MongooseModule } from \"@nestjs/mongoose\" ; import PostsController from \"./posts.controller\" ; import PostsService from \"./posts.service\" ; import { Post , PostSchema } from \"./post.schema\" ; @Module ({ imports : [ MongooseModule . forFeature ([{ name : Post.name , schema : PostSchema }])], controllers : [ PostsController ], providers : [ PostsService ], }) class PostsModule {} export default PostsModule ; \u6211\u4eec\u8fd8\u9700\u8981\u5c06\u6a21\u578b\u6ce8\u5165\u5230\u6211\u4eec\u7684\u670d\u52a1\u4e2d: posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} } export default PostsService ; \u4e00\u65e6\u6211\u4eec\u8fd9\u6837\u505a\u4e86\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u4e0e\u6211\u4eec\u7684\u6536\u85cf\u8fdb\u884c\u4ea4\u4e92\u4e86\u3002","title":"\u4f7f\u7528\u6a21\u578b"},{"location":"docs/mongodb/introduction/#_4","text":"\u6211\u4eec\u80fd\u505a\u7684\u6700\u57fa\u672c\u7684\u4e8b\u60c5\u662f\u83b7\u53d6\u6240\u6709\u6587\u6863\u7684\u5217\u8868\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981 find() \u65b9\u6cd5: posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async findAll () { return this . postModel . find (); } }","title":"\u83b7\u53d6\u6240\u6709\u5b9e\u4f53"},{"location":"docs/mongodb/introduction/#_5","text":"Every document we create is assigned with a string id. If we want to fetch a single document, we can use the findById method: posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; import { NotFoundException } from \"@nestjs/common\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async findOne ( id : string ) { const post = await this . postModel . findById ( id ); if ( ! post ) { throw new NotFoundException (); } return post ; } // ... }","title":"\u83b7\u53d6\u5355\u4e2a\u5b9e\u4f53"},{"location":"docs/mongodb/introduction/#_6","text":"In the fourth part of this series, we\u2019ve tackled data validation. Let\u2019s create a Data Transfer Object for our entity. post.dto.ts TypeScript import { IsString , IsNotEmpty } from \"class-validator\" ; export class PostDto { @IsString () @IsNotEmpty () title : string ; @IsString () @IsNotEmpty () content : string ; } export default PostDto ; We can now use it when creating a new instance of our model and saving it. posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; import PostDto from \"./dto/post.dto\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} create ( postData : PostDto ) { const createdPost = new this . postModel ( postData ); return createdPost . save (); } // ... }","title":"\u521b\u5efa\u5b9e\u4f53"},{"location":"docs/mongodb/introduction/#_7","text":"We might also need to update an entity we\u2019ve already created. To do that, we can use the findByIdAndUpdate method: posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; import { NotFoundException } from \"@nestjs/common\" ; import PostDto from \"./dto/post.dto\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async update ( id : string , postData : PostDto ) { const post = await this . postModel . findByIdAndUpdate ( id , postData ). setOptions ({ overwrite : true , new : true }); if ( ! post ) { throw new NotFoundException (); } return post ; } // ... } Above, a few important things are happening. Thanks to using the new: true parameter, the findByIdAndUpdate method returns an updated version of our entity. By using overwrite: true, we indicate that we want to replace a whole document instead of performing a partial update. This is what differentiates the PUT and PATCH HTTP methods. If you want to know more, check out TypeScript Express tutorial #15. Using PUT vs PATCH in MongoDB with Mongoose.","title":"\u66f4\u65b0\u5b9e\u4f53"},{"location":"docs/mongodb/introduction/#_8","text":"To delete an existing entity, we need to use the findByIdAndDelete method: posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; import { NotFoundException } from \"@nestjs/common\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async delete ( postId : string ) { const result = await this . postModel . findByIdAndDelete ( postId ); if ( ! result ) { throw new NotFoundException (); } } // ... }","title":"\u5220\u9664\u5b9e\u4f53"},{"location":"docs/mongodb/introduction/#_9","text":"\u4e00\u65e6\u6211\u4eec\u7684\u670d\u52a1\u542f\u52a8\u5e76\u8fd0\u884c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u63a7\u5236\u5668\u4e2d\u4f7f\u7528\u5b83: posts.controller.ts TypeScript import { Body , Controller , Delete , Get , Param , Post , Put } from \"@nestjs/common\" ; import PostsService from \"./posts.service\" ; import ParamsWithId from \"../utils/paramsWithId\" ; import PostDto from \"./dto/post.dto\" ; @Controller ( \"posts\" ) export default class PostsController { constructor ( private readonly postsService : PostsService ) {} @Get () async getAllPosts () { return this . postsService . findAll (); } @Get ( \":id\" ) async getPost ( @Param () { id } : ParamsWithId ) { return this . postsService . findOne ( id ); } @Post () async createPost ( @Body () post : PostDto ) { return this . postsService . create ( post ); } @Delete ( \":id\" ) async deletePost ( @Param () { id } : ParamsWithId ) { return this . postsService . delete ( id ); } @Put ( \":id\" ) async updatePost ( @Param () { id } : ParamsWithId , @Body () post : PostDto ) { return this . postsService . update ( id , post ); } } \u4e0a\u9762\u7684\u5173\u952e\u90e8\u5206\u662f\u6211\u4eec\u5df2\u7ecf\u5b9a\u4e49\u4e86 ParamsWithId \u7c7b\u3002 \u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u53ef\u4ee5\u9a8c\u8bc1\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684 MongoDB id: paramsWithId.ts TypeScript import { IsMongoId } from \"class-validator\" ; class ParamsWithId { @IsMongoId () id : string ; } export default ParamsWithId ;","title":"\u5b9a\u4e49\u4e00\u4e2a\u63a7\u5236\u5668"},{"location":"docs/mongodb/introduction/#summary","text":"In this article, we\u2019ve learned the very basics of how to use MongoDB with NestJS. To do that, we\u2019ve created a local MongoDB database using Docker Compose and connected it with NestJS and Mongoose. To better grasp MongoDB, we\u2019ve also compared it to SQL databases such as Postgres. There are still a lot of things to cover when it comes to MongoDB, so stay tuned!","title":"Summary"},{"location":"docs/mongodb/pagination/","text":"\u5f53\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u589e\u957f\u65f6\uff0c\u6570\u636e\u5e93\u4e5f\u4f1a\u589e\u957f\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u4ece\u7aef\u70b9\u8fd4\u56de\u5927\u91cf\u6570\u636e\u3002 \u4f8b\u5982\uff0c\u5bf9\u4e8e\u6211\u4eec\u7684\u524d\u7aef\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\uff0c\u8fd9\u53ef\u80fd\u4f1a\u88ab\u8bc1\u660e\u662f\u592a\u591a\u4e86\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u901a\u8fc7\u8fd4\u56de\u8bb0\u5f55\u7684\u4e00\u90e8\u5206\u6765\u5bf9\u8bb0\u5f55\u8fdb\u884c\u5206\u9875\u3002 \u672c\u6587\u63a2\u8ba8\u4e86\u4f7f\u7528 MongoDB \u548c Mongoose \u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u7684\u4e0d\u540c\u65b9\u6cd5\uff0c\u5e76\u8003\u8651\u4e86\u5b83\u4eec\u7684\u4f18\u7f3a\u70b9\u3002 \u60a8\u53ef\u4ee5\u5728\u8fd9\u4e2a\u5b58\u50a8\u5e93\u4e2d\u627e\u5230\u672c\u6587\u4e2d\u7684\u4ee3\u7801\u3002 \u4f7f\u7528 skip \u548c limit \u6700\u76f4\u63a5\u7684\u5206\u9875\u5f62\u5f0f\u662f\u671f\u671b\u7528\u6237\u63d0\u4f9b\u4ed6\u4eec\u60f3\u8981\u8df3\u8fc7\u7684\u6587\u6863\u6570\u91cf\u3002 \u6b64\u5916\uff0c\u4ed6\u4eec\u8fd8\u53ef\u4ee5\u58f0\u660e\u5e0c\u671b\u63a5\u6536\u591a\u5c11\u6587\u4ef6\u3002 \u4e3a\u4e86\u6210\u529f\u5b9e\u73b0\u5206\u9875\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u53ef\u9884\u6d4b\u7684\u6587\u6863\u987a\u5e8f\u3002 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5fc5\u987b\u5bf9\u5b83\u4eec\u8fdb\u884c\u6392\u5e8f: posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async findAll () { return this . postModel . find (). sort ({ _id : 1 }). populate ( \"author\" ). populate ( \"categories\" ); } // ... } export default PostsService ; \u901a\u8fc7\u6267\u884c sort({ _id: 1 }) \uff0c\u6211\u4eec\u6309\u5347\u5e8f\u6392\u5e8f\u3002 \u4e0a\u9762\uff0c\u6211\u4eec\u5728 MongoDB \u4e2d\u4f7f\u7528\u4e86 id \u7684\u4e00\u4e2a\u91cd\u8981\u7279\u6027\u3002 MongoDB \u4e2d\u7684 id \u7531 12 \u4e2a\u5b57\u8282\u7ec4\u6210\uff0c\u5176\u4e2d 4 \u4e2a\u5b57\u8282\u662f\u65f6\u95f4\u6233\u3002 \u5728\u8fd9\u6837\u505a\u7684\u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u610f\u8bc6\u5230\u4e00\u4e9b\u7f3a\u70b9: \u65f6\u95f4\u6233\u7684\u503c\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff0c\u5728\u540c\u4e00\u79d2\u5185\u521b\u5efa\u7684\u6587\u6863\u6ca1\u6709\u4fdd\u8bc1\u6709\u6548\u7684\u987a\u5e8f\uff0c id \u7531\u53ef\u80fd\u5177\u6709\u4e0d\u540c\u7cfb\u7edf\u65f6\u949f\u7684\u5ba2\u6237\u7aef\u751f\u6210\u3002 \u6839\u636e _id \u8fdb\u884c\u6392\u5e8f\u6709\u4e00\u4e2a\u663e\u8457\u7684\u4f18\u52bf\uff0c\u56e0\u4e3a MongoDB \u5728 _id \u5b57\u6bb5\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u552f\u4e00\u7684\u7d22\u5f15\u3002 \u8fd9\u589e\u52a0\u4e86\u6309 _id \u5bf9\u6587\u6863\u8fdb\u884c\u6392\u5e8f\u7684\u6027\u80fd\u3002 \u5b9e\u73b0\u5206\u9875 \u5b9e\u73b0\u4e0a\u8ff0\u65b9\u6cd5\u7684\u7b2c\u4e00\u6b65\u662f\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u67e5\u8be2\u53c2\u6570\u63d0\u4f9b\u504f\u79fb\u91cf\u548c\u9650\u5236\u3002 \u4e3a\u6b64\uff0c\u8ba9\u6211\u4eec\u4f7f\u7528\u7c7b\u9a8c\u8bc1\u5668\u548c\u7c7b\u8f6c\u6362\u5668\u3002 paginationParams.ts TypeScript import { IsNumber , Min , IsOptional } from \"class-validator\" ; import { Type } from \"class-transformer\" ; export class PaginationParams { @IsOptional () @Type (() => Number ) @IsNumber () @Min ( 0 ) skip? : number ; @IsOptional () @Type (() => Number ) @IsNumber () @Min ( 1 ) limit? : number ; } \u5982\u679c\u60a8\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u7c7b\u9a8c\u8bc1\u5668\u548c\u7c7b\u8f6c\u6362\u5668\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u9519\u8bef\u5904\u7406\u548c\u6570\u636e\u9a8c\u8bc1\u4ee5\u53ca\u4f7f\u7528\u62e6\u622a\u5668\u5e8f\u5217\u5316\u54cd\u5e94\u3002 \u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5728\u63a7\u5236\u5668\u4e2d\u4f7f\u7528\u4e0a\u8ff0\u53c2\u6570: posts.controller.ts TypeScript import { Controller , Get , Query , UseInterceptors } from \"@nestjs/common\" ; import PostsService from \"./posts.service\" ; import MongooseClassSerializerInterceptor from \"../utils/mongooseClassSerializer.interceptor\" ; import { Post as PostModel } from \"./post.schema\" ; import { PaginationParams } from \"../utils/paginationParams\" ; @Controller ( \"posts\" ) @UseInterceptors ( MongooseClassSerializerInterceptor ( PostModel )) export default class PostsController { constructor ( private readonly postsService : PostsService ) {} @Get () async getAllPosts ( @Query () { skip , limit } : PaginationParams ) { return this . postsService . findAll ( skip , limit ); } // ... } \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728 findAll \u65b9\u6cd5\u4e2d\u4f7f\u7528\u4e0a\u8ff0\u53c2\u6570\u3002 posts.service.ts TypeScript export default class PostsService { async findAll ( documentsToSkip = 0 , limitOfDocuments? : number ) { const query = this . postModel . find () . sort ({ _id : 1 }) . skip ( documentsToSkip ) . populate ( \"author\" ) . populate ( \"categories\" ); if ( limitOfDocuments ) { query . limit ( limitOfDocuments ); } return query ; } } \u901a\u8fc7\u8fd9\u6837\u505a\uff0c\u7528\u6237\u73b0\u5728\u53ef\u4ee5\u6307\u5b9a\u4ed6\u4eec\u60f3\u8981\u83b7\u53d6\u591a\u5c11\u7bc7\u6587\u7ae0\u4ee5\u53ca\u8981\u8df3\u8fc7\u591a\u5c11\u7bc7\u6587\u7ae0\u3002 \u4f8b\u5982\uff0c\u8bf7\u6c42 /posts?skip=20&limit=10 \u5728\u7701\u7565\u524d 20 \u4e2a\u6587\u6863\u7684\u540c\u65f6\u4ea7\u751f 10 \u4e2a\u5e16\u5b50\u3002 \u8ba1\u7b97\u6587\u4ef6 \u4e00\u79cd\u5e38\u89c1\u7684\u65b9\u6cd5\u662f\u663e\u793a\u6211\u4eec\u6709\u591a\u5c11\u9875\u9762\u7684\u6587\u7ae0\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u6570\u636e\u5e93\u4e2d\u6709\u591a\u5c11\u4e2a\u6587\u6863\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u805a\u5408\u6846\u67b6\u6216\u6267\u884c\u4e24\u4e2a\u5355\u72ec\u7684\u67e5\u8be2\u3002 posts.service.ts TypeScript export default class PostsService { async findAll ( documentsToSkip = 0 , limitOfDocuments? : number ) { const findQuery = this . postModel . find () . sort ({ _id : 1 }) . skip ( documentsToSkip ) . populate ( \"author\" ) . populate ( \"categories\" ); if ( limitOfDocuments ) { findQuery . limit ( limitOfDocuments ); } const results = await findQuery ; const count = await this . postModel . count (); return { results , count }; } } \u73b0\u5728\uff0c\u5728\u6211\u4eec\u7684\u54cd\u5e94\u4e2d\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u7ed3\u679c\u548c\u6587\u6863\u7684\u603b\u6570\u3002 \u7f3a\u70b9 \u4f7f\u7528\u9650\u5236\u548c\u504f\u79fb\u91cf\u7684\u89e3\u51b3\u65b9\u6848\u5728 SQL \u6570\u636e\u5e93\u548c MongoDB \u4e2d\u90fd\u88ab\u5e7f\u6cdb\u4f7f\u7528\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u7684\u6027\u80fd\u8fd8\u6709\u6539\u8fdb\u7684\u7a7a\u95f4\u3002 \u4f7f\u7528 skip() \u65b9\u6cd5\u4ecd\u7136\u9700\u8981\u6570\u636e\u5e93\u4ece\u6536\u96c6\u7684\u5f00\u59cb\u8fdb\u884c\u626b\u63cf\u3002 \u9996\u5148\uff0c\u6570\u636e\u5e93\u6839\u636e id \u5bf9\u6240\u6709\u6587\u6863\u8fdb\u884c\u6392\u5e8f\u3002 \u7136\u540e\uff0cMongoDB \u4e22\u5f03\u6307\u5b9a\u6570\u91cf\u7684\u6587\u6863\u3002 \u5bf9\u4e8e\u5927\u7684\u96c6\u5408\u6765\u8bf4\uff0c\u8fd9\u53ef\u80fd\u662f\u76f8\u5f53\u591a\u7684\u5de5\u4f5c\u3002 \u9664\u4e86\u6027\u80fd\u95ee\u9898\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8003\u8651\u4e00\u81f4\u6027\u3002 \u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u6587\u6863\u5e94\u8be5\u53ea\u51fa\u73b0\u5728\u7ed3\u679c\u4e2d\u4e00\u6b21\u3002 \u4e8b\u5b9e\u53ef\u80fd\u5e76\u975e\u5982\u6b64: \u7b2c\u4e00\u4e2a\u7528\u6237\u83b7\u53d6\u5e26\u6709\u6587\u7ae0\u7684\u7b2c 1 \u9875\uff0c \u5728\u8fd9\u4e4b\u540e\uff0c\u7b2c\u4e8c\u4e2a\u7528\u6237\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5e16\u5b50\u2014\u2014\u5728\u6392\u5e8f\u4e4b\u540e\uff0c\u5b83\u7ed3\u675f\u5728\u7b2c 1 \u9875\uff0c \u7b2c\u4e00\u4e2a\u7528\u6237\u83b7\u53d6\u7b2c\u4e8c\u4e2a\u9875\u9762\u3002 \u7528\u6237\u5728\u7b2c\u4e8c\u4e2a\u9875\u9762\u4e0a\u518d\u6b21\u770b\u5230\u7b2c\u4e00\u4e2a\u9875\u9762\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u7528\u6237\u8fd8\u9519\u8fc7\u4e86\u6dfb\u52a0\u5230\u7b2c\u4e00\u4e2a\u9875\u9762\u7684\u5143\u7d20\uff0c\u8fd9\u66f4\u7cdf\u7cd5\u3002 \u4f18\u52bf \u5e26\u6709\u9650\u5236\u548c\u504f\u79fb\u91cf\u7684\u65b9\u6cd5\u662f\u5e38\u89c1\u7684\uff0c\u5e76\u4e14\u6613\u4e8e\u5b9e\u73b0\u3002 \u5b83\u7684\u6700\u5927\u4f18\u70b9\u662f\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u591a\u4e2a\u9875\u9762\u7684\u6587\u6863\u3002 \u6b64\u5916\uff0c\u66f4\u6539\u7528\u4e8e\u6392\u5e8f\u7684\u5217\u4e5f\u5f88\u7b80\u5355\uff0c\u5305\u62ec\u6309\u591a\u4e2a\u5217\u6392\u5e8f\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u671f\u671b\u504f\u79fb\u91cf\u4e0d\u592a\u5927\uff0c\u4e14\u4e0d\u4e00\u81f4\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u90a3\u4e48\u5b83\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u952e\u96c6\u5206\u9875 \u5982\u679c\u6211\u4eec\u975e\u5e38\u5173\u5fc3\u6027\u80fd\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u5bfb\u627e\u4e0a\u8ff0\u65b9\u6cd5\u7684\u66ff\u4ee3\u65b9\u6cd5\u3002 \u5176\u4e2d\u4e4b\u4e00\u662f\u952e\u96c6\u5206\u9875\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 MongoDB \u4e2d\u7684 id \u7531\u65f6\u95f4\u6233\u7ec4\u6210\u7684\u4e8b\u5b9e\uff0c\u53ef\u4ee5\u8fdb\u884c\u6bd4\u8f83: \u6211\u4eec\u4ece API \u4e2d\u83b7\u53d6\u4e00\u9875\u6587\u6863\uff0c \u6211\u4eec\u68c0\u67e5\u6700\u540e\u4e00\u4e2a\u6587\u6863\u7684 id\uff0c \u7136\u540e\uff0c\u8bf7\u6c42 id \u5927\u4e8e\u4e0a\u4e00\u4e2a\u6587\u6863 id \u7684\u6587\u6863\u3002 \u7531\u4e8e\u91c7\u7528\u4e86\u4e0a\u8ff0\u65b9\u6cd5\uff0c\u6570\u636e\u5e93\u4e0d\u518d\u9700\u8981\u5904\u7406\u4e0d\u5fc5\u8981\u7684\u6587\u6863\u3002 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u4e3a\u7528\u6237\u521b\u5efa\u4e00\u79cd\u65b9\u5f0f\u6765\u63d0\u4f9b\u8d77\u59cb id\u3002 paginationParams.ts TypeScript import { IsNumber , IsMongoId , Min , IsOptional } from \"class-validator\" ; import { Type } from \"class-transformer\" ; export class PaginationParams { @IsOptional () @IsMongoId () startId? : string ; @IsOptional () @Type (() => Number ) @IsNumber () @Min ( 0 ) skip? : number ; @IsOptional () @Type (() => Number ) @IsNumber () @Min ( 1 ) limit? : number ; } \u73b0\u5728\uff0c\u6211\u4eec\u9700\u8981\u5728\u670d\u52a1\u4e2d\u4f7f\u7528 startId \u5c5e\u6027\u3002 posts.service.ts TypeScript async findAll ( documentsToSkip = 0 , limitOfDocuments? : number , startId? : string ) { const findQuery = this . postModel . find ({ _id : { $gt : startId }}). sort ({ _id : 1 }). skip ( documentsToSkip ). populate ( 'author' ). populate ( 'categories' ); if ( limitOfDocuments ) findQuery . limit ( limitOfDocuments ); const results = await findQuery ; const count = await this . postModel . count (); return { results , count }; } \u7531\u4e8e\u6267\u884c\u4e86 $gt: startId \uff0c\u7528\u6237\u53ea\u63a5\u6536\u5230\u4f7f\u7528\u63d0\u4f9b\u7684 id \u7684\u5e16\u5b50\u4e4b\u540e\u521b\u5efa\u7684\u5e16\u5b50\u3002 \u7f3a\u70b9 \u952e\u96c6\u5206\u9875\u7684\u4e00\u4e2a\u5f88\u5927\u7684\u7f3a\u70b9\u662f\u9700\u8981\u77e5\u9053\u6211\u4eec\u60f3\u8981\u5f00\u59cb\u7684\u786e\u5207\u6587\u6863\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u5176\u4e0e\u57fa\u4e8e\u504f\u79fb\u91cf\u7684\u5206\u9875\u76f8\u7ed3\u5408\u6765\u514b\u670d\u8fd9\u4e2a\u95ee\u9898\u3002 \u8fd9\u79cd\u65b9\u6cd5\u7684\u53e6\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u7528\u6237\u5f88\u96be\u4e00\u6b21\u8df3\u8fc7\u591a\u4e2a\u6570\u636e\u9875\u9762\u3002 \u4f18\u70b9 \u4e0e\u57fa\u4e8e\u504f\u79fb\u91cf\u7684\u65b9\u6cd5\u76f8\u6bd4\uff0c\u952e\u96c6\u5206\u9875\u6700\u663e\u8457\u7684\u4f18\u70b9\u662f\u6027\u80fd\u63d0\u9ad8\u3002 \u6b64\u5916\uff0c\u5b83\u8fd8\u6709\u52a9\u4e8e\u89e3\u51b3\u7528\u6237\u5728\u83b7\u53d6\u9875\u9762\u4e4b\u95f4\u6dfb\u52a0\u6216\u5220\u9664\u5143\u7d20\u65f6\u4e0d\u4e00\u81f4\u7684\u95ee\u9898\u3002 \u603b\u7ed3 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u6bd4\u8f83\u4e86 MongoDB \u548c Mongoose \u4e24\u79cd\u7c7b\u578b\u7684\u5206\u9875\u3002 \u6211\u4eec\u5df2\u7ecf\u8003\u8651\u4e86\u952e\u96c6\u5206\u9875\u548c\u57fa\u4e8e\u504f\u79fb\u91cf\u7684\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9\u3002 \u5b83\u4eec\u90fd\u4e0d\u662f\u5b8c\u7f8e\u7684\uff0c\u4f46\u5c06\u5b83\u4eec\u7ed3\u5408\u8d77\u6765\u53ef\u4ee5\u6db5\u76d6\u5f88\u591a\u4e0d\u540c\u7684\u60c5\u51b5\u3002 \u4e3a\u7279\u5b9a\u7684\u5de5\u4f5c\u9009\u62e9\u5408\u9002\u7684\u5de5\u5177\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002","title":"\u4f7f\u7528MongoDB\u548cMongoose\u5b9e\u73b0\u5206\u9875"},{"location":"docs/mongodb/pagination/#skip-limit","text":"\u6700\u76f4\u63a5\u7684\u5206\u9875\u5f62\u5f0f\u662f\u671f\u671b\u7528\u6237\u63d0\u4f9b\u4ed6\u4eec\u60f3\u8981\u8df3\u8fc7\u7684\u6587\u6863\u6570\u91cf\u3002 \u6b64\u5916\uff0c\u4ed6\u4eec\u8fd8\u53ef\u4ee5\u58f0\u660e\u5e0c\u671b\u63a5\u6536\u591a\u5c11\u6587\u4ef6\u3002 \u4e3a\u4e86\u6210\u529f\u5b9e\u73b0\u5206\u9875\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u53ef\u9884\u6d4b\u7684\u6587\u6863\u987a\u5e8f\u3002 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5fc5\u987b\u5bf9\u5b83\u4eec\u8fdb\u884c\u6392\u5e8f: posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async findAll () { return this . postModel . find (). sort ({ _id : 1 }). populate ( \"author\" ). populate ( \"categories\" ); } // ... } export default PostsService ; \u901a\u8fc7\u6267\u884c sort({ _id: 1 }) \uff0c\u6211\u4eec\u6309\u5347\u5e8f\u6392\u5e8f\u3002 \u4e0a\u9762\uff0c\u6211\u4eec\u5728 MongoDB \u4e2d\u4f7f\u7528\u4e86 id \u7684\u4e00\u4e2a\u91cd\u8981\u7279\u6027\u3002 MongoDB \u4e2d\u7684 id \u7531 12 \u4e2a\u5b57\u8282\u7ec4\u6210\uff0c\u5176\u4e2d 4 \u4e2a\u5b57\u8282\u662f\u65f6\u95f4\u6233\u3002 \u5728\u8fd9\u6837\u505a\u7684\u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u610f\u8bc6\u5230\u4e00\u4e9b\u7f3a\u70b9: \u65f6\u95f4\u6233\u7684\u503c\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff0c\u5728\u540c\u4e00\u79d2\u5185\u521b\u5efa\u7684\u6587\u6863\u6ca1\u6709\u4fdd\u8bc1\u6709\u6548\u7684\u987a\u5e8f\uff0c id \u7531\u53ef\u80fd\u5177\u6709\u4e0d\u540c\u7cfb\u7edf\u65f6\u949f\u7684\u5ba2\u6237\u7aef\u751f\u6210\u3002 \u6839\u636e _id \u8fdb\u884c\u6392\u5e8f\u6709\u4e00\u4e2a\u663e\u8457\u7684\u4f18\u52bf\uff0c\u56e0\u4e3a MongoDB \u5728 _id \u5b57\u6bb5\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u552f\u4e00\u7684\u7d22\u5f15\u3002 \u8fd9\u589e\u52a0\u4e86\u6309 _id \u5bf9\u6587\u6863\u8fdb\u884c\u6392\u5e8f\u7684\u6027\u80fd\u3002","title":"\u4f7f\u7528 skip \u548c limit"},{"location":"docs/mongodb/pagination/#_1","text":"\u5b9e\u73b0\u4e0a\u8ff0\u65b9\u6cd5\u7684\u7b2c\u4e00\u6b65\u662f\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u67e5\u8be2\u53c2\u6570\u63d0\u4f9b\u504f\u79fb\u91cf\u548c\u9650\u5236\u3002 \u4e3a\u6b64\uff0c\u8ba9\u6211\u4eec\u4f7f\u7528\u7c7b\u9a8c\u8bc1\u5668\u548c\u7c7b\u8f6c\u6362\u5668\u3002 paginationParams.ts TypeScript import { IsNumber , Min , IsOptional } from \"class-validator\" ; import { Type } from \"class-transformer\" ; export class PaginationParams { @IsOptional () @Type (() => Number ) @IsNumber () @Min ( 0 ) skip? : number ; @IsOptional () @Type (() => Number ) @IsNumber () @Min ( 1 ) limit? : number ; } \u5982\u679c\u60a8\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u7c7b\u9a8c\u8bc1\u5668\u548c\u7c7b\u8f6c\u6362\u5668\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u9519\u8bef\u5904\u7406\u548c\u6570\u636e\u9a8c\u8bc1\u4ee5\u53ca\u4f7f\u7528\u62e6\u622a\u5668\u5e8f\u5217\u5316\u54cd\u5e94\u3002 \u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5728\u63a7\u5236\u5668\u4e2d\u4f7f\u7528\u4e0a\u8ff0\u53c2\u6570: posts.controller.ts TypeScript import { Controller , Get , Query , UseInterceptors } from \"@nestjs/common\" ; import PostsService from \"./posts.service\" ; import MongooseClassSerializerInterceptor from \"../utils/mongooseClassSerializer.interceptor\" ; import { Post as PostModel } from \"./post.schema\" ; import { PaginationParams } from \"../utils/paginationParams\" ; @Controller ( \"posts\" ) @UseInterceptors ( MongooseClassSerializerInterceptor ( PostModel )) export default class PostsController { constructor ( private readonly postsService : PostsService ) {} @Get () async getAllPosts ( @Query () { skip , limit } : PaginationParams ) { return this . postsService . findAll ( skip , limit ); } // ... } \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728 findAll \u65b9\u6cd5\u4e2d\u4f7f\u7528\u4e0a\u8ff0\u53c2\u6570\u3002 posts.service.ts TypeScript export default class PostsService { async findAll ( documentsToSkip = 0 , limitOfDocuments? : number ) { const query = this . postModel . find () . sort ({ _id : 1 }) . skip ( documentsToSkip ) . populate ( \"author\" ) . populate ( \"categories\" ); if ( limitOfDocuments ) { query . limit ( limitOfDocuments ); } return query ; } } \u901a\u8fc7\u8fd9\u6837\u505a\uff0c\u7528\u6237\u73b0\u5728\u53ef\u4ee5\u6307\u5b9a\u4ed6\u4eec\u60f3\u8981\u83b7\u53d6\u591a\u5c11\u7bc7\u6587\u7ae0\u4ee5\u53ca\u8981\u8df3\u8fc7\u591a\u5c11\u7bc7\u6587\u7ae0\u3002 \u4f8b\u5982\uff0c\u8bf7\u6c42 /posts?skip=20&limit=10 \u5728\u7701\u7565\u524d 20 \u4e2a\u6587\u6863\u7684\u540c\u65f6\u4ea7\u751f 10 \u4e2a\u5e16\u5b50\u3002","title":"\u5b9e\u73b0\u5206\u9875"},{"location":"docs/mongodb/pagination/#_2","text":"\u4e00\u79cd\u5e38\u89c1\u7684\u65b9\u6cd5\u662f\u663e\u793a\u6211\u4eec\u6709\u591a\u5c11\u9875\u9762\u7684\u6587\u7ae0\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u6570\u636e\u5e93\u4e2d\u6709\u591a\u5c11\u4e2a\u6587\u6863\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u805a\u5408\u6846\u67b6\u6216\u6267\u884c\u4e24\u4e2a\u5355\u72ec\u7684\u67e5\u8be2\u3002 posts.service.ts TypeScript export default class PostsService { async findAll ( documentsToSkip = 0 , limitOfDocuments? : number ) { const findQuery = this . postModel . find () . sort ({ _id : 1 }) . skip ( documentsToSkip ) . populate ( \"author\" ) . populate ( \"categories\" ); if ( limitOfDocuments ) { findQuery . limit ( limitOfDocuments ); } const results = await findQuery ; const count = await this . postModel . count (); return { results , count }; } } \u73b0\u5728\uff0c\u5728\u6211\u4eec\u7684\u54cd\u5e94\u4e2d\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u7ed3\u679c\u548c\u6587\u6863\u7684\u603b\u6570\u3002","title":"\u8ba1\u7b97\u6587\u4ef6"},{"location":"docs/mongodb/pagination/#_3","text":"\u4f7f\u7528\u9650\u5236\u548c\u504f\u79fb\u91cf\u7684\u89e3\u51b3\u65b9\u6848\u5728 SQL \u6570\u636e\u5e93\u548c MongoDB \u4e2d\u90fd\u88ab\u5e7f\u6cdb\u4f7f\u7528\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u7684\u6027\u80fd\u8fd8\u6709\u6539\u8fdb\u7684\u7a7a\u95f4\u3002 \u4f7f\u7528 skip() \u65b9\u6cd5\u4ecd\u7136\u9700\u8981\u6570\u636e\u5e93\u4ece\u6536\u96c6\u7684\u5f00\u59cb\u8fdb\u884c\u626b\u63cf\u3002 \u9996\u5148\uff0c\u6570\u636e\u5e93\u6839\u636e id \u5bf9\u6240\u6709\u6587\u6863\u8fdb\u884c\u6392\u5e8f\u3002 \u7136\u540e\uff0cMongoDB \u4e22\u5f03\u6307\u5b9a\u6570\u91cf\u7684\u6587\u6863\u3002 \u5bf9\u4e8e\u5927\u7684\u96c6\u5408\u6765\u8bf4\uff0c\u8fd9\u53ef\u80fd\u662f\u76f8\u5f53\u591a\u7684\u5de5\u4f5c\u3002 \u9664\u4e86\u6027\u80fd\u95ee\u9898\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8003\u8651\u4e00\u81f4\u6027\u3002 \u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u6587\u6863\u5e94\u8be5\u53ea\u51fa\u73b0\u5728\u7ed3\u679c\u4e2d\u4e00\u6b21\u3002 \u4e8b\u5b9e\u53ef\u80fd\u5e76\u975e\u5982\u6b64: \u7b2c\u4e00\u4e2a\u7528\u6237\u83b7\u53d6\u5e26\u6709\u6587\u7ae0\u7684\u7b2c 1 \u9875\uff0c \u5728\u8fd9\u4e4b\u540e\uff0c\u7b2c\u4e8c\u4e2a\u7528\u6237\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5e16\u5b50\u2014\u2014\u5728\u6392\u5e8f\u4e4b\u540e\uff0c\u5b83\u7ed3\u675f\u5728\u7b2c 1 \u9875\uff0c \u7b2c\u4e00\u4e2a\u7528\u6237\u83b7\u53d6\u7b2c\u4e8c\u4e2a\u9875\u9762\u3002 \u7528\u6237\u5728\u7b2c\u4e8c\u4e2a\u9875\u9762\u4e0a\u518d\u6b21\u770b\u5230\u7b2c\u4e00\u4e2a\u9875\u9762\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u7528\u6237\u8fd8\u9519\u8fc7\u4e86\u6dfb\u52a0\u5230\u7b2c\u4e00\u4e2a\u9875\u9762\u7684\u5143\u7d20\uff0c\u8fd9\u66f4\u7cdf\u7cd5\u3002","title":"\u7f3a\u70b9"},{"location":"docs/mongodb/pagination/#_4","text":"\u5e26\u6709\u9650\u5236\u548c\u504f\u79fb\u91cf\u7684\u65b9\u6cd5\u662f\u5e38\u89c1\u7684\uff0c\u5e76\u4e14\u6613\u4e8e\u5b9e\u73b0\u3002 \u5b83\u7684\u6700\u5927\u4f18\u70b9\u662f\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u591a\u4e2a\u9875\u9762\u7684\u6587\u6863\u3002 \u6b64\u5916\uff0c\u66f4\u6539\u7528\u4e8e\u6392\u5e8f\u7684\u5217\u4e5f\u5f88\u7b80\u5355\uff0c\u5305\u62ec\u6309\u591a\u4e2a\u5217\u6392\u5e8f\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u671f\u671b\u504f\u79fb\u91cf\u4e0d\u592a\u5927\uff0c\u4e14\u4e0d\u4e00\u81f4\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u90a3\u4e48\u5b83\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u89e3\u51b3\u65b9\u6848\u3002","title":"\u4f18\u52bf"},{"location":"docs/mongodb/pagination/#_5","text":"\u5982\u679c\u6211\u4eec\u975e\u5e38\u5173\u5fc3\u6027\u80fd\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u5bfb\u627e\u4e0a\u8ff0\u65b9\u6cd5\u7684\u66ff\u4ee3\u65b9\u6cd5\u3002 \u5176\u4e2d\u4e4b\u4e00\u662f\u952e\u96c6\u5206\u9875\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 MongoDB \u4e2d\u7684 id \u7531\u65f6\u95f4\u6233\u7ec4\u6210\u7684\u4e8b\u5b9e\uff0c\u53ef\u4ee5\u8fdb\u884c\u6bd4\u8f83: \u6211\u4eec\u4ece API \u4e2d\u83b7\u53d6\u4e00\u9875\u6587\u6863\uff0c \u6211\u4eec\u68c0\u67e5\u6700\u540e\u4e00\u4e2a\u6587\u6863\u7684 id\uff0c \u7136\u540e\uff0c\u8bf7\u6c42 id \u5927\u4e8e\u4e0a\u4e00\u4e2a\u6587\u6863 id \u7684\u6587\u6863\u3002 \u7531\u4e8e\u91c7\u7528\u4e86\u4e0a\u8ff0\u65b9\u6cd5\uff0c\u6570\u636e\u5e93\u4e0d\u518d\u9700\u8981\u5904\u7406\u4e0d\u5fc5\u8981\u7684\u6587\u6863\u3002 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u4e3a\u7528\u6237\u521b\u5efa\u4e00\u79cd\u65b9\u5f0f\u6765\u63d0\u4f9b\u8d77\u59cb id\u3002 paginationParams.ts TypeScript import { IsNumber , IsMongoId , Min , IsOptional } from \"class-validator\" ; import { Type } from \"class-transformer\" ; export class PaginationParams { @IsOptional () @IsMongoId () startId? : string ; @IsOptional () @Type (() => Number ) @IsNumber () @Min ( 0 ) skip? : number ; @IsOptional () @Type (() => Number ) @IsNumber () @Min ( 1 ) limit? : number ; } \u73b0\u5728\uff0c\u6211\u4eec\u9700\u8981\u5728\u670d\u52a1\u4e2d\u4f7f\u7528 startId \u5c5e\u6027\u3002 posts.service.ts TypeScript async findAll ( documentsToSkip = 0 , limitOfDocuments? : number , startId? : string ) { const findQuery = this . postModel . find ({ _id : { $gt : startId }}). sort ({ _id : 1 }). skip ( documentsToSkip ). populate ( 'author' ). populate ( 'categories' ); if ( limitOfDocuments ) findQuery . limit ( limitOfDocuments ); const results = await findQuery ; const count = await this . postModel . count (); return { results , count }; } \u7531\u4e8e\u6267\u884c\u4e86 $gt: startId \uff0c\u7528\u6237\u53ea\u63a5\u6536\u5230\u4f7f\u7528\u63d0\u4f9b\u7684 id \u7684\u5e16\u5b50\u4e4b\u540e\u521b\u5efa\u7684\u5e16\u5b50\u3002","title":"\u952e\u96c6\u5206\u9875"},{"location":"docs/mongodb/pagination/#_6","text":"\u952e\u96c6\u5206\u9875\u7684\u4e00\u4e2a\u5f88\u5927\u7684\u7f3a\u70b9\u662f\u9700\u8981\u77e5\u9053\u6211\u4eec\u60f3\u8981\u5f00\u59cb\u7684\u786e\u5207\u6587\u6863\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u5176\u4e0e\u57fa\u4e8e\u504f\u79fb\u91cf\u7684\u5206\u9875\u76f8\u7ed3\u5408\u6765\u514b\u670d\u8fd9\u4e2a\u95ee\u9898\u3002 \u8fd9\u79cd\u65b9\u6cd5\u7684\u53e6\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u7528\u6237\u5f88\u96be\u4e00\u6b21\u8df3\u8fc7\u591a\u4e2a\u6570\u636e\u9875\u9762\u3002","title":"\u7f3a\u70b9"},{"location":"docs/mongodb/pagination/#_7","text":"\u4e0e\u57fa\u4e8e\u504f\u79fb\u91cf\u7684\u65b9\u6cd5\u76f8\u6bd4\uff0c\u952e\u96c6\u5206\u9875\u6700\u663e\u8457\u7684\u4f18\u70b9\u662f\u6027\u80fd\u63d0\u9ad8\u3002 \u6b64\u5916\uff0c\u5b83\u8fd8\u6709\u52a9\u4e8e\u89e3\u51b3\u7528\u6237\u5728\u83b7\u53d6\u9875\u9762\u4e4b\u95f4\u6dfb\u52a0\u6216\u5220\u9664\u5143\u7d20\u65f6\u4e0d\u4e00\u81f4\u7684\u95ee\u9898\u3002","title":"\u4f18\u70b9"},{"location":"docs/mongodb/pagination/#_8","text":"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u6bd4\u8f83\u4e86 MongoDB \u548c Mongoose \u4e24\u79cd\u7c7b\u578b\u7684\u5206\u9875\u3002 \u6211\u4eec\u5df2\u7ecf\u8003\u8651\u4e86\u952e\u96c6\u5206\u9875\u548c\u57fa\u4e8e\u504f\u79fb\u91cf\u7684\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9\u3002 \u5b83\u4eec\u90fd\u4e0d\u662f\u5b8c\u7f8e\u7684\uff0c\u4f46\u5c06\u5b83\u4eec\u7ed3\u5408\u8d77\u6765\u53ef\u4ee5\u6db5\u76d6\u5f88\u591a\u4e0d\u540c\u7684\u60c5\u51b5\u3002 \u4e3a\u7279\u5b9a\u7684\u5de5\u4f5c\u9009\u62e9\u5408\u9002\u7684\u5de5\u5177\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002","title":"\u603b\u7ed3"},{"location":"docs/mongodb/relationships/","text":"An essential thing about MongoDB is that it is non-relational. Therefore, it might not be the best fit if relationships are a big part of our database design. That being said, we definitely can mimic SQL-style relations by using references of embedding documents directly. You can get all of the code from this article in this repository. \u5b9a\u4e49\u521d\u59cb\u6a21\u5f0f In this article, we base the code on many of the functionalities we\u2019ve implemented in the previous parts of this series. If you want to know how we register and authenticate users, check out API with NestJS #3. Authenticating users with bcrypt, Passport, JWT, and cookies. Let\u2019s start by defining a schema for our users. user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document } from \"mongoose\" ; import { Exclude , Transform } from \"class-transformer\" ; export type UserDocument = User & Document ; @Schema () export class User { @Transform (({ value }) => value . toString ()) _id : string ; @Prop ({ unique : true }) email : string ; @Prop () name : string ; @Prop () @Exclude () password : string ; } export const UserSchema = SchemaFactory . createForClass ( User ); A few significant things are happening above. We use unique: true above to make sure that all users have unique emails. It sets up unique indexes under the hood and deserves a separate article. The @Exclude and @Transform decorators come from the class-transformer library. We cover serialization in more detail in API with NestJS #5. Serializing the response with interceptors. There is a significant catch here with MongoDB and Mongoose, though. The Mongoose library that we use for connecting to MongoDB and fetching entities does not return instances of our User class. Therefore, the ClassSerializerInterceptor won\u2019t work out of the box. Let\u2019s change it a bit using the mixin pattern. mongooseClassSerializer.interceptor.ts TypeScript import { ClassSerializerInterceptor , PlainLiteralObject , Type } from \"@nestjs/common\" ; import { ClassTransformOptions , plainToClass } from \"class-transformer\" ; import { Document } from \"mongoose\" ; function MongooseClassSerializerInterceptor ( classToIntercept : Type ) : typeof ClassSerializerInterceptor { return class Interceptor extends ClassSerializerInterceptor { private changePlainObjectToClass ( document : PlainLiteralObject ) { if ( ! ( document instanceof Document )) { return document ; } return plainToClass ( classToIntercept , document . toJSON ()); } private prepareResponse ( response : PlainLiteralObject | PlainLiteralObject []) { if ( Array . isArray ( response )) { return response . map ( this . changePlainObjectToClass ); } return this . changePlainObjectToClass ( response ); } serialize ( response : PlainLiteralObject | PlainLiteralObject [], options : ClassTransformOptions ) { return super . serialize ( this . prepareResponse ( response ), options ); } }; } export default MongooseClassSerializerInterceptor ; I wrote the above code with the help of Jay McDoniel. The official NestJS discord is a great place to ask for tips. Above, we change MongoDB documents into instances of the provided class. Let\u2019s use it with our controller: authentication.controller.ts TypeScript import { Body , Controller , Post , UseInterceptors } from \"@nestjs/common\" ; import { AuthenticationService } from \"./authentication.service\" ; import RegisterDto from \"./dto/register.dto\" ; import { User } from \"../users/user.schema\" ; import MongooseClassSerializerInterceptor from \"../utils/mongooseClassSerializer.interceptor\" ; @Controller ( \"authentication\" ) @UseInterceptors ( MongooseClassSerializerInterceptor ( User )) export class AuthenticationController { constructor ( private readonly authenticationService : AuthenticationService ) {} @Post ( \"register\" ) async register ( @Body () registrationData : RegisterDto ) { return this . authenticationService . register ( registrationData ); } // ... } Thanks to doing the above, we exclude the password when returning the data of the user. \u4e00\u5bf9\u4e00 With the one-to-one relationship, the document in the first collection has just one matching document in the second collection and vice versa. Let\u2019s create a schema for the address: address.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document } from \"mongoose\" ; import { Transform } from \"class-transformer\" ; export type AddressDocument = Address & Document ; @Schema () export class Address { @Transform (({ value }) => value . toString ()) _id : string ; @Prop () city : string ; @Prop () street : string ; } export const AddressSchema = SchemaFactory . createForClass ( Address ); There is a big chance that just one user is assigned to a particular address in our application. Therefore, it is a good example of a one-to-one relationship. Because of that, we can take advantage of embedding documents, which is an approach very good performance-wise. For it to work properly, we need to explicitly pass AddressSchema to the @Prop decorator: user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import { Exclude , Transform , Type } from \"class-transformer\" ; import { Address , AddressSchema } from \"./address.schema\" ; export type UserDocument = User & Document ; @Schema () export class User { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop ({ unique : true }) email : string ; @Prop () name : string ; @Prop () @Exclude () password : string ; @Prop ({ type : AddressSchema }) @Type (() => Address ) address : Address ; } export const UserSchema = SchemaFactory . createForClass ( User ); We use @Type(() => Address) above to make sure that the class-transformer transforms the Address object too. When we create the document for the user, MongoDB also creates the document for the address. It also gives it a distinct id. In our one-to-one relationship example, the user has just one address. Also, one address belongs to only one user. Since that\u2019s the case, it makes sense to embed the user straight into the user\u2019s document. This way, MongoDB can return it fast. Let\u2019s use MongoDB Compass to make sure that this is the case here. \u4e00\u5bf9\u591a We implement the one-to-many and many-to-one relationships when a document from the first collection can be linked to multiple documents from the second collection. Documents from the second collection can be linked to just one document from the first collection. Great examples are posts and authors where the user can be an author of multiple posts. In our implementation, the post can only have one author, though. post.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import * as mongoose from \"mongoose\" ; import { User } from \"../users/user.schema\" ; import { Transform , Type } from \"class-transformer\" ; export type PostDocument = Post & Document ; @Schema () export class Post { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop () title : string ; @Prop () content : string ; @Prop ({ type : mongoose . Schema . Types . ObjectId , ref : User.name }) @Type (() => User ) author : User ; } export const PostSchema = SchemaFactory . createForClass ( Post ); Thanks to defining the above reference, we can now assign the user to the author property in the post. posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; import PostDto from \"./dto/post.dto\" ; import { User } from \"../users/user.schema\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} create ( postData : PostDto , author : User ) { const createdPost = new this . postModel ({ ... postData , author , }); return createdPost . save (); } // ... } export default PostsService ; \u4f7f\u7528 Mongoose \u586b\u5145\u6570\u636e Saving the posts like that results in storing the id of the author in the database. A great thing about it is that we can easily replace the id with the actual data using the populate function Mongoose provides. posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async findAll () { return this . postModel . find (). populate ( \"author\" ); } // ... } export default PostsService ; Doing the above results in Mongoose returning the data of the author along with the post. \u53c2\u8003\u70b9\u7684\u65b9\u5411 In the code above, we store the id of the author in the document of the post. We could do that the other way around and store the posts\u2019 id in the author\u2019s document. When deciding that, we need to take a few factors into account. First, we need to think of how many references we want to store. Imagine a situation where we want to store logs for different machines in our server room. We need to remember that the maximum size of a MongoDB document is 16MB. If we store an array of the ids of the Log document in the Machine document, in theory, we could run out of space at some point. We can store a single id of the machine in the Log document instead. The other thing to think through is what queries we will run most often. For example, in our implementation of posts and authors, it is effortless to retrieve the author\u2019s data if we have the post. This is thanks to the fact that we store the author\u2019s id in the document of the post. On the other hand, it would be more time-consuming to retrieve a list of posts by a single user. To do that, we would need to query all of the posts and check the author\u2019s id. We could implement two-way referencing and store the reference on both sides to deal with the above issue. The above would speed up some of the queries but require us to put more effort into keeping our data consistent. \u5d4c\u5165 We could also embed the document of the posts into the document of the user. The advantage of doing that would be not performing additional queries to the database to get the missing information. But, unfortunately, this would make getting a particular post more difficult. \u591a\u5bf9\u591a Another important relationship to consider is many-to-many. A document from the first collection can refer to multiple documents from the second collection and the other way around. A good example would be posts that can belong to multiple categories. Also, a single category can belong to multiple posts. First, let\u2019s define the schema of our category. category.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import { Transform } from \"class-transformer\" ; export type CategoryDocument = Category & Document ; @Schema () export class Category { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop () name : string ; } export const CategorySchema = SchemaFactory . createForClass ( Category ); Now we can use it in the schema of the user. user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import * as mongoose from \"mongoose\" ; import { User } from \"../users/user.schema\" ; import { Transform , Type } from \"class-transformer\" ; import { Category } from \"../categories/category.schema\" ; export type PostDocument = Post & Document ; @Schema () export class Post { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop () title : string ; @Prop () content : string ; @Prop ({ type : mongoose . Schema . Types . ObjectId , ref : User.name }) @Type (() => User ) author : User ; @Prop ({ type : [{ type : mongoose . Schema . Types . ObjectId , ref : Category.name }], }) @Type (() => Category ) categories : Category ; } export const PostSchema = SchemaFactory . createForClass ( Post ); A thing worth knowing is that we can also use the populate method right after saving our document. TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; import PostDto from \"./dto/post.dto\" ; import { User } from \"../users/user.schema\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async create ( postData : PostDto , author : User ) { const createdPost = new this . postModel ({ ... postData , author , }); await createdPost . populate ( \"categories\" ). execPopulate (); return createdPost . save (); } // ... } export default PostsService ; \u4e0a\u9762\u7684\u4e00\u4ef6\u91cd\u8981\u7684\u4e8b\u60c5\u662f\uff0c\u6211\u4eec\u5728 MongoDB \u6587\u6863\u7684\u4e00\u4e2a\u5b9e\u4f8b\u4e0a\u8c03\u7528 populate \u65b9\u6cd5\u3002 \u7531\u4e8e\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8c03\u7528 execPopulate \u6765\u8fd0\u884c\u5b83\u3002 \u5728\u6211\u4eec\u7684\u5176\u4f59\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728 MongoDB \u67e5\u8be2\u7684\u4e00\u4e2a\u5b9e\u4f8b\u4e0a\u8c03\u7528 populate\uff0c\u8fd9\u662f\u4e0d\u9700\u8981\u7684\u3002 \u603b\u7ed3 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u4f7f\u7528 NestJS \u5728 MongoDB \u4e2d\u5b9a\u4e49\u6587\u6863\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u6211\u4eec\u5df2\u7ecf\u5b66\u4e60\u4e86\u5404\u79cd\u7c7b\u578b\u7684\u5173\u7cfb\uff0c\u5e76\u8003\u8651\u4e86\u5982\u4f55\u5b58\u50a8\u5f15\u7528\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002 \u6211\u4eec\u8fd8\u8ba8\u8bba\u4e86\u5982\u4f55\u7528 NestJS \u548c MongoDB \u5b9e\u73b0\u5e8f\u5217\u5316\u3002 \u8fd8\u6709\u5f88\u591a\u4e1c\u897f\u8981\u5b66\uff0c\u6240\u4ee5\u8bf7\u7ee7\u7eed\u5173\u6ce8!","title":"\u5b9e\u73b0\u4e0eMongoDB\u7684\u5173\u7cfb"},{"location":"docs/mongodb/relationships/#_1","text":"In this article, we base the code on many of the functionalities we\u2019ve implemented in the previous parts of this series. If you want to know how we register and authenticate users, check out API with NestJS #3. Authenticating users with bcrypt, Passport, JWT, and cookies. Let\u2019s start by defining a schema for our users. user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document } from \"mongoose\" ; import { Exclude , Transform } from \"class-transformer\" ; export type UserDocument = User & Document ; @Schema () export class User { @Transform (({ value }) => value . toString ()) _id : string ; @Prop ({ unique : true }) email : string ; @Prop () name : string ; @Prop () @Exclude () password : string ; } export const UserSchema = SchemaFactory . createForClass ( User ); A few significant things are happening above. We use unique: true above to make sure that all users have unique emails. It sets up unique indexes under the hood and deserves a separate article. The @Exclude and @Transform decorators come from the class-transformer library. We cover serialization in more detail in API with NestJS #5. Serializing the response with interceptors. There is a significant catch here with MongoDB and Mongoose, though. The Mongoose library that we use for connecting to MongoDB and fetching entities does not return instances of our User class. Therefore, the ClassSerializerInterceptor won\u2019t work out of the box. Let\u2019s change it a bit using the mixin pattern. mongooseClassSerializer.interceptor.ts TypeScript import { ClassSerializerInterceptor , PlainLiteralObject , Type } from \"@nestjs/common\" ; import { ClassTransformOptions , plainToClass } from \"class-transformer\" ; import { Document } from \"mongoose\" ; function MongooseClassSerializerInterceptor ( classToIntercept : Type ) : typeof ClassSerializerInterceptor { return class Interceptor extends ClassSerializerInterceptor { private changePlainObjectToClass ( document : PlainLiteralObject ) { if ( ! ( document instanceof Document )) { return document ; } return plainToClass ( classToIntercept , document . toJSON ()); } private prepareResponse ( response : PlainLiteralObject | PlainLiteralObject []) { if ( Array . isArray ( response )) { return response . map ( this . changePlainObjectToClass ); } return this . changePlainObjectToClass ( response ); } serialize ( response : PlainLiteralObject | PlainLiteralObject [], options : ClassTransformOptions ) { return super . serialize ( this . prepareResponse ( response ), options ); } }; } export default MongooseClassSerializerInterceptor ; I wrote the above code with the help of Jay McDoniel. The official NestJS discord is a great place to ask for tips. Above, we change MongoDB documents into instances of the provided class. Let\u2019s use it with our controller: authentication.controller.ts TypeScript import { Body , Controller , Post , UseInterceptors } from \"@nestjs/common\" ; import { AuthenticationService } from \"./authentication.service\" ; import RegisterDto from \"./dto/register.dto\" ; import { User } from \"../users/user.schema\" ; import MongooseClassSerializerInterceptor from \"../utils/mongooseClassSerializer.interceptor\" ; @Controller ( \"authentication\" ) @UseInterceptors ( MongooseClassSerializerInterceptor ( User )) export class AuthenticationController { constructor ( private readonly authenticationService : AuthenticationService ) {} @Post ( \"register\" ) async register ( @Body () registrationData : RegisterDto ) { return this . authenticationService . register ( registrationData ); } // ... } Thanks to doing the above, we exclude the password when returning the data of the user.","title":"\u5b9a\u4e49\u521d\u59cb\u6a21\u5f0f"},{"location":"docs/mongodb/relationships/#_2","text":"With the one-to-one relationship, the document in the first collection has just one matching document in the second collection and vice versa. Let\u2019s create a schema for the address: address.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document } from \"mongoose\" ; import { Transform } from \"class-transformer\" ; export type AddressDocument = Address & Document ; @Schema () export class Address { @Transform (({ value }) => value . toString ()) _id : string ; @Prop () city : string ; @Prop () street : string ; } export const AddressSchema = SchemaFactory . createForClass ( Address ); There is a big chance that just one user is assigned to a particular address in our application. Therefore, it is a good example of a one-to-one relationship. Because of that, we can take advantage of embedding documents, which is an approach very good performance-wise. For it to work properly, we need to explicitly pass AddressSchema to the @Prop decorator: user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import { Exclude , Transform , Type } from \"class-transformer\" ; import { Address , AddressSchema } from \"./address.schema\" ; export type UserDocument = User & Document ; @Schema () export class User { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop ({ unique : true }) email : string ; @Prop () name : string ; @Prop () @Exclude () password : string ; @Prop ({ type : AddressSchema }) @Type (() => Address ) address : Address ; } export const UserSchema = SchemaFactory . createForClass ( User ); We use @Type(() => Address) above to make sure that the class-transformer transforms the Address object too. When we create the document for the user, MongoDB also creates the document for the address. It also gives it a distinct id. In our one-to-one relationship example, the user has just one address. Also, one address belongs to only one user. Since that\u2019s the case, it makes sense to embed the user straight into the user\u2019s document. This way, MongoDB can return it fast. Let\u2019s use MongoDB Compass to make sure that this is the case here.","title":"\u4e00\u5bf9\u4e00"},{"location":"docs/mongodb/relationships/#_3","text":"We implement the one-to-many and many-to-one relationships when a document from the first collection can be linked to multiple documents from the second collection. Documents from the second collection can be linked to just one document from the first collection. Great examples are posts and authors where the user can be an author of multiple posts. In our implementation, the post can only have one author, though. post.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import * as mongoose from \"mongoose\" ; import { User } from \"../users/user.schema\" ; import { Transform , Type } from \"class-transformer\" ; export type PostDocument = Post & Document ; @Schema () export class Post { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop () title : string ; @Prop () content : string ; @Prop ({ type : mongoose . Schema . Types . ObjectId , ref : User.name }) @Type (() => User ) author : User ; } export const PostSchema = SchemaFactory . createForClass ( Post ); Thanks to defining the above reference, we can now assign the user to the author property in the post. posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; import PostDto from \"./dto/post.dto\" ; import { User } from \"../users/user.schema\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} create ( postData : PostDto , author : User ) { const createdPost = new this . postModel ({ ... postData , author , }); return createdPost . save (); } // ... } export default PostsService ;","title":"\u4e00\u5bf9\u591a"},{"location":"docs/mongodb/relationships/#mongoose","text":"Saving the posts like that results in storing the id of the author in the database. A great thing about it is that we can easily replace the id with the actual data using the populate function Mongoose provides. posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async findAll () { return this . postModel . find (). populate ( \"author\" ); } // ... } export default PostsService ; Doing the above results in Mongoose returning the data of the author along with the post.","title":"\u4f7f\u7528 Mongoose \u586b\u5145\u6570\u636e"},{"location":"docs/mongodb/relationships/#_4","text":"In the code above, we store the id of the author in the document of the post. We could do that the other way around and store the posts\u2019 id in the author\u2019s document. When deciding that, we need to take a few factors into account. First, we need to think of how many references we want to store. Imagine a situation where we want to store logs for different machines in our server room. We need to remember that the maximum size of a MongoDB document is 16MB. If we store an array of the ids of the Log document in the Machine document, in theory, we could run out of space at some point. We can store a single id of the machine in the Log document instead. The other thing to think through is what queries we will run most often. For example, in our implementation of posts and authors, it is effortless to retrieve the author\u2019s data if we have the post. This is thanks to the fact that we store the author\u2019s id in the document of the post. On the other hand, it would be more time-consuming to retrieve a list of posts by a single user. To do that, we would need to query all of the posts and check the author\u2019s id. We could implement two-way referencing and store the reference on both sides to deal with the above issue. The above would speed up some of the queries but require us to put more effort into keeping our data consistent.","title":"\u53c2\u8003\u70b9\u7684\u65b9\u5411"},{"location":"docs/mongodb/relationships/#_5","text":"We could also embed the document of the posts into the document of the user. The advantage of doing that would be not performing additional queries to the database to get the missing information. But, unfortunately, this would make getting a particular post more difficult.","title":"\u5d4c\u5165"},{"location":"docs/mongodb/relationships/#_6","text":"Another important relationship to consider is many-to-many. A document from the first collection can refer to multiple documents from the second collection and the other way around. A good example would be posts that can belong to multiple categories. Also, a single category can belong to multiple posts. First, let\u2019s define the schema of our category. category.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import { Transform } from \"class-transformer\" ; export type CategoryDocument = Category & Document ; @Schema () export class Category { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop () name : string ; } export const CategorySchema = SchemaFactory . createForClass ( Category ); Now we can use it in the schema of the user. user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import * as mongoose from \"mongoose\" ; import { User } from \"../users/user.schema\" ; import { Transform , Type } from \"class-transformer\" ; import { Category } from \"../categories/category.schema\" ; export type PostDocument = Post & Document ; @Schema () export class Post { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop () title : string ; @Prop () content : string ; @Prop ({ type : mongoose . Schema . Types . ObjectId , ref : User.name }) @Type (() => User ) author : User ; @Prop ({ type : [{ type : mongoose . Schema . Types . ObjectId , ref : Category.name }], }) @Type (() => Category ) categories : Category ; } export const PostSchema = SchemaFactory . createForClass ( Post ); A thing worth knowing is that we can also use the populate method right after saving our document. TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; import PostDto from \"./dto/post.dto\" ; import { User } from \"../users/user.schema\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async create ( postData : PostDto , author : User ) { const createdPost = new this . postModel ({ ... postData , author , }); await createdPost . populate ( \"categories\" ). execPopulate (); return createdPost . save (); } // ... } export default PostsService ; \u4e0a\u9762\u7684\u4e00\u4ef6\u91cd\u8981\u7684\u4e8b\u60c5\u662f\uff0c\u6211\u4eec\u5728 MongoDB \u6587\u6863\u7684\u4e00\u4e2a\u5b9e\u4f8b\u4e0a\u8c03\u7528 populate \u65b9\u6cd5\u3002 \u7531\u4e8e\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8c03\u7528 execPopulate \u6765\u8fd0\u884c\u5b83\u3002 \u5728\u6211\u4eec\u7684\u5176\u4f59\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728 MongoDB \u67e5\u8be2\u7684\u4e00\u4e2a\u5b9e\u4f8b\u4e0a\u8c03\u7528 populate\uff0c\u8fd9\u662f\u4e0d\u9700\u8981\u7684\u3002","title":"\u591a\u5bf9\u591a"},{"location":"docs/mongodb/relationships/#_7","text":"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u4f7f\u7528 NestJS \u5728 MongoDB \u4e2d\u5b9a\u4e49\u6587\u6863\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u6211\u4eec\u5df2\u7ecf\u5b66\u4e60\u4e86\u5404\u79cd\u7c7b\u578b\u7684\u5173\u7cfb\uff0c\u5e76\u8003\u8651\u4e86\u5982\u4f55\u5b58\u50a8\u5f15\u7528\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002 \u6211\u4eec\u8fd8\u8ba8\u8bba\u4e86\u5982\u4f55\u7528 NestJS \u548c MongoDB \u5b9e\u73b0\u5e8f\u5217\u5316\u3002 \u8fd8\u6709\u5f88\u591a\u4e1c\u897f\u8981\u5b66\uff0c\u6240\u4ee5\u8bf7\u7ee7\u7eed\u5173\u6ce8!","title":"\u603b\u7ed3"},{"location":"docs/mongodb/transactions/","text":"\u5728\u4f7f\u7528\u6570\u636e\u5e93\u65f6\uff0c\u4fdd\u6301\u6570\u636e\u7684\u5b8c\u6574\u6027\u81f3\u5173\u91cd\u8981\u3002 \u4f8b\u5982\uff0c\u60f3\u8c61\u4e00\u4e0b\u628a\u94b1\u4ece\u4e00\u4e2a\u94f6\u884c\u8d26\u6237\u8f6c\u5230\u53e6\u4e00\u4e2a\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u6267\u884c\u4e24\u4e2a\u72ec\u7acb\u7684\u64cd\u4f5c\u3002 \u9996\u5148\uff0c\u6211\u4eec\u4ece\u7b2c\u4e00\u4e2a\u94f6\u884c\u8d26\u6237\u4e2d\u63d0\u53d6\u91d1\u989d\u3002 \u7136\u540e\uff0c\u6211\u4eec\u5c06\u76f8\u540c\u7684\u91d1\u989d\u6dfb\u52a0\u5230\u7b2c\u4e8c\u4e2a\u5e10\u6237\u3002 \u5982\u679c\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u7b2c\u4e8c\u6b21\u64cd\u4f5c\u5931\u8d25\uff0c\u800c\u7b2c\u4e00\u6b21\u64cd\u4f5c\u6210\u529f\uff0c\u5219\u4f1a\u5bfc\u81f4\u6570\u636e\u5e93\u7684\u72b6\u6001\u65e0\u6548\u3002 \u6211\u4eec\u9700\u8981\u4e0a\u8ff0\u6240\u6709\u64cd\u4f5c\u7684\u6210\u529f\u6216\u5931\u8d25\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e8b\u52a1\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002 ACID properties A transaction to be valid needs to have the following properties. Together, they form the ACID acronym: Atomicity Operations in the transaction are a single unit. Therefore, it either fully succeeds or fails together. Consistency The transaction moves the database from one valid state to the next. Isolation The isolation property ensures that multiple transactions can occur concurrently, resulting in a valid database state. To better understand that, let\u2019s continue the example with the banking transaction from above. Another transaction should see the funds in one account or the other, but not in both. Durability Once the changes from a transaction are committed, they should survive permanently. Transactions in MongoDB and Mongoose Fortunately, MongoDB is equipped with support for multi-document transactions since version 4.0. We can tell the database that we do a transaction, and it keeps track of every update we make. If something fails, then the database rolls back all our updates. The above requires the database to do extra work making notes of our updates and locking the involved resources. Other clients trying to perform operations on the data might be stuck waiting for the transaction to complete. Therefore, this is something to watch out for. Running a replica set Transactions with MongoDB only work with a replica set, a group of MongoDB processes that maintain the same data set. In this series, we\u2019ve been using docker-compose to run MongoDB for us. We can either run a replica set locally with docker or use MongoDB atlas. For this article, I\u2019m doing the latter. If you want to run a replica set, check out this page on Stackoverflow. Deleting a user Let\u2019s implement a feature of deleting a user. When we remove users from the database, we also want to delete all posts they wrote. users.service.ts TypeScript import { Injectable , NotFoundException } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Model } from \"mongoose\" ; import { UserDocument , User } from \"./user.schema\" ; import PostsService from \"../posts/posts.service\" ; @Injectable () class UsersService { constructor ( @InjectModel ( User . name ) private userModel : Model < UserDocument > , private readonly postsService : PostsService ) {} async delete ( userId : string ) { const user = await this . userModel . findByIdAndDelete ( userId ). populate ( \"posts\" ); if ( ! user ) { throw new NotFoundException (); } const posts = user . posts ; return this . postsService . deleteMany ( posts . map (( post ) => post . _id . toString ())); } // ... } export default UsersService ; To do the above, we also need to define the deleteMany in our PostsService. posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async deleteMany ( ids : string []) { return this . postModel . deleteMany ({ _id : ids }); } // ... } export default PostsService ; The shortcoming of the above code is that the delete method might succeed partially. When this happens, we delete the user, but the posts are left in the database without the author. We can deal with the above issue by defining a transaction. To start a transaction, we need to access the connection we\u2019ve established with MongoDB. To do that, we can use the @InjectConnection decorator: users.service.ts TypeScript import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Model } from \"mongoose\" ; import { UserDocument , User } from \"./user.schema\" ; import PostsService from \"../posts/posts.service\" ; import { InjectConnection } from \"@nestjs/mongoose\" ; import * as mongoose from \"mongoose\" ; @Injectable () class UsersService { constructor ( @InjectModel ( User . name ) private userModel : Model < UserDocument > , private readonly postsService : PostsService , @InjectConnection () private readonly connection : mongoose.Connection ) {} // ... } export default UsersService ; \u63a7\u5236\u4e8b\u52a1 There are two ways of working with transactions with Mongoose. To have full control over it, we can call the startTransaction method: TypeScript const session = await this . connection . startSession (); session . startTransaction (); When we indicate that everything worked fine, we need to call session.commitTransaction(). This writes our changes to the database. If we encounter an error, we need to call session.abortTransaction() to indicate that we want to discard the operations we\u2019ve performed so far. Once we\u2019re done with the transaction, we need to call the session.endSession() method. To indicate that we want to perform an operation within a given session, we need to use the session() method. users.service.ts TypeScript class UsersService { async delete ( userId : string ) { const session = await this . connection . startSession (); session . startTransaction (); try { const user = await this . userModel . findByIdAndDelete ( userId ). populate ( \"posts\" ). session ( session ); if ( ! user ) { throw new NotFoundException (); } const posts = user . posts ; await this . postsService . deleteMany ( posts . map (( post ) => post . _id . toString ())); await session . commitTransaction (); } catch ( error ) { await session . abortTransaction (); throw error ; } finally { session . endSession (); } } } Still, there is an important issue with the above code. Although we\u2019ve deleted the user within a transaction, we didn\u2019t do that when removing posts. To delete posts within a session, we need to modify the postsService.deleteMany function: posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; import * as mongoose from \"mongoose\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async deleteMany ( ids : string [], session : mongoose.ClientSession | null = null ) { return this . postModel . deleteMany ({ _id : ids }). session ( session ); } // ... } export default PostsService ; By adding the optional session argument to the deleteMany method, we can delete posts within a transaction. Let\u2019s use it: users.service.ts TypeScript class UsersService { async delete ( userId : string ) { const session = await this . connection . startSession (); session . startTransaction (); try { const user = await this . userModel . findByIdAndDelete ( userId ). populate ( \"posts\" ). session ( session ); if ( ! user ) { throw new NotFoundException (); } const posts = user . posts ; await this . postsService . deleteMany ( posts . map (( post ) => post . _id . toString ()), session ); await session . commitTransaction (); } catch ( error ) { await session . abortTransaction (); throw error ; } finally { session . endSession (); } } } If removing the posts fail for some reason, the user is not deleted from the database either. Thanks to that, the whole operation either succeeds as a whole or fails completely. A simpler way of using transactions Instead of controlling every step of the transaction manually, we can use the session.withTransaction() helper. users.service.ts TypeScript async delete ( userId : string ) { const session = await this . connection . startSession (); await session . withTransaction ( async () => { const user = await this . userModel . findByIdAndDelete ( userId ) . populate ( 'posts' ) . session ( session ); if ( ! user ) { throw new NotFoundException (); } const posts = user . posts ; await this . postsService . deleteMany ( posts . map (( post ) => post . _id . toString ()), session , ); }); session . endSession (); } Please notice that we no longer need to call startTransaction(), commitTransaction(), and abortTransaction(). We still are required to end the session with the endSession method, though. Summary In this article, we\u2019ve gone through transactions in MongoDB by describing their principles and use-cases. We\u2019ve also implemented them into our application with Mongoose. It is definitely worth it to understand transactions because they can increase the reliability of our application quite a lot.","title":"\u4e0eMongoDB\u548cMongoose\u7ba1\u7406\u4e8b\u52a1"},{"location":"docs/mongodb/transactions/#acid-properties","text":"A transaction to be valid needs to have the following properties. Together, they form the ACID acronym:","title":"ACID properties"},{"location":"docs/mongodb/transactions/#atomicity","text":"Operations in the transaction are a single unit. Therefore, it either fully succeeds or fails together.","title":"Atomicity"},{"location":"docs/mongodb/transactions/#consistency","text":"The transaction moves the database from one valid state to the next.","title":"Consistency"},{"location":"docs/mongodb/transactions/#isolation","text":"The isolation property ensures that multiple transactions can occur concurrently, resulting in a valid database state. To better understand that, let\u2019s continue the example with the banking transaction from above. Another transaction should see the funds in one account or the other, but not in both.","title":"Isolation"},{"location":"docs/mongodb/transactions/#durability","text":"Once the changes from a transaction are committed, they should survive permanently.","title":"Durability"},{"location":"docs/mongodb/transactions/#transactions-in-mongodb-and-mongoose","text":"Fortunately, MongoDB is equipped with support for multi-document transactions since version 4.0. We can tell the database that we do a transaction, and it keeps track of every update we make. If something fails, then the database rolls back all our updates. The above requires the database to do extra work making notes of our updates and locking the involved resources. Other clients trying to perform operations on the data might be stuck waiting for the transaction to complete. Therefore, this is something to watch out for.","title":"Transactions in MongoDB and Mongoose"},{"location":"docs/mongodb/transactions/#running-a-replica-set","text":"Transactions with MongoDB only work with a replica set, a group of MongoDB processes that maintain the same data set. In this series, we\u2019ve been using docker-compose to run MongoDB for us. We can either run a replica set locally with docker or use MongoDB atlas. For this article, I\u2019m doing the latter. If you want to run a replica set, check out this page on Stackoverflow.","title":"Running a replica set"},{"location":"docs/mongodb/transactions/#deleting-a-user","text":"Let\u2019s implement a feature of deleting a user. When we remove users from the database, we also want to delete all posts they wrote. users.service.ts TypeScript import { Injectable , NotFoundException } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Model } from \"mongoose\" ; import { UserDocument , User } from \"./user.schema\" ; import PostsService from \"../posts/posts.service\" ; @Injectable () class UsersService { constructor ( @InjectModel ( User . name ) private userModel : Model < UserDocument > , private readonly postsService : PostsService ) {} async delete ( userId : string ) { const user = await this . userModel . findByIdAndDelete ( userId ). populate ( \"posts\" ); if ( ! user ) { throw new NotFoundException (); } const posts = user . posts ; return this . postsService . deleteMany ( posts . map (( post ) => post . _id . toString ())); } // ... } export default UsersService ; To do the above, we also need to define the deleteMany in our PostsService. posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async deleteMany ( ids : string []) { return this . postModel . deleteMany ({ _id : ids }); } // ... } export default PostsService ; The shortcoming of the above code is that the delete method might succeed partially. When this happens, we delete the user, but the posts are left in the database without the author. We can deal with the above issue by defining a transaction. To start a transaction, we need to access the connection we\u2019ve established with MongoDB. To do that, we can use the @InjectConnection decorator: users.service.ts TypeScript import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Model } from \"mongoose\" ; import { UserDocument , User } from \"./user.schema\" ; import PostsService from \"../posts/posts.service\" ; import { InjectConnection } from \"@nestjs/mongoose\" ; import * as mongoose from \"mongoose\" ; @Injectable () class UsersService { constructor ( @InjectModel ( User . name ) private userModel : Model < UserDocument > , private readonly postsService : PostsService , @InjectConnection () private readonly connection : mongoose.Connection ) {} // ... } export default UsersService ;","title":"Deleting a user"},{"location":"docs/mongodb/transactions/#_1","text":"There are two ways of working with transactions with Mongoose. To have full control over it, we can call the startTransaction method: TypeScript const session = await this . connection . startSession (); session . startTransaction (); When we indicate that everything worked fine, we need to call session.commitTransaction(). This writes our changes to the database. If we encounter an error, we need to call session.abortTransaction() to indicate that we want to discard the operations we\u2019ve performed so far. Once we\u2019re done with the transaction, we need to call the session.endSession() method. To indicate that we want to perform an operation within a given session, we need to use the session() method. users.service.ts TypeScript class UsersService { async delete ( userId : string ) { const session = await this . connection . startSession (); session . startTransaction (); try { const user = await this . userModel . findByIdAndDelete ( userId ). populate ( \"posts\" ). session ( session ); if ( ! user ) { throw new NotFoundException (); } const posts = user . posts ; await this . postsService . deleteMany ( posts . map (( post ) => post . _id . toString ())); await session . commitTransaction (); } catch ( error ) { await session . abortTransaction (); throw error ; } finally { session . endSession (); } } } Still, there is an important issue with the above code. Although we\u2019ve deleted the user within a transaction, we didn\u2019t do that when removing posts. To delete posts within a session, we need to modify the postsService.deleteMany function: posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; import * as mongoose from \"mongoose\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async deleteMany ( ids : string [], session : mongoose.ClientSession | null = null ) { return this . postModel . deleteMany ({ _id : ids }). session ( session ); } // ... } export default PostsService ; By adding the optional session argument to the deleteMany method, we can delete posts within a transaction. Let\u2019s use it: users.service.ts TypeScript class UsersService { async delete ( userId : string ) { const session = await this . connection . startSession (); session . startTransaction (); try { const user = await this . userModel . findByIdAndDelete ( userId ). populate ( \"posts\" ). session ( session ); if ( ! user ) { throw new NotFoundException (); } const posts = user . posts ; await this . postsService . deleteMany ( posts . map (( post ) => post . _id . toString ()), session ); await session . commitTransaction (); } catch ( error ) { await session . abortTransaction (); throw error ; } finally { session . endSession (); } } } If removing the posts fail for some reason, the user is not deleted from the database either. Thanks to that, the whole operation either succeeds as a whole or fails completely. A simpler way of using transactions Instead of controlling every step of the transaction manually, we can use the session.withTransaction() helper. users.service.ts TypeScript async delete ( userId : string ) { const session = await this . connection . startSession (); await session . withTransaction ( async () => { const user = await this . userModel . findByIdAndDelete ( userId ) . populate ( 'posts' ) . session ( session ); if ( ! user ) { throw new NotFoundException (); } const posts = user . posts ; await this . postsService . deleteMany ( posts . map (( post ) => post . _id . toString ()), session , ); }); session . endSession (); } Please notice that we no longer need to call startTransaction(), commitTransaction(), and abortTransaction(). We still are required to end the session with the endSession method, though.","title":"\u63a7\u5236\u4e8b\u52a1"},{"location":"docs/mongodb/transactions/#summary","text":"In this article, we\u2019ve gone through transactions in MongoDB by describing their principles and use-cases. We\u2019ve also implemented them into our application with Mongoose. It is definitely worth it to understand transactions because they can increase the reliability of our application quite a lot.","title":"Summary"},{"location":"docs/mongodb/typescript-express-put-vs-patch-mongodb-mongoose/","text":"https://wanago.io/2020/04/27/typescript-express-put-vs-patch-mongodb-mongoose/ \u5f53\u6211\u4eec\u5f00\u53d1 REST API \u65f6\uff0c\u6211\u4eec\u6709\u4e00\u7ec4\u53ef\u4ee5\u9009\u62e9\u7684 HTTP \u65b9\u6cd5\u3002 \u9700\u8981\u7406\u89e3\u7684\u4e00\u4ef6\u91cd\u8981\u4e8b\u60c5\u662f\uff0cHTTP \u65b9\u6cd5\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u52a8\u4f5c\u7684\u6307\u793a\u5668\u3002 \u56e0\u6b64\uff0c\u8ba9\u5b83\u4eec\u6b63\u5e38\u5de5\u4f5c\u662f\u6211\u4eec\u7684\u5de5\u4f5c\u3002 \u4ece\u7406\u8bba\u4e0a\u8bb2\uff0c\u6ca1\u6709\u592a\u591a\u4e1c\u897f\u963b\u6b62\u6211\u4eec\u4f7f\u7528 GET \u65b9\u6cd5\u5220\u9664\u5b9e\u4f53\u3002 \u901a\u8fc7\u6ce8\u610f\u4fdd\u6301\u7ea6\u5b9a\uff0c\u6211\u4eec\u63d0\u9ad8\u4e86 API \u7684\u53ef\u8bfb\u6027\uff0c\u5e76\u4f7f\u5176\u53ef\u9884\u6d4b\u3002 \u5927\u591a\u6570 HTTP \u65b9\u6cd5\u76f8\u5f53\u7b80\u5355\u3002 \u4e0d\u8fc7\uff0c\u5728 Mongoose with Express \u4e2d\uff0cPUT \u548c PATCH \u65b9\u6cd5\u53ef\u80fd\u4f1a\u9020\u6210\u4e00\u4e9b\u8bef\u89e3\u3002 \u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u6bd4\u8f83\u5b83\u4eec\uff0c\u5e76\u68c0\u67e5\u5982\u4f55\u5728 MongoDB \u4e0e Mongoose \u4e2d\u5b9e\u73b0\u5b83\u4eec\u3002 \u672c\u7cfb\u5217\u6587\u7ae0\u7684\u7ed3\u679c\u5c31\u662f\u8fd9\u4e2a \u5b58\u50a8\u5e93 \u3002 \u7ed9\u5b83\u6253\u4e2a\u661f\u5427\u3002 PUT PUT \u65b9\u6cd5\u5728 HTTP \u534f\u8bae\u4e2d\u5df2\u7ecf\u5b58\u5728\u5f88\u957f\u65f6\u95f4\u4e86\u3002 \u5b83\u7684\u4e3b\u8981\u804c\u8d23\u662f\u4fee\u6539\u73b0\u6709\u5b9e\u4f53\u3002 \u5173\u4e8e PUT \u6700\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0c\u5b83\u66ff\u6362\u4e86\u5b9e\u4f53\u3002 \u5982\u679c\u6211\u4eec\u4e0d\u5305\u542b\u5b9e\u4f53\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5219\u5e94\u8be5\u5220\u9664\u5b83 GET /posts/5cf96275ff8ecf065c510468 JSON { \"_id\" : \"5cf96275ff8ecf065c510468\" , \"title\" : \"Lorem ipsum\" , \"content\" : \"Dolor sit amet\" , \"author\" : \"5cf96217ff8ecf065c510467\" } \u6b63\u5982\u60a8\u5728\u4e0a\u9762\u770b\u5230\u7684\uff0c\u8fd9\u7bc7\u6587\u7ae0\u5305\u542b\u4e86\u76f8\u5f53\u591a\u7684\u5c5e\u6027\u3002 \u8ba9\u6211\u4eec\u53d1\u9001\u4e00\u4e2a PUT \u8bf7\u6c42\u7684\u793a\u4f8b: PUT /posts/5cf96275ff8ecf065c510468 JSON { \"_id\" : \"5cf96275ff8ecf065c510468\" , \"title\" : \"A brand new title\" , \"content\" : \"Dolor sit amet\" , \"author\" : \"5cf96217ff8ecf065c510467\" } \u5982\u60a8\u6240\u89c1\uff0c\u6211\u4eec\u5df2\u7ecf\u66f4\u6539\u4e86 title \u5c5e\u6027\u3002 \u6211\u4eec\u8fd8\u5305\u62ec\u4e86\u6240\u6709\u5176\u4ed6\u5b57\u6bb5\uff0c\u6bd4\u5982\u5185\u5bb9\u548c\u4f5c\u8005\u3002 \u8ba9\u6211\u4eec\u53d1\u9001\u53e6\u4e00\u4e2a PUT \u8bf7\u6c42: PUT /posts/5cf96275ff8ecf065c510468 JSON { \"content\" : \"A brand new content\" } \u8fd9\u4e2a\u8bf7\u6c42\u5e94\u8be5\u5220\u9664\u6240\u6709\u5176\u4ed6\u5c5e\u6027\uff0c\u53ea\u7559\u4e0b\u5185\u5bb9\u3002 MongoDB \u548c Mongoose \u4f7f\u7528 PUT \u4e0a\u8ff0\u60c5\u51b5\u4e0e MongoDB \u548c Mongoose \u5e76\u4e0d\u5b8c\u5168\u76f8\u540c\u3002 \u5b83\u4e0d\u5141\u8bb8\u6211\u4eec\u5220\u9664\u6216\u66f4\u6539 _id \u3002 \u4e3a\u4e86\u7528 MongoDB \u548c Mongoose \u5b9e\u73b0\u4e00\u4e2a\u6b63\u786e\u7684 PUT\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u66ff\u6362\u6587\u6863\u800c\u4e0d\u662f\u66f4\u65b0\u5b83\u3002 \u6700\u5e38\u7528\u7684\u4fee\u6539\u5b9e\u4f53\u7684\u65b9\u6cd5\u4e4b\u4e00\u662f findByIdAndUpdate \u548c findOneAndUpdate \u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u4eec\u7684\u9ed8\u8ba4\u884c\u4e3a\u4e0d\u662f\u66ff\u6362\u6587\u6863\uff0c\u800c\u662f\u5bf9\u6587\u6863\u6267\u884c\u90e8\u5206\u66f4\u65b0\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u4f20\u9012\u5c5e\u6027\uff0c\u5b83\u5c31\u4e0d\u4f1a\u4ece\u5b9e\u4f53\u4e2d\u79fb\u9664\u5b83\u3002 \u5b9e\u73b0\u6240\u9700\u884c\u4e3a\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 replaceOne \u65b9\u6cd5\u3002 \u987e\u540d\u601d\u4e49\uff0c\u5b83\u53d6\u4ee3\u4e86\u6574\u4e2a\u6587\u6863\u2014\u8fd9\u6b63\u662f\u6211\u4eec\u6240\u9700\u8981\u7684\u3002 replaceOne \u65b9\u6cd5\u7684\u7ed3\u679c\u5305\u542b n \u5c5e\u6027\uff0c\u8be5\u5c5e\u6027\u63cf\u8ff0\u5339\u914d\u8fc7\u6ee4\u5668\u7684\u6587\u6863\u6570\u91cf\u3002 \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u53ef\u4ee5\u5047\u5b9a\u5177\u6709\u7ed9\u5b9a id \u7684\u5b9e\u4f53\u4e0d\u5b58\u5728\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u7ed3\u679c\u4e0d\u5305\u542b\u4fee\u6539\u540e\u7684\u6587\u6863\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4f7f\u7528 findById \u51fd\u6570\u67e5\u627e\u6587\u6863\u5e76\u5c06\u5176\u53d1\u9001\u56de\u6765\u3002 TypeScript class demo { private initializeRoutes () { this . router . put ( ` ${ this . path } /:id` , this . modifyPost ); } private modifyPost = async ( request : Request , response : Response , next : NextFunction ) => { const id = request . params . id ; const postData : Post = request . body ; const modificationResult = await this . post . replaceOne ({ _id : id }, postData ); if ( modificationResult . n ) { const modifiedPost = await this . post . findById ( id ); response . send ( modifiedPost ); } else { next ( new PostNotFoundException ( id )); } }; } \u4f7f\u7528 findOneAndReplace \u51fd\u6570\u53ef\u4ee5\u89e3\u51b3\u4e0a\u8ff0\u56f0\u96be\u3002 \u4e0d\u5e78\u7684\u662f\uff0c @types/mongoose \u5305\u7f3a\u5c11 findOneAndReplace \u65b9\u6cd5\u7684 TypeScript \u5b9a\u4e49\u3002 \u4e0d\u8fc7\uff0c\u6211\u4eec\u8fd8\u662f\u505a\u4e86\u4e00\u4e9b\u52aa\u529b\u6765\u6dfb\u52a0\u5b83\u3002 \u5982\u679c\u6700\u540e\u5b9a\u7a3f\uff0c\u6211\u5c06\u66f4\u65b0\u8fd9\u7bc7\u6587\u7ae0\u3002 \u5c3d\u7ba1\u6587\u6863\u76ee\u524d\u6ca1\u6709\u63d0\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06 overwrite: true \u9009\u9879\u4f20\u9012\u7ed9 findByIdAndUpdate \u548c findOneAndUpdate\u3002 \u56e0\u6b64\uff0c\u5b83\u5c06\u66ff\u6362\u6574\u4e2a\u6587\u6863\uff0c\u800c\u4e0d\u662f\u6267\u884c\u90e8\u5206\u66f4\u65b0\u3002 TypeScript class demo { private modifyPost = async ( request : Request , response : Response , next : NextFunction ) => { const id = request . params . id ; const postData : Post = request . body ; const post = await this . post . findByIdAndUpdate ( id , postData ). setOptions ({ new : true , overwrite : true }); if ( post ) { response . send ( post ); } else { next ( new PostNotFoundException ( id )); } }; } \u4f7f\u7528 PUT \u521b\u5efa\u65b0\u5b9e\u4f53 \u8be5\u89c4\u8303\u8fd8\u63d0\u5230\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u6240\u9700\u7684\u5b9e\u4f53\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 PUT \u521b\u5efa\u4e00\u4e2a\u65b0\u5b9e\u4f53\u3002 \u6211\u4eec\u5c06\u8fd9\u79cd\u884c\u4e3a\u79f0\u4e3a upsert\u3002 Mongoose \u901a\u8fc7\u5141\u8bb8\u6211\u4eec\u5c06 upsert \u9009\u9879\u4f20\u9012\u7ed9 replaceOne \u67e5\u8be2\u6765\u652f\u6301\u5b83\u3002 TypeScript class demo { private modifyPost = async ( request : Request , response : Response , next : NextFunction ) => { const id = request . params . id ; const postData : Post = request . body ; const modificationResult = await this . post . replaceOne ({ _id : id }, postData ). setOptions ({ upsert : true , }); if ( modificationResult . n ) { const resultId = modificationResult . upserted ? .[ 0 ] ? . _id || id ; const modifiedPost = await this . post . findById ( resultId ); response . send ( modifiedPost ); } else { next ( new PostNotFoundException ( id )); } }; } \u5982\u679c modiationresult.upserted \u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u5c06\u67e5\u627e\u5177\u6709\u65b0 id \u7684\u5b9e\u4f53\u3002 \u5426\u5219\uff0c\u6211\u4eec\u4f7f\u7528\u7528\u6237\u63d0\u4f9b\u7684\u6807\u8bc6\u7b26\u3002 PATCH PUT \u65b9\u6cd5\u53ef\u80fd\u5e76\u4e0d\u603b\u662f\u66f4\u65b0\u5b9e\u4f53\u7684\u6700\u4f73\u9009\u62e9\u3002 \u5b83\u5047\u8bbe\u7528\u6237\u77e5\u9053\u7279\u5b9a\u5b9e\u4f53\u7684\u6240\u6709\u7ec6\u8282\uff0c\u4f46\u60c5\u51b5\u5e76\u975e\u603b\u662f\u5982\u6b64\u3002 \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6cd5\u53ef\u80fd\u662f PATCH \u65b9\u6cd5\u3002 PATCH \u5728 2010 \u5e74\u7684 RFC 5789 \u4e2d\u88ab\u5f15\u5165\u5230 HTTP \u534f\u8bae\u4e2d\u3002 \u5b83\u7684\u76ee\u7684\u662f\u5bf9\u8d44\u6e90\u5e94\u7528\u90e8\u5206\u4fee\u6539\u3002 \u6211\u4eec\u5e94\u8be5\u5c06 PATCH \u89c6\u4e3a\u4e00\u7ec4\u5173\u4e8e\u5982\u4f55\u4fee\u6539\u8d44\u6e90\u7684\u6307\u4ee4\u3002 \u4e3a PATCH \u65b9\u6cd5\u5b9e\u73b0\u5904\u7406\u7a0b\u5e8f\u7684\u6700\u76f4\u63a5\u65b9\u6cd5\u662f\u671f\u671b\u4e00\u4e2a\u5305\u542b\u90e8\u5206\u5b9e\u4f53\u7684\u4e3b\u4f53\u3002 PATCH /posts/5cf96275ff8ecf065c510468 JSON { \"content\" : \"A brand new content\" } \u4e0a\u9762\u7684\u4ee3\u7801\u5e94\u8be5\u7528\u65b0\u7684\u5185\u5bb9\u4fee\u6539\u5b9e\u4f53\u3002 \u4e0e PUT \u76f8\u53cd\uff0c\u6211\u4eec\u4e0d\u5e94\u8be5\u5220\u9664\u5176\u4f59\u7684\u5c5e\u6027\u3002 MongoDB \u548c Mongoose \u4f7f\u7528 PATCH findByIdAndUpdate \u65b9\u6cd5\u975e\u5e38\u9002\u5408\u5b9e\u73b0 PATCH \u65b9\u6cd5\u3002 \u6211\u4eec\u5c06\u5728\u672c\u7cfb\u5217\u7684\u7b2c\u4e8c\u90e8\u5206\u4e2d\u63d0\u5230\u5b83\u3002 TypeScript class demo { private initializeRoutes () { this . router . patch ( ` ${ this . path } /:id` , this . modifyPost ); } private modifyPost = async ( request : Request , response : Response , next : NextFunction ) => { const id = request . params . id ; const postData : Post = request . body ; const post = await this . post . findByIdAndUpdate ( id , postData , { new : true }); if ( post ) { response . send ( post ); } else { next ( new PostNotFoundException ( id )); } }; } \u7531\u4e8e\u4f20\u9012\u4e86 new:true \u9009\u9879\uff0c\u6211\u4eec\u7684\u67e5\u8be2\u4f1a\u5f97\u5230\u5b9e\u4f53\u7684\u66f4\u65b0\u7248\u672c\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u54cd\u5e94\u4e2d\u6beb\u4e0d\u8d39\u529b\u5730\u5c06\u5176\u53d1\u9001\u56de\u3002 \u5982\u679c\u5728\u4f20\u9012\u7ed9 findByIdAndUpdate \u51fd\u6570\u7684\u6570\u636e\u4e2d\uff0c\u6211\u4eec\u5305\u62ec\u4e00\u4e2a\u4e0d\u540c\u7684 _id , Mongoose \u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002 \u5982\u679c\u6211\u4eec\u5728\u4f7f\u7528 findByIdAndUpdate \u6267\u884c PATCH \u65f6\u60f3\u8981\u5220\u9664\u5c5e\u6027\uff0c\u6211\u4eec\u5fc5\u987b\u663e\u5f0f\u5730\u53d1\u9001 null\u3002 JSON Patch \u5b9e\u73b0 PATCH \u65b9\u6cd5\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u53d1\u9001\u4e00\u7ec4\u5173\u4e8e\u5982\u4f55\u4fee\u6539\u8d44\u6e90\u7684\u6307\u4ee4\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 JSON Patch \u683c\u5f0f\u6765\u5b9a\u4e49\u4e00\u4e2a Patch \u64cd\u4f5c\u6570\u7ec4\u3002 PATCH /posts/5cf96275ff8ecf065c510468 JSON [ { \"op\" : \"replace\" , \"path\" : \"/content\" , \"value\" : \"A brand new content\" } ] \u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230 JSON Patch \u683c\u5f0f\u7684\u6587\u6863\u3002 \u8fd8\u6709 fastjson -patch \u5b9e\u7528\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u521b\u5efa\u548c\u8bfb\u53d6\u6b64\u7c7b Patch\u3002 \u603b\u7ed3 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u5b9e\u73b0\u66f4\u65b0\u529f\u80fd\u7684\u53ef\u80fd\u65b9\u6cd5\u3002 \u5728\u9009\u62e9 PUT \u548c PATCH \u65f6\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u5728\u4f60\u7684\u5177\u4f53\u60c5\u51b5\u4e0b\uff0c\u4ec0\u4e48\u662f\u6700\u597d\u7684\u9009\u62e9\u3002 \u65e0\u8bba\u6211\u4eec\u51b3\u5b9a\u4ec0\u4e48\uff0c\u4e00\u65e6\u6211\u4eec\u51b3\u5b9a\u4e86\u4e00\u79cd\u65b9\u6cd5\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5bf9\u5b83\u4eec\u8fdb\u884c\u9002\u5f53\u7684\u7f16\u7801\u3002 \u5728\u8fd9\u6837\u505a\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u89c4\u8303\u4e2d\u5982\u4f55\u5b9a\u4e49 PATCH \u548c PUT \u65b9\u6cd5\uff0c\u5e76\u76f8\u5e94\u5730\u5b9e\u73b0\u5b83\u4eec\u3002","title":"MongoDB\u4e0eMongoose\u4f7f\u7528PUT vs PATCH"},{"location":"docs/mongodb/typescript-express-put-vs-patch-mongodb-mongoose/#put","text":"PUT \u65b9\u6cd5\u5728 HTTP \u534f\u8bae\u4e2d\u5df2\u7ecf\u5b58\u5728\u5f88\u957f\u65f6\u95f4\u4e86\u3002 \u5b83\u7684\u4e3b\u8981\u804c\u8d23\u662f\u4fee\u6539\u73b0\u6709\u5b9e\u4f53\u3002 \u5173\u4e8e PUT \u6700\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0c\u5b83\u66ff\u6362\u4e86\u5b9e\u4f53\u3002 \u5982\u679c\u6211\u4eec\u4e0d\u5305\u542b\u5b9e\u4f53\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5219\u5e94\u8be5\u5220\u9664\u5b83 GET /posts/5cf96275ff8ecf065c510468 JSON { \"_id\" : \"5cf96275ff8ecf065c510468\" , \"title\" : \"Lorem ipsum\" , \"content\" : \"Dolor sit amet\" , \"author\" : \"5cf96217ff8ecf065c510467\" } \u6b63\u5982\u60a8\u5728\u4e0a\u9762\u770b\u5230\u7684\uff0c\u8fd9\u7bc7\u6587\u7ae0\u5305\u542b\u4e86\u76f8\u5f53\u591a\u7684\u5c5e\u6027\u3002 \u8ba9\u6211\u4eec\u53d1\u9001\u4e00\u4e2a PUT \u8bf7\u6c42\u7684\u793a\u4f8b: PUT /posts/5cf96275ff8ecf065c510468 JSON { \"_id\" : \"5cf96275ff8ecf065c510468\" , \"title\" : \"A brand new title\" , \"content\" : \"Dolor sit amet\" , \"author\" : \"5cf96217ff8ecf065c510467\" } \u5982\u60a8\u6240\u89c1\uff0c\u6211\u4eec\u5df2\u7ecf\u66f4\u6539\u4e86 title \u5c5e\u6027\u3002 \u6211\u4eec\u8fd8\u5305\u62ec\u4e86\u6240\u6709\u5176\u4ed6\u5b57\u6bb5\uff0c\u6bd4\u5982\u5185\u5bb9\u548c\u4f5c\u8005\u3002 \u8ba9\u6211\u4eec\u53d1\u9001\u53e6\u4e00\u4e2a PUT \u8bf7\u6c42: PUT /posts/5cf96275ff8ecf065c510468 JSON { \"content\" : \"A brand new content\" } \u8fd9\u4e2a\u8bf7\u6c42\u5e94\u8be5\u5220\u9664\u6240\u6709\u5176\u4ed6\u5c5e\u6027\uff0c\u53ea\u7559\u4e0b\u5185\u5bb9\u3002","title":"PUT"},{"location":"docs/mongodb/typescript-express-put-vs-patch-mongodb-mongoose/#mongodb-mongoose-put","text":"\u4e0a\u8ff0\u60c5\u51b5\u4e0e MongoDB \u548c Mongoose \u5e76\u4e0d\u5b8c\u5168\u76f8\u540c\u3002 \u5b83\u4e0d\u5141\u8bb8\u6211\u4eec\u5220\u9664\u6216\u66f4\u6539 _id \u3002 \u4e3a\u4e86\u7528 MongoDB \u548c Mongoose \u5b9e\u73b0\u4e00\u4e2a\u6b63\u786e\u7684 PUT\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u66ff\u6362\u6587\u6863\u800c\u4e0d\u662f\u66f4\u65b0\u5b83\u3002 \u6700\u5e38\u7528\u7684\u4fee\u6539\u5b9e\u4f53\u7684\u65b9\u6cd5\u4e4b\u4e00\u662f findByIdAndUpdate \u548c findOneAndUpdate \u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u4eec\u7684\u9ed8\u8ba4\u884c\u4e3a\u4e0d\u662f\u66ff\u6362\u6587\u6863\uff0c\u800c\u662f\u5bf9\u6587\u6863\u6267\u884c\u90e8\u5206\u66f4\u65b0\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u4f20\u9012\u5c5e\u6027\uff0c\u5b83\u5c31\u4e0d\u4f1a\u4ece\u5b9e\u4f53\u4e2d\u79fb\u9664\u5b83\u3002 \u5b9e\u73b0\u6240\u9700\u884c\u4e3a\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 replaceOne \u65b9\u6cd5\u3002 \u987e\u540d\u601d\u4e49\uff0c\u5b83\u53d6\u4ee3\u4e86\u6574\u4e2a\u6587\u6863\u2014\u8fd9\u6b63\u662f\u6211\u4eec\u6240\u9700\u8981\u7684\u3002 replaceOne \u65b9\u6cd5\u7684\u7ed3\u679c\u5305\u542b n \u5c5e\u6027\uff0c\u8be5\u5c5e\u6027\u63cf\u8ff0\u5339\u914d\u8fc7\u6ee4\u5668\u7684\u6587\u6863\u6570\u91cf\u3002 \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u53ef\u4ee5\u5047\u5b9a\u5177\u6709\u7ed9\u5b9a id \u7684\u5b9e\u4f53\u4e0d\u5b58\u5728\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u7ed3\u679c\u4e0d\u5305\u542b\u4fee\u6539\u540e\u7684\u6587\u6863\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4f7f\u7528 findById \u51fd\u6570\u67e5\u627e\u6587\u6863\u5e76\u5c06\u5176\u53d1\u9001\u56de\u6765\u3002 TypeScript class demo { private initializeRoutes () { this . router . put ( ` ${ this . path } /:id` , this . modifyPost ); } private modifyPost = async ( request : Request , response : Response , next : NextFunction ) => { const id = request . params . id ; const postData : Post = request . body ; const modificationResult = await this . post . replaceOne ({ _id : id }, postData ); if ( modificationResult . n ) { const modifiedPost = await this . post . findById ( id ); response . send ( modifiedPost ); } else { next ( new PostNotFoundException ( id )); } }; } \u4f7f\u7528 findOneAndReplace \u51fd\u6570\u53ef\u4ee5\u89e3\u51b3\u4e0a\u8ff0\u56f0\u96be\u3002 \u4e0d\u5e78\u7684\u662f\uff0c @types/mongoose \u5305\u7f3a\u5c11 findOneAndReplace \u65b9\u6cd5\u7684 TypeScript \u5b9a\u4e49\u3002 \u4e0d\u8fc7\uff0c\u6211\u4eec\u8fd8\u662f\u505a\u4e86\u4e00\u4e9b\u52aa\u529b\u6765\u6dfb\u52a0\u5b83\u3002 \u5982\u679c\u6700\u540e\u5b9a\u7a3f\uff0c\u6211\u5c06\u66f4\u65b0\u8fd9\u7bc7\u6587\u7ae0\u3002 \u5c3d\u7ba1\u6587\u6863\u76ee\u524d\u6ca1\u6709\u63d0\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06 overwrite: true \u9009\u9879\u4f20\u9012\u7ed9 findByIdAndUpdate \u548c findOneAndUpdate\u3002 \u56e0\u6b64\uff0c\u5b83\u5c06\u66ff\u6362\u6574\u4e2a\u6587\u6863\uff0c\u800c\u4e0d\u662f\u6267\u884c\u90e8\u5206\u66f4\u65b0\u3002 TypeScript class demo { private modifyPost = async ( request : Request , response : Response , next : NextFunction ) => { const id = request . params . id ; const postData : Post = request . body ; const post = await this . post . findByIdAndUpdate ( id , postData ). setOptions ({ new : true , overwrite : true }); if ( post ) { response . send ( post ); } else { next ( new PostNotFoundException ( id )); } }; }","title":"MongoDB \u548c Mongoose \u4f7f\u7528 PUT"},{"location":"docs/mongodb/typescript-express-put-vs-patch-mongodb-mongoose/#put_1","text":"\u8be5\u89c4\u8303\u8fd8\u63d0\u5230\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u6240\u9700\u7684\u5b9e\u4f53\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 PUT \u521b\u5efa\u4e00\u4e2a\u65b0\u5b9e\u4f53\u3002 \u6211\u4eec\u5c06\u8fd9\u79cd\u884c\u4e3a\u79f0\u4e3a upsert\u3002 Mongoose \u901a\u8fc7\u5141\u8bb8\u6211\u4eec\u5c06 upsert \u9009\u9879\u4f20\u9012\u7ed9 replaceOne \u67e5\u8be2\u6765\u652f\u6301\u5b83\u3002 TypeScript class demo { private modifyPost = async ( request : Request , response : Response , next : NextFunction ) => { const id = request . params . id ; const postData : Post = request . body ; const modificationResult = await this . post . replaceOne ({ _id : id }, postData ). setOptions ({ upsert : true , }); if ( modificationResult . n ) { const resultId = modificationResult . upserted ? .[ 0 ] ? . _id || id ; const modifiedPost = await this . post . findById ( resultId ); response . send ( modifiedPost ); } else { next ( new PostNotFoundException ( id )); } }; } \u5982\u679c modiationresult.upserted \u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u5c06\u67e5\u627e\u5177\u6709\u65b0 id \u7684\u5b9e\u4f53\u3002 \u5426\u5219\uff0c\u6211\u4eec\u4f7f\u7528\u7528\u6237\u63d0\u4f9b\u7684\u6807\u8bc6\u7b26\u3002","title":"\u4f7f\u7528 PUT \u521b\u5efa\u65b0\u5b9e\u4f53"},{"location":"docs/mongodb/typescript-express-put-vs-patch-mongodb-mongoose/#patch","text":"PUT \u65b9\u6cd5\u53ef\u80fd\u5e76\u4e0d\u603b\u662f\u66f4\u65b0\u5b9e\u4f53\u7684\u6700\u4f73\u9009\u62e9\u3002 \u5b83\u5047\u8bbe\u7528\u6237\u77e5\u9053\u7279\u5b9a\u5b9e\u4f53\u7684\u6240\u6709\u7ec6\u8282\uff0c\u4f46\u60c5\u51b5\u5e76\u975e\u603b\u662f\u5982\u6b64\u3002 \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6cd5\u53ef\u80fd\u662f PATCH \u65b9\u6cd5\u3002 PATCH \u5728 2010 \u5e74\u7684 RFC 5789 \u4e2d\u88ab\u5f15\u5165\u5230 HTTP \u534f\u8bae\u4e2d\u3002 \u5b83\u7684\u76ee\u7684\u662f\u5bf9\u8d44\u6e90\u5e94\u7528\u90e8\u5206\u4fee\u6539\u3002 \u6211\u4eec\u5e94\u8be5\u5c06 PATCH \u89c6\u4e3a\u4e00\u7ec4\u5173\u4e8e\u5982\u4f55\u4fee\u6539\u8d44\u6e90\u7684\u6307\u4ee4\u3002 \u4e3a PATCH \u65b9\u6cd5\u5b9e\u73b0\u5904\u7406\u7a0b\u5e8f\u7684\u6700\u76f4\u63a5\u65b9\u6cd5\u662f\u671f\u671b\u4e00\u4e2a\u5305\u542b\u90e8\u5206\u5b9e\u4f53\u7684\u4e3b\u4f53\u3002 PATCH /posts/5cf96275ff8ecf065c510468 JSON { \"content\" : \"A brand new content\" } \u4e0a\u9762\u7684\u4ee3\u7801\u5e94\u8be5\u7528\u65b0\u7684\u5185\u5bb9\u4fee\u6539\u5b9e\u4f53\u3002 \u4e0e PUT \u76f8\u53cd\uff0c\u6211\u4eec\u4e0d\u5e94\u8be5\u5220\u9664\u5176\u4f59\u7684\u5c5e\u6027\u3002","title":"PATCH"},{"location":"docs/mongodb/typescript-express-put-vs-patch-mongodb-mongoose/#mongodb-mongoose-patch","text":"findByIdAndUpdate \u65b9\u6cd5\u975e\u5e38\u9002\u5408\u5b9e\u73b0 PATCH \u65b9\u6cd5\u3002 \u6211\u4eec\u5c06\u5728\u672c\u7cfb\u5217\u7684\u7b2c\u4e8c\u90e8\u5206\u4e2d\u63d0\u5230\u5b83\u3002 TypeScript class demo { private initializeRoutes () { this . router . patch ( ` ${ this . path } /:id` , this . modifyPost ); } private modifyPost = async ( request : Request , response : Response , next : NextFunction ) => { const id = request . params . id ; const postData : Post = request . body ; const post = await this . post . findByIdAndUpdate ( id , postData , { new : true }); if ( post ) { response . send ( post ); } else { next ( new PostNotFoundException ( id )); } }; } \u7531\u4e8e\u4f20\u9012\u4e86 new:true \u9009\u9879\uff0c\u6211\u4eec\u7684\u67e5\u8be2\u4f1a\u5f97\u5230\u5b9e\u4f53\u7684\u66f4\u65b0\u7248\u672c\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u54cd\u5e94\u4e2d\u6beb\u4e0d\u8d39\u529b\u5730\u5c06\u5176\u53d1\u9001\u56de\u3002 \u5982\u679c\u5728\u4f20\u9012\u7ed9 findByIdAndUpdate \u51fd\u6570\u7684\u6570\u636e\u4e2d\uff0c\u6211\u4eec\u5305\u62ec\u4e00\u4e2a\u4e0d\u540c\u7684 _id , Mongoose \u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002 \u5982\u679c\u6211\u4eec\u5728\u4f7f\u7528 findByIdAndUpdate \u6267\u884c PATCH \u65f6\u60f3\u8981\u5220\u9664\u5c5e\u6027\uff0c\u6211\u4eec\u5fc5\u987b\u663e\u5f0f\u5730\u53d1\u9001 null\u3002","title":"MongoDB \u548c Mongoose \u4f7f\u7528 PATCH"},{"location":"docs/mongodb/typescript-express-put-vs-patch-mongodb-mongoose/#json-patch","text":"\u5b9e\u73b0 PATCH \u65b9\u6cd5\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u53d1\u9001\u4e00\u7ec4\u5173\u4e8e\u5982\u4f55\u4fee\u6539\u8d44\u6e90\u7684\u6307\u4ee4\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 JSON Patch \u683c\u5f0f\u6765\u5b9a\u4e49\u4e00\u4e2a Patch \u64cd\u4f5c\u6570\u7ec4\u3002 PATCH /posts/5cf96275ff8ecf065c510468 JSON [ { \"op\" : \"replace\" , \"path\" : \"/content\" , \"value\" : \"A brand new content\" } ] \u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230 JSON Patch \u683c\u5f0f\u7684\u6587\u6863\u3002 \u8fd8\u6709 fastjson -patch \u5b9e\u7528\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u521b\u5efa\u548c\u8bfb\u53d6\u6b64\u7c7b Patch\u3002","title":"JSON Patch"},{"location":"docs/mongodb/typescript-express-put-vs-patch-mongodb-mongoose/#_1","text":"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u5b9e\u73b0\u66f4\u65b0\u529f\u80fd\u7684\u53ef\u80fd\u65b9\u6cd5\u3002 \u5728\u9009\u62e9 PUT \u548c PATCH \u65f6\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u5728\u4f60\u7684\u5177\u4f53\u60c5\u51b5\u4e0b\uff0c\u4ec0\u4e48\u662f\u6700\u597d\u7684\u9009\u62e9\u3002 \u65e0\u8bba\u6211\u4eec\u51b3\u5b9a\u4ec0\u4e48\uff0c\u4e00\u65e6\u6211\u4eec\u51b3\u5b9a\u4e86\u4e00\u79cd\u65b9\u6cd5\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5bf9\u5b83\u4eec\u8fdb\u884c\u9002\u5f53\u7684\u7f16\u7801\u3002 \u5728\u8fd9\u6837\u505a\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u89c4\u8303\u4e2d\u5982\u4f55\u5b9a\u4e49 PATCH \u548c PUT \u65b9\u6cd5\uff0c\u5e76\u76f8\u5e94\u5730\u5b9e\u73b0\u5b83\u4eec\u3002","title":"\u603b\u7ed3"},{"location":"docs/mongodb/updating/","text":"When we develop a REST API, there is a set of HTTP methods that we can choose from, such as GET, POST, and DELETE. A crucial thing to understand is that HTTP methods are largely conventional. It is our job to make them work in a way that\u2019s consistent with the specification. For example, in theory, we could delete entities with the GET method. However, we should make our API predictable to make it easy to understand both to developers working on our backend and the users. A lot of HTTP methods are very straightforward. However, the PUT and PATCH methods are worth digging into a bit more. In this article, we compare both of them and implement them with NestJS and Mongoose. PUT The PUT method is responsible for modifying an existing entity. The crucial part about it is that it is supposed to replace an entity. Therefore, if we don\u2019t send a field of an entity when performing a PUT request, the missing field should be removed from the document. GET /posts/613e2dcbe2b947c10b669292 JSON { \"categories\" : [], \"_id\" : \"614fa87e4027d3141f28e9e7\" , \"title\" : \"API with NestJS #49. PUT vs PATCH with MongoDB and Mongoose\" , \"content\" : \"...\" , \"series\" : { \"_id\" : \"614fa8364027d3141f28e9e2\" , \"name\" : \"API with NestJS\" }, \"author\" : { \"_id\" : \"61350362017a80b8d443b012\" , \"email\" : \"marcin@wanago.io\" , \"firstName\" : \"Marcin\" , \"lastName\" : \"Wanago\" } } Above, we can see the properties our post contains. Let\u2019s make a PUT request now. PUT /posts/614fa87e4027d3141f28e9e7 JSON { \"_id\" : \"614fa87e4027d3141f28e9e7\" , \"categories\" : [], \"title\" : \"API with NestJS #49. PUT vs PATCH with MongoDB and Mongoose\" , \"content\" : \"...\" , \"author\" : { \"_id\" : \"61350362017a80b8d443b012\" , \"email\" : \"marcin@wanago.io\" , \"firstName\" : \"Marcin\" , \"lastName\" : \"Wanago\" } } The crucial thing above is that we didn\u2019t send the series property in the body of our request. Because the PUT method is supposed to replace a whole entity, we\u2019ve deleted the series property. Implementing the PUT method with MongoDB and Mongoose There are quite a few ways of implementing a proper PUT method with MongoDB and Mongoose. The findByIdAndUpdate and findOneAndUpdate methods are common, but they don\u2019t replace the whole document by default. Instead, they perform a partial update on it. Because of that, not including a property in the body of the request does not remove it. We can fix that with the overwrite: true option. posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; import { NotFoundException } from \"@nestjs/common\" ; import PostDto from \"./dto/post.dto\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async update ( id : string , postData : PostDto ) { const post = await this . postModel . findByIdAndUpdate ( id , postData ) . setOptions ({ overwrite : true , new : true }) . populate ( \"author\" ) . populate ( \"categories\" ) . populate ( \"series\" ); if ( ! post ) { throw new NotFoundException (); } return post ; } // ... } export default PostsService ; By setting new: true, we indicate that we want the findByIdAndUpdate method to return the modified version of the document. posts.controller.ts TypeScript import { Body , Controller , Param , Put , UseInterceptors } from \"@nestjs/common\" ; import PostsService from \"./posts.service\" ; import ParamsWithId from \"../utils/paramsWithId\" ; import MongooseClassSerializerInterceptor from \"../utils/mongooseClassSerializer.interceptor\" ; import { Post as PostModel } from \"./post.schema\" ; import UpdatePostDto from \"./dto/updatePost.dto\" ; @Controller ( \"posts\" ) @UseInterceptors ( MongooseClassSerializerInterceptor ( PostModel )) export default class PostsController { constructor ( private readonly postsService : PostsService ) {} @Put ( \":id\" ) async updatePost ( @Param () { id } : ParamsWithId , @Body () post : UpdatePostDto ) { return this . postsService . update ( id , post ); } } Thanks to doing the above, when we update a document, we replace it as a whole and remove not included fields. We could also use the findOneAndReplace method. Not so long back, it wasn\u2019t included with the TypeScript definitions shipped with the @types/mongoose, unfortunately. Thankfully, the Mongoose team started working on official TypeScript definitions. They released it in version v5.11.0. posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; import { NotFoundException } from \"@nestjs/common\" ; import UpdatePostDto from \"./dto/updatePost.dto\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async update ( id : string , postData : UpdatePostDto ) { const post = await this . postModel . findOneAndReplace ({ _id : id }, postData , { new : true }) . populate ( \"author\" ) . populate ( \"categories\" ) . populate ( \"series\" ); if ( ! post ) { throw new NotFoundException (); } return post ; } // ... } export default PostsService ; createPost.dto.ts TypeScript import { IsString , IsNotEmpty , IsMongoId , IsOptional } from \"class-validator\" ; import { User } from \"../../users/user.schema\" ; import { Type } from \"class-transformer\" ; import { Category } from \"../../categories/category.schema\" ; import { Series } from \"../../series/series.schema\" ; export class UpdatePostDto { @IsMongoId () @IsNotEmpty () _id : string ; @IsString () @IsNotEmpty () title : string ; @IsString () @IsNotEmpty () content : string ; @Type (() => Category ) categories : Category []; @Type (() => User ) @IsNotEmpty () author : User ; @Type (() => Series ) @IsOptional () series? : Series ; } export default UpdatePostDto ; Preventing the id from being updated Since we expect the users to send the whole document, they also send the _id property. The above doesn\u2019t cause any issues as long as the user doesn\u2019t alter the id. That\u2019s because doing that can cause an unexpected error: MongoError: Plan executor error during findAndModify :: caused by :: After applying the update, the (immutable) field \u2018_id\u2019 was found to have been altered We can deal with the above error by excluding the _id property from the body of our PUT request. TypeScript import { IsOptional } from \"class-validator\" ; import { Exclude } from \"class-transformer\" ; export class UpdatePostDto { @IsOptional () @Exclude () _id : string ; // ... } export default UpdatePostDto ; Even if the user provides the _id property in the request, we exclude it and don\u2019t pass it to the findOneAndReplace or the findByIdAndUpdate methods. Rest assured, because MongoDB won\u2019t remove the _id property in such a case, even though we are implementing the PUT method here. PATCH While the PUT method is a common and valid choice, it might not fit every situation. For example, when implementing the PUT method, we assume that the API users know all of the details of a particular entity. Since omitting single property results in removing it, they need to be careful. A solution to this issue can be the PATCH method. The PATCH method was introduced to the HTTP protocol in 2010 and aimed to apply a partial modification to an entity. The specification describes it as a set of instructions describing how a resource should be modified. The most straightforward way of implementing the PATCH method is to handle a body with a partial document. PATCH /posts/614fa87e4027d3141f28e9e7 JSON { \"title\" : \"A new title\" , \"series\" : null } The above request modifies the post by changing the title and removing the series property. Please note that to delete a field, we need to send the null value explicitly. Thanks to this, no fields are deleted by accident. Implementing PATCH with MongoDB and Mongoose To implement a PATCH handler using Mongoose, we can use the findByIdAndUpdate method without the overwrite: true option. First, let\u2019s use the @Patch decorator in our controller: posts.controller.ts TypeScript import { Body , Controller , Param , Patch , UseInterceptors } from \"@nestjs/common\" ; import PostsService from \"./posts.service\" ; import ParamsWithId from \"../utils/paramsWithId\" ; import MongooseClassSerializerInterceptor from \"../utils/mongooseClassSerializer.interceptor\" ; import { Post as PostModel } from \"./post.schema\" ; import UpdatePostDto from \"./dto/updatePost.dto\" ; @Controller ( \"posts\" ) @UseInterceptors ( MongooseClassSerializerInterceptor ( PostModel )) export default class PostsController { constructor ( private readonly postsService : PostsService ) {} @Patch ( \":id\" ) async updatePost ( @Param () { id } : ParamsWithId , @Body () post : UpdatePostDto ) { return this . postsService . update ( id , post ); } // ... } Now, let\u2019s modify the service: posts.service.ts TypeScript import { Model } from \"mongoose\" ; import { Injectable } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Post , PostDocument } from \"./post.schema\" ; import { NotFoundException } from \"@nestjs/common\" ; import UpdatePostDto from \"./dto/updatePost.dto\" ; @Injectable () class PostsService { constructor ( @InjectModel ( Post . name ) private postModel : Model < PostDocument > ) {} async update ( id : string , postData : UpdatePostDto ) { const post = await this . postModel . findByIdAndUpdate ({ _id : id }, postData , { new : true }) . populate ( \"author\" ) . populate ( \"categories\" ) . populate ( \"series\" ); if ( ! post ) { throw new NotFoundException (); } return post ; } // ... } export default PostsService ; For the above to work correctly, we also need to modify our DTO by adding the @IsOptional decorators: updatePost.dto.ts TypeScript import { IsString , IsNotEmpty , IsOptional } from \"class-validator\" ; import { User } from \"../../users/user.schema\" ; import { Exclude , Type } from \"class-transformer\" ; import { Category } from \"../../categories/category.schema\" ; import { Series } from \"../../series/series.schema\" ; export class UpdatePostDto { @IsOptional () @Exclude () _id? : string ; @IsString () @IsNotEmpty () @IsOptional () title? : string ; @IsString () @IsNotEmpty () @IsOptional () content? : string ; @Type (() => Category ) @IsOptional () categories? : Category []; @Type (() => User ) @IsOptional () @IsNotEmpty () author? : User ; @Type (() => Series ) @IsOptional () series? : Series ; } export default UpdatePostDto ; Thanks to adding the @IsOptional decorators, the user no longer has to provide all of the document\u2019s properties. JSON Patch An alternative approach to our implementation is to quite literally send a set of instructions on how to modify an object. A way to do that is to use the JSON Patch format. PATCH /posts/614fa87e4027d3141f28e9e7 JSON [ { op : \"replace\" , pa t h : \"/content\" , value : \"A brand new content\" , }, ] ; If you want to know more, check out the jsonpatch.com website. Additionally, the fast-json-patch library might come in handy when implementing the above format into your application. Summary In this article, we\u2019ve learned about various ways of implementing the update functionality. Thanks to getting to know both about PUT and PATCH, we can choose the best approach for a particular case. When selecting one of the above, we should follow the specification and implement our API predictably and transparently. If we do that, we will make the life of our teammates and API users easier.","title":"\u7528PUT\u548cPATCH\u66f4\u65b0MongoDB\u548cMongoose"},{"location":"docs/mongodb/updating/#summary","text":"In this article, we\u2019ve learned about various ways of implementing the update functionality. Thanks to getting to know both about PUT and PATCH, we can choose the best approach for a particular case. When selecting one of the above, we should follow the specification and implement our API predictably and transparently. If we do that, we will make the life of our teammates and API users easier.","title":"Summary"},{"location":"docs/mongodb/virtual/","text":"\u5728\u672c\u7cfb\u5217\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Mongoose \u5728\u6a21\u5f0f\u4e2d\u5b9a\u4e49\u5c5e\u6027\uff0c\u5e76\u4f7f\u7528\u6587\u6863\u7684\u6a21\u578b\u3002 \u6211\u4eec\u8fd8\u5b9a\u4e49\u4e86\u96c6\u5408\u4e4b\u95f4\u7684\u5404\u79cd\u5173\u7cfb\u3002 \u4f7f\u7528 Mongoose\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5229\u7528\u6ca1\u6709\u5b58\u50a8\u5728 MongoDB \u4e2d\u7684\u865a\u62df\u5c5e\u6027\u3002 \u8981\u7406\u89e3\u5b83\u4eec\uff0c\u6211\u4eec\u9996\u5148\u8981\u638c\u63e1 getter \u548c setter \u7684\u6982\u5ff5\u3002 \u60a8\u53ef\u4ee5\u5728\u8fd9\u4e2a\u5b58\u50a8\u5e93\u4e2d\u627e\u5230\u672c\u6587\u4e2d\u7684\u4ee3\u7801\u3002 Mongoose \u7684 Getters \u548c setters \u5f53\u4f7f\u7528 getter \u548c setter \u5728\u6587\u6863\u4e2d\u83b7\u53d6\u548c\u8bbe\u7f6e\u5c5e\u6027\u65f6\uff0c\u53ef\u4ee5\u6267\u884c\u81ea\u5b9a\u4e49\u903b\u8f91\u3002 Getters \u901a\u8fc7\u4f7f\u7528 getter \uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u68c0\u7d22\u6587\u6863\u6570\u636e\u65f6\u4fee\u6539\u6587\u6863\u6570\u636e\u3002 \u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u793a\u4f8b\uff0c\u5f53\u7528\u6237\u6709\u4e00\u4e2a\u4fe1\u7528\u5361\u53f7\u7801\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u54cd\u5e94 API \u8bf7\u6c42\u65f6\u5bf9\u5176\u8fdb\u884c\u6df7\u6dc6\u3002 user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document } from \"mongoose\" ; export type UserDocument = User & Document ; @Schema ({ toJSON : { getters : true } }) export class User { @Prop ({ unique : true }) email : string ; @Prop ({ get : ( creditCardNumber : string ) => { if ( ! creditCardNumber ) return ; const lastFourDigits = creditCardNumber . slice ( creditCardNumber . length - 4 ); return `****-****-****- ${ lastFourDigits } ` ; }, }) creditCardNumber? : string ; // ... } export const UserSchema = SchemaFactory . createForClass ( User ); \u5f53\u6211\u4eec\u4ece API \u8fd4\u56de\u6587\u6863\u65f6\uff0cNestJS \u5c06\u6211\u4eec\u7684\u6570\u636e\u5b57\u7b26\u4e32\u5316\u3002 \u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u65f6\uff0c toJSON \u65b9\u6cd5\u5c31\u4f1a\u5728\u6211\u4eec\u7684 Mongoose \u6a21\u578b\u4e0a\u88ab\u8c03\u7528\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u8003\u8651\u6211\u4eec\u7684 getter \uff0c\u6211\u4eec\u9700\u8981\u5728\u914d\u7f6e\u4e2d\u663e\u5f0f\u5730\u6dfb\u52a0 getter:true \u3002 \u6587\u6863\u4e5f\u6709 tobject \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u81ea\u5b9a\u4e49\u5b83\u3002 \u6211\u4eec\u4e5f\u5728 mongoosecasserializerinterceptor \u4e2d\u4f7f\u7528 toJSON\u3002 \u8981\u4e86\u89e3\u66f4\u591a\u7ec6\u8282\uff0c\u8bf7\u67e5\u770b NestJS #44 \u4e2d\u7684 API\u3002 \u5b9e\u73b0\u4e0e MongoDB \u7684\u5173\u7cfb \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6bcf\u6b21\u4ece API \u8fd4\u56de\u7528\u6237\u6587\u6863\u65f6\uff0c\u90fd\u4f1a\u6df7\u6dc6\u4fe1\u7528\u5361\u53f7\u3002 Mongoose \u4e3a\u6211\u4eec\u7684\u6a21\u5f0f\u5206\u914d\u4e00\u4e2a id \u5b57\u6bb5\u7684\u865a getter \u3002 \u5b83\u73b0\u5728\u51fa\u73b0\u5728\u54cd\u5e94\u4e2d\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u8fc7 getters:true \u6253\u5f00\u4e86 getters\u3002 \u7a0d\u540e\u4f1a\u6709\u66f4\u591a\u5173\u4e8e\u865a\u62df\u7684\u5185\u5bb9\u3002 \u6709\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u8bbf\u95ee\u539f\u59cb\u7684\u3001\u672a\u4fee\u6539\u7684\u5c5e\u6027\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Document.prototype.get() \u51fd\u6570\u3002 TypeScript const user = await this . usersService . getByEmail ( email ); const creditCardNumber = await this . usersService . getByEmail ( email ); Setters \u4f7f\u7528 setter \uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e4b\u524d\u4fee\u6539\u6570\u636e\u3002 post.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import { Transform } from \"class-transformer\" ; export type PostDocument = Post & Document ; @Schema () export class Post { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop () title : string ; @Prop ({ set : ( content : string ) => { return content . trim (); }, }) content : string ; // ... } export const PostSchema = SchemaFactory . createForClass ( Post ); \u7531\u4e8e\u505a\u4e86\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u6211\u4eec\u73b0\u5728\u4ece\u5185\u5bb9\u5b57\u7b26\u4e32\u7684\u4e24\u7aef\u5220\u9664\u7a7a\u767d\u3002 \u867d\u7136 setter \u662f\u4e00\u79cd\u6709\u6548\u7684\u6280\u672f\uff0c\u4f46\u662f\u4e3a\u4e86\u63d0\u9ad8\u53ef\u8bfb\u6027\uff0c\u60a8\u53ef\u80fd\u66f4\u613f\u610f\u5c06\u6b64\u903b\u8f91\u653e\u5728\u670d\u52a1\u4e2d\u3002 \u7136\u800c\uff0c\u5373\u4f7f\u662f\u8fd9\u6837\uff0c setter \u4e5f\u662f\u503c\u5f97\u4e86\u89e3\u7684\u3002 \u865a\u62df\u5c5e\u6027 virtual \u662f\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u548c\u8bbe\u7f6e\u7684\u5c5e\u6027\uff0c\u4f46\u5b83\u4e0d\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u3002 \u8ba9\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u7528\u4f8b\u793a\u4f8b\u3002 user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document } from \"mongoose\" ; export type UserDocument = User & Document ; @Schema () export class User { @Prop () firstName : string ; @Prop () lastName : string ; @Prop () fullName : string ; // ... } export const UserSchema = SchemaFactory . createForClass ( User ); \u4e0d\u5e78\u7684\u662f\uff0c\u4e0a\u8ff0\u65b9\u6cd5\u662f\u6709\u7f3a\u9677\u7684\u3002 \u5982\u679c\u6211\u4eec\u5c06 fullName \u5c5e\u6027\u6301\u4e45\u5316\u5230 MongoDB \u4e2d\uff0c\u6211\u4eec\u5c06\u590d\u5236\u4fe1\u606f\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u6709\u4e86 firstName \u548c lastName\u3002 \u66f4\u5408\u9002\u7684\u65b9\u6cd5\u662f\u57fa\u4e8e\u5176\u4ed6\u5c5e\u6027\u52a8\u6001\u521b\u5efa fullName \u3002 Getters \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u865a\u62df\u8d22\u4ea7\u5b9e\u73b0\u4e0a\u8ff0\u76ee\u7684\u3002 \u8ba9\u6211\u4eec\u521b\u5efa\u5b83\u548c getter \u3002 user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document } from \"mongoose\" ; export type UserDocument = User & Document ; @Schema ({ toJSON : { virtuals : true } }) export class User { @Prop () firstName : string ; @Prop () lastName : string ; fullName : string ; // ... } const UserSchema = SchemaFactory . createForClass ( User ); UserSchema . virtual ( \"fullName\" ). get ( function ( this : UserDocument ) { return ` ${ this . firstName } ${ this . lastName } ` ; }); export { UserSchema }; \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u6ca1\u6709\u5728 fullName \u5c5e\u6027\u4e0a\u4f7f\u7528 @Prop() \u88c5\u9970\u5668\u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u8c03\u7528\u6587\u4ef6\u5e95\u90e8\u7684 UserSchema.virtual \u51fd\u6570\u3002 \u7531\u4e8e\u6dfb\u52a0\u4e86 virtuals:true \uff0c\u6211\u4eec\u7684\u865a\u62df\u5c5e\u6027\u5728\u5c06\u6587\u6863\u8f6c\u6362\u4e3a JSON \u65f6\u662f\u53ef\u89c1\u7684\u3002 \u5c3d\u7ba1\u6211\u4eec\u53ef\u4ee5\u5728\u4e0a\u9762\u7684\u54cd\u5e94\u4e2d\u770b\u5230 fullName \uff0c\u4f46\u5b83\u5e76\u6ca1\u6709\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\u3002 Setters \u4f7f\u7528 virtual \uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u521b\u5efa setter \u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u4e00\u6b21\u8bbe\u7f6e\u591a\u4e2a\u5c5e\u6027\u3002 user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import { Transform } from \"class-transformer\" ; export type UserDocument = User & Document ; @Schema ({ toJSON : { getters : true , virtuals : true } }) export class User { @Prop () firstName : string ; @Prop () lastName : string ; fullName : string ; // ... } const UserSchema = SchemaFactory . createForClass ( User ); UserSchema . virtual ( \"fullName\" ) . get ( function ( this : UserDocument ) { return ` ${ this . firstName } ${ this . lastName } ` ; }) . set ( function ( this : UserDocument , fullName : string ) { const [ firstName , lastName ] = fullName . split ( \" \" ); this . set ({ firstName , lastName }); }); export { UserSchema }; \u4e0a\u9762\uff0c\u6211\u4eec\u57fa\u4e8e fullName \u8bbe\u7f6e\u4e86 firstName \u548c lastName \u5c5e\u6027\u3002 \u586b\u5145\u865a\u62df\u5c5e\u6027 \u865a\u62df\u5c5e\u6027\u7684\u4e00\u4e2a\u4fbf\u5229\u7279\u6027\u662f\u4f7f\u7528\u5b83\u4eec\u6765\u586b\u5145\u6765\u81ea\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u6587\u6863\u3002 \u6211\u4eec\u5b66\u4e60\u4e86\u4f7f\u7528 NestJS \u5728 API \u4e2d\u586b\u5145\u7279\u6027\u7684\u57fa\u7840\u77e5\u8bc6 #44.\u4f7f\u7528 MongoDB \u5b9e\u73b0\u5173\u7cfb \u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4e3a\u4e00\u7bc7\u6587\u7ae0\u521b\u5efa\u4e86\u4e00\u4e2a\u6a21\u5f0f\uff0c\u4f7f\u7528\u5b83\u6765\u5b58\u50a8\u5bf9\u4f5c\u8005\u7684\u5f15\u7528\u3002 post.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import * as mongoose from \"mongoose\" ; import { User } from \"../users/user.schema\" ; import { Transform , Type } from \"class-transformer\" ; export type PostDocument = Post & Document ; @Schema () export class Post { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop () title : string ; @Prop () content : string ; @Prop ({ type : mongoose . Schema . Types . ObjectId , ref : User.name }) @Type (() => User ) author : User ; } export const PostSchema = SchemaFactory . createForClass ( Post ); \u56e0\u6b64\uff0c\u5f53\u6211\u4eec\u83b7\u53d6 User \u6587\u6863\u65f6\uff0c\u6211\u4eec\u6ca1\u6709\u4efb\u4f55\u5e16\u5b50\u7684\u4fe1\u606f\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u865a\u62df\u5c5e\u6027\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document } from \"mongoose\" ; import { Type } from \"class-transformer\" ; import { Post } from \"../posts/post.schema\" ; export type UserDocument = User & Document ; @Schema ({ toJSON : { getters : true , virtuals : true } }) export class User { @Prop ({ unique : true }) email : string ; @Type (() => Post ) posts : Post []; // ... } const UserSchema = SchemaFactory . createForClass ( User ); UserSchema . virtual ( \"posts\" , { ref : \"Post\" , localField : \"_id\" , foreignField : \"author\" }); export { UserSchema }; \u6700\u540e\u4e00\u6b65\u662f\u8c03\u7528 populate \u51fd\u6570\u4ee5\u53ca\u7528\u6237\u7684\u6587\u6863\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u586b\u5145\u5d4c\u5957\u7684 categories \u5c5e\u6027\u3002 users.service.ts TypeScript import { Injectable , NotFoundException } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Model } from \"mongoose\" ; import { UserDocument , User } from \"./user.schema\" ; @Injectable () export class UsersService { constructor ( @InjectModel ( User . name ) private userModel : Model < UserDocument > ) {} async getById ( id : string ) { const user = await this . userModel . findById ( id ). populate ({ path : \"posts\" , populate : { path : \"categories\" } }); if ( ! user ) throw new NotFoundException (); return user ; } } \u603b\u7ed3 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u865a\u62df\u5c5e\u6027\u4ee5\u53ca\u5b83\u4eec\u5982\u4f55\u6709\u7528\u3002 \u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u5b83\u4eec\u6765\u6dfb\u52a0\u7b80\u5355\u7684\u5c5e\u6027\u548c\u586b\u5145\u6765\u81ea\u5176\u4ed6\u96c6\u5408\u7684\u6587\u6863\u3002 \u4e3a\u4e86\u66f4\u597d\u5730\u638c\u63e1 virtual \u7684\u6982\u5ff5\uff0c\u6211\u4eec\u8fd8\u7814\u7a76\u4e86 getter \u548c setter \u3002 \u5f53\u4f7f\u7528 Mongoose \u6765\u5b9a\u4e49 MongoDB \u6a21\u5f0f\u65f6\uff0c\u4e0a\u8ff0\u6240\u6709\u5185\u5bb9\u80af\u5b9a\u4f1a\u6d3e\u4e0a\u7528\u573a\u3002","title":"MongoDB\u548cMongoose\u7684\u865a\u62df\u5c5e\u6027"},{"location":"docs/mongodb/virtual/#mongoose-getters-setters","text":"\u5f53\u4f7f\u7528 getter \u548c setter \u5728\u6587\u6863\u4e2d\u83b7\u53d6\u548c\u8bbe\u7f6e\u5c5e\u6027\u65f6\uff0c\u53ef\u4ee5\u6267\u884c\u81ea\u5b9a\u4e49\u903b\u8f91\u3002","title":"Mongoose \u7684 Getters \u548c setters"},{"location":"docs/mongodb/virtual/#getters","text":"\u901a\u8fc7\u4f7f\u7528 getter \uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u68c0\u7d22\u6587\u6863\u6570\u636e\u65f6\u4fee\u6539\u6587\u6863\u6570\u636e\u3002 \u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u793a\u4f8b\uff0c\u5f53\u7528\u6237\u6709\u4e00\u4e2a\u4fe1\u7528\u5361\u53f7\u7801\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u54cd\u5e94 API \u8bf7\u6c42\u65f6\u5bf9\u5176\u8fdb\u884c\u6df7\u6dc6\u3002 user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document } from \"mongoose\" ; export type UserDocument = User & Document ; @Schema ({ toJSON : { getters : true } }) export class User { @Prop ({ unique : true }) email : string ; @Prop ({ get : ( creditCardNumber : string ) => { if ( ! creditCardNumber ) return ; const lastFourDigits = creditCardNumber . slice ( creditCardNumber . length - 4 ); return `****-****-****- ${ lastFourDigits } ` ; }, }) creditCardNumber? : string ; // ... } export const UserSchema = SchemaFactory . createForClass ( User ); \u5f53\u6211\u4eec\u4ece API \u8fd4\u56de\u6587\u6863\u65f6\uff0cNestJS \u5c06\u6211\u4eec\u7684\u6570\u636e\u5b57\u7b26\u4e32\u5316\u3002 \u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u65f6\uff0c toJSON \u65b9\u6cd5\u5c31\u4f1a\u5728\u6211\u4eec\u7684 Mongoose \u6a21\u578b\u4e0a\u88ab\u8c03\u7528\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u8003\u8651\u6211\u4eec\u7684 getter \uff0c\u6211\u4eec\u9700\u8981\u5728\u914d\u7f6e\u4e2d\u663e\u5f0f\u5730\u6dfb\u52a0 getter:true \u3002 \u6587\u6863\u4e5f\u6709 tobject \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u81ea\u5b9a\u4e49\u5b83\u3002 \u6211\u4eec\u4e5f\u5728 mongoosecasserializerinterceptor \u4e2d\u4f7f\u7528 toJSON\u3002 \u8981\u4e86\u89e3\u66f4\u591a\u7ec6\u8282\uff0c\u8bf7\u67e5\u770b NestJS #44 \u4e2d\u7684 API\u3002 \u5b9e\u73b0\u4e0e MongoDB \u7684\u5173\u7cfb \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6bcf\u6b21\u4ece API \u8fd4\u56de\u7528\u6237\u6587\u6863\u65f6\uff0c\u90fd\u4f1a\u6df7\u6dc6\u4fe1\u7528\u5361\u53f7\u3002 Mongoose \u4e3a\u6211\u4eec\u7684\u6a21\u5f0f\u5206\u914d\u4e00\u4e2a id \u5b57\u6bb5\u7684\u865a getter \u3002 \u5b83\u73b0\u5728\u51fa\u73b0\u5728\u54cd\u5e94\u4e2d\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u8fc7 getters:true \u6253\u5f00\u4e86 getters\u3002 \u7a0d\u540e\u4f1a\u6709\u66f4\u591a\u5173\u4e8e\u865a\u62df\u7684\u5185\u5bb9\u3002 \u6709\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u8bbf\u95ee\u539f\u59cb\u7684\u3001\u672a\u4fee\u6539\u7684\u5c5e\u6027\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Document.prototype.get() \u51fd\u6570\u3002 TypeScript const user = await this . usersService . getByEmail ( email ); const creditCardNumber = await this . usersService . getByEmail ( email );","title":"Getters"},{"location":"docs/mongodb/virtual/#setters","text":"\u4f7f\u7528 setter \uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e4b\u524d\u4fee\u6539\u6570\u636e\u3002 post.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import { Transform } from \"class-transformer\" ; export type PostDocument = Post & Document ; @Schema () export class Post { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop () title : string ; @Prop ({ set : ( content : string ) => { return content . trim (); }, }) content : string ; // ... } export const PostSchema = SchemaFactory . createForClass ( Post ); \u7531\u4e8e\u505a\u4e86\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u6211\u4eec\u73b0\u5728\u4ece\u5185\u5bb9\u5b57\u7b26\u4e32\u7684\u4e24\u7aef\u5220\u9664\u7a7a\u767d\u3002 \u867d\u7136 setter \u662f\u4e00\u79cd\u6709\u6548\u7684\u6280\u672f\uff0c\u4f46\u662f\u4e3a\u4e86\u63d0\u9ad8\u53ef\u8bfb\u6027\uff0c\u60a8\u53ef\u80fd\u66f4\u613f\u610f\u5c06\u6b64\u903b\u8f91\u653e\u5728\u670d\u52a1\u4e2d\u3002 \u7136\u800c\uff0c\u5373\u4f7f\u662f\u8fd9\u6837\uff0c setter \u4e5f\u662f\u503c\u5f97\u4e86\u89e3\u7684\u3002","title":"Setters"},{"location":"docs/mongodb/virtual/#_1","text":"virtual \u662f\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u548c\u8bbe\u7f6e\u7684\u5c5e\u6027\uff0c\u4f46\u5b83\u4e0d\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u3002 \u8ba9\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u7528\u4f8b\u793a\u4f8b\u3002 user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document } from \"mongoose\" ; export type UserDocument = User & Document ; @Schema () export class User { @Prop () firstName : string ; @Prop () lastName : string ; @Prop () fullName : string ; // ... } export const UserSchema = SchemaFactory . createForClass ( User ); \u4e0d\u5e78\u7684\u662f\uff0c\u4e0a\u8ff0\u65b9\u6cd5\u662f\u6709\u7f3a\u9677\u7684\u3002 \u5982\u679c\u6211\u4eec\u5c06 fullName \u5c5e\u6027\u6301\u4e45\u5316\u5230 MongoDB \u4e2d\uff0c\u6211\u4eec\u5c06\u590d\u5236\u4fe1\u606f\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u6709\u4e86 firstName \u548c lastName\u3002 \u66f4\u5408\u9002\u7684\u65b9\u6cd5\u662f\u57fa\u4e8e\u5176\u4ed6\u5c5e\u6027\u52a8\u6001\u521b\u5efa fullName \u3002","title":"\u865a\u62df\u5c5e\u6027"},{"location":"docs/mongodb/virtual/#getters_1","text":"\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u865a\u62df\u8d22\u4ea7\u5b9e\u73b0\u4e0a\u8ff0\u76ee\u7684\u3002 \u8ba9\u6211\u4eec\u521b\u5efa\u5b83\u548c getter \u3002 user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document } from \"mongoose\" ; export type UserDocument = User & Document ; @Schema ({ toJSON : { virtuals : true } }) export class User { @Prop () firstName : string ; @Prop () lastName : string ; fullName : string ; // ... } const UserSchema = SchemaFactory . createForClass ( User ); UserSchema . virtual ( \"fullName\" ). get ( function ( this : UserDocument ) { return ` ${ this . firstName } ${ this . lastName } ` ; }); export { UserSchema }; \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u6ca1\u6709\u5728 fullName \u5c5e\u6027\u4e0a\u4f7f\u7528 @Prop() \u88c5\u9970\u5668\u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u8c03\u7528\u6587\u4ef6\u5e95\u90e8\u7684 UserSchema.virtual \u51fd\u6570\u3002 \u7531\u4e8e\u6dfb\u52a0\u4e86 virtuals:true \uff0c\u6211\u4eec\u7684\u865a\u62df\u5c5e\u6027\u5728\u5c06\u6587\u6863\u8f6c\u6362\u4e3a JSON \u65f6\u662f\u53ef\u89c1\u7684\u3002 \u5c3d\u7ba1\u6211\u4eec\u53ef\u4ee5\u5728\u4e0a\u9762\u7684\u54cd\u5e94\u4e2d\u770b\u5230 fullName \uff0c\u4f46\u5b83\u5e76\u6ca1\u6709\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\u3002","title":"Getters"},{"location":"docs/mongodb/virtual/#setters_1","text":"\u4f7f\u7528 virtual \uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u521b\u5efa setter \u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u4e00\u6b21\u8bbe\u7f6e\u591a\u4e2a\u5c5e\u6027\u3002 user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import { Transform } from \"class-transformer\" ; export type UserDocument = User & Document ; @Schema ({ toJSON : { getters : true , virtuals : true } }) export class User { @Prop () firstName : string ; @Prop () lastName : string ; fullName : string ; // ... } const UserSchema = SchemaFactory . createForClass ( User ); UserSchema . virtual ( \"fullName\" ) . get ( function ( this : UserDocument ) { return ` ${ this . firstName } ${ this . lastName } ` ; }) . set ( function ( this : UserDocument , fullName : string ) { const [ firstName , lastName ] = fullName . split ( \" \" ); this . set ({ firstName , lastName }); }); export { UserSchema }; \u4e0a\u9762\uff0c\u6211\u4eec\u57fa\u4e8e fullName \u8bbe\u7f6e\u4e86 firstName \u548c lastName \u5c5e\u6027\u3002","title":"Setters"},{"location":"docs/mongodb/virtual/#_2","text":"\u865a\u62df\u5c5e\u6027\u7684\u4e00\u4e2a\u4fbf\u5229\u7279\u6027\u662f\u4f7f\u7528\u5b83\u4eec\u6765\u586b\u5145\u6765\u81ea\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u6587\u6863\u3002 \u6211\u4eec\u5b66\u4e60\u4e86\u4f7f\u7528 NestJS \u5728 API \u4e2d\u586b\u5145\u7279\u6027\u7684\u57fa\u7840\u77e5\u8bc6 #44.\u4f7f\u7528 MongoDB \u5b9e\u73b0\u5173\u7cfb \u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4e3a\u4e00\u7bc7\u6587\u7ae0\u521b\u5efa\u4e86\u4e00\u4e2a\u6a21\u5f0f\uff0c\u4f7f\u7528\u5b83\u6765\u5b58\u50a8\u5bf9\u4f5c\u8005\u7684\u5f15\u7528\u3002 post.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document , ObjectId } from \"mongoose\" ; import * as mongoose from \"mongoose\" ; import { User } from \"../users/user.schema\" ; import { Transform , Type } from \"class-transformer\" ; export type PostDocument = Post & Document ; @Schema () export class Post { @Transform (({ value }) => value . toString ()) _id : ObjectId ; @Prop () title : string ; @Prop () content : string ; @Prop ({ type : mongoose . Schema . Types . ObjectId , ref : User.name }) @Type (() => User ) author : User ; } export const PostSchema = SchemaFactory . createForClass ( Post ); \u56e0\u6b64\uff0c\u5f53\u6211\u4eec\u83b7\u53d6 User \u6587\u6863\u65f6\uff0c\u6211\u4eec\u6ca1\u6709\u4efb\u4f55\u5e16\u5b50\u7684\u4fe1\u606f\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u865a\u62df\u5c5e\u6027\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 user.schema.ts TypeScript import { Prop , Schema , SchemaFactory } from \"@nestjs/mongoose\" ; import { Document } from \"mongoose\" ; import { Type } from \"class-transformer\" ; import { Post } from \"../posts/post.schema\" ; export type UserDocument = User & Document ; @Schema ({ toJSON : { getters : true , virtuals : true } }) export class User { @Prop ({ unique : true }) email : string ; @Type (() => Post ) posts : Post []; // ... } const UserSchema = SchemaFactory . createForClass ( User ); UserSchema . virtual ( \"posts\" , { ref : \"Post\" , localField : \"_id\" , foreignField : \"author\" }); export { UserSchema }; \u6700\u540e\u4e00\u6b65\u662f\u8c03\u7528 populate \u51fd\u6570\u4ee5\u53ca\u7528\u6237\u7684\u6587\u6863\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u586b\u5145\u5d4c\u5957\u7684 categories \u5c5e\u6027\u3002 users.service.ts TypeScript import { Injectable , NotFoundException } from \"@nestjs/common\" ; import { InjectModel } from \"@nestjs/mongoose\" ; import { Model } from \"mongoose\" ; import { UserDocument , User } from \"./user.schema\" ; @Injectable () export class UsersService { constructor ( @InjectModel ( User . name ) private userModel : Model < UserDocument > ) {} async getById ( id : string ) { const user = await this . userModel . findById ( id ). populate ({ path : \"posts\" , populate : { path : \"categories\" } }); if ( ! user ) throw new NotFoundException (); return user ; } }","title":"\u586b\u5145\u865a\u62df\u5c5e\u6027"},{"location":"docs/mongodb/virtual/#_3","text":"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u865a\u62df\u5c5e\u6027\u4ee5\u53ca\u5b83\u4eec\u5982\u4f55\u6709\u7528\u3002 \u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u5b83\u4eec\u6765\u6dfb\u52a0\u7b80\u5355\u7684\u5c5e\u6027\u548c\u586b\u5145\u6765\u81ea\u5176\u4ed6\u96c6\u5408\u7684\u6587\u6863\u3002 \u4e3a\u4e86\u66f4\u597d\u5730\u638c\u63e1 virtual \u7684\u6982\u5ff5\uff0c\u6211\u4eec\u8fd8\u7814\u7a76\u4e86 getter \u548c setter \u3002 \u5f53\u4f7f\u7528 Mongoose \u6765\u5b9a\u4e49 MongoDB \u6a21\u5f0f\u65f6\uff0c\u4e0a\u8ff0\u6240\u6709\u5185\u5bb9\u80af\u5b9a\u4f1a\u6d3e\u4e0a\u7528\u573a\u3002","title":"\u603b\u7ed3"},{"location":"docs/openapi/_index/","text":"https://wanago.io/2022/02/14/api-nestjs-openapi-swagger/","title":"OpenAPI-swagger"},{"location":"docs/openapi/api-nestjs-openapi-swagger/","text":"https://wanago.io/2022/02/14/api-nestjs-openapi-swagger/ Across this series, we emphasize code readability and maintainability. In part #52 of this course, we\u2019ve gone through generating documentation with Compodoc and JSDoc. This time we look into the OpenAPI specification and the Swagger tool. You can check out an interactive demo prepared by the Swagger team. OpenAPI \u548c Swagger \u4ecb\u7ecd With OpenAPI and Swagger, we can create a user interface that serves as interactive API documentation for our project. However, since it might be confusing, it is worth outlining the difference between the OpenAPI and the Swagger. The OpenAPI is a specification used to describe our API and gives us a way to provide the details of our endpoints. It includes the endpoints and the description of each operation\u2019s inputs and outputs. It also allows us to specify our authentication method, license, and contact information. Swagger is a set of tools built around the OpenAPI specification. The one that we present in this article is the Swagger UI. It allows us to render the OpenAPI specification we wrote in as the API documentation. The thing that makes it so valuable is that it is interactive. Swagger generates a web page that we can publish so that people can view our API and make HTTP requests. It is a great tool to share knowledge with other people working in our organization. If our API is open to the public, we can also deploy the above page and share it with everyone. OpenAPI Specification was formerly called the Swagger Specification, which might add more to the confusion. \u5c06 Swagger \u6dfb\u52a0\u5230\u6211\u4eec\u7684 NestJS \u9879\u76ee\u4e2d We need to install two dependencies to add Swagger to our NestJS project. npm install @nestjs/swagger swagger-ui-express If you use Fastify, install fastify-swagger instead of swagger-ui-express. To generate the basics of our Swagger UI, we need to use the SwaggerModule and DocumentBuilder from @nestjs/swagger. main.ts TypeScript import { NestFactory } from \"@nestjs/core\" ; import { AppModule } from \"./app.module\" ; import { ConfigService } from \"@nestjs/config\" ; import { SwaggerModule , DocumentBuilder } from \"@nestjs/swagger\" ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); const configService = app . get ( ConfigService ); // ... const swaggerConfig = new DocumentBuilder () . setTitle ( \"API with NestJS\" ) . setDescription ( \"API developed throughout the API with NestJS course\" ) . setVersion ( \"1.0\" ) . build (); const document = SwaggerModule . createDocument ( app , swaggerConfig ); SwaggerModule . setup ( \"api\" , app , document ); const port = configService . get ( \"PORT\" ) ?? 3000 ; await app . listen ( port ); } bootstrap (); The DocumentBuilder class contains a set of methods we can use to configure our Swagger UI. Besides the above functions such as the setTitle, we will also go through some of the others in this article. @nestjs/swagger/dist/document-builder.d.ts TypeScript export declare class DocumentBuilder { private readonly logger ; private readonly document ; setTitle ( title : string ) : this ; setDescription ( description : string ) : this ; setVersion ( version : string ) : this ; setTermsOfService ( termsOfService : string ) : this ; setContact ( name : string , url : string , email : string ) : this ; setLicense ( name : string , url : string ) : this ; addServer ( url : string , description? : string , variables? : Record < string , ServerVariableObject > ) : this ; setExternalDoc ( description : string , url : string ) : this ; setBasePath ( path : string ) : this ; addTag ( name : string , description? : string , externalDocs? : ExternalDocumentationObject ) : this ; addSecurity ( name : string , options : SecuritySchemeObject ) : this ; addSecurityRequirements ( name : string | SecurityRequirementObject , requirements? : string []) : this ; addBearerAuth ( options? : SecuritySchemeObject , name? : string ) : this ; addOAuth2 ( options? : SecuritySchemeObject , name? : string ) : this ; addApiKey ( options? : SecuritySchemeObject , name? : string ) : this ; addBasicAuth ( options? : SecuritySchemeObject , name? : string ) : this ; addCookieAuth ( cookieName? : string , options? : SecuritySchemeObject , securityName? : string ) : this ; build () : Omit < OpenAPIObject , \"paths\" > ; } Doing all of the above generates the Swagger UI and serves it under at http://localhost:3000/api. The above URL might be different based on the port of your NestJS application. \u81ea\u52a8\u751f\u6210 OpenAPI \u89c4\u8303 Unfortunately, the specification we\u2019ve defined so far does not contain much detail. We can help NestJS generate a more detailed OpenAPI specification out of the box. To do that, we need to use the CLI plugin \"@nestjs/swagger\" gives us. To use it, we need to adjust our nest-cli.json file and run nest start. nest-cli.json JSON { \"collection\" : \"@nestjs/schematics\" , \"sourceRoot\" : \"src\" , \"compilerOptions\" : { \"plugins\" : [ \"@nestjs/swagger\" ] } } The CLI plugin assumes that our DTOs are suffixed with .dto.ts or .entity.ts. It also assumes that the files that contain controllers end with .controller.ts. \u624b\u52a8\u5b9a\u4e49 OpenAPI \u89c4\u8303 Thanks to using the above solution, we automatically get a significant part of the specification generated. If we want to make some changes, we can use the wide variety of decorators that NestJS gives us. \u6a21\u578b\u5b9a\u4e49 We can use the @ApiProperty() decorator to annotate class properties. register.dto TypeScript import { IsEmail , IsString , IsNotEmpty , MinLength , Matches } from \"class-validator\" ; import { ApiProperty } from \"@nestjs/swagger\" ; export class RegisterDto { @IsEmail () email : string ; @IsString () @IsNotEmpty () name : string ; @ApiProperty ({ deprecated : true , description : \"Use the name property instead\" , }) fullName : string ; @IsString () @IsNotEmpty () @MinLength ( 7 ) password : string ; @ApiProperty ({ description : \"Has to match a regular expression: /^\\\\+[1-9]\\\\d{1,14}$/\" , example : \"+123123123123\" , }) @IsString () @IsNotEmpty () @Matches ( /^\\+[1-9]\\d{1,14}$/ ) phoneNumber : string ; } export default RegisterDto ; The CLI plugin can understand the decorators from the class-validator such as @MinLength() \u5206\u7ec4\u7aef\u70b9 All of our endpoints go into the \u201cdefault\u201d group by default. To categorize them better, we can use the @ApiTags() decorator. posts.controller.ts TypeScript import { Controller } from \"@nestjs/common\" ; import PostsService from \"./posts.service\" ; import { ApiTags } from \"@nestjs/swagger\" ; @Controller ( \"posts\" ) @ApiTags ( \"posts\" ) export default class PostsController { constructor ( private readonly postsService : PostsService ) {} // ... } \u7528\u66f4\u591a\u7684\u7ec6\u8282\u63cf\u8ff0\u6211\u4eec\u7684\u7aef\u70b9 We can use decorators such as @ApiParam() and @ApiResponse() to provide more details about our endpoints. posts.controller.ts TypeScript class DemoController { @Get ( \":id\" ) @ApiParam ({ name : \"id\" , required : true , description : \"Should be an id of a post that exists in the database\" , type : Number , }) @ApiResponse ({ status : 200 , description : \"A post has been successfully fetched\" , type : PostEntity , }) @ApiResponse ({ status : 404 , description : \"A post with given id does not exist.\" , }) getPostById ( @Param () { id } : FindOneParams ) { return this . postsService . getPostById ( Number ( id )); } } Instead of passing status: 200 and status: 404 we could use the @ApiOkResponse() and @ApiNotFoundResponse() decorators. \u9a8c\u8bc1\u548c cookies In this series, we use cookie-based authentication. Since many of our endpoints require the user to log in, let\u2019s add this functionality to our OpenAPI specification. If you want to know more about authentication, check out API with NestJS #3. Authenticating users with bcrypt, Passport, JWT, and cookies Swagger supports a variety of different types of authentication. Unfortunately, it currently does not support sending cookies when using the \u201cTry it out\u201d button. We can deal with this issue by using the Swagger interface to directly log in to our API. In our application, we have the /log-in endpoint. A lot of its logic happens in the LocalAuthenticationGuard. Therefore, the CLI plugin does not note that the user needs to provide an email and a password. Let\u2019s fix that using the @ApiBody() decorator. authentication.controller.ts TypeScript class DemoController { @HttpCode ( 200 ) @UseGuards ( LocalAuthenticationGuard ) @Post ( \"log-in\" ) @ApiBody ({ type : LogInDto }) async logIn ( @Req () request : RequestWithUser ) { const { user } = request ; const accessTokenCookie = this . authenticationService . getCookieWithJwtAccessToken ( user . id ); const { cookie : refreshTokenCookie , token : refreshToken } = this . authenticationService . getCookieWithJwtRefreshToken ( user . id ); await this . usersService . setCurrentRefreshToken ( refreshToken , user . id ); request . res . setHeader ( \"Set-Cookie\" , [ accessTokenCookie , refreshTokenCookie ]); if ( user . isTwoFactorAuthenticationEnabled ) { return ; } return user ; } } We now can use the \u201cTry it out\u201d button to send a request to the /log-in endpoint. Performing the above request sets the right cookie in our browser. Thanks to that, we will send this cookie when interacting with other endpoints automatically. \u5904\u7406\u6587\u4ef6\u4e0a\u4f20 In part #55 of this series, we\u2019ve implemented a way to upload files and store them on our server. To reflect that in Swagger, we can use the @ApiBody() and @ApiConsumes() decorators. users.controller.ts TypeScript import { UsersService } from \"./users.service\" ; import { BadRequestException , Controller , Post , Req , UploadedFile , UseGuards , UseInterceptors } from \"@nestjs/common\" ; import JwtAuthenticationGuard from \"../authentication/jwt-authentication.guard\" ; import RequestWithUser from \"../authentication/requestWithUser.interface\" ; import { Express } from \"express\" ; import LocalFilesInterceptor from \"../localFiles/localFiles.interceptor\" ; import { ApiBody , ApiConsumes } from \"@nestjs/swagger\" ; import FileUploadDto from \"./dto/fileUpload.dto\" ; @Controller ( \"users\" ) export class UsersController { constructor ( private readonly usersService : UsersService ) {} @Post ( \"avatar\" ) @UseGuards ( JwtAuthenticationGuard ) @UseInterceptors ( LocalFilesInterceptor ({ fieldName : \"file\" , path : \"/avatars\" , fileFilter : ( request , file , callback ) => { if ( ! file . mimetype . includes ( \"image\" )) { return callback ( new BadRequestException ( \"Provide a valid image\" ), false ); } callback ( null , true ); }, limits : { fileSize : Math.pow ( 1024 , 2 ), // 1MB }, }) ) @ApiConsumes ( \"multipart/form-data\" ) @ApiBody ({ description : \"A new avatar for the user\" , type : FileUploadDto , }) async addAvatar ( @Req () request : RequestWithUser , @UploadedFile () file : Express.Multer.File ) { return this . usersService . addAvatar ( request . user . id , { path : file.path , filename : file.originalname , mimetype : file.mimetype , }); } } fileUpload.dto.ts TypeScript import { ApiProperty } from \"@nestjs/swagger\" ; import { Express } from \"express\" ; class FileUploadDto { @ApiProperty ({ type : \"string\" , format : \"binary\" }) file : Express.Multer.File ; } export default FileUploadDto ; Doing the above creates an interface in Swagger UI where we can upload our image. \u603b\u7ed3 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86 OpenAPI \u89c4\u8303\u548c Swagger UI \u5de5\u5177\u3002 \u6211\u4eec\u5df2\u7ecf\u4f7f\u7528 CLI \u63d2\u4ef6\u83b7\u5f97\u4e86\u5f88\u591a\u73b0\u6210\u7684\u4e1c\u897f\u3002 \u5c3d\u7ba1\u5982\u6b64\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5fc5\u987b\u624b\u52a8\u4f7f\u7528 NestJS \u63d0\u4f9b\u7684\u4e0d\u540c\u88c5\u9970\u5668\u3002 \u6211\u4eec\u8fd8\u5904\u7406\u4e86 cookie \u8ba4\u8bc1\u548c\u6587\u4ef6\u4e0a\u4f20\u3002 \u4ee5\u4e0a\u5185\u5bb9\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u521b\u5efa\u5065\u58ee\u7684\u4ea4\u4e92\u5f0f\u6587\u6863\u6240\u5fc5\u9700\u7684\u77e5\u8bc6\u3002","title":"OpenAPI\u89c4\u8303\u548cSwagger"},{"location":"docs/openapi/api-nestjs-openapi-swagger/#openapi-swagger","text":"With OpenAPI and Swagger, we can create a user interface that serves as interactive API documentation for our project. However, since it might be confusing, it is worth outlining the difference between the OpenAPI and the Swagger. The OpenAPI is a specification used to describe our API and gives us a way to provide the details of our endpoints. It includes the endpoints and the description of each operation\u2019s inputs and outputs. It also allows us to specify our authentication method, license, and contact information. Swagger is a set of tools built around the OpenAPI specification. The one that we present in this article is the Swagger UI. It allows us to render the OpenAPI specification we wrote in as the API documentation. The thing that makes it so valuable is that it is interactive. Swagger generates a web page that we can publish so that people can view our API and make HTTP requests. It is a great tool to share knowledge with other people working in our organization. If our API is open to the public, we can also deploy the above page and share it with everyone. OpenAPI Specification was formerly called the Swagger Specification, which might add more to the confusion.","title":"OpenAPI \u548c Swagger \u4ecb\u7ecd"},{"location":"docs/openapi/api-nestjs-openapi-swagger/#swagger-nestjs","text":"We need to install two dependencies to add Swagger to our NestJS project. npm install @nestjs/swagger swagger-ui-express If you use Fastify, install fastify-swagger instead of swagger-ui-express. To generate the basics of our Swagger UI, we need to use the SwaggerModule and DocumentBuilder from @nestjs/swagger. main.ts TypeScript import { NestFactory } from \"@nestjs/core\" ; import { AppModule } from \"./app.module\" ; import { ConfigService } from \"@nestjs/config\" ; import { SwaggerModule , DocumentBuilder } from \"@nestjs/swagger\" ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); const configService = app . get ( ConfigService ); // ... const swaggerConfig = new DocumentBuilder () . setTitle ( \"API with NestJS\" ) . setDescription ( \"API developed throughout the API with NestJS course\" ) . setVersion ( \"1.0\" ) . build (); const document = SwaggerModule . createDocument ( app , swaggerConfig ); SwaggerModule . setup ( \"api\" , app , document ); const port = configService . get ( \"PORT\" ) ?? 3000 ; await app . listen ( port ); } bootstrap (); The DocumentBuilder class contains a set of methods we can use to configure our Swagger UI. Besides the above functions such as the setTitle, we will also go through some of the others in this article. @nestjs/swagger/dist/document-builder.d.ts TypeScript export declare class DocumentBuilder { private readonly logger ; private readonly document ; setTitle ( title : string ) : this ; setDescription ( description : string ) : this ; setVersion ( version : string ) : this ; setTermsOfService ( termsOfService : string ) : this ; setContact ( name : string , url : string , email : string ) : this ; setLicense ( name : string , url : string ) : this ; addServer ( url : string , description? : string , variables? : Record < string , ServerVariableObject > ) : this ; setExternalDoc ( description : string , url : string ) : this ; setBasePath ( path : string ) : this ; addTag ( name : string , description? : string , externalDocs? : ExternalDocumentationObject ) : this ; addSecurity ( name : string , options : SecuritySchemeObject ) : this ; addSecurityRequirements ( name : string | SecurityRequirementObject , requirements? : string []) : this ; addBearerAuth ( options? : SecuritySchemeObject , name? : string ) : this ; addOAuth2 ( options? : SecuritySchemeObject , name? : string ) : this ; addApiKey ( options? : SecuritySchemeObject , name? : string ) : this ; addBasicAuth ( options? : SecuritySchemeObject , name? : string ) : this ; addCookieAuth ( cookieName? : string , options? : SecuritySchemeObject , securityName? : string ) : this ; build () : Omit < OpenAPIObject , \"paths\" > ; } Doing all of the above generates the Swagger UI and serves it under at http://localhost:3000/api. The above URL might be different based on the port of your NestJS application.","title":"\u5c06 Swagger \u6dfb\u52a0\u5230\u6211\u4eec\u7684 NestJS \u9879\u76ee\u4e2d"},{"location":"docs/openapi/api-nestjs-openapi-swagger/#openapi","text":"Unfortunately, the specification we\u2019ve defined so far does not contain much detail. We can help NestJS generate a more detailed OpenAPI specification out of the box. To do that, we need to use the CLI plugin \"@nestjs/swagger\" gives us. To use it, we need to adjust our nest-cli.json file and run nest start. nest-cli.json JSON { \"collection\" : \"@nestjs/schematics\" , \"sourceRoot\" : \"src\" , \"compilerOptions\" : { \"plugins\" : [ \"@nestjs/swagger\" ] } } The CLI plugin assumes that our DTOs are suffixed with .dto.ts or .entity.ts. It also assumes that the files that contain controllers end with .controller.ts.","title":"\u81ea\u52a8\u751f\u6210 OpenAPI \u89c4\u8303"},{"location":"docs/openapi/api-nestjs-openapi-swagger/#openapi_1","text":"Thanks to using the above solution, we automatically get a significant part of the specification generated. If we want to make some changes, we can use the wide variety of decorators that NestJS gives us.","title":"\u624b\u52a8\u5b9a\u4e49 OpenAPI \u89c4\u8303"},{"location":"docs/openapi/api-nestjs-openapi-swagger/#_1","text":"We can use the @ApiProperty() decorator to annotate class properties. register.dto TypeScript import { IsEmail , IsString , IsNotEmpty , MinLength , Matches } from \"class-validator\" ; import { ApiProperty } from \"@nestjs/swagger\" ; export class RegisterDto { @IsEmail () email : string ; @IsString () @IsNotEmpty () name : string ; @ApiProperty ({ deprecated : true , description : \"Use the name property instead\" , }) fullName : string ; @IsString () @IsNotEmpty () @MinLength ( 7 ) password : string ; @ApiProperty ({ description : \"Has to match a regular expression: /^\\\\+[1-9]\\\\d{1,14}$/\" , example : \"+123123123123\" , }) @IsString () @IsNotEmpty () @Matches ( /^\\+[1-9]\\d{1,14}$/ ) phoneNumber : string ; } export default RegisterDto ; The CLI plugin can understand the decorators from the class-validator such as @MinLength()","title":"\u6a21\u578b\u5b9a\u4e49"},{"location":"docs/openapi/api-nestjs-openapi-swagger/#_2","text":"All of our endpoints go into the \u201cdefault\u201d group by default. To categorize them better, we can use the @ApiTags() decorator. posts.controller.ts TypeScript import { Controller } from \"@nestjs/common\" ; import PostsService from \"./posts.service\" ; import { ApiTags } from \"@nestjs/swagger\" ; @Controller ( \"posts\" ) @ApiTags ( \"posts\" ) export default class PostsController { constructor ( private readonly postsService : PostsService ) {} // ... }","title":"\u5206\u7ec4\u7aef\u70b9"},{"location":"docs/openapi/api-nestjs-openapi-swagger/#_3","text":"We can use decorators such as @ApiParam() and @ApiResponse() to provide more details about our endpoints. posts.controller.ts TypeScript class DemoController { @Get ( \":id\" ) @ApiParam ({ name : \"id\" , required : true , description : \"Should be an id of a post that exists in the database\" , type : Number , }) @ApiResponse ({ status : 200 , description : \"A post has been successfully fetched\" , type : PostEntity , }) @ApiResponse ({ status : 404 , description : \"A post with given id does not exist.\" , }) getPostById ( @Param () { id } : FindOneParams ) { return this . postsService . getPostById ( Number ( id )); } } Instead of passing status: 200 and status: 404 we could use the @ApiOkResponse() and @ApiNotFoundResponse() decorators.","title":"\u7528\u66f4\u591a\u7684\u7ec6\u8282\u63cf\u8ff0\u6211\u4eec\u7684\u7aef\u70b9"},{"location":"docs/openapi/api-nestjs-openapi-swagger/#cookies","text":"In this series, we use cookie-based authentication. Since many of our endpoints require the user to log in, let\u2019s add this functionality to our OpenAPI specification. If you want to know more about authentication, check out API with NestJS #3. Authenticating users with bcrypt, Passport, JWT, and cookies Swagger supports a variety of different types of authentication. Unfortunately, it currently does not support sending cookies when using the \u201cTry it out\u201d button. We can deal with this issue by using the Swagger interface to directly log in to our API. In our application, we have the /log-in endpoint. A lot of its logic happens in the LocalAuthenticationGuard. Therefore, the CLI plugin does not note that the user needs to provide an email and a password. Let\u2019s fix that using the @ApiBody() decorator. authentication.controller.ts TypeScript class DemoController { @HttpCode ( 200 ) @UseGuards ( LocalAuthenticationGuard ) @Post ( \"log-in\" ) @ApiBody ({ type : LogInDto }) async logIn ( @Req () request : RequestWithUser ) { const { user } = request ; const accessTokenCookie = this . authenticationService . getCookieWithJwtAccessToken ( user . id ); const { cookie : refreshTokenCookie , token : refreshToken } = this . authenticationService . getCookieWithJwtRefreshToken ( user . id ); await this . usersService . setCurrentRefreshToken ( refreshToken , user . id ); request . res . setHeader ( \"Set-Cookie\" , [ accessTokenCookie , refreshTokenCookie ]); if ( user . isTwoFactorAuthenticationEnabled ) { return ; } return user ; } } We now can use the \u201cTry it out\u201d button to send a request to the /log-in endpoint. Performing the above request sets the right cookie in our browser. Thanks to that, we will send this cookie when interacting with other endpoints automatically.","title":"\u9a8c\u8bc1\u548c cookies"},{"location":"docs/openapi/api-nestjs-openapi-swagger/#_4","text":"In part #55 of this series, we\u2019ve implemented a way to upload files and store them on our server. To reflect that in Swagger, we can use the @ApiBody() and @ApiConsumes() decorators. users.controller.ts TypeScript import { UsersService } from \"./users.service\" ; import { BadRequestException , Controller , Post , Req , UploadedFile , UseGuards , UseInterceptors } from \"@nestjs/common\" ; import JwtAuthenticationGuard from \"../authentication/jwt-authentication.guard\" ; import RequestWithUser from \"../authentication/requestWithUser.interface\" ; import { Express } from \"express\" ; import LocalFilesInterceptor from \"../localFiles/localFiles.interceptor\" ; import { ApiBody , ApiConsumes } from \"@nestjs/swagger\" ; import FileUploadDto from \"./dto/fileUpload.dto\" ; @Controller ( \"users\" ) export class UsersController { constructor ( private readonly usersService : UsersService ) {} @Post ( \"avatar\" ) @UseGuards ( JwtAuthenticationGuard ) @UseInterceptors ( LocalFilesInterceptor ({ fieldName : \"file\" , path : \"/avatars\" , fileFilter : ( request , file , callback ) => { if ( ! file . mimetype . includes ( \"image\" )) { return callback ( new BadRequestException ( \"Provide a valid image\" ), false ); } callback ( null , true ); }, limits : { fileSize : Math.pow ( 1024 , 2 ), // 1MB }, }) ) @ApiConsumes ( \"multipart/form-data\" ) @ApiBody ({ description : \"A new avatar for the user\" , type : FileUploadDto , }) async addAvatar ( @Req () request : RequestWithUser , @UploadedFile () file : Express.Multer.File ) { return this . usersService . addAvatar ( request . user . id , { path : file.path , filename : file.originalname , mimetype : file.mimetype , }); } } fileUpload.dto.ts TypeScript import { ApiProperty } from \"@nestjs/swagger\" ; import { Express } from \"express\" ; class FileUploadDto { @ApiProperty ({ type : \"string\" , format : \"binary\" }) file : Express.Multer.File ; } export default FileUploadDto ; Doing the above creates an interface in Swagger UI where we can upload our image.","title":"\u5904\u7406\u6587\u4ef6\u4e0a\u4f20"},{"location":"docs/openapi/api-nestjs-openapi-swagger/#_5","text":"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86 OpenAPI \u89c4\u8303\u548c Swagger UI \u5de5\u5177\u3002 \u6211\u4eec\u5df2\u7ecf\u4f7f\u7528 CLI \u63d2\u4ef6\u83b7\u5f97\u4e86\u5f88\u591a\u73b0\u6210\u7684\u4e1c\u897f\u3002 \u5c3d\u7ba1\u5982\u6b64\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5fc5\u987b\u624b\u52a8\u4f7f\u7528 NestJS \u63d0\u4f9b\u7684\u4e0d\u540c\u88c5\u9970\u5668\u3002 \u6211\u4eec\u8fd8\u5904\u7406\u4e86 cookie \u8ba4\u8bc1\u548c\u6587\u4ef6\u4e0a\u4f20\u3002 \u4ee5\u4e0a\u5185\u5bb9\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u521b\u5efa\u5065\u58ee\u7684\u4ea4\u4e92\u5f0f\u6587\u6863\u6240\u5fc5\u9700\u7684\u77e5\u8bc6\u3002","title":"\u603b\u7ed3"},{"location":"docs/queue/_index/","text":"https://github.com/axios/axios","title":"\u961f\u5217"},{"location":"docs/queue/bull/","text":"https://github.com/OptimalBits/bull \u8bf7\u5728 \ud83d\udcfbTwitter \u4e0a\u5173\u6ce8\u6211\uff0c\u4e86\u89e3\u91cd\u8981\u7684\u65b0\u95fb\u548c\u66f4\u65b0\u3002 \u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a\u535a\u5ba2\u4e2d\u627e\u5230\u6559\u7a0b\u548c\u65b0\u95fb: \ud83d\udee0 \u6559\u7a0b Bull \u7279\u6027 [x] \u6700\u5c0f\u7684 CPU \u4f7f\u7528\u7387\uff0c\u7531\u4e8e\u65e0\u8f6e\u8be2\u8bbe\u8ba1\u3002 [x] \u57fa\u4e8e Redis \u7684\u7a33\u5065\u8bbe\u8ba1\u3002 [x] \u5ef6\u8fdf\u7684\u5de5\u4f5c\u3002 [x] \u6839\u636e cron \u89c4\u8303\u5b89\u6392\u548c\u91cd\u590d\u4f5c\u4e1a\u3002 [x] \u5bf9\u5de5\u4f5c\u7684\u7387\u9650\u5236\u3002 [x] \u91cd\u8bd5\u3002 [x] \u4f18\u5148\u7ea7\u3002 [x] \u5e76\u53d1\u6027\u3002 [x] \u6682\u505c/\u6062\u590d-\u5168\u5c40\u6216\u672c\u5730\u3002 [x] \u6bcf\u4e2a\u961f\u5217\u6709\u591a\u4e2a\u4f5c\u4e1a\u7c7b\u578b\u3002 [x] \u7ebf\u7a0b(\u6c99\u76d2)\u5904\u7406\u51fd\u6570\u3002 [x] \u4ece\u8fdb\u7a0b\u5d29\u6e83\u4e2d\u81ea\u52a8\u6062\u590d\u3002 \u63a5\u4e0b\u6765\u662f\u8def\u7ebf\u56fe\u2026 [ ] \u4f5c\u4e1a\u5b8c\u6210\u786e\u8ba4(\u540c\u65f6\u53ef\u4ee5\u4f7f\u7528\u6d88\u606f\u961f\u5217 pattern )\u3002 [ ] \u7236\u5b50\u7684\u5de5\u4f5c\u5173\u7cfb\u3002 UIs \u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u7b2c\u4e09\u65b9 ui \u6765\u8fdb\u884c\u76d1\u63a7: BullMQ Taskforce Bull v3 Taskforce bull-board bull-repl bull-monitor Monitoro Bull <= v2 Matador react-bull Toureiro \u76d1\u6d4b\u548c\u62a5\u8b66 \u4f7f\u7528 Prometheus Bull Queue Exporter \u7279\u5f81\u6bd4\u8f83 \u7531\u4e8e\u6709\u4e00\u4e9b\u4f5c\u4e1a\u961f\u5217\u89e3\u51b3\u65b9\u6848\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u8868\u6bd4\u8f83\u5b83\u4eec: Feature Bullmq-Pro Bullmq Bull Kue Bee Agenda \u540e\u7aef redis redis redis redis redis mongo \u89c2\u5bdf \u2713 \u7ec4\u901f\u7387\u9650\u5236 \u2713 \u96c6\u7fa4\u652f\u6301 \u2713 \u7236/\u5b50\u4f9d\u8d56\u5173\u7cfb \u2713 \u2713 \u4f18\u5148\u7ea7 \u2713 \u2713 \u2713 \u2713 \u2713 \u5e76\u53d1\u6027 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u6f14\u793a\u5de5\u4f5c \u2713 \u2713 \u2713 \u2713 \u2713 \u5168\u5c40\u4e8b\u4ef6 \u2713 \u2713 \u2713 \u2713 \u901f\u5ea6\u9650\u5236\u5668 \u2713 \u2713 \u2713 \u6682\u505c/\u6062\u590d \u2713 \u2713 \u2713 \u2713 \u6c99\u7bb1\u5de5\u4eba \u2713 \u2713 \u2713 \u53ef\u91cd\u590d\u7684\u5de5\u4f5c \u2713 \u2713 \u2713 \u2713 \u539f\u5b50\u64cd\u4f5c \u2713 \u2713 \u2713 \u2713 \u6301\u4e45\u6027 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u7528\u6237\u754c\u9762 \u2713 \u2713 \u2713 \u2713 \u2713 \u4f18\u5316\u4e86 Jobs / Messages Jobs / Messages Jobs / Messages Jobs Messages Jobs \u5b89\u88c5 Bash npm install bull --save \u6216\u8005 Bash yarn add bull \u8981\u6c42: Bull \u9700\u8981\u5927\u4e8e\u6216\u7b49\u4e8e' 2.8.18 '\u7684 Redis \u7248\u672c\u3002 Typescript \u5b9a\u4e49 Bash npm install @types/bull --save-dev Bash yarn add --dev @types/bull \u5b9a\u4e49\u76ee\u524d\u7ef4\u62a4\u5728 DefinitelyTyped repo \u4e2d\u3002 \u5feb\u901f\u6307\u5357 \u57fa\u672c\u7528\u6cd5 JavaScript const Queue = require ( \"bull\" ); const videoQueue = new Queue ( \"video transcoding\" , \"redis://127.0.0.1:6379\" ); const audioQueue = new Queue ( \"audio transcoding\" , { redis : { port : 6379 , host : \"127.0.0.1\" , password : \"foobared\" }, }); // Specify Redis connection using object const imageQueue = new Queue ( \"image transcoding\" ); const pdfQueue = new Queue ( \"pdf transcoding\" ); videoQueue . process ( function ( job , done ) { // job.data contains the custom data passed when the job was created // job.id contains id of this job. // transcode video asynchronously and report progress job . progress ( 42 ); // call done when finished done (); // or give a error if error done ( new Error ( \"error transcoding\" )); // or pass it a result done ( null , { framerate : 29.5 , /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); }); audioQueue . process ( function ( job , done ) { // transcode audio asynchronously and report progress job . progress ( 42 ); // call done when finished done (); // or give a error if error done ( new Error ( \"error transcoding\" )); // or pass it a result done ( null , { samplerate : 48000 , /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); }); imageQueue . process ( function ( job , done ) { // transcode image asynchronously and report progress job . progress ( 42 ); // call done when finished done (); // or give a error if error done ( new Error ( \"error transcoding\" )); // or pass it a result done ( null , { width : 1280 , height : 720 , /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); }); pdfQueue . process ( function ( job ) { // Processors can also return promises instead of using the done callback return pdfAsyncProcessor (); }); videoQueue . add ({ video : \"http://example.com/video1.mov\" }); audioQueue . add ({ audio : \"http://example.com/audio1.mp3\" }); imageQueue . add ({ image : \"http://example.com/image1.tiff\" }); \u4f7f\u7528\u627f\u8bfa \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 return promises \u6765\u4ee3\u66ff done \u56de\u8c03: JavaScript videoQueue . process ( function ( job ) { // \u4e0d\u8981\u5fd8\u8bb0\u5220\u9664done\u56de\u8c03! // \u7b80\u5355\u5730\u56de\u62a5\u4e00\u4e2a\u627f\u8bfa return fetchVideo ( job . data . url ). then ( transcodeVideo ); // \u5904\u7406\u627f\u8bfa\u62d2\u7edd return Promise . reject ( new Error ( \"error transcoding\" )); // \u5c06\u627f\u8bfa\u89e3\u6790\u7684\u503c\u4f20\u9012\u7ed9\u201ccompleted\u201d\u4e8b\u4ef6 return Promise . resolve ({ framerate : 29.5 , /* etc... */ }); // \u5982\u679c\u4f5c\u4e1a\u629b\u51fa\u4e00\u4e2a\u672a\u5904\u7406\u7684\u5f02\u5e38\uff0c\u5b83\u4e5f\u4f1a\u5f97\u5230\u6b63\u786e\u7684\u5904\u7406 throw new Error ( \"some unexpected error\" ); // \u4e00\u6837 return Promise . reject ( new Error ( \"some unexpected error\" )); }); \u72ec\u7acb\u7684\u8fdb\u7a0b \u8fdb\u7a0b\u51fd\u6570\u4e5f\u53ef\u4ee5\u5728\u5355\u72ec\u7684\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u3002\u8fd9\u6709\u51e0\u4e2a\u597d\u5904: \u8fd9\u4e2a\u8fdb\u7a0b\u662f\u6c99\u7bb1\u5316\u7684\uff0c\u6240\u4ee5\u5373\u4f7f\u5b83\u5d29\u6e83\u4e86\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u5de5\u4f5c\u8fdb\u7a0b\u3002 \u60a8\u53ef\u4ee5\u5728\u4e0d\u5f71\u54cd\u961f\u5217\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u963b\u585e\u4ee3\u7801(\u4f5c\u4e1a\u4e0d\u4f1a\u505c\u6b62)\u3002 \u66f4\u597d\u5730\u5229\u7528\u591a\u6838 cpu\u3002 \u51cf\u5c11\u4e0e redis \u7684\u8fde\u63a5\u3002 \u4e3a\u4e86\u4f7f\u7528\u8fd9\u4e2a\u7279\u6027\uff0c\u53ea\u9700\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u5904\u7406\u5668\u6587\u4ef6: JavaScript // processor.js module . exports = function ( job ) { // \u505a\u4e00\u4e9b\u7e41\u91cd\u7684\u5de5\u4f5c return Promise . resolve ( result ); }; \u7136\u540e\u50cf\u8fd9\u6837\u5b9a\u4e49\u5904\u7406\u5668: JavaScript // \u5355\u6d41\u7a0b: queue . process ( \"/path/to/my/processor.js\" ); // \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5e76\u53d1: queue . process ( 5 , \"/path/to/my/processor.js\" ); // \u548c\u6307\u5b9a\u7684\u5904\u7406\u5668: queue . process ( \"my processor\" , 5 , \"/path/to/my/processor.js\" ); \u91cd\u590d\u7684\u5de5\u4f5c \u4f5c\u4e1a\u53ef\u4ee5\u88ab\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\uff0c\u5e76\u6839\u636e cron \u89c4\u8303\u91cd\u590d\u5904\u7406: JavaScript paymentsQueue . process ( function ( job ) { // Check payments }); // Repeat payment job once every day at 3:15 (am) paymentsQueue . add ( paymentsData , { repeat : { cron : \"15 3 * * *\" } }); \u4f5c\u4e3a\u63d0\u793a\uff0c\u8bf7\u68c0\u67e5\u8fd9\u91cc\u7684\u8868\u8fbe\u5f0f\uff0c\u4ee5\u9a8c\u8bc1\u5b83\u4eec\u662f\u6b63\u786e\u7684: cron \u8868\u8fbe\u5f0f\u751f\u6210\u5668 \u6682\u505c/\u6062\u590d \u4e00\u4e2a\u961f\u5217\u53ef\u4ee5\u88ab\u5168\u5c40\u6682\u505c\u548c\u6062\u590d(\u4f20\u9012 true \u6765\u6682\u505c\u8fd9\u4e2a worker \u7684\u5904\u7406): JavaScript queue . pause (). then ( function () { // queue is paused now }); queue . resume (). then ( function () { // queue is resumed now }); \u4e8b\u4ef6 \u961f\u5217\u4f1a\u53d1\u51fa\u4e00\u4e9b\u6709\u7528\u7684\u4e8b\u4ef6\uff0c\u4f8b\u5982\u2026 JavaScript . on ( 'completed' , function ( job , result ) { // Job completed with output result! }) \u6709\u5173\u4e8b\u4ef6\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u5305\u62ec\u6240\u89e6\u53d1\u4e8b\u4ef6\u7684\u5b8c\u6574\u5217\u8868\uff0c\u8bf7\u53c2\u9605 \u4e8b\u4ef6\u53c2\u8003\u8d44\u6599 \u961f\u5217\u6027\u80fd \u961f\u5217\u5f88\u4fbf\u5b9c\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u9700\u8981\u5f88\u591a\u961f\u5217\uff0c\u53ea\u9700\u521b\u5efa\u65b0\u7684\u4e0d\u540c\u540d\u79f0\u7684\u961f\u5217: JavaScript const userJohn = new Queue ( 'john' ); const userLisa = new Queue ( 'lisa' ); . . . \u7136\u800c\uff0c\u6bcf\u4e2a\u961f\u5217\u5b9e\u4f8b\u5c06\u9700\u8981\u65b0\u7684 redis \u8fde\u63a5\uff0c\u68c0\u67e5\u5982\u4f55 \u91cd\u7528\u8fde\u63a5 \uff0c\u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u547d\u540d\u5904\u7406\u5668 \u6765\u5b9e\u73b0\u7c7b\u4f3c\u7684\u7ed3\u679c\u3002 \u96c6\u7fa4\u7684\u652f\u6301 NOTE: \u4ece 3.2.0 \u53ca\u4ee5\u4e0a\u7248\u672c\u5f00\u59cb\uff0c\u5efa\u8bae\u4f7f\u7528\u7ebf\u7a0b\u5904\u7406\u5668\u3002 \u961f\u5217\u662f\u5065\u58ee\u7684\uff0c\u53ef\u4ee5\u5728\u51e0\u4e2a\u7ebf\u7a0b\u6216\u8fdb\u7a0b\u4e2d\u5e76\u884c\u8fd0\u884c\uff0c\u6ca1\u6709\u4efb\u4f55\u5371\u9669\u6216\u961f\u5217\u635f\u574f\u7684\u98ce\u9669\u3002 \u68c0\u67e5\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u4f7f\u7528 cluster \u8de8\u8fdb\u7a0b\u5e76\u884c\u5316\u4efb\u52a1: JavaScript const Queue = require ( \"bull\" ); const cluster = require ( \"cluster\" ); const numWorkers = 8 ; const queue = new Queue ( \"test concurrent queue\" ); if ( cluster . isMaster ) { for ( let i = 0 ; i < numWorkers ; i ++ ) { cluster . fork (); } cluster . on ( \"online\" , function ( worker ) { // Let's create a few jobs for the queue workers for ( let i = 0 ; i < 500 ; i ++ ) { queue . add ({ foo : \"bar\" }); } }); cluster . on ( \"exit\" , function ( worker , code , signal ) { console . log ( \"worker \" + worker . process . pid + \" died\" ); }); } else { queue . process ( function ( job , jobDone ) { console . log ( \"Job done by worker\" , cluster . worker . id , job . id ); jobDone (); }); } \u6587\u6863 \u8981\u83b7\u53d6\u5b8c\u6574\u7684\u6587\u6863\uff0c\u8bf7\u67e5\u770b\u53c2\u8003\u548c\u5e38\u7528\u6a21\u5f0f: \u6307\u5357 - \u4f60\u4f7f\u7528 Bull \u5f00\u53d1\u7684\u8d77\u70b9\u3002 \u53c2\u8003 - \u5305\u542b\u6240\u6709\u53ef\u7528\u5bf9\u8c61\u548c\u65b9\u6cd5\u7684\u5f15\u7528\u6587\u6863\u3002 \u6a21\u5f0f - \u4e00\u7ec4\u5e38\u89c1\u6a21\u5f0f\u7684\u793a\u4f8b\u3002 \u8bb8\u53ef\u8bc1 - Bull \u8bb8\u53ef\u8bc1-\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u3002 \u5982\u679c\u4f60\u770b\u5230\u4efb\u4f55\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u6587\u6863\u7684\u4e1c\u897f\uff0c\u8bf7\u63d0\u4ea4\u4e00\u4e2a pull request! \u91cd\u8981\u7684\u7b14\u8bb0 \u961f\u5217\u7684\u76ee\u6807\u662f\u201c\u81f3\u5c11\u4e00\u6b21\u201d\u7684\u5de5\u4f5c\u7b56\u7565\u3002 \u8fd9\u610f\u5473\u7740\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u4f5c\u4e1a\u53ef\u80fd\u4f1a\u88ab\u591a\u6b21\u5904\u7406\u3002 \u8fd9\u79cd\u60c5\u51b5\u901a\u5e38\u53d1\u751f\u5728\u4e00\u4e2a worker \u5728\u6574\u4e2a\u5904\u7406\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u4e3a\u7ed9\u5b9a\u7684\u4f5c\u4e1a\u4fdd\u6301\u9501\u7684\u65f6\u5019\u3002 \u5f53\u4e00\u4e2a\u5de5\u4eba\u6b63\u5728\u5904\u7406\u4e00\u9879\u5de5\u4f5c\u65f6\uff0c\u5b83\u5c06\u4f7f\u8be5\u5de5\u4f5c\u4fdd\u6301\u201c\u9501\u5b9a\u201d\uff0c\u4ee5\u4fbf\u5176\u4ed6\u5de5\u4eba\u4e0d\u80fd\u5904\u7406\u5b83\u3002 \u7406\u89e3\u9501\u5b9a\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4ee5\u9632\u6b62\u60a8\u7684\u4f5c\u4e1a\u5931\u53bb\u9501- becoming stalled - \u5e76\u56e0\u6b64\u91cd\u65b0\u542f\u52a8\uff0c\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\u3002 \u9501\u662f\u901a\u8fc7\u5728 lockRenewTime (\u901a\u5e38\u662f lockDuration \u7684\u4e00\u534a)\u4e0a\u4e3a lockDuration \u521b\u5efa\u4e00\u4e2a\u9501\u6765\u5b9e\u73b0\u7684\u3002 \u5982\u679c lockDuration \u5728\u9501\u88ab\u66f4\u65b0\u4e4b\u524d\u8fc7\u671f\uff0c\u5219\u8be5\u4f5c\u4e1a\u5c06\u88ab\u89c6\u4e3a\u6682\u505c\u5e76\u81ea\u52a8\u91cd\u542f;\u5b83\u5c06\u88ab \u4e8c\u6b21\u52a0\u5de5 \u3002 \u8fd9\u79cd\u60c5\u51b5\u53ef\u80fd\u53d1\u751f\u5728: \u8fd0\u884c\u4f5c\u4e1a\u5904\u7406\u5668\u7684 Node \u8fdb\u7a0b\u610f\u5916\u7ec8\u6b62\u3002 \u60a8\u7684\u4f5c\u4e1a\u5904\u7406\u5668 cpu \u8fc7\u4e8e\u5bc6\u96c6\uff0c\u5bfc\u81f4 Node \u4e8b\u4ef6\u5faa\u73af\u505c\u987f\uff0c\u7ed3\u679c\uff0cBull \u65e0\u6cd5\u66f4\u65b0\u4f5c\u4e1a\u9501(\u8bf7\u53c2\u9605 #488 \u4e86\u89e3\u5982\u4f55\u66f4\u597d\u5730\u68c0\u6d4b\u6b64\u95ee\u9898)\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06\u4f5c\u4e1a\u5904\u7406\u5668\u5206\u89e3\u4e3a\u66f4\u5c0f\u7684\u90e8\u5206\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u8fd9\u6837\u5355\u4e2a\u90e8\u5206\u5c31\u4e0d\u4f1a\u963b\u585e Node \u4e8b\u4ef6\u5faa\u73af\u3002 \u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u4e3a lockDuration \u8bbe\u7f6e\u4f20\u9012\u4e00\u4e2a\u66f4\u5927\u7684\u503c(\u4ee3\u4ef7\u662f\u5b83\u5c06\u82b1\u8d39\u66f4\u957f\u7684\u65f6\u95f4\u6765\u8bc6\u522b\u771f\u6b63\u7684\u6682\u505c\u4f5c\u4e1a)\u3002 \u56e0\u6b64\uff0c\u60a8\u5e94\u8be5\u59cb\u7ec8\u4fa6\u542c stopped \u4e8b\u4ef6\u5e76\u5c06\u5176\u8bb0\u5f55\u5230\u9519\u8bef\u76d1\u89c6\u7cfb\u7edf\u4e2d\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u60a8\u7684\u4f5c\u4e1a\u53ef\u80fd\u4f1a\u88ab\u91cd\u590d\u5904\u7406\u3002 \u4f5c\u4e3a\u4e00\u79cd\u5b89\u5168\u63aa\u65bd\uff0c\u6709\u95ee\u9898\u7684\u4f5c\u4e1a\u4e0d\u4f1a\u88ab\u65e0\u9650\u671f\u91cd\u542f(\u4f8b\u5982\uff0c\u5982\u679c\u4f5c\u4e1a\u5904\u7406\u5668\u603b\u662f\u5d29\u6e83\u5b83\u7684 Node \u8fdb\u7a0b)\uff0c\u4f5c\u4e1a\u5c06\u4ece\u505c\u6b62\u72b6\u6001\u6062\u590d\uff0c\u6700\u5927\u6b21\u6570\u4e3a maxStalledCount (\u9ed8\u8ba4\u4e3a 1 )\u3002 \u8c01\u5728\u4f7f\u7528 Bull \u5728\u5927\u5927\u5c0f\u5c0f\u7684\u7ec4\u7ec7\u4e2d\u90fd\u5f88\u53d7\u6b22\u8fce\uff0c\u6bd4\u5982\u4ee5\u4e0b\u8fd9\u4e9b\u7ec4\u7ec7: BullMQ \u5982\u679c\u4f60\u60f3\u5f00\u59cb\u4f7f\u7528\u5b8c\u5168\u7528 Typescript \u7f16\u5199\u7684\u4e0b\u4e00\u4e2a\u4e3b\u8981\u7248\u672c\u7684 Bull\uff0c\u6b22\u8fce\u4f7f\u7528\u65b0\u7684 repo \u8fd9\u91cc . \u5426\u5219\uff0c\u6211\u4eec\u975e\u5e38\u6b22\u8fce\u4f60\u4ecd\u7136\u4f7f\u7528 Bull\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b89\u5168\u7684\u3001\u7ecf\u8fc7\u6218\u6597\u6d4b\u8bd5\u7684\u4ee3\u7801\u5e93\u3002","title":"bull"},{"location":"docs/queue/bull/#bull","text":"[x] \u6700\u5c0f\u7684 CPU \u4f7f\u7528\u7387\uff0c\u7531\u4e8e\u65e0\u8f6e\u8be2\u8bbe\u8ba1\u3002 [x] \u57fa\u4e8e Redis \u7684\u7a33\u5065\u8bbe\u8ba1\u3002 [x] \u5ef6\u8fdf\u7684\u5de5\u4f5c\u3002 [x] \u6839\u636e cron \u89c4\u8303\u5b89\u6392\u548c\u91cd\u590d\u4f5c\u4e1a\u3002 [x] \u5bf9\u5de5\u4f5c\u7684\u7387\u9650\u5236\u3002 [x] \u91cd\u8bd5\u3002 [x] \u4f18\u5148\u7ea7\u3002 [x] \u5e76\u53d1\u6027\u3002 [x] \u6682\u505c/\u6062\u590d-\u5168\u5c40\u6216\u672c\u5730\u3002 [x] \u6bcf\u4e2a\u961f\u5217\u6709\u591a\u4e2a\u4f5c\u4e1a\u7c7b\u578b\u3002 [x] \u7ebf\u7a0b(\u6c99\u76d2)\u5904\u7406\u51fd\u6570\u3002 [x] \u4ece\u8fdb\u7a0b\u5d29\u6e83\u4e2d\u81ea\u52a8\u6062\u590d\u3002 \u63a5\u4e0b\u6765\u662f\u8def\u7ebf\u56fe\u2026 [ ] \u4f5c\u4e1a\u5b8c\u6210\u786e\u8ba4(\u540c\u65f6\u53ef\u4ee5\u4f7f\u7528\u6d88\u606f\u961f\u5217 pattern )\u3002 [ ] \u7236\u5b50\u7684\u5de5\u4f5c\u5173\u7cfb\u3002","title":"Bull \u7279\u6027"},{"location":"docs/queue/bull/#uis","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u7b2c\u4e09\u65b9 ui \u6765\u8fdb\u884c\u76d1\u63a7: BullMQ Taskforce Bull v3 Taskforce bull-board bull-repl bull-monitor Monitoro Bull <= v2 Matador react-bull Toureiro","title":"UIs"},{"location":"docs/queue/bull/#_1","text":"\u4f7f\u7528 Prometheus Bull Queue Exporter","title":"\u76d1\u6d4b\u548c\u62a5\u8b66"},{"location":"docs/queue/bull/#_2","text":"\u7531\u4e8e\u6709\u4e00\u4e9b\u4f5c\u4e1a\u961f\u5217\u89e3\u51b3\u65b9\u6848\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u8868\u6bd4\u8f83\u5b83\u4eec: Feature Bullmq-Pro Bullmq Bull Kue Bee Agenda \u540e\u7aef redis redis redis redis redis mongo \u89c2\u5bdf \u2713 \u7ec4\u901f\u7387\u9650\u5236 \u2713 \u96c6\u7fa4\u652f\u6301 \u2713 \u7236/\u5b50\u4f9d\u8d56\u5173\u7cfb \u2713 \u2713 \u4f18\u5148\u7ea7 \u2713 \u2713 \u2713 \u2713 \u2713 \u5e76\u53d1\u6027 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u6f14\u793a\u5de5\u4f5c \u2713 \u2713 \u2713 \u2713 \u2713 \u5168\u5c40\u4e8b\u4ef6 \u2713 \u2713 \u2713 \u2713 \u901f\u5ea6\u9650\u5236\u5668 \u2713 \u2713 \u2713 \u6682\u505c/\u6062\u590d \u2713 \u2713 \u2713 \u2713 \u6c99\u7bb1\u5de5\u4eba \u2713 \u2713 \u2713 \u53ef\u91cd\u590d\u7684\u5de5\u4f5c \u2713 \u2713 \u2713 \u2713 \u539f\u5b50\u64cd\u4f5c \u2713 \u2713 \u2713 \u2713 \u6301\u4e45\u6027 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u7528\u6237\u754c\u9762 \u2713 \u2713 \u2713 \u2713 \u2713 \u4f18\u5316\u4e86 Jobs / Messages Jobs / Messages Jobs / Messages Jobs Messages Jobs","title":"\u7279\u5f81\u6bd4\u8f83"},{"location":"docs/queue/bull/#_3","text":"Bash npm install bull --save \u6216\u8005 Bash yarn add bull \u8981\u6c42: Bull \u9700\u8981\u5927\u4e8e\u6216\u7b49\u4e8e' 2.8.18 '\u7684 Redis \u7248\u672c\u3002","title":"\u5b89\u88c5"},{"location":"docs/queue/bull/#typescript","text":"Bash npm install @types/bull --save-dev Bash yarn add --dev @types/bull \u5b9a\u4e49\u76ee\u524d\u7ef4\u62a4\u5728 DefinitelyTyped repo \u4e2d\u3002","title":"Typescript \u5b9a\u4e49"},{"location":"docs/queue/bull/#_4","text":"","title":"\u5feb\u901f\u6307\u5357"},{"location":"docs/queue/bull/#_5","text":"JavaScript const Queue = require ( \"bull\" ); const videoQueue = new Queue ( \"video transcoding\" , \"redis://127.0.0.1:6379\" ); const audioQueue = new Queue ( \"audio transcoding\" , { redis : { port : 6379 , host : \"127.0.0.1\" , password : \"foobared\" }, }); // Specify Redis connection using object const imageQueue = new Queue ( \"image transcoding\" ); const pdfQueue = new Queue ( \"pdf transcoding\" ); videoQueue . process ( function ( job , done ) { // job.data contains the custom data passed when the job was created // job.id contains id of this job. // transcode video asynchronously and report progress job . progress ( 42 ); // call done when finished done (); // or give a error if error done ( new Error ( \"error transcoding\" )); // or pass it a result done ( null , { framerate : 29.5 , /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); }); audioQueue . process ( function ( job , done ) { // transcode audio asynchronously and report progress job . progress ( 42 ); // call done when finished done (); // or give a error if error done ( new Error ( \"error transcoding\" )); // or pass it a result done ( null , { samplerate : 48000 , /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); }); imageQueue . process ( function ( job , done ) { // transcode image asynchronously and report progress job . progress ( 42 ); // call done when finished done (); // or give a error if error done ( new Error ( \"error transcoding\" )); // or pass it a result done ( null , { width : 1280 , height : 720 , /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); }); pdfQueue . process ( function ( job ) { // Processors can also return promises instead of using the done callback return pdfAsyncProcessor (); }); videoQueue . add ({ video : \"http://example.com/video1.mov\" }); audioQueue . add ({ audio : \"http://example.com/audio1.mp3\" }); imageQueue . add ({ image : \"http://example.com/image1.tiff\" });","title":"\u57fa\u672c\u7528\u6cd5"},{"location":"docs/queue/bull/#_6","text":"\u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 return promises \u6765\u4ee3\u66ff done \u56de\u8c03: JavaScript videoQueue . process ( function ( job ) { // \u4e0d\u8981\u5fd8\u8bb0\u5220\u9664done\u56de\u8c03! // \u7b80\u5355\u5730\u56de\u62a5\u4e00\u4e2a\u627f\u8bfa return fetchVideo ( job . data . url ). then ( transcodeVideo ); // \u5904\u7406\u627f\u8bfa\u62d2\u7edd return Promise . reject ( new Error ( \"error transcoding\" )); // \u5c06\u627f\u8bfa\u89e3\u6790\u7684\u503c\u4f20\u9012\u7ed9\u201ccompleted\u201d\u4e8b\u4ef6 return Promise . resolve ({ framerate : 29.5 , /* etc... */ }); // \u5982\u679c\u4f5c\u4e1a\u629b\u51fa\u4e00\u4e2a\u672a\u5904\u7406\u7684\u5f02\u5e38\uff0c\u5b83\u4e5f\u4f1a\u5f97\u5230\u6b63\u786e\u7684\u5904\u7406 throw new Error ( \"some unexpected error\" ); // \u4e00\u6837 return Promise . reject ( new Error ( \"some unexpected error\" )); });","title":"\u4f7f\u7528\u627f\u8bfa"},{"location":"docs/queue/bull/#_7","text":"\u8fdb\u7a0b\u51fd\u6570\u4e5f\u53ef\u4ee5\u5728\u5355\u72ec\u7684\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u3002\u8fd9\u6709\u51e0\u4e2a\u597d\u5904: \u8fd9\u4e2a\u8fdb\u7a0b\u662f\u6c99\u7bb1\u5316\u7684\uff0c\u6240\u4ee5\u5373\u4f7f\u5b83\u5d29\u6e83\u4e86\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u5de5\u4f5c\u8fdb\u7a0b\u3002 \u60a8\u53ef\u4ee5\u5728\u4e0d\u5f71\u54cd\u961f\u5217\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u963b\u585e\u4ee3\u7801(\u4f5c\u4e1a\u4e0d\u4f1a\u505c\u6b62)\u3002 \u66f4\u597d\u5730\u5229\u7528\u591a\u6838 cpu\u3002 \u51cf\u5c11\u4e0e redis \u7684\u8fde\u63a5\u3002 \u4e3a\u4e86\u4f7f\u7528\u8fd9\u4e2a\u7279\u6027\uff0c\u53ea\u9700\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u5904\u7406\u5668\u6587\u4ef6: JavaScript // processor.js module . exports = function ( job ) { // \u505a\u4e00\u4e9b\u7e41\u91cd\u7684\u5de5\u4f5c return Promise . resolve ( result ); }; \u7136\u540e\u50cf\u8fd9\u6837\u5b9a\u4e49\u5904\u7406\u5668: JavaScript // \u5355\u6d41\u7a0b: queue . process ( \"/path/to/my/processor.js\" ); // \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5e76\u53d1: queue . process ( 5 , \"/path/to/my/processor.js\" ); // \u548c\u6307\u5b9a\u7684\u5904\u7406\u5668: queue . process ( \"my processor\" , 5 , \"/path/to/my/processor.js\" );","title":"\u72ec\u7acb\u7684\u8fdb\u7a0b"},{"location":"docs/queue/bull/#_8","text":"\u4f5c\u4e1a\u53ef\u4ee5\u88ab\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\uff0c\u5e76\u6839\u636e cron \u89c4\u8303\u91cd\u590d\u5904\u7406: JavaScript paymentsQueue . process ( function ( job ) { // Check payments }); // Repeat payment job once every day at 3:15 (am) paymentsQueue . add ( paymentsData , { repeat : { cron : \"15 3 * * *\" } }); \u4f5c\u4e3a\u63d0\u793a\uff0c\u8bf7\u68c0\u67e5\u8fd9\u91cc\u7684\u8868\u8fbe\u5f0f\uff0c\u4ee5\u9a8c\u8bc1\u5b83\u4eec\u662f\u6b63\u786e\u7684: cron \u8868\u8fbe\u5f0f\u751f\u6210\u5668","title":"\u91cd\u590d\u7684\u5de5\u4f5c"},{"location":"docs/queue/bull/#_9","text":"\u4e00\u4e2a\u961f\u5217\u53ef\u4ee5\u88ab\u5168\u5c40\u6682\u505c\u548c\u6062\u590d(\u4f20\u9012 true \u6765\u6682\u505c\u8fd9\u4e2a worker \u7684\u5904\u7406): JavaScript queue . pause (). then ( function () { // queue is paused now }); queue . resume (). then ( function () { // queue is resumed now });","title":"\u6682\u505c/\u6062\u590d"},{"location":"docs/queue/bull/#_10","text":"\u961f\u5217\u4f1a\u53d1\u51fa\u4e00\u4e9b\u6709\u7528\u7684\u4e8b\u4ef6\uff0c\u4f8b\u5982\u2026 JavaScript . on ( 'completed' , function ( job , result ) { // Job completed with output result! }) \u6709\u5173\u4e8b\u4ef6\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u5305\u62ec\u6240\u89e6\u53d1\u4e8b\u4ef6\u7684\u5b8c\u6574\u5217\u8868\uff0c\u8bf7\u53c2\u9605 \u4e8b\u4ef6\u53c2\u8003\u8d44\u6599","title":"\u4e8b\u4ef6"},{"location":"docs/queue/bull/#_11","text":"\u961f\u5217\u5f88\u4fbf\u5b9c\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u9700\u8981\u5f88\u591a\u961f\u5217\uff0c\u53ea\u9700\u521b\u5efa\u65b0\u7684\u4e0d\u540c\u540d\u79f0\u7684\u961f\u5217: JavaScript const userJohn = new Queue ( 'john' ); const userLisa = new Queue ( 'lisa' ); . . . \u7136\u800c\uff0c\u6bcf\u4e2a\u961f\u5217\u5b9e\u4f8b\u5c06\u9700\u8981\u65b0\u7684 redis \u8fde\u63a5\uff0c\u68c0\u67e5\u5982\u4f55 \u91cd\u7528\u8fde\u63a5 \uff0c\u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u547d\u540d\u5904\u7406\u5668 \u6765\u5b9e\u73b0\u7c7b\u4f3c\u7684\u7ed3\u679c\u3002","title":"\u961f\u5217\u6027\u80fd"},{"location":"docs/queue/bull/#_12","text":"NOTE: \u4ece 3.2.0 \u53ca\u4ee5\u4e0a\u7248\u672c\u5f00\u59cb\uff0c\u5efa\u8bae\u4f7f\u7528\u7ebf\u7a0b\u5904\u7406\u5668\u3002 \u961f\u5217\u662f\u5065\u58ee\u7684\uff0c\u53ef\u4ee5\u5728\u51e0\u4e2a\u7ebf\u7a0b\u6216\u8fdb\u7a0b\u4e2d\u5e76\u884c\u8fd0\u884c\uff0c\u6ca1\u6709\u4efb\u4f55\u5371\u9669\u6216\u961f\u5217\u635f\u574f\u7684\u98ce\u9669\u3002 \u68c0\u67e5\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u4f7f\u7528 cluster \u8de8\u8fdb\u7a0b\u5e76\u884c\u5316\u4efb\u52a1: JavaScript const Queue = require ( \"bull\" ); const cluster = require ( \"cluster\" ); const numWorkers = 8 ; const queue = new Queue ( \"test concurrent queue\" ); if ( cluster . isMaster ) { for ( let i = 0 ; i < numWorkers ; i ++ ) { cluster . fork (); } cluster . on ( \"online\" , function ( worker ) { // Let's create a few jobs for the queue workers for ( let i = 0 ; i < 500 ; i ++ ) { queue . add ({ foo : \"bar\" }); } }); cluster . on ( \"exit\" , function ( worker , code , signal ) { console . log ( \"worker \" + worker . process . pid + \" died\" ); }); } else { queue . process ( function ( job , jobDone ) { console . log ( \"Job done by worker\" , cluster . worker . id , job . id ); jobDone (); }); }","title":"\u96c6\u7fa4\u7684\u652f\u6301"},{"location":"docs/queue/bull/#_13","text":"\u8981\u83b7\u53d6\u5b8c\u6574\u7684\u6587\u6863\uff0c\u8bf7\u67e5\u770b\u53c2\u8003\u548c\u5e38\u7528\u6a21\u5f0f: \u6307\u5357 - \u4f60\u4f7f\u7528 Bull \u5f00\u53d1\u7684\u8d77\u70b9\u3002 \u53c2\u8003 - \u5305\u542b\u6240\u6709\u53ef\u7528\u5bf9\u8c61\u548c\u65b9\u6cd5\u7684\u5f15\u7528\u6587\u6863\u3002 \u6a21\u5f0f - \u4e00\u7ec4\u5e38\u89c1\u6a21\u5f0f\u7684\u793a\u4f8b\u3002 \u8bb8\u53ef\u8bc1 - Bull \u8bb8\u53ef\u8bc1-\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u3002 \u5982\u679c\u4f60\u770b\u5230\u4efb\u4f55\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u6587\u6863\u7684\u4e1c\u897f\uff0c\u8bf7\u63d0\u4ea4\u4e00\u4e2a pull request!","title":"\u6587\u6863"},{"location":"docs/queue/bull/#_14","text":"\u961f\u5217\u7684\u76ee\u6807\u662f\u201c\u81f3\u5c11\u4e00\u6b21\u201d\u7684\u5de5\u4f5c\u7b56\u7565\u3002 \u8fd9\u610f\u5473\u7740\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u4f5c\u4e1a\u53ef\u80fd\u4f1a\u88ab\u591a\u6b21\u5904\u7406\u3002 \u8fd9\u79cd\u60c5\u51b5\u901a\u5e38\u53d1\u751f\u5728\u4e00\u4e2a worker \u5728\u6574\u4e2a\u5904\u7406\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u4e3a\u7ed9\u5b9a\u7684\u4f5c\u4e1a\u4fdd\u6301\u9501\u7684\u65f6\u5019\u3002 \u5f53\u4e00\u4e2a\u5de5\u4eba\u6b63\u5728\u5904\u7406\u4e00\u9879\u5de5\u4f5c\u65f6\uff0c\u5b83\u5c06\u4f7f\u8be5\u5de5\u4f5c\u4fdd\u6301\u201c\u9501\u5b9a\u201d\uff0c\u4ee5\u4fbf\u5176\u4ed6\u5de5\u4eba\u4e0d\u80fd\u5904\u7406\u5b83\u3002 \u7406\u89e3\u9501\u5b9a\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4ee5\u9632\u6b62\u60a8\u7684\u4f5c\u4e1a\u5931\u53bb\u9501- becoming stalled - \u5e76\u56e0\u6b64\u91cd\u65b0\u542f\u52a8\uff0c\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\u3002 \u9501\u662f\u901a\u8fc7\u5728 lockRenewTime (\u901a\u5e38\u662f lockDuration \u7684\u4e00\u534a)\u4e0a\u4e3a lockDuration \u521b\u5efa\u4e00\u4e2a\u9501\u6765\u5b9e\u73b0\u7684\u3002 \u5982\u679c lockDuration \u5728\u9501\u88ab\u66f4\u65b0\u4e4b\u524d\u8fc7\u671f\uff0c\u5219\u8be5\u4f5c\u4e1a\u5c06\u88ab\u89c6\u4e3a\u6682\u505c\u5e76\u81ea\u52a8\u91cd\u542f;\u5b83\u5c06\u88ab \u4e8c\u6b21\u52a0\u5de5 \u3002 \u8fd9\u79cd\u60c5\u51b5\u53ef\u80fd\u53d1\u751f\u5728: \u8fd0\u884c\u4f5c\u4e1a\u5904\u7406\u5668\u7684 Node \u8fdb\u7a0b\u610f\u5916\u7ec8\u6b62\u3002 \u60a8\u7684\u4f5c\u4e1a\u5904\u7406\u5668 cpu \u8fc7\u4e8e\u5bc6\u96c6\uff0c\u5bfc\u81f4 Node \u4e8b\u4ef6\u5faa\u73af\u505c\u987f\uff0c\u7ed3\u679c\uff0cBull \u65e0\u6cd5\u66f4\u65b0\u4f5c\u4e1a\u9501(\u8bf7\u53c2\u9605 #488 \u4e86\u89e3\u5982\u4f55\u66f4\u597d\u5730\u68c0\u6d4b\u6b64\u95ee\u9898)\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06\u4f5c\u4e1a\u5904\u7406\u5668\u5206\u89e3\u4e3a\u66f4\u5c0f\u7684\u90e8\u5206\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u8fd9\u6837\u5355\u4e2a\u90e8\u5206\u5c31\u4e0d\u4f1a\u963b\u585e Node \u4e8b\u4ef6\u5faa\u73af\u3002 \u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u4e3a lockDuration \u8bbe\u7f6e\u4f20\u9012\u4e00\u4e2a\u66f4\u5927\u7684\u503c(\u4ee3\u4ef7\u662f\u5b83\u5c06\u82b1\u8d39\u66f4\u957f\u7684\u65f6\u95f4\u6765\u8bc6\u522b\u771f\u6b63\u7684\u6682\u505c\u4f5c\u4e1a)\u3002 \u56e0\u6b64\uff0c\u60a8\u5e94\u8be5\u59cb\u7ec8\u4fa6\u542c stopped \u4e8b\u4ef6\u5e76\u5c06\u5176\u8bb0\u5f55\u5230\u9519\u8bef\u76d1\u89c6\u7cfb\u7edf\u4e2d\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u60a8\u7684\u4f5c\u4e1a\u53ef\u80fd\u4f1a\u88ab\u91cd\u590d\u5904\u7406\u3002 \u4f5c\u4e3a\u4e00\u79cd\u5b89\u5168\u63aa\u65bd\uff0c\u6709\u95ee\u9898\u7684\u4f5c\u4e1a\u4e0d\u4f1a\u88ab\u65e0\u9650\u671f\u91cd\u542f(\u4f8b\u5982\uff0c\u5982\u679c\u4f5c\u4e1a\u5904\u7406\u5668\u603b\u662f\u5d29\u6e83\u5b83\u7684 Node \u8fdb\u7a0b)\uff0c\u4f5c\u4e1a\u5c06\u4ece\u505c\u6b62\u72b6\u6001\u6062\u590d\uff0c\u6700\u5927\u6b21\u6570\u4e3a maxStalledCount (\u9ed8\u8ba4\u4e3a 1 )\u3002","title":"\u91cd\u8981\u7684\u7b14\u8bb0"},{"location":"docs/queue/bull/#_15","text":"Bull \u5728\u5927\u5927\u5c0f\u5c0f\u7684\u7ec4\u7ec7\u4e2d\u90fd\u5f88\u53d7\u6b22\u8fce\uff0c\u6bd4\u5982\u4ee5\u4e0b\u8fd9\u4e9b\u7ec4\u7ec7:","title":"\u8c01\u5728\u4f7f\u7528"},{"location":"docs/queue/bull/#bullmq","text":"\u5982\u679c\u4f60\u60f3\u5f00\u59cb\u4f7f\u7528\u5b8c\u5168\u7528 Typescript \u7f16\u5199\u7684\u4e0b\u4e00\u4e2a\u4e3b\u8981\u7248\u672c\u7684 Bull\uff0c\u6b22\u8fce\u4f7f\u7528\u65b0\u7684 repo \u8fd9\u91cc . \u5426\u5219\uff0c\u6211\u4eec\u975e\u5e38\u6b22\u8fce\u4f60\u4ecd\u7136\u4f7f\u7528 Bull\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b89\u5168\u7684\u3001\u7ecf\u8fc7\u6218\u6597\u6d4b\u8bd5\u7684\u4ee3\u7801\u5e93\u3002","title":"BullMQ"},{"location":"docs/queue/guide/","text":"Bull \u662f\u4ec0\u4e48? \u5f00\u59cb \u7b80\u5355\u7684\u961f\u5217 \u751f\u4ea7\u8005 \u6d88\u8d39\u8005 \u4fa6\u542c\u5668 \u4e00\u4efd\u5de5\u4f5c\u7684\u751f\u547d\u5468\u671f \u505c\u6ede\u4e0d\u524d\u7684\u5de5\u4f5c \u4e8b\u4ef6 \u961f\u5217\u7684\u9009\u9879 \u901f\u5ea6\u9650\u5236\u5668 \u547d\u540d\u5de5\u4f5c \u6c99\u7bb1\u5904\u7406\u5668 \u4f5c\u4e1a\u7c7b\u578b LIFO \u5ef6\u8fdf \u4f18\u5148 \u53ef\u91cd\u590d\u7684 Bull \u662f\u4ec0\u4e48? Bull \u662f\u4e00\u4e2a Node \u5e93\uff0c\u5b83\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5feb\u901f\u3001\u5065\u58ee\u7684\u57fa\u4e8e redis \u7684\u961f\u5217\u7cfb\u7edf\u3002 \u867d\u7136\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Redis \u547d\u4ee4\u6765\u5b9e\u73b0\u961f\u5217\uff0c\u4f46\u8fd9\u4e2a\u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2a API \u6765\u5904\u7406\u6240\u6709\u5e95\u5c42\u7ec6\u8282\uff0c\u5e76\u4e30\u5bcc\u4e86 Redis \u7684\u57fa\u672c\u529f\u80fd\uff0c\u8fd9\u6837\u66f4\u590d\u6742\u7684\u7528\u4f8b\u5c31\u53ef\u4ee5\u8f7b\u677e\u5904\u7406\u3002 \u5982\u679c\u4f60\u4e0d\u719f\u6089\u6392\u961f\uff0c\u4f60\u53ef\u80fd\u4f1a\u60f3\u4e3a\u4ec0\u4e48\u9700\u8981\u6392\u961f\u3002 \u961f\u5217\u53ef\u4ee5\u4ee5\u4e00\u79cd\u4f18\u96c5\u7684\u65b9\u5f0f\u89e3\u51b3\u8bb8\u591a\u4e0d\u540c\u7684\u95ee\u9898\uff0c\u4ece\u5e73\u6ed1\u5904\u7406\u9ad8\u5cf0\u5230\u5728\u5fae\u670d\u52a1\u4e4b\u95f4\u521b\u5efa\u5065\u58ee\u7684\u901a\u4fe1\u901a\u9053\uff0c\u6216\u5c06\u7e41\u91cd\u7684\u5de5\u4f5c\u4ece\u4e00\u53f0\u670d\u52a1\u5668\u8f6c\u79fb\u5230\u8bb8\u591a\u8f83\u5c0f\u7684 worker\uff0c\u7b49\u7b49\u3002 \u5f00\u59cb Bull \u662f\u4e00\u4e2a\u516c\u5171\u7684 npm \u5305\uff0c\u53ef\u4ee5\u4f7f\u7528 npm \u6216 yarn \u6765\u5b89\u88c5: Bash $ npm install bull --save or Bash $ yarn add bull \u4e3a\u4e86\u4f7f\u7528 Bull\uff0c\u4f60\u8fd8\u9700\u8981\u6709\u4e00\u4e2a\u8fd0\u884c\u7684 Redis \u670d\u52a1\u5668\u3002 \u5bf9\u4e8e\u672c\u5730\u5f00\u53d1\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 docker \u8f7b\u677e\u5b89\u88c5\u5b83\u3002 Bull \u5c06\u9ed8\u8ba4\u5c1d\u8bd5\u8fde\u63a5\u5230\u8fd0\u884c\u5728' localhost:6379 '\u4e0a\u7684 Redis \u670d\u52a1\u5668 \u7b80\u5355\u7684\u961f\u5217 \u4e00\u4e2a\u961f\u5217\u53ef\u4ee5\u901a\u8fc7\u5b9e\u4f8b\u5316\u4e00\u4e2a Bull \u5b9e\u4f8b\u6765\u521b\u5efa: JavaScript const myFirstQueue = new Bull ( \"my-first-queue\" ); \u4e00\u4e2a\u961f\u5217\u5b9e\u4f8b\u901a\u5e38\u6709 3 \u4e2a\u4e0d\u540c\u7684\u4e3b\u8981\u89d2\u8272:\u4f5c\u4e1a\u751f\u4ea7\u8005\u3001\u4f5c\u4e1a\u4f7f\u7528\u8005\u6216/\u548c\u4e8b\u4ef6\u4fa6\u542c\u5668\u3002 \u867d\u7136\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b9e\u4f8b\u53ef\u4ee5\u7528\u4e8e\u8fd9 3 \u4e2a\u89d2\u8272\uff0c\u4f46\u901a\u5e38\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u88ab\u5212\u5206\u4e3a\u51e0\u4e2a\u5b9e\u4f8b\u3002 \u4e00\u4e2a\u7ed9\u5b9a\u7684\u961f\u5217\uff0c\u603b\u662f\u901a\u8fc7\u5b83\u7684\u5b9e\u4f8b\u5316\u540d\u79f0(\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\u662f' my-first-queue ')\u5f15\u7528\uff0c\u53ef\u4ee5\u6709\u8bb8\u591a\u751f\u4ea7\u8005\u3001\u8bb8\u591a\u6d88\u8d39\u8005\u548c\u8bb8\u591a\u4fa6\u542c\u5668\u3002 \u4e00\u4e2a\u91cd\u8981\u7684\u65b9\u9762\u662f\uff0c\u751f\u4ea7\u8005\u53ef\u4ee5\u5c06\u4f5c\u4e1a\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\uff0c\u5373\u4f7f\u6b64\u65f6\u6ca1\u6709\u53ef\u7528\u7684\u6d88\u8d39\u8005:\u961f\u5217\u63d0\u4f9b\u5f02\u6b65\u901a\u4fe1\uff0c\u8fd9\u662f\u4f7f\u5b83\u4eec\u5982\u6b64\u5f3a\u5927\u7684\u7279\u6027\u4e4b\u4e00\u3002 \u76f8\u53cd\uff0c\u60a8\u53ef\u4ee5\u8ba9\u4e00\u4e2a\u6216\u591a\u4e2a worker \u4ece\u961f\u5217\u4e2d\u6d88\u8017\u4f5c\u4e1a\uff0c\u5b83\u5c06\u6309\u7167\u7ed9\u5b9a\u7684\u987a\u5e8f\u6d88\u8017\u4f5c\u4e1a:FIFO(\u9ed8\u8ba4)\u3001LIFO \u6216\u6839\u636e\u4f18\u5148\u7ea7\u3002 \u8bf4\u5230 worker\uff0c\u5b83\u4eec\u53ef\u4ee5\u8fd0\u884c\u5728\u76f8\u540c\u6216\u4e0d\u540c\u7684\u8fdb\u7a0b\u4e2d\uff0c\u5728\u540c\u4e00\u53f0\u673a\u5668\u6216\u96c6\u7fa4\u4e2d\u3002 Redis \u5c06\u5145\u5f53\u4e00\u4e2a\u516c\u5171\u70b9\uff0c\u53ea\u8981\u6d88\u8d39\u8005\u6216\u751f\u4ea7\u5546\u80fd\u591f\u8fde\u63a5\u5230 Redis\uff0c\u4ed6\u4eec\u5c31\u80fd\u591f\u534f\u540c\u5904\u7406\u5de5\u4f5c\u3002 \u751f\u4ea7\u8005 \u4f5c\u4e1a\u751f\u6210\u5668\u662f\u4e00\u4e2a\u7b80\u5355\u7684 Node \u7a0b\u5e8f\uff0c\u5b83\u5c06\u4f5c\u4e1a\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\uff0c\u50cf\u8fd9\u6837: JavaScript const myFirstQueue = new Bull ( \"my-first-queue\" ); const job = await myFirstQueue . add ({ foo : \"bar\" , }); \u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0c\u4f5c\u4e1a\u53ea\u662f\u4e00\u4e2a javascript \u5bf9\u8c61\u3002 \u8fd9\u4e2a\u5bf9\u8c61\u9700\u8981\u662f\u53ef\u5e8f\u5217\u5316\u7684\uff0c\u66f4\u5177\u4f53\u7684\u662f\uff0c\u5b83\u5e94\u8be5\u53ef\u4ee5 JSON \u5b57\u7b26\u4e32\u5316\uff0c\u56e0\u4e3a\u8fd9\u662f\u5b83\u5c06\u5982\u4f55\u5b58\u50a8\u5728 Redis\u3002 \u4e5f\u53ef\u4ee5\u5728\u4f5c\u4e1a\u6570\u636e\u4e4b\u540e\u63d0\u4f9b\u4e00\u4e2a options \u5bf9\u8c61\uff0c\u4f46\u6211\u4eec\u5c06\u5728\u540e\u9762\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002 \u6d88\u8d39\u8005 \u6d88\u8d39\u8005\u6216\u5de5\u4f5c\u8005(\u6211\u4eec\u5c06\u5728\u672c\u6307\u5357\u4e2d\u4ea4\u66ff\u4f7f\u7528\u8fd9\u4e24\u4e2a\u672f\u8bed)\u53ea\u4e0d\u8fc7\u662f\u4e00\u4e2a Node \u7a0b\u5e8f \u5b83\u5b9a\u4e49\u4e86\u50cf\u8fd9\u6837\u7684\u8fdb\u7a0b\u51fd\u6570: JavaScript const myFirstQueue = new Bull ( \"my-first-queue\" ); myFirstQueue . process ( async ( job ) => { return doSomething ( job . data ); }); \u6bcf\u5f53\u5de5\u4f5c\u7ebf\u7a0b\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u4e14\u961f\u5217\u4e2d\u6709\u4f5c\u4e1a\u9700\u8981\u5904\u7406\u65f6\uff0c' process '\u51fd\u6570\u5c31\u4f1a\u88ab\u8c03\u7528\u3002 \u7531\u4e8e\u5728\u6dfb\u52a0\u4f5c\u4e1a\u65f6\uff0c\u6d88\u8d39\u8005\u4e0d\u9700\u8981\u5728\u7ebf\uff0c\u56e0\u6b64\u961f\u5217\u4e2d\u53ef\u80fd\u5df2\u7ecf\u6709\u8bb8\u591a\u4f5c\u4e1a\u5728\u7b49\u5f85\uff0c\u56e0\u6b64\u8fdb\u7a0b\u5c06\u4fdd\u6301\u5fd9\u788c\uff0c\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u5904\u7406\u4f5c\u4e1a\uff0c\u76f4\u5230\u6240\u6709\u4f5c\u4e1a\u90fd\u5b8c\u6210\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u8fdb\u7a0b\u51fd\u6570\u5b9a\u4e49\u4e3a' async '\uff0c\u8fd9\u662f\u5f3a\u70c8\u63a8\u8350\u7684\u5b9a\u4e49\u5b83\u4eec\u7684\u65b9\u5f0f\u3002 \u5982\u679c\u4f60\u7684 Node \u8fd0\u884c\u65f6\u4e0d\u652f\u6301 async/await\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u5728\u8fdb\u7a0b\u7ed3\u675f\u65f6\u8fd4\u56de\u4e00\u4e2a promise \u51fd\u6570\uff0c\u4ee5\u5f97\u5230\u7c7b\u4f3c\u7684\u7ed3\u679c\u3002 \u8fdb\u7a0b\u51fd\u6570\u8fd4\u56de\u7684\u503c\u5c06\u5b58\u50a8\u5728 jobs \u5bf9\u8c61\u4e2d\uff0c\u7a0d\u540e\u53ef\u4ee5\u8bbf\u95ee\uff0c\u4f8b\u5982\u5728\u201ccompleted\u201d\u4e8b\u4ef6\u7684\u76d1\u542c\u5668\u4e2d\u3002 \u6709\u65f6\u4f60\u9700\u8981\u5411\u5916\u90e8\u76d1\u542c\u5668\u63d0\u4f9b job \u7684 progress \u4fe1\u606f\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728 job \u5bf9\u8c61\u4e0a\u4f7f\u7528' progress '\u65b9\u6cd5\u8f7b\u677e\u5b8c\u6210: JavaScript myFirstQueue . process ( async ( job ) => { let progress = 0 ; for ( i = 0 ; i < 100 ; i ++ ) { await doSomething ( job . data ); progress += 10 ; job . progress ( progress ); } }); \u4fa6\u542c\u5668 \u6700\u540e\uff0c\u60a8\u53ef\u4ee5\u53ea\u4fa6\u542c\u961f\u5217\u4e2d\u53d1\u751f\u7684\u4e8b\u4ef6\u3002 \u4fa6\u542c\u5668\u53ef\u4ee5\u662f\u672c\u5730\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u53ea\u63a5\u6536\u5728 \u7ed9\u5b9a\u961f\u5217\u5b9e\u4f8b \u4e2d\u4ea7\u751f\u7684\u901a\u77e5\uff0c\u4e5f\u53ef\u4ee5\u662f\u5168\u5c40\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u4fa6\u542c\u7ed9\u5b9a\u961f\u5217\u7684 \u6240\u6709 \u4e8b\u4ef6\u3002 \u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u5c06\u4fa6\u542c\u5668\u9644\u52a0\u5230\u4efb\u4f55\u5b9e\u4f8b\uff0c\u751a\u81f3\u5145\u5f53\u6d88\u8d39\u8005\u6216\u751f\u4ea7\u8005\u7684\u5b9e\u4f8b\u3002 \u4f46\u662f\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u961f\u5217\u4e0d\u662f\u6d88\u8d39\u8005\u6216\u751f\u4ea7\u8005\uff0c\u672c\u5730\u4e8b\u4ef6\u5c06\u6c38\u8fdc\u4e0d\u4f1a\u89e6\u53d1\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u5c06\u9700\u8981\u4f7f\u7528\u5168\u5c40\u4e8b\u4ef6\u3002 JavaScript const myFirstQueue = new Bull ( \"my-first-queue\" ); // Define a local completed event myFirstQueue . on ( \"completed\" , ( job , result ) => { console . log ( `Job completed with result ${ result } ` ); }); \u4e00\u4efd\u5de5\u4f5c\u7684\u751f\u547d\u5468\u671f \u4e3a\u4e86\u5145\u5206\u5229\u7528 Bull \u961f\u5217\u7684\u6f5c\u529b\uff0c\u7406\u89e3\u4f5c\u4e1a\u7684\u751f\u547d\u5468\u671f\u662f\u5f88\u91cd\u8981\u7684\u3002 \u4ece\u751f\u4ea7\u8005\u5bf9\u961f\u5217\u5b9e\u4f8b\u8c03\u7528\u201cadd\u201d\u65b9\u6cd5\u7684\u90a3\u4e00\u523b\u8d77\uff0c\u4f5c\u4e1a\u5c31\u8fdb\u5165\u4e86\u5b83\u9700\u8981\u7684\u751f\u547d\u5468\u671f \u5904\u4e8e\u4e0d\u540c\u7684\u72b6\u6001\uff0c\u76f4\u5230\u5b83\u5b8c\u6210\u6216\u5931\u8d25(\u5c3d\u7ba1\u6280\u672f\u4e0a\u5931\u8d25\u7684\u4f5c\u4e1a\u53ef\u4ee5\u91cd\u8bd5\u5e76\u83b7\u5f97\u65b0\u7684\u751f\u547d\u5468\u671f)\u3002 \u663e\u793a\u4f5c\u4e1a\u72b6\u6001\u7684\u793a\u610f\u56fe(job-lifecycle.png) \u5f53\u4e00\u4e2a\u4f5c\u4e1a\u88ab\u6dfb\u52a0\u5230\u4e00\u4e2a\u961f\u5217\u65f6\uff0c\u5b83\u53ef\u4ee5\u5904\u4e8e\u4e24\u79cd\u72b6\u6001\u4e4b\u4e00\uff0c\u5b83\u53ef\u4ee5\u5904\u4e8e\u201c\u7b49\u5f85\u201d\u72b6\u6001\uff0c\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u7b49\u5f85\u5217\u8868\uff0c\u6240\u6709\u7684\u4f5c\u4e1a\u90fd\u5fc5\u987b\u8fdb\u5165\u8fd9\u4e2a\u5217\u8868\u624d\u80fd\u88ab\u5904\u7406\uff0c\u6216\u8005\u5b83\u53ef\u4ee5\u5904\u4e8e\u201c\u5ef6\u8fdf\u201d\u72b6\u6001:\u5ef6\u8fdf\u72b6\u6001\u610f\u5473\u7740\u8be5\u4f5c\u4e1a\u6b63\u5728\u7b49\u5f85\u8d85\u65f6\u6216\u7b49\u5f85\u88ab\u63d0\u5347\u5904\u7406\uff0c\u4f46\u662f\uff0c\u5ef6\u8fdf\u7684\u4f5c\u4e1a\u4e0d\u4f1a\u76f4\u63a5\u88ab\u5904\u7406\uff0c\u800c\u662f\u88ab\u653e\u7f6e\u5728\u7b49\u5f85\u5217\u8868\u7684\u5f00\u5934\uff0c\u5f53\u4e00\u4e2a worker \u7a7a\u95f2\u65f6\u5c31\u4f1a\u88ab\u5904\u7406\u3002 \u4f5c\u4e1a\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001\u662f\u201c\u6d3b\u52a8\u201d\u72b6\u6001\u3002 \u6d3b\u52a8\u72b6\u6001\u7531\u4e00\u4e2a\u96c6\u5408\u8868\u793a\uff0c\u662f\u5f53\u524d\u6b63\u5728\u5904\u7406\u7684\u4f5c\u4e1a\uff0c\u5373\u3002 \u5b83\u4eec\u8fd0\u884c\u5728\u4e0a\u4e00\u7ae0\u89e3\u91ca\u8fc7\u7684\u201cprocess\u201d\u51fd\u6570\u4e2d\u3002 \u4f5c\u4e1a\u53ef\u4ee5\u65e0\u9650\u957f\u65f6\u95f4\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\uff0c\u76f4\u5230\u6d41\u7a0b\u5b8c\u6210\uff0c\u6216\u8005\u629b\u51fa\u5f02\u5e38\uff0c\u4ee5\u4fbf\u4f5c\u4e1a\u4ee5\u201c\u5b8c\u6210\u201d\u6216\u201c\u5931\u8d25\u201d\u72b6\u6001\u7ed3\u675f\u3002 \u505c\u6ede\u4e0d\u524d\u7684\u5de5\u4f5c \u5728 Bull \u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u505c\u6ede\u7684\u5de5\u4f5c\u7684\u6982\u5ff5\u3002 \u505c\u6ede\u7684\u4f5c\u4e1a\u662f\u6b63\u5728\u5904\u7406\u7684\u4f5c\u4e1a\uff0c\u4f46 Bull \u6000\u7591\u8be5\u4f5c\u4e1a\u7684\u6d41\u7a0b\u529f\u80fd\u5df2\u7ecf\u6302\u8d77\u3002 \u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u5728\u8fdb\u7a0b\u51fd\u6570\u6b63\u5728\u5904\u7406\u4e00\u4e2a\u4efb\u52a1\uff0c\u5e76\u4e14\u4f7f CPU \u4e00\u76f4\u5904\u4e8e\u7e41\u5fd9\u72b6\u6001\uff0c\u4ee5\u81f3\u4e8e worker \u65e0\u6cd5\u544a\u8bc9\u961f\u5217\u5b83\u4ecd\u7136\u5728\u5904\u7406\u8fd9\u4e2a\u4efb\u52a1\u3002 \u5f53\u4e00\u4e2a\u4f5c\u4e1a\u505c\u6b62\u65f6\uff0c\u6839\u636e\u4f5c\u4e1a\u8bbe\u7f6e\uff0c\u8be5\u4f5c\u4e1a\u53ef\u4ee5\u7531\u53e6\u4e00\u4e2a\u7a7a\u95f2\u7684\u4f5c\u4e1a\u91cd\u8bd5\uff0c\u4e5f\u53ef\u4ee5\u8f6c\u79fb\u5230\u5931\u8d25\u72b6\u6001\u3002 \u53ef\u4ee5\u901a\u8fc7\u786e\u4fdd\u8fdb\u7a0b\u51fd\u6570\u4e0d\u4f1a\u8ba9 Node \u4e8b\u4ef6\u5faa\u73af\u592a\u957f\u65f6\u95f4\u5904\u4e8e\u7e41\u5fd9\u72b6\u6001(Bull \u7684\u9ed8\u8ba4\u9009\u9879\u662f\u51e0\u79d2\u949f)\uff0c\u6216\u8005\u4f7f\u7528\u5355\u72ec\u7684 sandbox -processors \u6765\u907f\u514d\u9677\u5165\u505c\u987f\u7684\u4f5c\u4e1a\u3002 \u4e8b\u4ef6 Bull \u4e2d\u7684\u961f\u5217\u751f\u6210\u4e00\u4e9b\u4e8b\u4ef6\uff0c\u8fd9\u4e9b\u4e8b\u4ef6\u5728\u8bb8\u591a\u7528\u4f8b\u4e2d\u90fd\u5f88\u6709\u7528\u3002 \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u961f\u5217\u5b9e\u4f8b(\u4e00\u4e2a worker)\uff0c\u4e8b\u4ef6\u53ef\u4ee5\u662f\u672c\u5730\u7684\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u4efb\u52a1\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7684 worker \u4e2d\u5b8c\u6210\u4e86\uff0c\u5219\u53ea\u4f1a\u9488\u5bf9\u8be5\u5b9e\u4f8b\u53d1\u51fa\u672c\u5730\u4e8b\u4ef6\u3002 \u4f46\u662f\uff0c\u53ef\u4ee5\u901a\u8fc7\u5728\u672c\u5730\u4e8b\u4ef6\u540d\u79f0\u524d\u52a0\u4e0a' global: '\u6765\u4fa6\u542c\u6240\u6709\u4e8b\u4ef6\u3002 \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4fa6\u542c\u7ed9\u5b9a\u961f\u5217\u4e2d\u6240\u6709\u5de5\u4eba\u4ea7\u751f\u7684\u6240\u6709\u4e8b\u4ef6\u3002 \u672c\u5730\u5b8c\u6574\u4e8b\u4ef6: JavaScript queue . on ( \"completed\" , ( job ) => { console . log ( `Job with id ${ job . id } has been completed` ); }); \u800c\u4e8b\u4ef6\u7684\u5168\u7403\u7248\u672c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u6765\u6536\u542c: JavaScript queue . on ( \"global:completed\" , ( jobId ) => { console . log ( `Job with id ${ jobId } has been completed` ); }); \u8bf7\u6ce8\u610f\uff0c\u5168\u5c40\u4e8b\u4ef6\u7684\u7b7e\u540d\u4e0e\u672c\u5730\u4e8b\u4ef6\u7684\u7b7e\u540d\u7565\u6709\u4e0d\u540c\uff0c\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5b83\u53ea\u53d1\u9001\u4f5c\u4e1a id\uff0c\u800c\u4e0d\u662f\u4f5c\u4e1a\u672c\u8eab\u7684\u5b8c\u6574\u5b9e\u4f8b\uff0c\u8fd9\u6837\u505a\u662f\u51fa\u4e8e\u6027\u80fd\u539f\u56e0\u3002 \u53ef\u7528\u4e8b\u4ef6\u7684\u5217\u8868\u53ef\u4ee5\u5728 reference \u4e2d\u627e\u5230\u3002 \u961f\u5217\u7684\u9009\u9879 \u4e00\u4e2a\u961f\u5217\u53ef\u4ee5\u5b9e\u4f8b\u5316\u4e00\u4e9b\u6709\u7528\u7684\u9009\u9879\uff0c\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u4f60\u7684 Redis \u670d\u52a1\u5668\u7684\u4f4d\u7f6e\u548c\u5bc6\u7801\uff0c\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u6709\u7528\u7684\u8bbe\u7f6e\u3002 \u6240\u6709\u8fd9\u4e9b\u8bbe\u7f6e\u5728 Bull \u7684 \u53c2\u8003\u6587\u732e \u4e2d\u90fd\u6709\u63cf\u8ff0\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u4e0d\u91cd\u590d\u5b83\u4eec\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u4e00\u4e9b\u7528\u4f8b\u3002 \u901f\u5ea6\u9650\u5236\u5668 \u53ef\u4ee5\u521b\u5efa\u9650\u5236\u5355\u4f4d\u65f6\u95f4\u5185\u5904\u7406\u7684\u4f5c\u4e1a\u6570\u91cf\u7684\u961f\u5217\u3002 \u9650\u5236\u5668\u662f\u5728\u6bcf\u4e2a\u961f\u5217\u4e2d\u5b9a\u4e49\u7684\uff0c\u4e0e worker \u7684\u6570\u91cf\u65e0\u5173\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u6c34\u5e73\u6269\u5c55\uff0c\u5e76\u4e14\u4ecd\u7136\u53ef\u4ee5\u8f7b\u677e\u5730\u9650\u5236\u5904\u7406\u901f\u7387: JavaScript // Limit queue to max 1000 jobs per 5000 milliseconds. const myRateLimitedQueue = new Queue ( \"rateLimited\" , { limiter : { max : 1000 , duration : 5000 , }, }); \u5f53\u961f\u5217\u8fbe\u5230\u901f\u7387\u9650\u5236\u65f6\uff0c\u8bf7\u6c42\u7684\u4f5c\u4e1a\u5c06\u52a0\u5165\u201c\u5ef6\u8fdf\u201d\u961f\u5217\u3002 \u547d\u540d\u5de5\u4f5c \u7ed9\u5de5\u4f5c\u8d77\u540d\u5b57\u662f\u53ef\u80fd\u7684\u3002 \u8fd9\u4e0d\u4f1a\u6539\u53d8\u961f\u5217\u7684\u4efb\u4f55\u673a\u5236\uff0c\u4f46\u53ef\u4ee5\u5728 UI \u5de5\u5177\u4e2d\u7528\u4e8e\u66f4\u6e05\u6670\u7684\u4ee3\u7801\u548c\u66f4\u597d\u7684\u53ef\u89c6\u5316: JavaScript // Jobs producer const myJob = await transcoderQueue . add ( \"image\" , { input : \"myimagefile\" }); const myJob = await transcoderQueue . add ( \"audio\" , { input : \"myaudiofile\" }); const myJob = await transcoderQueue . add ( \"video\" , { input : \"myvideofile\" }); JavaScript // Worker transcoderQueue . process ( \"image\" , processImage ); transcoderQueue . process ( \"audio\" , processAudio ); transcoderQueue . process ( \"video\" , processVideo ); \u8bf7\u8bb0\u4f4f\uff0c\u6bcf\u4e2a\u961f\u5217\u5b9e\u4f8b\u90fd\u9700\u8981\u4e3a\u6bcf\u4e2a \u6307\u5b9a \u4f5c\u4e1a\u63d0\u4f9b\u4e00\u4e2a\u5904\u7406\u5668\uff0c\u5426\u5219\u5c06\u4f1a\u51fa\u73b0\u5f02\u5e38\u3002 \u6c99\u7bb1\u5904\u7406\u5668 \u5982\u4e0a\u6240\u8ff0\uff0c\u5728\u5b9a\u4e49\u6d41\u7a0b\u529f\u80fd\u65f6\uff0c\u8fd8\u53ef\u4ee5\u63d0\u4f9b\u5e76\u53d1\u8bbe\u7f6e\u3002 \u6b64\u8bbe\u7f6e\u5141\u8bb8\u5de5\u4f5c\u8005\u5e76\u884c\u5904\u7406\u591a\u4e2a\u4f5c\u4e1a\u3002 \u8fd9\u4e9b\u4f5c\u4e1a\u4ecd\u7136\u5728\u540c\u4e00\u4e2a Node \u8fdb\u7a0b\u4e2d\u5904\u7406\uff0c\u5982\u679c\u4f5c\u4e1a\u7684 IO \u5bc6\u96c6\uff0c\u5b83\u4eec\u5c06\u5f97\u5230\u5f88\u597d\u7684\u5904\u7406\u3002 \u6709\u65f6\uff0c\u4f5c\u4e1a\u7684 CPU \u5360\u7528\u66f4\u5927\uff0c\u8fd9\u53ef\u80fd\u4f1a\u9501\u5b9a Node \u4e8b\u4ef6\u5faa\u73af\u592a\u957f\u65f6\u95f4\uff0cBull \u53ef\u80fd\u4f1a\u8ba4\u4e3a\u4f5c\u4e1a\u5df2\u7ecf\u6682\u505c\u3002 \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u53ef\u4ee5\u5728\u5355\u72ec\u7684 Node \u8fdb\u7a0b\u4e2d\u8fd0\u884c\u8fdb\u7a0b\u51fd\u6570\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5e76\u53d1\u6027\u53c2\u6570\u5c06\u51b3\u5b9a\u5141\u8bb8\u8fd0\u884c\u7684\u6700\u5927\u5e76\u53d1\u8fdb\u7a0b\u6570\u3002 \u6211\u4eec\u79f0\u8fd9\u79cd\u8fdb\u7a0b\u4e3a\u201c\u6c99\u7bb1\u201d\u8fdb\u7a0b\uff0c\u5b83\u4eec\u4e5f\u6709\u8fd9\u6837\u7684\u5c5e\u6027:\u5982\u679c\u5d29\u6e83\uff0c\u5b83\u4eec\u4e0d\u4f1a\u5f71\u54cd\u4efb\u4f55\u5176\u4ed6\u8fdb\u7a0b\uff0c\u5e76\u4e14\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u65b0\u8fdb\u7a0b\u6765\u66ff\u6362\u5b83\u3002 \u4f5c\u4e1a\u7c7b\u578b Bull \u4e2d\u7684\u9ed8\u8ba4\u4f5c\u4e1a\u7c7b\u578b\u662f\u201cFIFO\u201d(\u5148\u8fdb\u5148\u51fa)\uff0c\u8fd9\u610f\u5473\u7740\u4f5c\u4e1a\u7684\u5904\u7406\u987a\u5e8f\u4e0e\u8fdb\u5165\u961f\u5217\u7684\u987a\u5e8f\u76f8\u540c\u3002 \u6709\u65f6\uff0c\u4ee5\u4e0d\u540c\u7684\u987a\u5e8f\u5904\u7406\u4f5c\u4e1a\u662f\u6709\u7528\u7684\u3002 LIFO \u540e\u8fdb\u5148\u51fa(LIFO)\u610f\u5473\u7740\u4f5c\u4e1a\u88ab\u6dfb\u52a0\u5230\u961f\u5217\u7684\u5f00\u5934\uff0c\u56e0\u6b64\u5f53 worker \u7a7a\u95f2\u65f6\u5c31\u4f1a\u88ab\u5904\u7406\u3002 JavaScript const myJob = await myqueue . add ({ foo : \"bar\" }, { lifo : true }); \u5ef6\u8fdf \u8fd8\u53ef\u4ee5\u5c06\u4f5c\u4e1a\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\uff0c\u8fd9\u4e9b\u4f5c\u4e1a\u5728\u88ab\u5904\u7406\u4e4b\u524d\u4f1a\u5ef6\u8fdf\u4e00\u5b9a\u7684\u65f6\u95f4\u3002 \u6ce8\u610f\uff0cdelay \u53c2\u6570\u8868\u793a\u4f5c\u4e1a\u5728\u88ab\u5904\u7406\u4e4b\u524d\u7b49\u5f85\u7684\u6700\u5c0f\u65f6\u95f4\u3002 \u5f53\u5ef6\u8fdf\u65f6\u95f4\u8fc7\u53bb\u540e\uff0c\u4f5c\u4e1a\u5c06\u88ab\u79fb\u52a8\u5230\u961f\u5217\u7684\u5f00\u5934\uff0c\u5e76\u5728\u4e00\u4e2a worker \u7a7a\u95f2\u65f6\u7acb\u5373\u5904\u7406\u3002 JavaScript // Delayed 5 seconds const myJob = await myqueue . add ({ foo : \"bar\" }, { delay : 5000 }); \u4f18\u5148 \u53ef\u4ee5\u5c06\u4f5c\u4e1a\u6dfb\u52a0\u5230\u5177\u6709\u4f18\u5148\u7ea7\u503c\u7684\u961f\u5217\u4e2d\u3002 \u4f18\u5148\u7ea7\u9ad8\u7684\u4f5c\u4e1a\u5c06\u6bd4\u4f18\u5148\u7ea7\u4f4e\u7684\u4f5c\u4e1a\u4f18\u5148\u5904\u7406\u3002 \u6700\u9ad8\u4f18\u5148\u7ea7\u4e3a 1\uff0c\u5e76\u964d\u4f4e\u6240\u4f7f\u7528\u7684\u8f83\u5927\u6574\u6570\u3002 \u8bf7\u8bb0\u4f4f\uff0c\u4f18\u5148\u7ea7\u961f\u5217\u6bd4\u6807\u51c6\u961f\u5217\u7a0d\u6162(\u5f53\u524d\u63d2\u5165\u65f6\u95f4\u4e3a O(n)\uff0c n \u662f\u5f53\u524d\u5728\u961f\u5217\u4e2d\u7b49\u5f85\u7684\u4f5c\u4e1a\u6570\u91cf\uff0c\u800c\u6807\u51c6\u961f\u5217\u4e3a O(1))\u3002 JavaScript const myJob = await myqueue . add ({ foo : \"bar\" }, { priority : 3 }); \u53ef\u91cd\u590d\u7684 \u53ef\u91cd\u590d\u4f5c\u4e1a\u662f\u4e00\u79cd\u7279\u6b8a\u4f5c\u4e1a\uff0c\u53ef\u4ee5\u6839\u636e cron \u89c4\u8303\u6216\u65f6\u95f4\u95f4\u9694\u65e0\u9650\u671f\u5730\u91cd\u590d\u81ea\u5df1\uff0c\u6216\u8005\u76f4\u5230\u8fbe\u5230\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6700\u5927\u65e5\u671f\u6216\u91cd\u590d\u6b21\u6570\u4e3a\u6b62\u3002 JavaScript // Repeat every 10 seconds for 100 times. const myJob = await myqueue . add ( { foo : \"bar\" }, { repeat : { every : 10000 , limit : 100 , }, } ); // Repeat payment job once every day at 3:15 (am) paymentsQueue . add ( paymentsData , { repeat : { cron : \"15 3 * * *\" } }); \u5173\u4e8e\u53ef\u91cd\u590d\u5de5\u4f5c\u6709\u4e00\u4e9b\u91cd\u8981\u7684\u8003\u8651: \u5982\u679c\u91cd\u590d\u9009\u9879\u76f8\u540c\uff0cBull \u8db3\u591f\u806a\u660e\uff0c\u4e0d\u4f1a\u6dfb\u52a0\u76f8\u540c\u7684\u53ef\u91cd\u590d\u4f5c\u4e1a\u3002 (\u6ce8\u610f:\u4f5c\u4e1a id \u662f\u91cd\u590d\u9009\u9879\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u4e3a:https://github.com/OptimalBits/bull/pull/603\uff0c\u56e0\u6b64\u4f20\u9012\u4f5c\u4e1aid\u5c06\u5141\u8bb8\u5728\u961f\u5217\u4e2d\u63d2\u5165\u5177\u6709\u76f8\u540ccron\u7684\u4f5c\u4e1a) \u5982\u679c\u6ca1\u6709\u5de5\u4eba\u5728\u8fd0\u884c\uff0c\u90a3\u4e48\u4e0b\u4e00\u6b21\u5de5\u4eba\u5728\u7ebf\u65f6\uff0c\u53ef\u91cd\u590d\u7684\u5de5\u4f5c\u5c06\u4e0d\u4f1a\u7d2f\u79ef\u3002 \u53ef\u4ee5\u4f7f\u7528 removeRepeatable \u65b9\u6cd5\u5220\u9664\u53ef\u91cd\u590d\u7684\u4f5c\u4e1a\u3002","title":"\u6307\u5357"},{"location":"docs/queue/guide/#bull","text":"Bull \u662f\u4e00\u4e2a Node \u5e93\uff0c\u5b83\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5feb\u901f\u3001\u5065\u58ee\u7684\u57fa\u4e8e redis \u7684\u961f\u5217\u7cfb\u7edf\u3002 \u867d\u7136\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Redis \u547d\u4ee4\u6765\u5b9e\u73b0\u961f\u5217\uff0c\u4f46\u8fd9\u4e2a\u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2a API \u6765\u5904\u7406\u6240\u6709\u5e95\u5c42\u7ec6\u8282\uff0c\u5e76\u4e30\u5bcc\u4e86 Redis \u7684\u57fa\u672c\u529f\u80fd\uff0c\u8fd9\u6837\u66f4\u590d\u6742\u7684\u7528\u4f8b\u5c31\u53ef\u4ee5\u8f7b\u677e\u5904\u7406\u3002 \u5982\u679c\u4f60\u4e0d\u719f\u6089\u6392\u961f\uff0c\u4f60\u53ef\u80fd\u4f1a\u60f3\u4e3a\u4ec0\u4e48\u9700\u8981\u6392\u961f\u3002 \u961f\u5217\u53ef\u4ee5\u4ee5\u4e00\u79cd\u4f18\u96c5\u7684\u65b9\u5f0f\u89e3\u51b3\u8bb8\u591a\u4e0d\u540c\u7684\u95ee\u9898\uff0c\u4ece\u5e73\u6ed1\u5904\u7406\u9ad8\u5cf0\u5230\u5728\u5fae\u670d\u52a1\u4e4b\u95f4\u521b\u5efa\u5065\u58ee\u7684\u901a\u4fe1\u901a\u9053\uff0c\u6216\u5c06\u7e41\u91cd\u7684\u5de5\u4f5c\u4ece\u4e00\u53f0\u670d\u52a1\u5668\u8f6c\u79fb\u5230\u8bb8\u591a\u8f83\u5c0f\u7684 worker\uff0c\u7b49\u7b49\u3002","title":"Bull \u662f\u4ec0\u4e48?"},{"location":"docs/queue/guide/#_1","text":"Bull \u662f\u4e00\u4e2a\u516c\u5171\u7684 npm \u5305\uff0c\u53ef\u4ee5\u4f7f\u7528 npm \u6216 yarn \u6765\u5b89\u88c5: Bash $ npm install bull --save or Bash $ yarn add bull \u4e3a\u4e86\u4f7f\u7528 Bull\uff0c\u4f60\u8fd8\u9700\u8981\u6709\u4e00\u4e2a\u8fd0\u884c\u7684 Redis \u670d\u52a1\u5668\u3002 \u5bf9\u4e8e\u672c\u5730\u5f00\u53d1\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 docker \u8f7b\u677e\u5b89\u88c5\u5b83\u3002 Bull \u5c06\u9ed8\u8ba4\u5c1d\u8bd5\u8fde\u63a5\u5230\u8fd0\u884c\u5728' localhost:6379 '\u4e0a\u7684 Redis \u670d\u52a1\u5668","title":"\u5f00\u59cb"},{"location":"docs/queue/guide/#_2","text":"\u4e00\u4e2a\u961f\u5217\u53ef\u4ee5\u901a\u8fc7\u5b9e\u4f8b\u5316\u4e00\u4e2a Bull \u5b9e\u4f8b\u6765\u521b\u5efa: JavaScript const myFirstQueue = new Bull ( \"my-first-queue\" ); \u4e00\u4e2a\u961f\u5217\u5b9e\u4f8b\u901a\u5e38\u6709 3 \u4e2a\u4e0d\u540c\u7684\u4e3b\u8981\u89d2\u8272:\u4f5c\u4e1a\u751f\u4ea7\u8005\u3001\u4f5c\u4e1a\u4f7f\u7528\u8005\u6216/\u548c\u4e8b\u4ef6\u4fa6\u542c\u5668\u3002 \u867d\u7136\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b9e\u4f8b\u53ef\u4ee5\u7528\u4e8e\u8fd9 3 \u4e2a\u89d2\u8272\uff0c\u4f46\u901a\u5e38\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u88ab\u5212\u5206\u4e3a\u51e0\u4e2a\u5b9e\u4f8b\u3002 \u4e00\u4e2a\u7ed9\u5b9a\u7684\u961f\u5217\uff0c\u603b\u662f\u901a\u8fc7\u5b83\u7684\u5b9e\u4f8b\u5316\u540d\u79f0(\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\u662f' my-first-queue ')\u5f15\u7528\uff0c\u53ef\u4ee5\u6709\u8bb8\u591a\u751f\u4ea7\u8005\u3001\u8bb8\u591a\u6d88\u8d39\u8005\u548c\u8bb8\u591a\u4fa6\u542c\u5668\u3002 \u4e00\u4e2a\u91cd\u8981\u7684\u65b9\u9762\u662f\uff0c\u751f\u4ea7\u8005\u53ef\u4ee5\u5c06\u4f5c\u4e1a\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\uff0c\u5373\u4f7f\u6b64\u65f6\u6ca1\u6709\u53ef\u7528\u7684\u6d88\u8d39\u8005:\u961f\u5217\u63d0\u4f9b\u5f02\u6b65\u901a\u4fe1\uff0c\u8fd9\u662f\u4f7f\u5b83\u4eec\u5982\u6b64\u5f3a\u5927\u7684\u7279\u6027\u4e4b\u4e00\u3002 \u76f8\u53cd\uff0c\u60a8\u53ef\u4ee5\u8ba9\u4e00\u4e2a\u6216\u591a\u4e2a worker \u4ece\u961f\u5217\u4e2d\u6d88\u8017\u4f5c\u4e1a\uff0c\u5b83\u5c06\u6309\u7167\u7ed9\u5b9a\u7684\u987a\u5e8f\u6d88\u8017\u4f5c\u4e1a:FIFO(\u9ed8\u8ba4)\u3001LIFO \u6216\u6839\u636e\u4f18\u5148\u7ea7\u3002 \u8bf4\u5230 worker\uff0c\u5b83\u4eec\u53ef\u4ee5\u8fd0\u884c\u5728\u76f8\u540c\u6216\u4e0d\u540c\u7684\u8fdb\u7a0b\u4e2d\uff0c\u5728\u540c\u4e00\u53f0\u673a\u5668\u6216\u96c6\u7fa4\u4e2d\u3002 Redis \u5c06\u5145\u5f53\u4e00\u4e2a\u516c\u5171\u70b9\uff0c\u53ea\u8981\u6d88\u8d39\u8005\u6216\u751f\u4ea7\u5546\u80fd\u591f\u8fde\u63a5\u5230 Redis\uff0c\u4ed6\u4eec\u5c31\u80fd\u591f\u534f\u540c\u5904\u7406\u5de5\u4f5c\u3002","title":"\u7b80\u5355\u7684\u961f\u5217"},{"location":"docs/queue/guide/#_3","text":"\u4f5c\u4e1a\u751f\u6210\u5668\u662f\u4e00\u4e2a\u7b80\u5355\u7684 Node \u7a0b\u5e8f\uff0c\u5b83\u5c06\u4f5c\u4e1a\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\uff0c\u50cf\u8fd9\u6837: JavaScript const myFirstQueue = new Bull ( \"my-first-queue\" ); const job = await myFirstQueue . add ({ foo : \"bar\" , }); \u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0c\u4f5c\u4e1a\u53ea\u662f\u4e00\u4e2a javascript \u5bf9\u8c61\u3002 \u8fd9\u4e2a\u5bf9\u8c61\u9700\u8981\u662f\u53ef\u5e8f\u5217\u5316\u7684\uff0c\u66f4\u5177\u4f53\u7684\u662f\uff0c\u5b83\u5e94\u8be5\u53ef\u4ee5 JSON \u5b57\u7b26\u4e32\u5316\uff0c\u56e0\u4e3a\u8fd9\u662f\u5b83\u5c06\u5982\u4f55\u5b58\u50a8\u5728 Redis\u3002 \u4e5f\u53ef\u4ee5\u5728\u4f5c\u4e1a\u6570\u636e\u4e4b\u540e\u63d0\u4f9b\u4e00\u4e2a options \u5bf9\u8c61\uff0c\u4f46\u6211\u4eec\u5c06\u5728\u540e\u9762\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002","title":"\u751f\u4ea7\u8005"},{"location":"docs/queue/guide/#_4","text":"\u6d88\u8d39\u8005\u6216\u5de5\u4f5c\u8005(\u6211\u4eec\u5c06\u5728\u672c\u6307\u5357\u4e2d\u4ea4\u66ff\u4f7f\u7528\u8fd9\u4e24\u4e2a\u672f\u8bed)\u53ea\u4e0d\u8fc7\u662f\u4e00\u4e2a Node \u7a0b\u5e8f \u5b83\u5b9a\u4e49\u4e86\u50cf\u8fd9\u6837\u7684\u8fdb\u7a0b\u51fd\u6570: JavaScript const myFirstQueue = new Bull ( \"my-first-queue\" ); myFirstQueue . process ( async ( job ) => { return doSomething ( job . data ); }); \u6bcf\u5f53\u5de5\u4f5c\u7ebf\u7a0b\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u4e14\u961f\u5217\u4e2d\u6709\u4f5c\u4e1a\u9700\u8981\u5904\u7406\u65f6\uff0c' process '\u51fd\u6570\u5c31\u4f1a\u88ab\u8c03\u7528\u3002 \u7531\u4e8e\u5728\u6dfb\u52a0\u4f5c\u4e1a\u65f6\uff0c\u6d88\u8d39\u8005\u4e0d\u9700\u8981\u5728\u7ebf\uff0c\u56e0\u6b64\u961f\u5217\u4e2d\u53ef\u80fd\u5df2\u7ecf\u6709\u8bb8\u591a\u4f5c\u4e1a\u5728\u7b49\u5f85\uff0c\u56e0\u6b64\u8fdb\u7a0b\u5c06\u4fdd\u6301\u5fd9\u788c\uff0c\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u5904\u7406\u4f5c\u4e1a\uff0c\u76f4\u5230\u6240\u6709\u4f5c\u4e1a\u90fd\u5b8c\u6210\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u8fdb\u7a0b\u51fd\u6570\u5b9a\u4e49\u4e3a' async '\uff0c\u8fd9\u662f\u5f3a\u70c8\u63a8\u8350\u7684\u5b9a\u4e49\u5b83\u4eec\u7684\u65b9\u5f0f\u3002 \u5982\u679c\u4f60\u7684 Node \u8fd0\u884c\u65f6\u4e0d\u652f\u6301 async/await\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u5728\u8fdb\u7a0b\u7ed3\u675f\u65f6\u8fd4\u56de\u4e00\u4e2a promise \u51fd\u6570\uff0c\u4ee5\u5f97\u5230\u7c7b\u4f3c\u7684\u7ed3\u679c\u3002 \u8fdb\u7a0b\u51fd\u6570\u8fd4\u56de\u7684\u503c\u5c06\u5b58\u50a8\u5728 jobs \u5bf9\u8c61\u4e2d\uff0c\u7a0d\u540e\u53ef\u4ee5\u8bbf\u95ee\uff0c\u4f8b\u5982\u5728\u201ccompleted\u201d\u4e8b\u4ef6\u7684\u76d1\u542c\u5668\u4e2d\u3002 \u6709\u65f6\u4f60\u9700\u8981\u5411\u5916\u90e8\u76d1\u542c\u5668\u63d0\u4f9b job \u7684 progress \u4fe1\u606f\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728 job \u5bf9\u8c61\u4e0a\u4f7f\u7528' progress '\u65b9\u6cd5\u8f7b\u677e\u5b8c\u6210: JavaScript myFirstQueue . process ( async ( job ) => { let progress = 0 ; for ( i = 0 ; i < 100 ; i ++ ) { await doSomething ( job . data ); progress += 10 ; job . progress ( progress ); } });","title":"\u6d88\u8d39\u8005"},{"location":"docs/queue/guide/#_5","text":"\u6700\u540e\uff0c\u60a8\u53ef\u4ee5\u53ea\u4fa6\u542c\u961f\u5217\u4e2d\u53d1\u751f\u7684\u4e8b\u4ef6\u3002 \u4fa6\u542c\u5668\u53ef\u4ee5\u662f\u672c\u5730\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u53ea\u63a5\u6536\u5728 \u7ed9\u5b9a\u961f\u5217\u5b9e\u4f8b \u4e2d\u4ea7\u751f\u7684\u901a\u77e5\uff0c\u4e5f\u53ef\u4ee5\u662f\u5168\u5c40\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u4fa6\u542c\u7ed9\u5b9a\u961f\u5217\u7684 \u6240\u6709 \u4e8b\u4ef6\u3002 \u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u5c06\u4fa6\u542c\u5668\u9644\u52a0\u5230\u4efb\u4f55\u5b9e\u4f8b\uff0c\u751a\u81f3\u5145\u5f53\u6d88\u8d39\u8005\u6216\u751f\u4ea7\u8005\u7684\u5b9e\u4f8b\u3002 \u4f46\u662f\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u961f\u5217\u4e0d\u662f\u6d88\u8d39\u8005\u6216\u751f\u4ea7\u8005\uff0c\u672c\u5730\u4e8b\u4ef6\u5c06\u6c38\u8fdc\u4e0d\u4f1a\u89e6\u53d1\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u5c06\u9700\u8981\u4f7f\u7528\u5168\u5c40\u4e8b\u4ef6\u3002 JavaScript const myFirstQueue = new Bull ( \"my-first-queue\" ); // Define a local completed event myFirstQueue . on ( \"completed\" , ( job , result ) => { console . log ( `Job completed with result ${ result } ` ); });","title":"\u4fa6\u542c\u5668"},{"location":"docs/queue/guide/#_6","text":"\u4e3a\u4e86\u5145\u5206\u5229\u7528 Bull \u961f\u5217\u7684\u6f5c\u529b\uff0c\u7406\u89e3\u4f5c\u4e1a\u7684\u751f\u547d\u5468\u671f\u662f\u5f88\u91cd\u8981\u7684\u3002 \u4ece\u751f\u4ea7\u8005\u5bf9\u961f\u5217\u5b9e\u4f8b\u8c03\u7528\u201cadd\u201d\u65b9\u6cd5\u7684\u90a3\u4e00\u523b\u8d77\uff0c\u4f5c\u4e1a\u5c31\u8fdb\u5165\u4e86\u5b83\u9700\u8981\u7684\u751f\u547d\u5468\u671f \u5904\u4e8e\u4e0d\u540c\u7684\u72b6\u6001\uff0c\u76f4\u5230\u5b83\u5b8c\u6210\u6216\u5931\u8d25(\u5c3d\u7ba1\u6280\u672f\u4e0a\u5931\u8d25\u7684\u4f5c\u4e1a\u53ef\u4ee5\u91cd\u8bd5\u5e76\u83b7\u5f97\u65b0\u7684\u751f\u547d\u5468\u671f)\u3002 \u663e\u793a\u4f5c\u4e1a\u72b6\u6001\u7684\u793a\u610f\u56fe(job-lifecycle.png) \u5f53\u4e00\u4e2a\u4f5c\u4e1a\u88ab\u6dfb\u52a0\u5230\u4e00\u4e2a\u961f\u5217\u65f6\uff0c\u5b83\u53ef\u4ee5\u5904\u4e8e\u4e24\u79cd\u72b6\u6001\u4e4b\u4e00\uff0c\u5b83\u53ef\u4ee5\u5904\u4e8e\u201c\u7b49\u5f85\u201d\u72b6\u6001\uff0c\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u7b49\u5f85\u5217\u8868\uff0c\u6240\u6709\u7684\u4f5c\u4e1a\u90fd\u5fc5\u987b\u8fdb\u5165\u8fd9\u4e2a\u5217\u8868\u624d\u80fd\u88ab\u5904\u7406\uff0c\u6216\u8005\u5b83\u53ef\u4ee5\u5904\u4e8e\u201c\u5ef6\u8fdf\u201d\u72b6\u6001:\u5ef6\u8fdf\u72b6\u6001\u610f\u5473\u7740\u8be5\u4f5c\u4e1a\u6b63\u5728\u7b49\u5f85\u8d85\u65f6\u6216\u7b49\u5f85\u88ab\u63d0\u5347\u5904\u7406\uff0c\u4f46\u662f\uff0c\u5ef6\u8fdf\u7684\u4f5c\u4e1a\u4e0d\u4f1a\u76f4\u63a5\u88ab\u5904\u7406\uff0c\u800c\u662f\u88ab\u653e\u7f6e\u5728\u7b49\u5f85\u5217\u8868\u7684\u5f00\u5934\uff0c\u5f53\u4e00\u4e2a worker \u7a7a\u95f2\u65f6\u5c31\u4f1a\u88ab\u5904\u7406\u3002 \u4f5c\u4e1a\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001\u662f\u201c\u6d3b\u52a8\u201d\u72b6\u6001\u3002 \u6d3b\u52a8\u72b6\u6001\u7531\u4e00\u4e2a\u96c6\u5408\u8868\u793a\uff0c\u662f\u5f53\u524d\u6b63\u5728\u5904\u7406\u7684\u4f5c\u4e1a\uff0c\u5373\u3002 \u5b83\u4eec\u8fd0\u884c\u5728\u4e0a\u4e00\u7ae0\u89e3\u91ca\u8fc7\u7684\u201cprocess\u201d\u51fd\u6570\u4e2d\u3002 \u4f5c\u4e1a\u53ef\u4ee5\u65e0\u9650\u957f\u65f6\u95f4\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\uff0c\u76f4\u5230\u6d41\u7a0b\u5b8c\u6210\uff0c\u6216\u8005\u629b\u51fa\u5f02\u5e38\uff0c\u4ee5\u4fbf\u4f5c\u4e1a\u4ee5\u201c\u5b8c\u6210\u201d\u6216\u201c\u5931\u8d25\u201d\u72b6\u6001\u7ed3\u675f\u3002","title":"\u4e00\u4efd\u5de5\u4f5c\u7684\u751f\u547d\u5468\u671f"},{"location":"docs/queue/guide/#_7","text":"\u5728 Bull \u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u505c\u6ede\u7684\u5de5\u4f5c\u7684\u6982\u5ff5\u3002 \u505c\u6ede\u7684\u4f5c\u4e1a\u662f\u6b63\u5728\u5904\u7406\u7684\u4f5c\u4e1a\uff0c\u4f46 Bull \u6000\u7591\u8be5\u4f5c\u4e1a\u7684\u6d41\u7a0b\u529f\u80fd\u5df2\u7ecf\u6302\u8d77\u3002 \u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u5728\u8fdb\u7a0b\u51fd\u6570\u6b63\u5728\u5904\u7406\u4e00\u4e2a\u4efb\u52a1\uff0c\u5e76\u4e14\u4f7f CPU \u4e00\u76f4\u5904\u4e8e\u7e41\u5fd9\u72b6\u6001\uff0c\u4ee5\u81f3\u4e8e worker \u65e0\u6cd5\u544a\u8bc9\u961f\u5217\u5b83\u4ecd\u7136\u5728\u5904\u7406\u8fd9\u4e2a\u4efb\u52a1\u3002 \u5f53\u4e00\u4e2a\u4f5c\u4e1a\u505c\u6b62\u65f6\uff0c\u6839\u636e\u4f5c\u4e1a\u8bbe\u7f6e\uff0c\u8be5\u4f5c\u4e1a\u53ef\u4ee5\u7531\u53e6\u4e00\u4e2a\u7a7a\u95f2\u7684\u4f5c\u4e1a\u91cd\u8bd5\uff0c\u4e5f\u53ef\u4ee5\u8f6c\u79fb\u5230\u5931\u8d25\u72b6\u6001\u3002 \u53ef\u4ee5\u901a\u8fc7\u786e\u4fdd\u8fdb\u7a0b\u51fd\u6570\u4e0d\u4f1a\u8ba9 Node \u4e8b\u4ef6\u5faa\u73af\u592a\u957f\u65f6\u95f4\u5904\u4e8e\u7e41\u5fd9\u72b6\u6001(Bull \u7684\u9ed8\u8ba4\u9009\u9879\u662f\u51e0\u79d2\u949f)\uff0c\u6216\u8005\u4f7f\u7528\u5355\u72ec\u7684 sandbox -processors \u6765\u907f\u514d\u9677\u5165\u505c\u987f\u7684\u4f5c\u4e1a\u3002","title":"\u505c\u6ede\u4e0d\u524d\u7684\u5de5\u4f5c"},{"location":"docs/queue/guide/#_8","text":"Bull \u4e2d\u7684\u961f\u5217\u751f\u6210\u4e00\u4e9b\u4e8b\u4ef6\uff0c\u8fd9\u4e9b\u4e8b\u4ef6\u5728\u8bb8\u591a\u7528\u4f8b\u4e2d\u90fd\u5f88\u6709\u7528\u3002 \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u961f\u5217\u5b9e\u4f8b(\u4e00\u4e2a worker)\uff0c\u4e8b\u4ef6\u53ef\u4ee5\u662f\u672c\u5730\u7684\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u4efb\u52a1\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7684 worker \u4e2d\u5b8c\u6210\u4e86\uff0c\u5219\u53ea\u4f1a\u9488\u5bf9\u8be5\u5b9e\u4f8b\u53d1\u51fa\u672c\u5730\u4e8b\u4ef6\u3002 \u4f46\u662f\uff0c\u53ef\u4ee5\u901a\u8fc7\u5728\u672c\u5730\u4e8b\u4ef6\u540d\u79f0\u524d\u52a0\u4e0a' global: '\u6765\u4fa6\u542c\u6240\u6709\u4e8b\u4ef6\u3002 \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4fa6\u542c\u7ed9\u5b9a\u961f\u5217\u4e2d\u6240\u6709\u5de5\u4eba\u4ea7\u751f\u7684\u6240\u6709\u4e8b\u4ef6\u3002 \u672c\u5730\u5b8c\u6574\u4e8b\u4ef6: JavaScript queue . on ( \"completed\" , ( job ) => { console . log ( `Job with id ${ job . id } has been completed` ); }); \u800c\u4e8b\u4ef6\u7684\u5168\u7403\u7248\u672c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u6765\u6536\u542c: JavaScript queue . on ( \"global:completed\" , ( jobId ) => { console . log ( `Job with id ${ jobId } has been completed` ); }); \u8bf7\u6ce8\u610f\uff0c\u5168\u5c40\u4e8b\u4ef6\u7684\u7b7e\u540d\u4e0e\u672c\u5730\u4e8b\u4ef6\u7684\u7b7e\u540d\u7565\u6709\u4e0d\u540c\uff0c\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5b83\u53ea\u53d1\u9001\u4f5c\u4e1a id\uff0c\u800c\u4e0d\u662f\u4f5c\u4e1a\u672c\u8eab\u7684\u5b8c\u6574\u5b9e\u4f8b\uff0c\u8fd9\u6837\u505a\u662f\u51fa\u4e8e\u6027\u80fd\u539f\u56e0\u3002 \u53ef\u7528\u4e8b\u4ef6\u7684\u5217\u8868\u53ef\u4ee5\u5728 reference \u4e2d\u627e\u5230\u3002","title":"\u4e8b\u4ef6"},{"location":"docs/queue/guide/#_9","text":"\u4e00\u4e2a\u961f\u5217\u53ef\u4ee5\u5b9e\u4f8b\u5316\u4e00\u4e9b\u6709\u7528\u7684\u9009\u9879\uff0c\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u4f60\u7684 Redis \u670d\u52a1\u5668\u7684\u4f4d\u7f6e\u548c\u5bc6\u7801\uff0c\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u6709\u7528\u7684\u8bbe\u7f6e\u3002 \u6240\u6709\u8fd9\u4e9b\u8bbe\u7f6e\u5728 Bull \u7684 \u53c2\u8003\u6587\u732e \u4e2d\u90fd\u6709\u63cf\u8ff0\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u4e0d\u91cd\u590d\u5b83\u4eec\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u4e00\u4e9b\u7528\u4f8b\u3002","title":"\u961f\u5217\u7684\u9009\u9879"},{"location":"docs/queue/guide/#_10","text":"\u53ef\u4ee5\u521b\u5efa\u9650\u5236\u5355\u4f4d\u65f6\u95f4\u5185\u5904\u7406\u7684\u4f5c\u4e1a\u6570\u91cf\u7684\u961f\u5217\u3002 \u9650\u5236\u5668\u662f\u5728\u6bcf\u4e2a\u961f\u5217\u4e2d\u5b9a\u4e49\u7684\uff0c\u4e0e worker \u7684\u6570\u91cf\u65e0\u5173\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u6c34\u5e73\u6269\u5c55\uff0c\u5e76\u4e14\u4ecd\u7136\u53ef\u4ee5\u8f7b\u677e\u5730\u9650\u5236\u5904\u7406\u901f\u7387: JavaScript // Limit queue to max 1000 jobs per 5000 milliseconds. const myRateLimitedQueue = new Queue ( \"rateLimited\" , { limiter : { max : 1000 , duration : 5000 , }, }); \u5f53\u961f\u5217\u8fbe\u5230\u901f\u7387\u9650\u5236\u65f6\uff0c\u8bf7\u6c42\u7684\u4f5c\u4e1a\u5c06\u52a0\u5165\u201c\u5ef6\u8fdf\u201d\u961f\u5217\u3002","title":"\u901f\u5ea6\u9650\u5236\u5668"},{"location":"docs/queue/guide/#_11","text":"\u7ed9\u5de5\u4f5c\u8d77\u540d\u5b57\u662f\u53ef\u80fd\u7684\u3002 \u8fd9\u4e0d\u4f1a\u6539\u53d8\u961f\u5217\u7684\u4efb\u4f55\u673a\u5236\uff0c\u4f46\u53ef\u4ee5\u5728 UI \u5de5\u5177\u4e2d\u7528\u4e8e\u66f4\u6e05\u6670\u7684\u4ee3\u7801\u548c\u66f4\u597d\u7684\u53ef\u89c6\u5316: JavaScript // Jobs producer const myJob = await transcoderQueue . add ( \"image\" , { input : \"myimagefile\" }); const myJob = await transcoderQueue . add ( \"audio\" , { input : \"myaudiofile\" }); const myJob = await transcoderQueue . add ( \"video\" , { input : \"myvideofile\" }); JavaScript // Worker transcoderQueue . process ( \"image\" , processImage ); transcoderQueue . process ( \"audio\" , processAudio ); transcoderQueue . process ( \"video\" , processVideo ); \u8bf7\u8bb0\u4f4f\uff0c\u6bcf\u4e2a\u961f\u5217\u5b9e\u4f8b\u90fd\u9700\u8981\u4e3a\u6bcf\u4e2a \u6307\u5b9a \u4f5c\u4e1a\u63d0\u4f9b\u4e00\u4e2a\u5904\u7406\u5668\uff0c\u5426\u5219\u5c06\u4f1a\u51fa\u73b0\u5f02\u5e38\u3002","title":"\u547d\u540d\u5de5\u4f5c"},{"location":"docs/queue/guide/#_12","text":"\u5982\u4e0a\u6240\u8ff0\uff0c\u5728\u5b9a\u4e49\u6d41\u7a0b\u529f\u80fd\u65f6\uff0c\u8fd8\u53ef\u4ee5\u63d0\u4f9b\u5e76\u53d1\u8bbe\u7f6e\u3002 \u6b64\u8bbe\u7f6e\u5141\u8bb8\u5de5\u4f5c\u8005\u5e76\u884c\u5904\u7406\u591a\u4e2a\u4f5c\u4e1a\u3002 \u8fd9\u4e9b\u4f5c\u4e1a\u4ecd\u7136\u5728\u540c\u4e00\u4e2a Node \u8fdb\u7a0b\u4e2d\u5904\u7406\uff0c\u5982\u679c\u4f5c\u4e1a\u7684 IO \u5bc6\u96c6\uff0c\u5b83\u4eec\u5c06\u5f97\u5230\u5f88\u597d\u7684\u5904\u7406\u3002 \u6709\u65f6\uff0c\u4f5c\u4e1a\u7684 CPU \u5360\u7528\u66f4\u5927\uff0c\u8fd9\u53ef\u80fd\u4f1a\u9501\u5b9a Node \u4e8b\u4ef6\u5faa\u73af\u592a\u957f\u65f6\u95f4\uff0cBull \u53ef\u80fd\u4f1a\u8ba4\u4e3a\u4f5c\u4e1a\u5df2\u7ecf\u6682\u505c\u3002 \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u53ef\u4ee5\u5728\u5355\u72ec\u7684 Node \u8fdb\u7a0b\u4e2d\u8fd0\u884c\u8fdb\u7a0b\u51fd\u6570\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5e76\u53d1\u6027\u53c2\u6570\u5c06\u51b3\u5b9a\u5141\u8bb8\u8fd0\u884c\u7684\u6700\u5927\u5e76\u53d1\u8fdb\u7a0b\u6570\u3002 \u6211\u4eec\u79f0\u8fd9\u79cd\u8fdb\u7a0b\u4e3a\u201c\u6c99\u7bb1\u201d\u8fdb\u7a0b\uff0c\u5b83\u4eec\u4e5f\u6709\u8fd9\u6837\u7684\u5c5e\u6027:\u5982\u679c\u5d29\u6e83\uff0c\u5b83\u4eec\u4e0d\u4f1a\u5f71\u54cd\u4efb\u4f55\u5176\u4ed6\u8fdb\u7a0b\uff0c\u5e76\u4e14\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u65b0\u8fdb\u7a0b\u6765\u66ff\u6362\u5b83\u3002","title":"\u6c99\u7bb1\u5904\u7406\u5668"},{"location":"docs/queue/guide/#_13","text":"Bull \u4e2d\u7684\u9ed8\u8ba4\u4f5c\u4e1a\u7c7b\u578b\u662f\u201cFIFO\u201d(\u5148\u8fdb\u5148\u51fa)\uff0c\u8fd9\u610f\u5473\u7740\u4f5c\u4e1a\u7684\u5904\u7406\u987a\u5e8f\u4e0e\u8fdb\u5165\u961f\u5217\u7684\u987a\u5e8f\u76f8\u540c\u3002 \u6709\u65f6\uff0c\u4ee5\u4e0d\u540c\u7684\u987a\u5e8f\u5904\u7406\u4f5c\u4e1a\u662f\u6709\u7528\u7684\u3002","title":"\u4f5c\u4e1a\u7c7b\u578b"},{"location":"docs/queue/guide/#lifo","text":"\u540e\u8fdb\u5148\u51fa(LIFO)\u610f\u5473\u7740\u4f5c\u4e1a\u88ab\u6dfb\u52a0\u5230\u961f\u5217\u7684\u5f00\u5934\uff0c\u56e0\u6b64\u5f53 worker \u7a7a\u95f2\u65f6\u5c31\u4f1a\u88ab\u5904\u7406\u3002 JavaScript const myJob = await myqueue . add ({ foo : \"bar\" }, { lifo : true });","title":"LIFO"},{"location":"docs/queue/guide/#_14","text":"\u8fd8\u53ef\u4ee5\u5c06\u4f5c\u4e1a\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\uff0c\u8fd9\u4e9b\u4f5c\u4e1a\u5728\u88ab\u5904\u7406\u4e4b\u524d\u4f1a\u5ef6\u8fdf\u4e00\u5b9a\u7684\u65f6\u95f4\u3002 \u6ce8\u610f\uff0cdelay \u53c2\u6570\u8868\u793a\u4f5c\u4e1a\u5728\u88ab\u5904\u7406\u4e4b\u524d\u7b49\u5f85\u7684\u6700\u5c0f\u65f6\u95f4\u3002 \u5f53\u5ef6\u8fdf\u65f6\u95f4\u8fc7\u53bb\u540e\uff0c\u4f5c\u4e1a\u5c06\u88ab\u79fb\u52a8\u5230\u961f\u5217\u7684\u5f00\u5934\uff0c\u5e76\u5728\u4e00\u4e2a worker \u7a7a\u95f2\u65f6\u7acb\u5373\u5904\u7406\u3002 JavaScript // Delayed 5 seconds const myJob = await myqueue . add ({ foo : \"bar\" }, { delay : 5000 });","title":"\u5ef6\u8fdf"},{"location":"docs/queue/guide/#_15","text":"\u53ef\u4ee5\u5c06\u4f5c\u4e1a\u6dfb\u52a0\u5230\u5177\u6709\u4f18\u5148\u7ea7\u503c\u7684\u961f\u5217\u4e2d\u3002 \u4f18\u5148\u7ea7\u9ad8\u7684\u4f5c\u4e1a\u5c06\u6bd4\u4f18\u5148\u7ea7\u4f4e\u7684\u4f5c\u4e1a\u4f18\u5148\u5904\u7406\u3002 \u6700\u9ad8\u4f18\u5148\u7ea7\u4e3a 1\uff0c\u5e76\u964d\u4f4e\u6240\u4f7f\u7528\u7684\u8f83\u5927\u6574\u6570\u3002 \u8bf7\u8bb0\u4f4f\uff0c\u4f18\u5148\u7ea7\u961f\u5217\u6bd4\u6807\u51c6\u961f\u5217\u7a0d\u6162(\u5f53\u524d\u63d2\u5165\u65f6\u95f4\u4e3a O(n)\uff0c n \u662f\u5f53\u524d\u5728\u961f\u5217\u4e2d\u7b49\u5f85\u7684\u4f5c\u4e1a\u6570\u91cf\uff0c\u800c\u6807\u51c6\u961f\u5217\u4e3a O(1))\u3002 JavaScript const myJob = await myqueue . add ({ foo : \"bar\" }, { priority : 3 });","title":"\u4f18\u5148"},{"location":"docs/queue/guide/#_16","text":"\u53ef\u91cd\u590d\u4f5c\u4e1a\u662f\u4e00\u79cd\u7279\u6b8a\u4f5c\u4e1a\uff0c\u53ef\u4ee5\u6839\u636e cron \u89c4\u8303\u6216\u65f6\u95f4\u95f4\u9694\u65e0\u9650\u671f\u5730\u91cd\u590d\u81ea\u5df1\uff0c\u6216\u8005\u76f4\u5230\u8fbe\u5230\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6700\u5927\u65e5\u671f\u6216\u91cd\u590d\u6b21\u6570\u4e3a\u6b62\u3002 JavaScript // Repeat every 10 seconds for 100 times. const myJob = await myqueue . add ( { foo : \"bar\" }, { repeat : { every : 10000 , limit : 100 , }, } ); // Repeat payment job once every day at 3:15 (am) paymentsQueue . add ( paymentsData , { repeat : { cron : \"15 3 * * *\" } }); \u5173\u4e8e\u53ef\u91cd\u590d\u5de5\u4f5c\u6709\u4e00\u4e9b\u91cd\u8981\u7684\u8003\u8651: \u5982\u679c\u91cd\u590d\u9009\u9879\u76f8\u540c\uff0cBull \u8db3\u591f\u806a\u660e\uff0c\u4e0d\u4f1a\u6dfb\u52a0\u76f8\u540c\u7684\u53ef\u91cd\u590d\u4f5c\u4e1a\u3002 (\u6ce8\u610f:\u4f5c\u4e1a id \u662f\u91cd\u590d\u9009\u9879\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u4e3a:https://github.com/OptimalBits/bull/pull/603\uff0c\u56e0\u6b64\u4f20\u9012\u4f5c\u4e1aid\u5c06\u5141\u8bb8\u5728\u961f\u5217\u4e2d\u63d2\u5165\u5177\u6709\u76f8\u540ccron\u7684\u4f5c\u4e1a) \u5982\u679c\u6ca1\u6709\u5de5\u4eba\u5728\u8fd0\u884c\uff0c\u90a3\u4e48\u4e0b\u4e00\u6b21\u5de5\u4eba\u5728\u7ebf\u65f6\uff0c\u53ef\u91cd\u590d\u7684\u5de5\u4f5c\u5c06\u4e0d\u4f1a\u7d2f\u79ef\u3002 \u53ef\u4ee5\u4f7f\u7528 removeRepeatable \u65b9\u6cd5\u5220\u9664\u53ef\u91cd\u590d\u7684\u4f5c\u4e1a\u3002","title":"\u53ef\u91cd\u590d\u7684"},{"location":"docs/queue/patterns/","text":"\u6d88\u606f\u961f\u5217 \u8fd4\u56de\u5de5\u4f5c\u5b8c\u6210 \u91cd\u7528 Redis \u8fde\u63a5 Redis \u96c6\u7fa4 \u8c03\u8bd5 \u81ea\u5b9a\u4e49\u8865\u507f\u7b56\u7565 \u624b\u52a8\u6293\u53d6\u5de5\u4f5c \u5982\u679c\u4f60\u6709\u4efb\u4f55\u5176\u4ed6\u4f60\u60f3\u8981\u6dfb\u52a0\u7684\u5e38\u89c1\u6a21\u5f0f\uff0c\u62c9\u8bf7\u6c42\u5b83\u4eec! \u6d88\u606f\u961f\u5217 Bull \u4e5f\u53ef\u4ee5\u7528\u4e8e\u6301\u4e45\u6d88\u606f\u961f\u5217\u3002 \u5728\u67d0\u4e9b\u7528\u4f8b\u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u7279\u6027\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u6709\u4e24\u4e2a\u9700\u8981\u76f8\u4e92\u901a\u4fe1\u7684\u670d\u52a1\u5668\u3002 \u901a\u8fc7\u4f7f\u7528\u961f\u5217\uff0c\u670d\u52a1\u5668\u4e0d\u9700\u8981\u540c\u65f6\u5728\u7ebf\uff0c\u56e0\u6b64\u8fd9\u521b\u5efa\u4e86\u4e00\u4e2a\u975e\u5e38\u5065\u58ee\u7684\u901a\u4fe1\u901a\u9053\u3002 \u4f60\u53ef\u4ee5\u628a' add '\u5f53\u4f5c send \uff0c\u628a' process '\u5f53\u4f5c receive : \u670d\u52a1\u5668: JavaScript const Queue = require ( \"bull\" ); const sendQueue = new Queue ( \"Server B\" ); const receiveQueue = new Queue ( \"Server A\" ); receiveQueue . process ( function ( job , done ) { console . log ( \"Received message\" , job . data . msg ); done (); }); sendQueue . add ({ msg : \"Hello\" }); Server B: JavaScript const Queue = require ( \"bull\" ); const sendQueue = new Queue ( \"Server A\" ); const receiveQueue = new Queue ( \"Server B\" ); receiveQueue . process ( function ( job , done ) { console . log ( \"Received message\" , job . data . msg ); done (); }); sendQueue . add ({ msg : \"World\" }); \u8fd4\u56de\u5de5\u4f5c\u5b8c\u6210 \u4e00\u79cd\u5e38\u89c1\u7684\u6a21\u5f0f\u662f\uff0c\u60a8\u6709\u4e00\u4e2a\u961f\u5217\u5904\u7406\u5668\u96c6\u7fa4\uff0c\u4ee5\u5c3d\u53ef\u80fd\u5feb\u7684\u901f\u5ea6\u5904\u7406\u4f5c\u4e1a\uff0c\u800c\u5176\u4ed6\u4e00\u4e9b\u670d\u52a1\u9700\u8981\u83b7\u53d6\u8be5\u5904\u7406\u5668\u7684\u7ed3\u679c\u5e76\u5bf9\u5176\u8fdb\u884c\u5904\u7406\uff0c\u53ef\u80fd\u4f1a\u5c06\u7ed3\u679c\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u3002 \u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u7684\u6700\u5065\u58ee\u548c\u53ef\u4f38\u7f29\u7684\u65b9\u6cd5\u662f\u5c06\u6807\u51c6\u4f5c\u4e1a\u961f\u5217\u4e0e\u6d88\u606f\u961f\u5217\u6a21\u5f0f\u7ed3\u5408\u8d77\u6765:\u670d\u52a1\u53ea\u9700\u6253\u5f00\u4f5c\u4e1a\u961f\u5217\u5e76\u5411\u5176\u6dfb\u52a0\u4f5c\u4e1a\uff0c\u5c31\u53ef\u4ee5\u5c06\u4f5c\u4e1a\u53d1\u9001\u5230\u96c6\u7fa4\uff0c\u96c6\u7fa4\u5c06\u4ee5\u5c3d\u53ef\u80fd\u5feb\u7684\u901f\u5ea6\u5f00\u59cb\u5904\u7406\u3002 \u6bcf\u5f53\u5728\u96c6\u7fa4\u4e2d\u5b8c\u6210\u4e00\u4e2a\u4f5c\u4e1a\u65f6\uff0c\u4e00\u6761\u6d88\u606f\u5c31\u4f1a\u8fde\u540c\u7ed3\u679c\u6570\u636e\u53d1\u9001\u5230\u4e00\u4e2a\u7ed3\u679c\u6d88\u606f\u961f\u5217\uff0c\u8fd9\u4e2a\u961f\u5217\u7531\u4e00\u4e9b\u5b58\u50a8\u7ed3\u679c\u5230\u6570\u636e\u5e93\u4e2d\u7684\u5176\u4ed6\u670d\u52a1\u8fdb\u884c\u4fa6\u542c\u3002 \u91cd\u7528 Redis \u8fde\u63a5 \u4e00\u4e2a\u6807\u51c6\u7684\u961f\u5217\u9700\u8981 3 \u4e2a\u8fde\u63a5\u5230 Redis \u670d\u52a1\u5668\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u91cd\u7528\u8fde\u63a5\u2014\u4f8b\u5982\u5728 Heroku \u4e2d\uff0c\u8fde\u63a5\u6570\u662f\u53d7\u9650\u5236\u7684\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7' Queue '\u6784\u9020\u51fd\u6570\u4e2d\u7684' createClient '\u9009\u9879\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002 \u6ce8: bclient \u8fde\u63a5 \u4e0d\u80fd\u88ab\u91cd\u7528 \uff0c\u6240\u4ee5\u4f60\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u8fde\u63a5\u6bcf\u6b21\u8c03\u7528\u3002 \u5ba2\u6237\u7aef\u548c\u8ba2\u9605\u8005\u8fde\u63a5\u53ef\u4ee5\u5171\u4eab\uff0c\u5f53\u961f\u5217\u5173\u95ed\u65f6\u4e0d\u4f1a\u5173\u95ed\u3002 \u5f53\u60a8\u5173\u95ed\u8fdb\u7a0b\u65f6\uff0c\u9996\u5148\u5173\u95ed\u961f\u5217\uff0c\u7136\u540e\u5173\u95ed\u5171\u4eab\u8fde\u63a5(\u5982\u679c\u5b83\u4eec\u662f\u5171\u4eab\u7684)\u3002 \u5982\u679c\u4f60\u4e0d\u5171\u4eab\u8fde\u63a5,\u4f46\u4ecd\u4f7f\u7528\u201ccreateClient\u201d\u505a\u4e00\u4e9b\u5b9a\u5236\u7684\u8fde\u63a5\u903b\u8f91,\u4f60\u53ef\u80fd\u4ecd\u7136\u9700\u8981\u60a8\u521b\u5efa\u7684\u6240\u6709\u8fde\u63a5\u7684\u5217\u8868,\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u624b\u52a8\u5173\u95ed\u540e,\u961f\u5217\u5173\u95ed,\u5982\u679c\u4f60\u9700\u8981\u4f18\u96c5\u7684\u5173\u95ed\u8fc7\u7a0b \u4e0d\u8981\u5728\u4f60\u521b\u5efa\u7684\u8fde\u63a5\u4e0a\u8bbe\u7f6e\u4e00\u4e2a\u201ckeyPrefix\u201d\uff0c\u5982\u679c\u4f60\u9700\u8981\u4e00\u4e2a\u952e\u524d\u7f00\uff0c\u4f7f\u7528 bull \u7684\u5185\u7f6e\u524d\u7f00\u7279\u6027 JavaScript const { REDIS_URL } = process . env ; const Redis = require ( \"ioredis\" ); let client ; let subscriber ; const opts = { // redisOpts here will contain at least a property of connectionName which will identify the queue based on its name createClient : function ( type , redisOpts ) { switch ( type ) { case \"client\" : if ( ! client ) { client = new Redis ( REDIS_URL , redisOpts ); } return client ; case \"subscriber\" : if ( ! subscriber ) { subscriber = new Redis ( REDIS_URL , redisOpts ); } return subscriber ; case \"bclient\" : return new Redis ( REDIS_URL , redisOpts ); default : throw new Error ( \"Unexpected connection type: \" , type ); } }, }; const queueFoo = new Queue ( \"foobar\" , opts ); const queueQux = new Queue ( \"quxbaz\" , opts ); Redis \u96c6\u7fa4 Bull \u5185\u90e8\u51fd\u6570\u9700\u8981\u8de8\u4e0d\u540c\u952e\u7684\u539f\u5b50\u64cd\u4f5c\u3002 \u8fd9\u79cd\u884c\u4e3a\u6253\u7834\u4e86 Redis \u7684\u96c6\u7fa4\u914d\u7f6e\u89c4\u5219\u3002 \u4f46\u662f\uff0c\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u9002\u5f53\u7684 Bull \u524d\u7f00\u9009\u9879\u4f5c\u4e3a\u96c6\u7fa4\u201c\u6563\u5217\u6807\u7b7e\u201d\u6765\u4f7f\u7528\u96c6\u7fa4\u73af\u5883\u3002 \u54c8\u5e0c\u6807\u7b7e\u662f\u7528\u6765\u4fdd\u8bc1\u67d0\u4e9b\u952e\u88ab\u653e\u7f6e\u5728\u76f8\u540c\u7684\u54c8\u5e0c\u69fd\uff0c\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u54c8\u5e0c\u6807\u7b7e\u5728 redis \u96c6\u7fa4\u6559\u7a0b \u3002 \u6563\u5217\u6807\u8bb0\u7528\u62ec\u53f7\u5b9a\u4e49\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u952e\u5728\u62ec\u53f7\u5185\u6709\u4e00\u4e2a\u5b50\u5b57\u7b26\u4e32\uff0c\u5c06\u4f7f\u7528\u8be5\u5b50\u5b57\u7b26\u4e32\u6765\u786e\u5b9a\u8be5\u952e\u5c06\u88ab\u653e\u7f6e\u5728\u54ea\u4e2a\u54c8\u5e0c\u69fd\u4e2d\u3002 \u603b\u4e4b\uff0c\u4e3a\u4e86\u4f7f Bull \u4e0e Redis \u96c6\u7fa4\u517c\u5bb9\uff0c\u5728\u62ec\u53f7\u5185\u4f7f\u7528\u961f\u5217\u524d\u7f00\u3002 \u4f8b\u5982: JavaScript const queue = new Queue ( \"cluster\" , { prefix : \"{myprefix}\" , }); \u5982\u679c\u5728\u540c\u4e00\u4e2a\u96c6\u7fa4\u4e2d\u4f7f\u7528\u591a\u4e2a\u961f\u5217\uff0c\u5219\u5e94\u8be5\u4f7f\u7528\u4e0d\u540c\u7684\u524d\u7f00\uff0c\u4ee5\u4fbf\u5c06\u8fd9\u4e9b\u961f\u5217\u5747\u5300\u5730\u653e\u7f6e\u5728\u96c6\u7fa4\u8282\u70b9\u4e2d\u3002 \u8c03\u8bd5 \u8981\u67e5\u770b\u8c03\u8bd5\u8bed\u53e5\uff0c\u8bbe\u7f6e\u6216\u6dfb\u52a0' bull '\u5230' NODE_DEBUG '\u73af\u5883\u53d8\u91cf: Bash export NODE_DEBUG = bull Bash NODE_DEBUG = bull node ./your-script.js \u81ea\u5b9a\u4e49\u8865\u507f\u7b56\u7565 \u5f53\u91cd\u8bd5\u65f6\u5185\u7f6e\u7684\u56de\u9000\u7b56\u7565\u4e0d\u591f\u7528\u65f6\uff0c\u53ef\u4ee5\u5b9a\u4e49\u81ea\u5b9a\u4e49\u7b56\u7565\u3002 \u81ea\u5b9a\u4e49\u56de\u9000\u7b56\u7565\u7531\u961f\u5217\u4e0a\u7684\u51fd\u6570\u5b9a\u4e49\u3002 \u5df2\u5c1d\u8bd5\u5904\u7406\u4f5c\u4e1a\u7684\u6b21\u6570\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u8be5\u51fd\u6570\uff0c\u4f5c\u4e1a\u5931\u8d25\u7684\u9519\u8bef\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u8be5\u51fd\u6570\u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u5ef6\u8fdf\u91cd\u8bd5\u7684\u65f6\u95f4\uff0c0 \u8868\u793a\u7acb\u5373\u91cd\u8bd5\uff0c-1 \u8868\u793a\u7acb\u5373\u5931\u8d25\u3002 JavaScript const Queue = require ( \"bull\" ); const myQueue = new Queue ( \"Server B\" , { settings : { backoffStrategies : { jitter : function ( attemptsMade , err ) { return 5000 + Math . random () * 500 ; }, }, }, }); \u7136\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u5b9a\u4e49\u7684\u540d\u79f0\u5728\u4f5c\u4e1a\u4e2d\u6307\u5b9a\u65b0\u7684\u56de\u9000\u7b56\u7565: JavaScript myQueue . add ( { foo : \"bar\" }, { attempts : 3 , backoff : { type : \"jitter\" , }, } ); \u4f60\u53ef\u4ee5\u4e3a\u4f60\u7684\u7b56\u7565\u6307\u5b9a\u9009\u9879: JavaScript const Queue = require ( \"bull\" ); const myQueue = new Queue ( \"Server B\" , { settings : { backoffStrategies : { // truncated binary exponential backoff binaryExponential : function ( attemptsMade , err , options ) { // Options can be undefined, you need to handle it by yourself if ( ! options ) { options = {}; } const delay = options . delay || 1000 ; const truncate = options . truncate || 1000 ; console . error ({ attemptsMade , err , options }); return Math . round ( Math . random () * ( Math . pow ( 2 , Math . max ( attemptsMade , truncate )) - 1 ) * delay ); }, }, }, }); myQueue . add ( { foo : \"bar\" }, { attempts : 10 , backoff : { type : \"binaryExponential\" , options : { delay : 500 , truncate : 5 , }, }, } ); \u4f60\u53ef\u4ee5\u6839\u636e\u5de5\u4f5c\u4e2d\u51fa\u73b0\u7684\u9519\u8bef\u6765\u5236\u5b9a\u9000\u6b65\u7b56\u7565: JavaScript const Queue = require ( \"bull\" ); function MySpecificError () {} const myQueue = new Queue ( \"Server C\" , { settings : { backoffStrategies : { foo : function ( attemptsMade , err ) { if ( err instanceof MySpecificError ) { return 10000 ; } return 1000 ; }, }, }, }); myQueue . process ( function ( job , done ) { if ( job . data . msg === \"Specific Error\" ) { throw new MySpecificError (); } else { throw new Error (); } }); myQueue . add ( { msg : \"Hello\" }, { attempts : 3 , backoff : { type : \"foo\" , }, } ); myQueue . add ( { msg : \"Specific Error\" }, { attempts : 3 , backoff : { type : \"foo\" , }, } ); \u624b\u52a8\u6293\u53d6\u5de5\u4f5c \u5982\u679c\u60a8\u5e0c\u671b\u5b9e\u9645\u7684\u4f5c\u4e1a\u5904\u7406\u5728\u4e00\u4e2a\u5355\u72ec\u7684 repo/\u670d\u52a1\u4e2d\u5b8c\u6210\uff0c\u800c\u4e0d\u662f\u5728\u8fd0\u884c' bull '\u7684\u5730\u65b9\uff0c\u8fd9\u4e2a\u6a21\u5f0f\u53ef\u80fd\u9002\u5408\u60a8\u3002 \u53ef\u4ee5\u4f7f\u7528\u51e0\u4e2a\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u624b\u52a8\u8f6c\u6362\u4f5c\u4e1a\u7684\u72b6\u6001\u3002 \u5411'waiting'\u961f\u5217\u6dfb\u52a0\u4f5c\u4e1a\u3002\u83b7\u53d6\u961f\u5217\u5e76\u8c03\u7528' add '\u3002 TypeScript import Queue from \"bull\" ; const queue = new Queue ({ limiter : { max : 5 , duration : 5000 , bounceBack : true , // important }, ... queueOptions , }); queue . add ({ random_attr : \"random_value\" }); \u5c06\u4efb\u52a1\u4ece'waiting'\u4e2d\u62c9\u51fa\u5e76\u79fb\u52a8\u5230'active'\u4e2d\u3002 TypeScript const job : Job = await queue . getNextJob (); \u5982\u679c\u51fa\u73b0\u9519\u8bef\uff0c\u5c06\u4f5c\u4e1a\u79fb\u52a8\u5230'failed'\u961f\u5217\u3002 TypeScript const ( nextJobData , nextJobId ) = await job . moveToFailed ({ message : 'Call to external service failed!' }, true ); \u5c06\u4f5c\u4e1a\u79fb\u52a8\u5230'completed'\u961f\u5217\u3002 TypeScript const ( nextJobData , nextJobId ) = await job . moveToCompleted ( 'succeeded' , true ); \u5982\u679c\u6709\u4efb\u52a1\u8fd4\u56de\uff0c\u5219\u8fd4\u56de\u4e0b\u4e00\u4e2a\u4efb\u52a1\u3002 TypeScript if ( nextJobdata ) { return Job . fromJSON ( queue , nextJobData , nextJobId ); } \u6ce8\u610f \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7531' getNextJob '\u6216' moveToCompleted '\u8fd4\u56de\u7684\u4f5c\u4e1a\u7684\u9501\u6301\u7eed\u65f6\u95f4\u662f 30 \u79d2\uff0c\u5982\u679c\u5b83\u82b1\u8d39\u7684\u65f6\u95f4\u8d85\u8fc7 30 \u79d2\uff0c\u4f5c\u4e1a\u5c06\u81ea\u52a8\u8fd4\u56de \u6807\u8bb0\u4e3a\u6682\u505c\uff0c\u5e76\u6839\u636e\u6700\u5927\u6682\u505c\u9009\u9879\u5c06\u79fb\u52a8\u56de\u7b49\u5f85\u72b6\u6001\u6216\u6807\u8bb0\u4e3a\u5931\u8d25\u3002 \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u60a8\u5fc5\u987b\u4f7f\u7528' job.extendLock(duration) '\uff0c\u4ee5\u4fbf\u5728\u9501\u8fc7\u671f\u524d\u7ed9\u60a8\u66f4\u591a\u7684\u65f6\u95f4\u3002 \u5efa\u8bae\u5728\u9501\u65f6\u95f4\u8fc7\u4e86\u4e00\u534a\u540e\u5ef6\u957f\u9501\u3002","title":"\u6a21\u5f0f"},{"location":"docs/queue/patterns/#_1","text":"Bull \u4e5f\u53ef\u4ee5\u7528\u4e8e\u6301\u4e45\u6d88\u606f\u961f\u5217\u3002 \u5728\u67d0\u4e9b\u7528\u4f8b\u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u7279\u6027\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u6709\u4e24\u4e2a\u9700\u8981\u76f8\u4e92\u901a\u4fe1\u7684\u670d\u52a1\u5668\u3002 \u901a\u8fc7\u4f7f\u7528\u961f\u5217\uff0c\u670d\u52a1\u5668\u4e0d\u9700\u8981\u540c\u65f6\u5728\u7ebf\uff0c\u56e0\u6b64\u8fd9\u521b\u5efa\u4e86\u4e00\u4e2a\u975e\u5e38\u5065\u58ee\u7684\u901a\u4fe1\u901a\u9053\u3002 \u4f60\u53ef\u4ee5\u628a' add '\u5f53\u4f5c send \uff0c\u628a' process '\u5f53\u4f5c receive : \u670d\u52a1\u5668: JavaScript const Queue = require ( \"bull\" ); const sendQueue = new Queue ( \"Server B\" ); const receiveQueue = new Queue ( \"Server A\" ); receiveQueue . process ( function ( job , done ) { console . log ( \"Received message\" , job . data . msg ); done (); }); sendQueue . add ({ msg : \"Hello\" }); Server B: JavaScript const Queue = require ( \"bull\" ); const sendQueue = new Queue ( \"Server A\" ); const receiveQueue = new Queue ( \"Server B\" ); receiveQueue . process ( function ( job , done ) { console . log ( \"Received message\" , job . data . msg ); done (); }); sendQueue . add ({ msg : \"World\" });","title":"\u6d88\u606f\u961f\u5217"},{"location":"docs/queue/patterns/#_2","text":"\u4e00\u79cd\u5e38\u89c1\u7684\u6a21\u5f0f\u662f\uff0c\u60a8\u6709\u4e00\u4e2a\u961f\u5217\u5904\u7406\u5668\u96c6\u7fa4\uff0c\u4ee5\u5c3d\u53ef\u80fd\u5feb\u7684\u901f\u5ea6\u5904\u7406\u4f5c\u4e1a\uff0c\u800c\u5176\u4ed6\u4e00\u4e9b\u670d\u52a1\u9700\u8981\u83b7\u53d6\u8be5\u5904\u7406\u5668\u7684\u7ed3\u679c\u5e76\u5bf9\u5176\u8fdb\u884c\u5904\u7406\uff0c\u53ef\u80fd\u4f1a\u5c06\u7ed3\u679c\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u3002 \u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u7684\u6700\u5065\u58ee\u548c\u53ef\u4f38\u7f29\u7684\u65b9\u6cd5\u662f\u5c06\u6807\u51c6\u4f5c\u4e1a\u961f\u5217\u4e0e\u6d88\u606f\u961f\u5217\u6a21\u5f0f\u7ed3\u5408\u8d77\u6765:\u670d\u52a1\u53ea\u9700\u6253\u5f00\u4f5c\u4e1a\u961f\u5217\u5e76\u5411\u5176\u6dfb\u52a0\u4f5c\u4e1a\uff0c\u5c31\u53ef\u4ee5\u5c06\u4f5c\u4e1a\u53d1\u9001\u5230\u96c6\u7fa4\uff0c\u96c6\u7fa4\u5c06\u4ee5\u5c3d\u53ef\u80fd\u5feb\u7684\u901f\u5ea6\u5f00\u59cb\u5904\u7406\u3002 \u6bcf\u5f53\u5728\u96c6\u7fa4\u4e2d\u5b8c\u6210\u4e00\u4e2a\u4f5c\u4e1a\u65f6\uff0c\u4e00\u6761\u6d88\u606f\u5c31\u4f1a\u8fde\u540c\u7ed3\u679c\u6570\u636e\u53d1\u9001\u5230\u4e00\u4e2a\u7ed3\u679c\u6d88\u606f\u961f\u5217\uff0c\u8fd9\u4e2a\u961f\u5217\u7531\u4e00\u4e9b\u5b58\u50a8\u7ed3\u679c\u5230\u6570\u636e\u5e93\u4e2d\u7684\u5176\u4ed6\u670d\u52a1\u8fdb\u884c\u4fa6\u542c\u3002","title":"\u8fd4\u56de\u5de5\u4f5c\u5b8c\u6210"},{"location":"docs/queue/patterns/#redis","text":"\u4e00\u4e2a\u6807\u51c6\u7684\u961f\u5217\u9700\u8981 3 \u4e2a\u8fde\u63a5\u5230 Redis \u670d\u52a1\u5668\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u91cd\u7528\u8fde\u63a5\u2014\u4f8b\u5982\u5728 Heroku \u4e2d\uff0c\u8fde\u63a5\u6570\u662f\u53d7\u9650\u5236\u7684\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7' Queue '\u6784\u9020\u51fd\u6570\u4e2d\u7684' createClient '\u9009\u9879\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002 \u6ce8: bclient \u8fde\u63a5 \u4e0d\u80fd\u88ab\u91cd\u7528 \uff0c\u6240\u4ee5\u4f60\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u8fde\u63a5\u6bcf\u6b21\u8c03\u7528\u3002 \u5ba2\u6237\u7aef\u548c\u8ba2\u9605\u8005\u8fde\u63a5\u53ef\u4ee5\u5171\u4eab\uff0c\u5f53\u961f\u5217\u5173\u95ed\u65f6\u4e0d\u4f1a\u5173\u95ed\u3002 \u5f53\u60a8\u5173\u95ed\u8fdb\u7a0b\u65f6\uff0c\u9996\u5148\u5173\u95ed\u961f\u5217\uff0c\u7136\u540e\u5173\u95ed\u5171\u4eab\u8fde\u63a5(\u5982\u679c\u5b83\u4eec\u662f\u5171\u4eab\u7684)\u3002 \u5982\u679c\u4f60\u4e0d\u5171\u4eab\u8fde\u63a5,\u4f46\u4ecd\u4f7f\u7528\u201ccreateClient\u201d\u505a\u4e00\u4e9b\u5b9a\u5236\u7684\u8fde\u63a5\u903b\u8f91,\u4f60\u53ef\u80fd\u4ecd\u7136\u9700\u8981\u60a8\u521b\u5efa\u7684\u6240\u6709\u8fde\u63a5\u7684\u5217\u8868,\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u624b\u52a8\u5173\u95ed\u540e,\u961f\u5217\u5173\u95ed,\u5982\u679c\u4f60\u9700\u8981\u4f18\u96c5\u7684\u5173\u95ed\u8fc7\u7a0b \u4e0d\u8981\u5728\u4f60\u521b\u5efa\u7684\u8fde\u63a5\u4e0a\u8bbe\u7f6e\u4e00\u4e2a\u201ckeyPrefix\u201d\uff0c\u5982\u679c\u4f60\u9700\u8981\u4e00\u4e2a\u952e\u524d\u7f00\uff0c\u4f7f\u7528 bull \u7684\u5185\u7f6e\u524d\u7f00\u7279\u6027 JavaScript const { REDIS_URL } = process . env ; const Redis = require ( \"ioredis\" ); let client ; let subscriber ; const opts = { // redisOpts here will contain at least a property of connectionName which will identify the queue based on its name createClient : function ( type , redisOpts ) { switch ( type ) { case \"client\" : if ( ! client ) { client = new Redis ( REDIS_URL , redisOpts ); } return client ; case \"subscriber\" : if ( ! subscriber ) { subscriber = new Redis ( REDIS_URL , redisOpts ); } return subscriber ; case \"bclient\" : return new Redis ( REDIS_URL , redisOpts ); default : throw new Error ( \"Unexpected connection type: \" , type ); } }, }; const queueFoo = new Queue ( \"foobar\" , opts ); const queueQux = new Queue ( \"quxbaz\" , opts );","title":"\u91cd\u7528 Redis \u8fde\u63a5"},{"location":"docs/queue/patterns/#redis_1","text":"Bull \u5185\u90e8\u51fd\u6570\u9700\u8981\u8de8\u4e0d\u540c\u952e\u7684\u539f\u5b50\u64cd\u4f5c\u3002 \u8fd9\u79cd\u884c\u4e3a\u6253\u7834\u4e86 Redis \u7684\u96c6\u7fa4\u914d\u7f6e\u89c4\u5219\u3002 \u4f46\u662f\uff0c\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u9002\u5f53\u7684 Bull \u524d\u7f00\u9009\u9879\u4f5c\u4e3a\u96c6\u7fa4\u201c\u6563\u5217\u6807\u7b7e\u201d\u6765\u4f7f\u7528\u96c6\u7fa4\u73af\u5883\u3002 \u54c8\u5e0c\u6807\u7b7e\u662f\u7528\u6765\u4fdd\u8bc1\u67d0\u4e9b\u952e\u88ab\u653e\u7f6e\u5728\u76f8\u540c\u7684\u54c8\u5e0c\u69fd\uff0c\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u54c8\u5e0c\u6807\u7b7e\u5728 redis \u96c6\u7fa4\u6559\u7a0b \u3002 \u6563\u5217\u6807\u8bb0\u7528\u62ec\u53f7\u5b9a\u4e49\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u952e\u5728\u62ec\u53f7\u5185\u6709\u4e00\u4e2a\u5b50\u5b57\u7b26\u4e32\uff0c\u5c06\u4f7f\u7528\u8be5\u5b50\u5b57\u7b26\u4e32\u6765\u786e\u5b9a\u8be5\u952e\u5c06\u88ab\u653e\u7f6e\u5728\u54ea\u4e2a\u54c8\u5e0c\u69fd\u4e2d\u3002 \u603b\u4e4b\uff0c\u4e3a\u4e86\u4f7f Bull \u4e0e Redis \u96c6\u7fa4\u517c\u5bb9\uff0c\u5728\u62ec\u53f7\u5185\u4f7f\u7528\u961f\u5217\u524d\u7f00\u3002 \u4f8b\u5982: JavaScript const queue = new Queue ( \"cluster\" , { prefix : \"{myprefix}\" , }); \u5982\u679c\u5728\u540c\u4e00\u4e2a\u96c6\u7fa4\u4e2d\u4f7f\u7528\u591a\u4e2a\u961f\u5217\uff0c\u5219\u5e94\u8be5\u4f7f\u7528\u4e0d\u540c\u7684\u524d\u7f00\uff0c\u4ee5\u4fbf\u5c06\u8fd9\u4e9b\u961f\u5217\u5747\u5300\u5730\u653e\u7f6e\u5728\u96c6\u7fa4\u8282\u70b9\u4e2d\u3002","title":"Redis \u96c6\u7fa4"},{"location":"docs/queue/patterns/#_3","text":"\u8981\u67e5\u770b\u8c03\u8bd5\u8bed\u53e5\uff0c\u8bbe\u7f6e\u6216\u6dfb\u52a0' bull '\u5230' NODE_DEBUG '\u73af\u5883\u53d8\u91cf: Bash export NODE_DEBUG = bull Bash NODE_DEBUG = bull node ./your-script.js","title":"\u8c03\u8bd5"},{"location":"docs/queue/patterns/#_4","text":"\u5f53\u91cd\u8bd5\u65f6\u5185\u7f6e\u7684\u56de\u9000\u7b56\u7565\u4e0d\u591f\u7528\u65f6\uff0c\u53ef\u4ee5\u5b9a\u4e49\u81ea\u5b9a\u4e49\u7b56\u7565\u3002 \u81ea\u5b9a\u4e49\u56de\u9000\u7b56\u7565\u7531\u961f\u5217\u4e0a\u7684\u51fd\u6570\u5b9a\u4e49\u3002 \u5df2\u5c1d\u8bd5\u5904\u7406\u4f5c\u4e1a\u7684\u6b21\u6570\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u8be5\u51fd\u6570\uff0c\u4f5c\u4e1a\u5931\u8d25\u7684\u9519\u8bef\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u8be5\u51fd\u6570\u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u5ef6\u8fdf\u91cd\u8bd5\u7684\u65f6\u95f4\uff0c0 \u8868\u793a\u7acb\u5373\u91cd\u8bd5\uff0c-1 \u8868\u793a\u7acb\u5373\u5931\u8d25\u3002 JavaScript const Queue = require ( \"bull\" ); const myQueue = new Queue ( \"Server B\" , { settings : { backoffStrategies : { jitter : function ( attemptsMade , err ) { return 5000 + Math . random () * 500 ; }, }, }, }); \u7136\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u5b9a\u4e49\u7684\u540d\u79f0\u5728\u4f5c\u4e1a\u4e2d\u6307\u5b9a\u65b0\u7684\u56de\u9000\u7b56\u7565: JavaScript myQueue . add ( { foo : \"bar\" }, { attempts : 3 , backoff : { type : \"jitter\" , }, } ); \u4f60\u53ef\u4ee5\u4e3a\u4f60\u7684\u7b56\u7565\u6307\u5b9a\u9009\u9879: JavaScript const Queue = require ( \"bull\" ); const myQueue = new Queue ( \"Server B\" , { settings : { backoffStrategies : { // truncated binary exponential backoff binaryExponential : function ( attemptsMade , err , options ) { // Options can be undefined, you need to handle it by yourself if ( ! options ) { options = {}; } const delay = options . delay || 1000 ; const truncate = options . truncate || 1000 ; console . error ({ attemptsMade , err , options }); return Math . round ( Math . random () * ( Math . pow ( 2 , Math . max ( attemptsMade , truncate )) - 1 ) * delay ); }, }, }, }); myQueue . add ( { foo : \"bar\" }, { attempts : 10 , backoff : { type : \"binaryExponential\" , options : { delay : 500 , truncate : 5 , }, }, } ); \u4f60\u53ef\u4ee5\u6839\u636e\u5de5\u4f5c\u4e2d\u51fa\u73b0\u7684\u9519\u8bef\u6765\u5236\u5b9a\u9000\u6b65\u7b56\u7565: JavaScript const Queue = require ( \"bull\" ); function MySpecificError () {} const myQueue = new Queue ( \"Server C\" , { settings : { backoffStrategies : { foo : function ( attemptsMade , err ) { if ( err instanceof MySpecificError ) { return 10000 ; } return 1000 ; }, }, }, }); myQueue . process ( function ( job , done ) { if ( job . data . msg === \"Specific Error\" ) { throw new MySpecificError (); } else { throw new Error (); } }); myQueue . add ( { msg : \"Hello\" }, { attempts : 3 , backoff : { type : \"foo\" , }, } ); myQueue . add ( { msg : \"Specific Error\" }, { attempts : 3 , backoff : { type : \"foo\" , }, } );","title":"\u81ea\u5b9a\u4e49\u8865\u507f\u7b56\u7565"},{"location":"docs/queue/patterns/#_5","text":"\u5982\u679c\u60a8\u5e0c\u671b\u5b9e\u9645\u7684\u4f5c\u4e1a\u5904\u7406\u5728\u4e00\u4e2a\u5355\u72ec\u7684 repo/\u670d\u52a1\u4e2d\u5b8c\u6210\uff0c\u800c\u4e0d\u662f\u5728\u8fd0\u884c' bull '\u7684\u5730\u65b9\uff0c\u8fd9\u4e2a\u6a21\u5f0f\u53ef\u80fd\u9002\u5408\u60a8\u3002 \u53ef\u4ee5\u4f7f\u7528\u51e0\u4e2a\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u624b\u52a8\u8f6c\u6362\u4f5c\u4e1a\u7684\u72b6\u6001\u3002 \u5411'waiting'\u961f\u5217\u6dfb\u52a0\u4f5c\u4e1a\u3002\u83b7\u53d6\u961f\u5217\u5e76\u8c03\u7528' add '\u3002 TypeScript import Queue from \"bull\" ; const queue = new Queue ({ limiter : { max : 5 , duration : 5000 , bounceBack : true , // important }, ... queueOptions , }); queue . add ({ random_attr : \"random_value\" }); \u5c06\u4efb\u52a1\u4ece'waiting'\u4e2d\u62c9\u51fa\u5e76\u79fb\u52a8\u5230'active'\u4e2d\u3002 TypeScript const job : Job = await queue . getNextJob (); \u5982\u679c\u51fa\u73b0\u9519\u8bef\uff0c\u5c06\u4f5c\u4e1a\u79fb\u52a8\u5230'failed'\u961f\u5217\u3002 TypeScript const ( nextJobData , nextJobId ) = await job . moveToFailed ({ message : 'Call to external service failed!' }, true ); \u5c06\u4f5c\u4e1a\u79fb\u52a8\u5230'completed'\u961f\u5217\u3002 TypeScript const ( nextJobData , nextJobId ) = await job . moveToCompleted ( 'succeeded' , true ); \u5982\u679c\u6709\u4efb\u52a1\u8fd4\u56de\uff0c\u5219\u8fd4\u56de\u4e0b\u4e00\u4e2a\u4efb\u52a1\u3002 TypeScript if ( nextJobdata ) { return Job . fromJSON ( queue , nextJobData , nextJobId ); } \u6ce8\u610f \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7531' getNextJob '\u6216' moveToCompleted '\u8fd4\u56de\u7684\u4f5c\u4e1a\u7684\u9501\u6301\u7eed\u65f6\u95f4\u662f 30 \u79d2\uff0c\u5982\u679c\u5b83\u82b1\u8d39\u7684\u65f6\u95f4\u8d85\u8fc7 30 \u79d2\uff0c\u4f5c\u4e1a\u5c06\u81ea\u52a8\u8fd4\u56de \u6807\u8bb0\u4e3a\u6682\u505c\uff0c\u5e76\u6839\u636e\u6700\u5927\u6682\u505c\u9009\u9879\u5c06\u79fb\u52a8\u56de\u7b49\u5f85\u72b6\u6001\u6216\u6807\u8bb0\u4e3a\u5931\u8d25\u3002 \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u60a8\u5fc5\u987b\u4f7f\u7528' job.extendLock(duration) '\uff0c\u4ee5\u4fbf\u5728\u9501\u8fc7\u671f\u524d\u7ed9\u60a8\u66f4\u591a\u7684\u65f6\u95f4\u3002 \u5efa\u8bae\u5728\u9501\u65f6\u95f4\u8fc7\u4e86\u4e00\u534a\u540e\u5ef6\u957f\u9501\u3002","title":"\u624b\u52a8\u6293\u53d6\u5de5\u4f5c"},{"location":"docs/queue/reference/","text":"\u961f\u5217 \u81ea\u5b9a\u4e49\u6216\u5171\u4eab IORedis \u8fde\u63a5 \u9ad8\u7ea7\u8bbe\u7f6e Queue#process Queue#add KeepJobs \u9009\u9879 \u8d85\u65f6\u7684\u5b9e\u73b0 \u91cd\u590d\u7684\u5de5\u4f5c\u7ec6\u8282 \u8865\u507f\u9009\u9879 Queue#addBulk Queue#pause Queue#isPaused Queue#resume Queue#whenCurrentJobsFinished Queue#count Queue#removeJobs Queue#empty Queue#close Queue#getJob Queue#getJobs Queue#getJobLogs Queue#getRepeatableJobs Queue#removeRepeatable Queue#removeRepeatableByKey Queue#getJobCounts Queue#getCompletedCount Queue#getFailedCount Queue#getDelayedCount Queue#getActiveCount Queue#getWaitingCount Queue#getPausedCount Getters Queue#getWaiting Queue#getActive Queue#getDelayed Queue#getCompleted Queue#getFailed Queue#getWorkers Queue#getMetrics Queue#clean Example Queue#obliterate \u793a\u4f8b \u5de5\u4f5c Job#progress Arguments Job#log Job#getState Job#update Job#remove Job#retry Job#discard Job#promote Job#finished Job#moveToCompleted Job#moveToFailed \u6d3b\u52a8 \u5168\u5c40\u4e8b\u4ef6 \u961f\u5217 TypeScript Queue ( queueName : string , url? : string , opts? : QueueOptions ) : Queue \u8fd9\u662f Queue \u6784\u9020\u51fd\u6570\u3002 \u5b83\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684 Queue \u6301\u4e45\u5316\u5728 Redis \u4e2d\u3002 \u6bcf\u6b21\u5b9e\u4f8b\u5316\u540c\u4e00\u4e2a\u961f\u5217\u65f6\uff0c\u5b83\u90fd\u4f1a\u5c1d\u8bd5\u5904\u7406\u4ee5\u524d\u672a\u5b8c\u6210\u4f1a\u8bdd\u4e2d\u53ef\u80fd\u5b58\u5728\u7684\u6240\u6709\u65e7\u4f5c\u4e1a\u3002 \u53ef\u9009\u7684 url \u53c2\u6570\uff0c\u5141\u8bb8\u6307\u5b9a\u4e00\u4e2a redis \u8fde\u63a5\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982: redis://mypassword@myredis.server.com:1234 TypeScript interface QueueOptions { createClient ? ( type : \"client\" | \"subscriber\" | \"bclient\" , config? : Redis.RedisOptions ) : Redis . Redis | Redis . Cluster ; limiter? : RateLimiter ; redis? : RedisOpts ; prefix? : string = \"bull\" ; // prefix for all queue keys. metrics? : MetricsOpts ; // Configure metrics defaultJobOptions? : JobOpts ; settings? : AdvancedSettings ; } TypeScript interface MetricsOpts { maxDataPoints? : number ; // Max number of data points to collect, granularity is fixed at one minute. } TypeScript interface RateLimiter { max : number ; // Max number of jobs processed duration : number ; // per duration in milliseconds bounceBack? : boolean = false ; // When jobs get rate limited, they stay in the waiting queue and are not moved to the delayed queue groupKey? : string ; // allows grouping of jobs with the specified key from the data object passed to the Queue#add (ex. \"network.handle\" ) } RedisOpts \u76f4\u63a5\u4f20\u9012\u7ed9 ioredis \u6784\u9020\u51fd\u6570\uff0c\u8bf7\u67e5\u770b ioredis \u4e86\u89e3\u8be6\u7ec6\u4fe1\u606f\u3002 \u6211\u4eec\u5728\u8fd9\u91cc\u53ea\u8bb0\u5f55\u6700\u91cd\u8981\u7684\u3002 TypeScript interface RedisOpts { port? : number = 6379 ; host? : string = localhost ; db? : number = 0 ; password? : string ; } TypeScript interface AdvancedSettings { lockDuration : number = 30000 ; // Key expiration time for job locks. lockRenewTime : number = 15000 ; // Interval on which to acquire the job lock stalledInterval : number = 30000 ; // How often check for stalled jobs (use 0 for never checking). maxStalledCount : number = 1 ; // Max amount of times a stalled job will be re-processed. guardInterval : number = 5000 ; // Poll interval for delayed jobs and added jobs. retryProcessDelay : number = 5000 ; // delay before processing next job in case of internal error. backoffStrategies : {}; // A set of custom backoff strategies keyed by name. drainDelay : number = 5 ; // A timeout for when the queue is in drained state (empty waiting for jobs). isSharedChildPool : boolean = false ; // enables multiple queues on the same instance of child pool to share the same instance. } \u81ea\u5b9a\u4e49\u6216\u5171\u4eab IORedis \u8fde\u63a5 createClient \u88ab\u4f20\u9012\u4e00\u4e2a type \u6765\u6307\u5b9a Bull \u8bd5\u56fe\u521b\u5efa\u7684\u8fde\u63a5\u7684\u7c7b\u578b\uff0c\u4ee5\u53ca Bull \u60f3\u8981\u4e3a\u8be5\u8fde\u63a5\u8bbe\u7f6e\u7684\u4e00\u4e9b\u9009\u9879\u3002 \u60a8\u53ef\u4ee5\u5c06\u63d0\u4f9b\u7684\u9009\u9879\u4e0e\u60a8\u81ea\u5df1\u7684\u4e00\u4e9b\u9009\u9879\u5408\u5e76\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a ioredis \u8fde\u63a5\u3002 \u5f53 type \u4e3a client \u6216 subscriber \u65f6\uff0c\u4f60\u53ef\u4ee5\u4e3a\u591a\u4e2a\u961f\u5217\u8fd4\u56de\u76f8\u540c\u7684\u8fde\u63a5\uff0c\u8fd9\u53ef\u4ee5\u51cf\u5c11\u4f60\u6253\u5f00\u5230 redis \u670d\u52a1\u5668\u7684\u8fde\u63a5\u6570\u3002 \u5f53\u961f\u5217\u5173\u95ed\u65f6\uff0cBull \u4e0d\u4f1a\u5173\u95ed\u6216\u65ad\u5f00\u8fd9\u4e9b\u8fde\u63a5\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u9700\u8981\u8ba9\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u505a\u4e00\u4e2a\u4f18\u96c5\u7684\u5173\u95ed\uff0c\u4f60\u9700\u8981\u4fdd\u7559\u5bf9\u8fd9\u4e9b\u8fde\u63a5\u7684\u5f15\u7528 Redis \u5728\u67d0\u4e2a\u5730\u65b9\u8fde\u63a5\uff0c\u5e76\u5728\u5173\u95ed\u6240\u6709\u961f\u5217\u540e\u65ad\u5f00\u8fde\u63a5\u3002 \u7136\u800c\uff0c bclient \u8fde\u63a5\u662f\u4e00\u4e2a \u963b\u585e\u5ba2\u6237\u7aef \uff0c\u7528\u4e8e\u6bcf\u6b21\u7b49\u5f85\u5355\u4e2a\u961f\u5217\u4e0a\u7684\u65b0\u4f5c\u4e1a\u3002 \u56e0\u6b64\uff0c\u5b83\u4e0d\u80fd\u88ab\u5171\u4eab\uff0c\u6bcf\u6b21\u90fd\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u8fde\u63a5\u3002 \u9ad8\u7ea7\u8bbe\u7f6e \u8b66\u544a: \u4e0d\u8981\u8986\u76d6\u8fd9\u4e9b\u9ad8\u7ea7\u8bbe\u7f6e\uff0c\u9664\u975e\u4f60\u4e86\u89e3\u961f\u5217\u7684\u5185\u90e8\u3002 lockDuration :\u83b7\u53d6\u4f5c\u4e1a\u9501\u7684\u65f6\u95f4\uff0c\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u3002 \u5982\u679c\u60a8\u53d1\u73b0\u60a8\u7684\u4f5c\u4e1a\u56e0\u4e3a\u60a8\u7684\u4f5c\u4e1a\u5904\u7406\u5668\u662f cpu \u5bc6\u96c6\u578b\u7684\u5e76\u4e14\u963b\u585e\u4e86\u4e8b\u4ef6\u5faa\u73af\u800c\u88ab\u6682\u505c\uff0c\u90a3\u4e48\u5c06\u8fd9\u4e2a\u503c\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u66f4\u9ad8\u7684\u503c(\u8bf7\u53c2\u9605\u4e0b\u9762\u5173\u4e8e\u6682\u505c\u4f5c\u4e1a\u7684\u8bf4\u660e)\u3002 \u5982\u679c\u60a8\u7684\u4f5c\u4e1a\u5bf9\u65f6\u95f4\u975e\u5e38\u654f\u611f\uff0c\u5219\u5c06\u6b64\u503c\u8bbe\u7f6e\u4e3a\u8f83\u4f4e\u7684\u503c\uff0c\u5e76\u4e14\u5982\u679c\u5b83\u4eec\u88ab\u91cd\u590d\u5904\u7406(\u56e0\u4e3a\u5b83\u4eec\u88ab\u9519\u8bef\u5730\u8ba4\u4e3a\u662f\u6682\u505c\u7684)\uff0c\u5219\u6b64\u503c\u53ef\u80fd\u662f\u53ef\u4ee5\u7684\u3002 lockRenewTime :\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u7684\u83b7\u53d6\u4f5c\u4e1a\u9501\u7684\u65f6\u95f4\u95f4\u9694\u3002 \u9ed8\u8ba4\u8bbe\u7f6e\u4e3a lockDuration / 2 \uff0c\u4ee5\u4fbf\u5728\u6bcf\u6b21\u4f5c\u4e1a\u9501\u5230\u671f\u524d\u63d0\u4f9b\u8db3\u591f\u7684\u7f13\u51b2\u533a\u6765\u66f4\u65b0\u9501\u3002 \u5b83\u4e0d\u5e94\u8be5\u8bbe\u7f6e\u5927\u4e8e lockDuration \u7684\u503c\u3002 \u5982\u679c\u53d1\u73b0\u4f5c\u4e1a\u7531\u4e8e cpu \u5bc6\u96c6\u578b\u4f5c\u4e1a\u5904\u7406\u5668\u529f\u80fd\u800c\u9677\u5165\u505c\u987f\uff0c\u5219\u5c06\u6b64\u503c\u8bbe\u7f6e\u4e3a\u8f83\u4f4e\u7684\u503c\u3002 \u4e0d\u8fc7\u4e00\u822c\u6765\u8bf4\uff0c\u4f60\u4e0d\u5e94\u8be5\u6539\u53d8\u8fd9\u4e2a\u3002 stalledInterval :\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u7684\u65f6\u95f4\u95f4\u9694\uff0c\u6bcf\u4e2a worker \u5c06\u5728\u6b64\u65f6\u95f4\u95f4\u9694\u5185\u68c0\u67e5\u6682\u505c\u7684\u4f5c\u4e1a(\u4f8b\u5982: \u5904\u4e8e \u6d3b\u52a8 \u72b6\u6001\u7684\u672a\u9501\u5b9a\u4f5c\u4e1a)\u3002 \u89c1\u4e0b\u9762\u5173\u4e8e\u505c\u6ede\u7684\u5de5\u4f5c\u7684\u8bf4\u660e\u3002 \u5982\u679c\u60a8\u7684\u4f5c\u4e1a\u5bf9\u65f6\u95f4\u975e\u5e38\u654f\u611f\uff0c\u8bf7\u5c06\u6b64\u503c\u8bbe\u7f6e\u4e3a\u8f83\u4f4e\u7684\u503c\u3002 \u5982\u679c\u4f60\u7684 Redis CPU \u4f7f\u7528\u7387\u5f88\u9ad8\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u66f4\u9ad8\u7684\u503c\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u68c0\u67e5\u53ef\u80fd\u4f1a\u5f88\u6602\u8d35\u3002 \u8bf7\u6ce8\u610f\uff0c\u56e0\u4e3a\u6bcf\u4e2a worker \u90fd\u5728\u81ea\u5df1\u7684\u65f6\u95f4\u95f4\u9694\u5185\u8fd0\u884c\u5b83\uff0c\u5e76\u68c0\u67e5\u6574\u4e2a\u961f\u5217\uff0c\u6240\u4ee5\u88ab\u6682\u505c\u7684\u4f5c\u4e1a\u5b9e\u9645\u8fd0\u884c\u7684\u9891\u7387\u8981\u6bd4\u8fd9\u4e2a\u503c\u6240\u6697\u793a\u7684\u9ad8\u5f97\u591a\u3002 maxStalledCount :\u5728\u51fa\u73b0 \u4f5c\u4e1a\u505c\u6b62\u8d85\u8fc7\u5141\u8bb8\u9650\u5236 \u9519\u8bef\u800c\u5bfc\u81f4\u4f5c\u4e1a\u6c38\u4e45\u5931\u8d25\u4e4b\u524d\uff0c\u4f5c\u4e1a\u53ef\u4ee5\u91cd\u65b0\u542f\u52a8\u7684\u6700\u5927\u6b21\u6570\u3002 \u8fd9\u88ab\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u503c 1 \uff0c\u5047\u8bbe\u6682\u505c\u7684\u4f5c\u4e1a\u975e\u5e38\u7f55\u89c1(\u53ea\u7531\u4e8e\u8fdb\u7a0b\u5d29\u6e83)\uff0c\u5e76\u4e14\u60a8\u5e0c\u671b\u66f4\u5b89\u5168\u4e00\u70b9\uff0c\u4e0d\u8981\u91cd\u65b0\u542f\u52a8\u4f5c\u4e1a\u3002 \u5982\u679c\u4f5c\u4e1a\u7ecf\u5e38\u5b95\u673a(\u4f8b\u5982\u8fdb\u7a0b\u7ecf\u5e38\u5d29\u6e83)\uff0c\u5219\u8bbe\u7f6e\u66f4\u9ad8\u7684\u503c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5c06\u5904\u7406\u4f5c\u4e1a\u52a0\u500d\u3002 guardInterval :\u5ef6\u8fdf\u4f5c\u4e1a watchdog \u8fd0\u884c\u7684\u65f6\u95f4\u95f4\u9694(\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d)\u3002 \u5f53\u8fd0\u884c\u591a\u4e2a\u5177\u6709\u5ef6\u8fdf\u4efb\u52a1\u7684\u5e76\u53d1 worker \u65f6\uff0c guardInterval \u7684\u9ed8\u8ba4\u503c\u4f1a\u5bfc\u81f4\u7f51\u7edc\u5e26\u5bbd\u3001cpu \u5360\u7528\u7387\u548c\u5185\u5b58\u5360\u7528\u7387\u51fa\u73b0\u5cf0\u503c\u3002 \u6bcf\u4e2a\u5e76\u53d1\u7684\u5de5\u4eba\u5c06\u8fd0\u884c\u5ef6\u8fdf\u7684\u5de5\u4f5c\u76d1\u7763\u7a0b\u5e8f\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u5c06\u8be5\u503c\u8bbe\u7f6e\u4e3a\u66f4\u9ad8\u7684\u503c\u3002 guardInterval = numberOfWorkers * 5000 \u3002 \u8bbe\u7f6e\u4e00\u4e2a\u8f83\u4f4e\u7684\u503c\uff0c\u5982\u679c\u4f60\u7684 Redis \u8fde\u63a5\u4e0d\u7a33\u5b9a\uff0c\u5ef6\u8fdf\u7684\u5de5\u4f5c\u6ca1\u6709\u88ab\u53ca\u65f6\u5904\u7406\u3002 retryProcessDelay :\u5728\u9047\u5230 Redis \u9519\u8bef\u65f6\uff0c\u5728\u5c1d\u8bd5\u5904\u7406\u4efb\u52a1\u4e4b\u524d\u7b49\u5f85\u7684\u65f6\u95f4(\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d)\u3002 \u5728\u4e0d\u7a33\u5b9a\u7684 Redis \u8fde\u63a5\u4e0a\u8bbe\u7f6e\u4e00\u4e2a\u8f83\u4f4e\u7684\u503c\u3002 backoffStrategies :\u4e00\u4e2a\u5305\u542b\u81ea\u5b9a\u4e49 backoffStrategies \u7684\u5bf9\u8c61\u3002 \u5bf9\u8c61\u4e2d\u7684\u952e\u662f\u7b56\u7565\u7684\u540d\u79f0\uff0c\u503c\u662f\u5e94\u8be5\u8fd4\u56de\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u7684\u5ef6\u8fdf\u7684\u51fd\u6570\u3002 \u5b8c\u6574\u7684\u4f8b\u5b50\u53c2\u89c1 Patterns \u3002 drainDelay :\u961f\u5217\u5904\u4e8e drain \u72b6\u6001(\u7a7a\u7b49\u5f85\u4f5c\u4e1a)\u65f6\u7684\u8d85\u65f6\u3002 \u5b83\u5728\u8c03\u7528 queue.getNextJob() \u65f6\u4f7f\u7528\uff0c\u5b83\u5c06\u628a\u5b83\u4f20\u9012\u7ed9 \u3002brpoplpush \u5728 Redis \u5ba2\u6237\u7aef\u3002 JavaScript backoffStrategies : { jitter : function () { return 5000 + Math . random () * 500 ; } } Queue#process TypeScript /** * \u53ef\u4ee5\u5c06\u8fd9\u4e9b\u51fd\u6570\u89c6\u4e3a\u91cd\u8f7d\u51fd\u6570\u3002 * \u7531\u4e8e\u65b9\u6cd5\u91cd\u8f7d\u4e0d\u5b58\u5728\u4e8e\u6587\u672c\u4e2d\uff0c\u516c\u725b\u901a\u8fc7\u68c0\u67e5\u53c2\u6570\u7684\u7c7b\u578b\u6765\u8bc6\u522b\u6240\u9700\u7684\u51fd\u6570\u8c03\u7528\u3002 * \u786e\u4fdd\u60a8\u7b26\u5408\u4ee5\u4e0b\u5b9a\u4e49\u7684\u6a21\u5f0f\u4e4b\u4e00\u3002 * * \u6ce8\u610f:\u5982\u679c\u672a\u6307\u5b9a\uff0c\u9ed8\u8ba4\u4e3a1\u3002 */ process ( processor : (( job , done ? ) => Promise < any > ) | string ) process ( concurrency : number , processor : (( job , done ? ) => Promise < any > ) | string ) process ( name : string , processor : (( job , done ? ) => Promise < any > ) | string ) process ( name : string , concurrency : number , processor : (( job , done ? ) => Promise < any > ) | string ) \u5b9a\u4e49\u7ed9\u5b9a\u961f\u5217\u4e2d\u7684\u4f5c\u4e1a\u7684\u5904\u7406\u51fd\u6570\u3002 \u6bcf\u6b21\u5c06\u4f5c\u4e1a\u653e\u5165\u961f\u5217\u65f6\uff0c\u90fd\u4f1a\u8c03\u7528\u56de\u8c03\u3002 \u5c06\u4f5c\u4e1a\u7684\u4e00\u4e2a\u5b9e\u4f8b\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u5b83\u3002 \u5982\u679c\u56de\u8c03\u7b7e\u540d\u5305\u542b\u7b2c\u4e8c\u4e2a\u53ef\u9009\u7684 done \u53c2\u6570\uff0c\u5219\u56de\u8c03\u5c06\u88ab\u4f20\u9012\u4e00\u4e2a done \u56de\u8c03\uff0c\u4ee5\u4fbf\u5728\u4f5c\u4e1a\u5b8c\u6210\u540e\u8c03\u7528\u3002 done \u56de\u8c03\u51fd\u6570\u53ef\u4ee5\u4e0e Error \u5b9e\u4f8b\u4e00\u8d77\u8c03\u7528\uff0c\u8868\u793a\u4f5c\u4e1a\u6ca1\u6709\u6210\u529f\u5b8c\u6210\uff0c\u6216\u8005\u5f53\u4f5c\u4e1a\u6210\u529f\u65f6\uff0c\u5c06\u7ed3\u679c\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570(\u4f8b\u5982: done(null, result); )\u3002 \u9519\u8bef\u5c06\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 failed \u4e8b\u4ef6;\u7ed3\u679c\u5c06\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 completed \u4e8b\u4ef6\u3002 \u4f46\u662f\uff0c\u5982\u679c\u56de\u8c03\u7b7e\u540d\u4e0d\u5305\u542b done \u53c2\u6570\uff0c\u5219\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a promise \u6765\u8868\u793a\u4f5c\u4e1a\u5b8c\u6210\u3002 \u5982\u679c promise \u88ab\u62d2\u7edd\uff0c\u5219\u9519\u8bef\u5c06\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 failed \u4e8b\u4ef6\u3002 \u5982\u679c\u5b83\u88ab\u89e3\u6790\uff0c\u5b83\u7684\u503c\u5c06\u662f \u5b8c\u6210 \u4e8b\u4ef6\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002 \u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u5e76\u53d1 \u53c2\u6570\u3002 \u7136\u540e\uff0cBull \u5c06\u6839\u636e\u8fd9\u4e2a\u6700\u5927\u503c\u5e76\u884c\u8c03\u7528\u5904\u7406\u7a0b\u5e8f\u3002 \u6d41\u7a0b\u529f\u80fd\u4e5f\u53ef\u4ee5\u58f0\u660e\u4e3a\u5355\u72ec\u7684\u6d41\u7a0b\u3002 \u8fd9\u5c06\u66f4\u597d\u5730\u5229\u7528\u53ef\u7528\u7684 CPU \u5185\u6838\uff0c\u5e76\u5e76\u884c\u8fd0\u884c\u4f5c\u4e1a\u3002 \u8fd9\u662f\u8fd0\u884c\u963b\u585e\u4ee3\u7801\u7684\u5b8c\u7f8e\u65b9\u5f0f\u3002 \u53ea\u9700\u6307\u5b9a\u5230\u5904\u7406\u5668\u6a21\u5757\u7684\u7edd\u5bf9\u8def\u5f84\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u50cf\u8fd9\u6837\u5bfc\u51fa process \u51fd\u6570\u7684\u6587\u4ef6: JavaScript // my-processor.js module . exports = function ( job ) { // do some job return value ; }; \u60a8\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u503c\u6216\u627f\u8bfa\u6765\u8868\u793a\u4f5c\u4e1a\u5df2\u7ecf\u5b8c\u6210\u3002 \u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a name \u53c2\u6570\uff0c\u4ee5\u4fbf\u6bcf\u4e2a\u961f\u5217\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a\u8fdb\u7a0b\u51fd\u6570\u3002 \u547d\u540d\u8fdb\u7a0b\u5c06\u53ea\u5904\u7406\u4e0e\u7ed9\u5b9a\u540d\u79f0\u5339\u914d\u7684\u4f5c\u4e1a\u3002 \u4f46\u662f\uff0c\u5982\u679c\u5728\u4e00\u4e2a Queue \u4e2d\u5b9a\u4e49\u4e86\u591a\u4e2a\u547d\u540d\u8fdb\u7a0b\u51fd\u6570\uff0c\u5219\u6bcf\u4e2a\u8fdb\u7a0b\u51fd\u6570\u5b9a\u4e49\u7684\u5e76\u53d1\u6027\u5c06\u5806\u53e0\u5230 Queue \u4e2d\u3002 \u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50: JavaScript /*** * \u5bf9\u4e8e\u6bcf\u4e2a\u547d\u540d\u7684\u5904\u7406\u5668\uff0c\u5e76\u53d1\u6027\u53e0\u52a0\u5728\u4e00\u8d77\uff0c\u56e0\u6b64\u8fd9\u4e09\u4e2a\u8fdb\u7a0b\u51fd\u6570\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u90fd\u53ef\u4ee5\u4ee5125\u5e76\u53d1\u6027\u8fd0\u884c\u3002 * \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u884c\u4e3a\uff0c\u60a8\u9700\u8981\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u81ea\u5df1\u7684\u961f\u5217\u3002 */ const loadBalancerQueue = new Queue ( \"loadbalancer\" ); loadBalancerQueue . process ( \"requestProfile\" , 100 , requestProfile ); loadBalancerQueue . process ( \"sendEmail\" , 25 , sendEmail ); loadBalancerQueue . process ( \"sendInvitation\" , 0 , sendInvite ); const profileQueue = new Queue ( \"profile\" ); // Max concurrency for requestProfile is 100 profileQueue . process ( \"requestProfile\" , 100 , requestProfile ); const emailQueue = new Queue ( \"email\" ); // Max concurrency for sendEmail is 25 emailQueue . process ( \"sendEmail\" , 25 , sendEmail ); \u6307\u5b9a * \u4f5c\u4e3a\u8fdb\u7a0b\u540d\u5c06\u4f7f\u5176\u6210\u4e3a\u6240\u6709\u5df2\u547d\u540d\u4f5c\u4e1a\u7684\u9ed8\u8ba4\u5904\u7406\u5668\u3002 \u5b83\u7ecf\u5e38\u7528\u4e8e\u4ece\u4e00\u4e2a\u8fdb\u7a0b\u51fd\u6570\u4e2d\u5904\u7406\u6240\u6709\u5df2\u547d\u540d\u7684\u4f5c\u4e1a: JavaScript const differentJobsQueue = new Queue ( \"differentJobsQueue\" ); differentJobsQueue . process ( \"*\" , processFunction ); differentJobsQueue . add ( \"jobA\" , data , opts ); differentJobsQueue . add ( \"jobB\" , data , opts ); \u6ce8\u610f: \u4e3a\u4e86\u786e\u5b9a\u662f\u5426\u901a\u8fc7\u8fd4\u56de promise \u6216\u8c03\u7528 done \u56de\u8c03\u6765\u901a\u77e5\u4efb\u52a1\u5b8c\u6210\uff0cBull \u4f1a\u67e5\u770b\u4f60\u4f20\u9012\u7ed9\u5b83\u7684\u56de\u8c03\u7684\u957f\u5ea6\u5c5e\u6027\u3002 \u6240\u4ee5\u8981\u5c0f\u5fc3\uff0c\u56e0\u4e3a\u4e0b\u9762\u7684\u65b9\u6cd5\u662f\u884c\u4e0d\u901a\u7684: JavaScript // THIS WON'T WORK!! queue . process ( function ( job , done ) { // Oops! done callback here! return Promise . resolve (); }); This, however, will: JavaScript queue . process ( function ( job ) { // No done callback here :) return Promise . resolve (); }); Queue#add TypeScript add ( name? : string , data : object , opts? : JobOpts ) : Promise < Job > \u521b\u5efa\u4e00\u4e2a\u65b0\u4f5c\u4e1a\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u3002 \u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u6267\u884c\u4f5c\u4e1a\uff0c\u5426\u5219\u5c06\u88ab\u653e\u5165\u961f\u5217\u5e76\u5c3d\u5feb\u6267\u884c\u3002 \u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a\u53ef\u9009\u540d\u79f0\uff0c\u4ee5\u4fbf\u53ea\u6709\u4e3a\u8be5\u540d\u79f0(\u4e5f\u79f0\u4e3a\u4f5c\u4e1a\u7c7b\u578b)\u5b9a\u4e49\u7684\u6d41\u7a0b\u51fd\u6570\u5c06\u5904\u7406\u8be5\u4f5c\u4e1a\u3002 \u6ce8\u610f: \u60a8\u9700\u8981\u4e3a\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u7684\u6240\u6709\u5df2\u547d\u540d\u4f5c\u4e1a\u5b9a\u4e49 processors \uff0c\u5426\u5219\u961f\u5217\u5c06\u62a5\u9519\u7ed9\u5b9a\u4f5c\u4e1a\u7f3a\u5c11\u4e00\u4e2a\u5904\u7406\u5668\uff0c\u9664\u975e\u60a8\u5728\u5b9a\u4e49\u5904\u7406\u5668\u65f6\u4f7f\u7528 * \u4f5c\u4e3a\u4f5c\u4e1a\u540d\u79f0\u3002 TypeScript interface JobOpts { priority : number ; // Optional priority value.ranges from 1 (highest priority) to MAX_INT (lowest priority). // Note that using priorities has a slight impact on performance, so do not use it if not required. delay : number ; // An amount of milliseconds to wait until this job can be processed. // Note that for accurate delays, both server and clients should have their clocks synchronized.[optional]. attempts : number ; // The total number of attempts to try the job until it completes. repeat : RepeatOpts ; // Repeat job according to a cron specification, see below for details. backoff : number | BackoffOpts ; // Backoff setting for automatic retries if the job fails, default strategy: `fixed`. // Needs `attempts` to be set. lifo : boolean ; // if true, adds the job to the right of the queue instead of the left (default false) timeout : number ; // The number of milliseconds after which the job should fail with a timeout error [optional] jobId : number | string ; // Override the job ID - by default, the job ID is a unique integer, but you can use this setting to override it. // If you use this option, it is up to you to ensure the jobId is unique. // If you attempt to add a job with an id that already exists, it will not be added (see caveat below about repeatable jobs). removeOnComplete : boolean | number | KeepJobs ; // If true, removes the job when it successfully completes. // A number specified the amount of jobs to keep. // Default behavior is to keep the job in the completed set. // See KeepJobs if using that interface instead. removeOnFail : boolean | number | KeepJobs ; // If true, removes the job when it fails after all attempts. // A number specified the amount of jobs to keep, see KeepJobs if using that interface instead. // Default behavior is to keep the job in the failed set. stackTraceLimit : number ; // Limits the amount of stack trace lines that will be recorded in the stacktrace. } KeepJobs \u9009\u9879 TypeScript /** * KeepJobs * * Specify which jobs to keep after finishing. * If both age and count are * specified, then the jobs kept will be the ones that satisfies both properties. */ export interface KeepJobs { /** * Maximum age in *seconds* for job to be kept. */ age? : number ; /** * Maximum count of jobs to be kept. */ count? : number ; } \u8d85\u65f6\u7684\u5b9e\u73b0 \u52a1\u5fc5\u6ce8\u610f\uff0c\u5728\u7ed9\u5b9a\u7684 \u8d85\u65f6 \u4e4b\u540e\uff0c\u4f5c\u4e1a\u4e0d\u4f1a\u88ab\u4e3b\u52a8\u505c\u6b62\u3002 \u4f5c\u4e1a\u88ab\u6807\u8bb0\u4e3a\u5931\u8d25\uff0c\u4f5c\u4e1a\u7684\u627f\u8bfa\u88ab\u62d2\u7edd\uff0c\u4f46\u662f Bull \u6ca1\u6709\u529e\u6cd5\u4ece\u5916\u90e8\u505c\u6b62\u5904\u7406\u5668\u529f\u80fd\u3002 \u5982\u679c\u60a8\u9700\u8981\u4e00\u4e2a\u4f5c\u4e1a\u5728\u8d85\u65f6\u540e\u505c\u6b62\u5904\u7406\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9b\u5efa\u8bae: \u8ba9\u4f5c\u4e1a\u672c\u8eab\u5b9a\u671f\u68c0\u67e5 job. getstatus() \uff0c\u5982\u679c\u72b6\u6001\u53d8\u4e3a failed \u5219\u9000\u51fa\u3002 \u5c06\u4f5c\u4e1a\u5b9e\u73b0\u4e3a\u4e00\u4e2a\u53ef\u53d6\u6d88\u627f\u8bfa_\u3002 \u5982\u679c\u5904\u7406\u5668 promise \u6709\u4e00\u4e2a cancel() \u65b9\u6cd5\uff0c\u5b83\u5c06\u5728\u4f5c\u4e1a\u8d85\u65f6\u65f6\u88ab\u8c03\u7528\uff0c\u4f5c\u4e1a\u53ef\u4ee5\u76f8\u5e94\u5730\u54cd\u5e94\u3002 (\u6ce8:\u76ee\u524d\u8fd9\u53ea\u9002\u7528\u4e8e\u539f\u751f\u627f\u8bfa\uff0c\u53c2\u89c1 #2203 \u5982\u679c\u60a8\u6709\u4e00\u79cd\u4ece\u5916\u90e8\u505c\u6b62\u4f5c\u4e1a\u7684\u65b9\u6cd5\uff0c\u90a3\u4e48\u4e3a failed \u4e8b\u4ef6\u6dfb\u52a0\u4e00\u4e2a\u4fa6\u542c\u5668\uff0c\u5e76\u5728\u90a3\u91cc\u6267\u884c\u8be5\u64cd\u4f5c\u3002 \u91cd\u590d\u7684\u5de5\u4f5c\u7ec6\u8282 TypeScript interface RepeatOpts { cron? : string ; // Cron string tz? : string ; // Timezone startDate? : Date | string | number ; // Start date when the repeat job should start repeating (only with cron). endDate? : Date | string | number ; // End date when the repeat job should stop repeating. limit? : number ; // Number of times the job should repeat at max. every? : number ; // Repeat every millis (cron setting cannot be used together with this setting.) count? : number ; // The start value for the repeat iteration count. readonly key : string ; // The key for the repeatable job metadata in Redis. } \u6dfb\u52a0\u5e26\u6709 repeat \u9009\u9879\u96c6\u7684\u4f5c\u4e1a\u5b9e\u9645\u4e0a\u4f1a\u7acb\u5373\u5b8c\u6210\u4e24\u4ef6\u4e8b\u60c5:\u521b\u5efa\u4e00\u4e2a Repeatable job \u914d\u7f6e\uff0c\u4ee5\u53ca\u5728\u4f5c\u4e1a\u7b2c\u4e00\u6b21\u8fd0\u884c\u65f6\u8c03\u5ea6\u4e00\u4e2a\u5e38\u89c4\u7684\u5ef6\u8fdf\u4f5c\u4e1a\u3002 \u7b2c\u4e00\u6b21\u8fd0\u884c\u5c06\u88ab\u5b89\u6392\u4e3a \u6309\u5c0f\u65f6 \u8fd0\u884c\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u60a8\u521b\u5efa\u4e86\u4e00\u4e2a\u5728 4:07 \u6bcf 15 \u5206\u949f\u91cd\u590d\u4e00\u6b21\u7684\u4f5c\u4e1a\uff0c\u90a3\u4e48\u8be5\u4f5c\u4e1a\u5c06\u9996\u5148\u5728 4:15 \u8fd0\u884c\uff0c\u7136\u540e\u662f 4:30\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u5982\u679c\u8bbe\u7f6e\u4e86 startDate \uff0c\u4f5c\u4e1a\u5c06\u4e0d\u4f1a\u5728 startDate \u4e4b\u524d\u8fd0\u884c\uff0c\u4f46\u4ecd\u7136\u4f1a\u6309\u5c0f\u65f6\u8fd0\u884c\u3002 \u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5982\u679c\u5c06 startDate \u8bbe\u7f6e\u4e3a\u67d0\u4e00\u5929\u7684 6:05\uff0c\u5373\u5f53\u5929\uff0c\u7b2c\u4e00\u4e2a\u4f5c\u4e1a\u5c06\u5728 6:15 \u8fd0\u884c\u3002 cron \u8868\u8fbe\u5f0f\u4f7f\u7528 cron-parser \u5e93\uff0c\u8bf7\u53c2\u9605\u5b83\u4eec\u7684\u6587\u6863\u4ee5\u4e86\u89e3\u66f4\u591a\u7ec6\u8282\u3002 \u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\u4e0d\u662f\u4f5c\u4e1a\uff0c\u56e0\u6b64\u5b83\u4e0d\u4f1a\u51fa\u73b0\u5728 getJobs() \u7b49\u65b9\u6cd5\u4e2d\u3002 \u8981\u7ba1\u7406\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\uff0c\u8bf7\u4f7f\u7528 getRepeatableJobs() \u6216\u7c7b\u4f3c\u7684\u65b9\u6cd5\u3002 \u8fd9\u4e5f\u610f\u5473\u7740\u91cd\u590d\u4f5c\u4e1a\u4e0d\u53c2\u4e0e\u8bc4\u4f30 jobId \u7684\u552f\u4e00\u6027\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u4e0d\u53ef\u91cd\u590d\u4f5c\u4e1a\u53ef\u4ee5\u5177\u6709\u4e0e\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\u76f8\u540c\u7684 jobId \uff0c\u800c\u4e24\u4e2a\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\u53ef\u4ee5\u5177\u6709\u76f8\u540c\u7684 jobId \uff0c\u53ea\u8981\u5b83\u4eec\u5177\u6709\u4e0d\u540c\u7684\u91cd\u590d\u9009\u9879\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u4ee5\u4e0b\u4ee3\u7801\u5c06\u5bfc\u81f4\u521b\u5efa\u4e09\u4e2a\u4efb\u52a1(\u4e00\u4e2a\u662f\u7acb\u5373\u7684\uff0c\u4e24\u4e2a\u662f\u5ef6\u8fdf\u7684): TypeScript await queue . add ({}, { jobId : \"example\" , repeat : { every : 5 * 1000 } }); await queue . add ({}, { jobId : \"example\" , repeat : { every : 5 * 1000 } }); // Will not be created, same repeat configuration await queue . add ({}, { jobId : \"example\" , repeat : { every : 10 * 1000 } }); // Will be created, different repeat configuration await queue . add ({}, { jobId : \"example\" }); // Will be created, no regular job with this id await queue . add ({}, { jobId : \"example\" }); // Will not be created, conflicts with previous regular job \u8865\u507f\u9009\u9879 TypeScript interface BackoffOpts { type : string ; // Backoff type, which can be either `fixed` or `exponential`. // A custom backoff strategy can also be specified in `backoffStrategies` on the queue settings. delay : number ; // Backoff delay, in milliseconds. } Queue#addBulk TypeScript addBulk ( jobs : { name? : string , data : object , opts? : JobOpts }[]) : Promise < Job [] > \u521b\u5efa\u4f5c\u4e1a\u6570\u7ec4\u5e76\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u3002 \u5b83\u4eec\u7684\u7b7e\u540d\u4e0e Queue#add \u76f8\u540c\u3002 Queue#pause TypeScript pause ( isLocal? : boolean , doNotWaitActive? : boolean ) : Promise \u8fd4\u56de\u4e00\u4e2a\u5728\u961f\u5217\u6682\u505c\u65f6\u89e3\u6790\u7684\u627f\u8bfa\u3002 \u6682\u505c\u7684\u961f\u5217\u5728\u6062\u590d\u4e4b\u524d\u4e0d\u4f1a\u5904\u7406\u65b0\u4f5c\u4e1a\uff0c\u4f46\u6b63\u5728\u5904\u7406\u7684\u5f53\u524d\u4f5c\u4e1a\u5c06\u7ee7\u7eed\uff0c\u76f4\u5230\u5b8c\u6210\u3002 \u6682\u505c\u53ef\u4ee5\u662f\u5168\u5c40\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u5c40\u90e8\u7684\u3002 \u5982\u679c\u662f\u5168\u5c40\u7684\uff0c\u90a3\u4e48\u7ed9\u5b9a\u961f\u5217\u7684\u6240\u6709\u961f\u5217\u5b9e\u4f8b\u4e2d\u7684\u6240\u6709 worker \u90fd\u5c06\u88ab\u6682\u505c\u3002 \u5982\u679c\u662f\u672c\u5730\u7684\uff0c\u5728\u5f53\u524d\u9501\u8fc7\u671f\u540e\uff0c\u53ea\u6709\u8fd9\u4e2a worker \u5c06\u505c\u6b62\u5904\u7406\u65b0\u4f5c\u4e1a\u3002 \u8fd9\u5bf9\u4e8e\u963b\u6b62\u5de5\u4eba\u5728\u5012\u95ed\u524d\u63a5\u53d7\u65b0\u5de5\u4f5c\u662f\u5f88\u6709\u7528\u7684\u3002 \u5982\u679c doNotWaitActive \u4e3a true \uff0c pause \u5c06\u4e0d\u4f1a\u7b49\u5f85\u4efb\u4f55\u6d3b\u52a8\u4f5c\u4e1a\u5b8c\u6210\u540e\u518d\u89e3\u6790\u3002 \u5426\u5219\uff0c pause _\u5c06\u7b49\u5f85\u6d3b\u52a8\u7684\u4f5c\u4e1a\u5b8c\u6210\u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1 Queue#whenCurrentJobsFinished \u3002 \u6682\u505c\u5df2\u7ecf\u6682\u505c\u7684\u961f\u5217\u4e0d\u4f1a\u505a\u4efb\u4f55\u4e8b\u60c5\u3002 Queue#isPaused TypeScript isPaused ( isLocal? : boolean ) : Promise < boolean > \u68c0\u67e5\u961f\u5217\u662f\u5426\u88ab\u6682\u505c\u3002 \u5982\u679c\u9700\u8981\u77e5\u9053\u8fd9\u4e2a\u7279\u5b9a\u5b9e\u4f8b\u662f\u5426\u6682\u505c\uff0c\u5219\u4f20\u9012 true\u3002 Queue#resume TypeScript resume ( isLocal? : boolean ) : Promise \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u8be5\u627f\u8bfa\u5728\u6682\u505c\u540e\u6062\u590d\u961f\u5217\u65f6\u89e3\u6790\u3002 \u7b80\u5386\u53ef\u4ee5\u662f\u672c\u5730\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u5168\u7403\u7684\u3002 \u5982\u679c\u662f\u5168\u5c40\u7684\uff0c\u90a3\u4e48\u7ed9\u5b9a\u961f\u5217\u7684\u6240\u6709\u961f\u5217\u5b9e\u4f8b\u4e2d\u7684\u6240\u6709 worker \u90fd\u5c06\u88ab\u6062\u590d\u3002 \u5982\u679c\u662f\u672c\u5730\u7684\uff0c\u53ea\u6709\u8fd9\u4e2a\u5de5\u4eba\u5c06\u88ab\u6062\u590d\u3002 \u6ce8\u610f\u5168\u5c40\u6062\u590d\u961f\u5217\u4e0d\u4f1a\u6062\u590d\u5df2\u7ecf\u5728\u672c\u5730\u6682\u505c\u7684 worker;\u5bf9\u4e8e\u8fd9\u4e9b\uff0c\u5fc5\u987b\u5728\u5b83\u4eec\u7684\u5b9e\u4f8b\u4e0a\u76f4\u63a5\u8c03\u7528 resume(true) \u3002 \u6062\u590d\u672a\u6682\u505c\u7684\u961f\u5217\u4e0d\u4f1a\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 Queue#whenCurrentJobsFinished TypeScript whenCurrentJobsFinished () : Promise < Void > \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u8be5\u627f\u8bfa\u5728\u5f53\u524d\u7531\u8be5\u5de5\u4eba\u5904\u7406\u7684\u6240\u6709\u4f5c\u4e1a\u5b8c\u6210\u65f6\u89e3\u51b3\u3002 Queue#count TypeScript count () : Promise < number > \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u8fd4\u56de\u961f\u5217\u4e2d\u7b49\u5f85\u6216\u5ef6\u8fdf\u7684\u4f5c\u4e1a\u6570\u91cf\u3002 \u7531\u4e8e\u53ef\u80fd\u6709\u5176\u4ed6\u8fdb\u7a0b\u6dfb\u52a0\u6216\u5904\u7406\u4f5c\u4e1a\uff0c\u56e0\u6b64\u8be5\u503c\u53ef\u80fd\u53ea\u5728\u975e\u5e38\u77ed\u7684\u65f6\u95f4\u5185\u4e3a\u771f\u3002 Queue#removeJobs TypeScript removeJobs ( pattern : string ) : Promise < void > \u5220\u9664 jobId \u5339\u914d\u7ed9\u5b9a\u6a21\u5f0f\u7684\u6240\u6709\u4f5c\u4e1a\u3002 \u6a21\u5f0f\u5fc5\u987b\u9075\u5faa redis \u5168\u5c40\u6837\u5f0f\u6a21\u5f0f(\u8bed\u6cd5)[https://redis.io/commands/keys] \u4f8b\u5b50: JavaScript myQueue . removeJobs ( \"?oo*\" ). then ( function () { console . log ( \"done removing jobs\" ); }); \u5c06\u5220\u9664 id \u4e3a: boo \u3001 foofighter \u7b49\u7684\u5de5\u4f5c\u3002 \u6ce8\u610f:\u6b64\u65b9\u6cd5\u4e0d\u5f71\u54cd\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\uff0c\u800c\u662f\u4f7f\u7528 removeRepeatable() \u6216 removeRepeatableByKey() Queue#empty TypeScript empty () : Promise \u6e05\u7a7a\u4e00\u4e2a\u961f\u5217\uff0c\u5220\u9664\u6240\u6709 input \u5217\u8868\u548c\u5173\u8054\u7684\u4f5c\u4e1a\u3002 \u6ce8\u610f:\u6b64\u51fd\u6570\u53ea\u5220\u9664\u6b63\u5728\u7b49\u5f85\u961f\u5217\u5904\u7406\u6216\u88ab\u5ef6\u8fdf\u5904\u7406\u7684\u4f5c\u4e1a\u3002 \u5904\u4e8e\u5176\u4ed6\u72b6\u6001(\u6d3b\u52a8\u3001\u5931\u8d25\u3001\u5df2\u5b8c\u6210)\u7684\u4f5c\u4e1a\u548c\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\u5c06\u4fdd\u6301\u4e0d\u53d8\uff0c\u53ef\u91cd\u590d\u4f5c\u4e1a\u5c06\u7ee7\u7eed\u6309\u8ba1\u5212\u521b\u5efa\u3002 \u8981\u5220\u9664\u5176\u4ed6\u4f5c\u4e1a\u72b6\u6001\uff0c\u8bf7\u4f7f\u7528 clean() \uff0c\u8981\u5220\u9664\u5305\u62ec Repeatable job \u914d\u7f6e\u5728\u5185\u7684\u6240\u6709\u914d\u7f6e\uff0c\u8bf7\u4f7f\u7528 obliterate() \u3002 Queue#close TypeScript close ( doNotWaitJobs? : boolean ) : Promise \u5173\u95ed\u5e95\u5c42 Redis \u5ba2\u6237\u7aef\u3002 \u4f7f\u7528\u5b83\u6765\u6267\u884c\u4e00\u4e2a\u4f18\u96c5\u7684\u5173\u95ed\u3002 JavaScript const Queue = require ( \"bull\" ); const queue = Queue ( \"example\" ); const after100 = _ . after ( 100 , function () { queue . close (). then ( function () { console . log ( \"done\" ); }); }); queue . on ( \"completed\" , after100 ); close \u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u8c03\u7528\uff0c\u4f46\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f:\u5982\u679c\u5728\u4f5c\u4e1a\u5904\u7406\u7a0b\u5e8f\u5185\u90e8\u8c03\u7528\uff0c\u5219\u961f\u5217\u76f4\u5230\u4f5c\u4e1a\u5904\u7406\u5b8c\u6bd5\u624d\u4f1a\u5173\u95ed\uff0c\u6240\u4ee5\u4e0b\u9762\u7684\u8bed\u53e5\u4e0d\u8d77\u4f5c\u7528: JavaScript queue . process ( function ( job , jobDone ) { handle ( job ); queue . close (). then ( jobDone ); }); \u76f8\u53cd,\u8fd9\u6837\u505a: JavaScript queue . process ( function ( job , jobDone ) { handle ( job ); queue . close (); jobDone (); }); Or this: JavaScript queue . process ( function ( job ) { queue . close (); return handle ( job ). then (...); }); Queue#getJob TypeScript getJob ( jobId : string ) : Promise < Job > \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u4e0e jobId \u53c2\u6570\u76f8\u5173\u8054\u7684\u4f5c\u4e1a\u5b9e\u4f8b\u3002 \u5982\u679c\u6307\u5b9a\u7684\u4f5c\u4e1a\u65e0\u6cd5\u627e\u5230\uff0c\u627f\u8bfa\u5c06\u88ab\u89e3\u6790\u4e3a null \u3002 \u6ce8\u610f: \u6b64\u65b9\u6cd5\u4e0d\u8fd4\u56de\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\uff0c\u53c2\u89c1 getRepeatableJobs() Queue#getJobs TypeScript getJobs ( types : JobStatus [], start? : number , end? : number , asc? : boolean ) : Promise < Job [] > \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u7ed9\u5b9a\u4f5c\u4e1a\u72b6\u6001\u7684\u4f5c\u4e1a\u5b9e\u4f8b\u6570\u7ec4\u3002 \u63d0\u4f9b\u4e86\u8303\u56f4\u548c\u987a\u5e8f\u7684\u53ef\u9009\u53c2\u6570\u3002 \u6ce8\u610f: start \u548c end \u9009\u9879\u9002\u7528\u4e8e\u6bcf\u4e2a \u4f5c\u4e1a\u72b6\u6001 \u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6709 10 \u4e2a\u4f5c\u4e1a\u5904\u4e8e completed \u72b6\u6001\uff0c10 \u4e2a\u4f5c\u4e1a\u5904\u4e8e active \u72b6\u6001\uff0c getJobs(['completed'\uff0c'active']\uff0c 0,4) \u5c06\u751f\u6210\u4e00\u4e2a\u5305\u542b 10 \u4e2a\u6761\u76ee\u7684\u6570\u7ec4\uff0c\u8868\u793a\u524d 5 \u4e2a\u5df2\u5b8c\u6210\u7684\u4f5c\u4e1a(0 - 4)\u548c\u524d 5 \u4e2a\u6d3b\u52a8\u7684\u4f5c\u4e1a(0 - 4)\u3002 \u6b64\u65b9\u6cd5\u4e0d\u8fd4\u56de\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\uff0c\u53c2\u89c1 getRepeatableJobs() Queue#getJobLogs TypeScript getJobLogs ( jobId : string , start? : number , end? : number ) : Promise < { logs : string [], count : number } > \u6839\u636e start \u548c end \u53c2\u6570\u8fd4\u56de\u5e26\u6709\u65e5\u5fd7\u7684\u5bf9\u8c61\u3002 \u8fd4\u56de\u7684\u8ba1\u6570\u503c\u662f\u65e5\u5fd7\u7684\u603b\u91cf\uff0c\u8fd9\u5bf9\u4e8e\u5b9e\u73b0\u5206\u9875\u5f88\u6709\u7528\u3002 Queue#getRepeatableJobs TypeScript getRepeatableJobs ( start? : number , end? : number , asc? : boolean ) : Promise < { key : string , name : string , id : number | string , endDate : Date , tz : string , cron : string , every : number , next : number }[] > \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u4e00\u4e2a\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\u6570\u7ec4\u3002 \u63d0\u4f9b\u4e86\u8303\u56f4\u548c\u987a\u5e8f\u7684\u53ef\u9009\u53c2\u6570\u3002 Queue#removeRepeatable TypeScript removeRepeatable ( name? : string , repeat : RepeatOpts ) : Promise < void > \u5220\u9664\u7ed9\u5b9a\u7684\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\u3002 RepeatOpts \u9700\u8981\u4e0e\u6dfb\u52a0\u4f5c\u4e1a\u65f6\u4f7f\u7528\u7684\u76f8\u540c\u3002 Queue#removeRepeatableByKey TypeScript removeRepeatableByKey ( key : string ) : Promise < void > \u901a\u8fc7\u952e\u5220\u9664\u7ed9\u5b9a\u7684\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\uff0c\u4ee5\u4fbf\u4e0d\u518d\u4e3a\u8be5\u7279\u5b9a\u914d\u7f6e\u5904\u7406\u4efb\u4f55\u53ef\u91cd\u590d\u4f5c\u4e1a\u3002 \u76ee\u524d\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u83b7\u5f97\u53ef\u91cd\u590d\u5de5\u4f5c\u7684 \u5173\u952e \u3002 \u5f53\u7b2c\u4e00\u6b21\u521b\u5efa\u4f5c\u4e1a\u65f6\uff0c queue.add() \u5c06\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709\u8be5\u4f5c\u4e1a\u952e\u503c\u7684\u4f5c\u4e1a\u5bf9\u8c61\uff0c\u4f60\u53ef\u4ee5\u5c06\u5176\u5b58\u50a8\u8d77\u6765\u4f9b\u4ee5\u540e\u4f7f\u7528: TypeScript const job = await queue . add ( \"remove\" , { example : \"data\" }, { repeat : { every : 1000 } }); // store job.opts.repeat.key somewhere... const repeatableKey = job . opts . repeat . key ; // ...then later... await queue . removeRepeatableByKey ( repeatableKey ); \u5426\u5219\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 getRepeatableJobs() \u5217\u51fa\u6240\u6709\u53ef\u91cd\u590d\u7684\u4f5c\u4e1a\uff0c\u5728\u5217\u8868\u4e2d\u627e\u5230\u4f60\u60f3\u8981\u5220\u9664\u7684\u4f5c\u4e1a\uff0c\u5e76\u4f7f\u7528\u90a3\u91cc\u7684\u952e\u6765\u5220\u9664\u5b83: TypeScript await queue . add ( \"remove\" , { example : \"data\" }, { jobId : \"findMe\" , repeat : { every : 1000 } }); // ... then later ... const repeatableJobs = await queue . getRepeatableJobs (); const foundJob = repeatableJobs . find (( job ) => job . id === \"findMe\" ); await queue . removeRepeatableByKey ( foundJob . key ); Queue#getJobCounts TypeScript getJobCounts () : Promise < JobCounts > \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u7ed9\u5b9a\u961f\u5217\u7684\u4f5c\u4e1a\u8ba1\u6570\u3002 ```typescript{ interface JobCounts { waiting: number, active: number, completed: number, failed: number, delayed: number } } Text Only --- ### Queue#getCompletedCount ```ts getCompletedCount() : Promise<number> \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u7ed9\u5b9a\u961f\u5217\u4e2d\u5df2\u5b8c\u6210\u7684\u4f5c\u4e1a\u8ba1\u6570\u3002 Queue#getFailedCount TypeScript getFailedCount () : Promise < number > \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u7ed9\u5b9a\u961f\u5217\u7684\u5931\u8d25\u4f5c\u4e1a\u8ba1\u6570\u3002 Queue#getDelayedCount TypeScript getDelayedCount () : Promise < number > \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u8be5\u627f\u8bfa\u5c06\u8fd4\u56de\u7ed9\u5b9a\u961f\u5217\u7684\u5ef6\u8fdf\u4f5c\u4e1a\u8ba1\u6570\u3002 Queue#getActiveCount TypeScript getActiveCount () : Promise < number > \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u8be5\u627f\u8bfa\u5c06\u8fd4\u56de\u7ed9\u5b9a\u961f\u5217\u7684\u6d3b\u52a8\u4f5c\u4e1a\u8ba1\u6570\u3002 Queue#getWaitingCount TypeScript getWaitingCount () : Promise < number > \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u7ed9\u5b9a\u961f\u5217\u7684\u7b49\u5f85\u4f5c\u4e1a\u8ba1\u6570\u3002 Queue#getPausedCount \u5f03\u7528 \u56e0\u4e3a\u53ea\u6709\u961f\u5217\u53ef\u4ee5\u6682\u505c\uff0c\u6240\u4ee5 getWaitingCount \u4f1a\u7ed9\u51fa\u76f8\u540c\u7684\u7ed3\u679c\u3002 TypeScript getPausedCount () : Promise < number > \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u8be5\u627f\u8bfa\u5c06\u8fd4\u56de\u7ed9\u5b9a\u961f\u5217\u7684\u6682\u505c\u4f5c\u4e1a\u8ba1\u6570\u3002 Getters \u4e0b\u9762\u7684\u65b9\u6cd5\u7528\u4e8e\u83b7\u53d6\u5904\u4e8e\u7279\u5b9a\u72b6\u6001\u7684\u4f5c\u4e1a\u3002 GetterOpts \u53ef\u4ee5\u7528\u4e8e\u4ece getter \u4e2d\u914d\u7f6e\u67d0\u4e9b\u65b9\u9762\u3002 TypeScript interface GetterOpts excludeData : boolean ; // Exclude the data field of the jobs. Queue#getWaiting TypeScript getWaiting ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u5f00\u59cb\u548c\u7ed3\u675f\u4e4b\u95f4\u7684\u7b49\u5f85\u4f5c\u4e1a\u3002 Queue#getActive TypeScript getActive ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u5f00\u59cb\u548c\u7ed3\u675f\u4e4b\u95f4\u7684\u6d3b\u52a8\u4f5c\u4e1a\u3002 Queue#getDelayed TypeScript getDelayed ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u5f00\u59cb\u548c\u7ed3\u675f\u4e4b\u95f4\u7684\u5ef6\u8fdf\u4f5c\u4e1a\u3002 Queue#getCompleted TypeScript getCompleted ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u5f00\u59cb\u548c\u7ed3\u675f\u4e4b\u95f4\u5df2\u5b8c\u6210\u7684\u4f5c\u4e1a\u3002 Queue#getFailed TypeScript getFailed ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u5f00\u59cb\u548c\u7ed3\u675f\u4e4b\u95f4\u5931\u8d25\u7684\u4f5c\u4e1a\u3002 Queue#getWorkers TypeScript getWorkers () : Promise < Array < Object >> \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u89e3\u6790\u4e3a\u5f53\u524d\u6b63\u5728\u4fa6\u542c\u6216\u5904\u7406\u4f5c\u4e1a\u7684\u6570\u7ec4\u5de5\u4f5c\u8005\u3002 \u8be5\u5bf9\u8c61\u5305\u542b\u4e0e Redis CLIENT LIST \u547d\u4ee4\u76f8\u540c\u7684\u5b57\u6bb5\u3002 Queue#getMetrics TypeScript getMetrics ( type : 'completed' | 'failed' , start = 0 , end = - 1 ) : Promise < { meta : { count : number ; prevTS : number ; prevCount : number ; }; data : number []; count : number ; } > \u8fd4\u56de\u4e00\u4e2a\u89e3\u6790\u4e3a Metrics \u5bf9\u8c61\u7684\u627f\u8bfa\u3002 Queue#clean TypeScript clean ( grace : number , status? : string , limit? : number ) : Promise < number [] > \u901a\u77e5\u961f\u5217\u5220\u9664\u5728\u5bbd\u9650\u671f\u4e4b\u5916\u521b\u5efa\u7684\u7279\u5b9a\u7c7b\u578b\u7684\u4f5c\u4e1a\u3002 Example JavaScript queue . on ( \"cleaned\" , function ( jobs , type ) { console . log ( \"Cleaned %s %s jobs\" , jobs . length , type ); }); //cleans all jobs that completed over 5 seconds ago. await queue . clean ( 5000 ); //clean all jobs that failed over 10 seconds ago. await queue . clean ( 10000 , \"failed\" ); Queue#obliterate TypeScript obliterate ( ops ?: { force : boolean }) : Promise < void > \u5b8c\u5168\u5220\u9664\u4e00\u4e2a\u961f\u5217\u53ca\u5176\u6240\u6709\u6570\u636e\u3002 \u4e3a\u4e86\u6d88\u9664\u961f\u5217\uff0c\u4e0d\u80fd\u6709\u6d3b\u52a8\u4f5c\u4e1a\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7528 force \u9009\u9879\u8986\u76d6\u8fd9\u79cd\u884c\u4e3a\u3002 \u6ce8\u610f:\u7531\u4e8e\u6b64\u64cd\u4f5c\u7684\u6301\u7eed\u65f6\u95f4\u53ef\u80fd\u76f8\u5f53\u957f\uff0c\u8fd9\u53d6\u51b3\u4e8e\u961f\u5217\u4e2d\u6709\u591a\u5c11\u4f5c\u4e1a\uff0c\u56e0\u6b64\u5b83\u4e0d\u662f\u81ea\u52a8\u6267\u884c\u7684\uff0c\u800c\u662f\u8fed\u4ee3\u6267\u884c\u7684\u3002 \u7136\u800c\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d\u961f\u5217\u603b\u662f\u6682\u505c\uff0c\u5982\u679c\u961f\u5217\u5728\u88ab\u53e6\u4e00\u4e2a\u811a\u672c\u5220\u9664\u671f\u95f4\u53d6\u6d88\u6682\u505c\uff0c\u5219\u8c03\u7528\u5c06\u5931\u8d25\uff0c\u5b83\u8bbe\u6cd5\u5220\u9664\u7684\u9879\u76ee\u5c06\u88ab\u5220\u9664\uff0c\u76f4\u5230\u5931\u8d25\u3002 \u793a\u4f8b JavaScript // Removes everything but only if there are no active jobs await queue . obliterate (); await queue . obliterate ({ force : true }); \u5de5\u4f5c \u4f5c\u4e1a\u5305\u62ec\u6267\u884c\u4f5c\u4e1a\u6240\u9700\u7684\u6240\u6709\u6570\u636e\uff0c\u4ee5\u53ca\u66f4\u65b0\u4f5c\u4e1a\u8fdb\u5ea6\u6240\u9700\u7684\u8fdb\u5ea6\u65b9\u6cd5\u3002 \u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\uff0c\u6700\u91cd\u8981\u7684\u5c5e\u6027\u662f Job#data \uff0c\u5b83\u5305\u62ec\u88ab\u4f20\u9012\u7ed9 Queue#add \u7684\u5bf9\u8c61\uff0c\u901a\u5e38\u7528\u4e8e\u6267\u884c\u4f5c\u4e1a\u3002 Job#progress TypeScript progress ( progress? : number | object ) : Promise \u5982\u679c\u4f7f\u7528\u53c2\u6570\u8c03\u7528\uff0c\u5219\u66f4\u65b0\u4f5c\u4e1a\u8fdb\u5ea6\u3002 \u5982\u679c\u6ca1\u6709\u53c2\u6570\u8c03\u7528\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u89e3\u6790\u5f53\u524d\u4f5c\u4e1a\u8fdb\u5ea6\u7684 promise\u3002 Arguments JavaScript progress : number ; Job progress number or any serializable object representing progress or similar . Job#log TypeScript log ( row : string ) : Promise \u5411\u6b64\u4f5c\u4e1a\u7279\u5b9a\u7684\u4f5c\u4e1a\u6dfb\u52a0\u65e5\u5fd7\u884c\u3002 \u53ef\u4ee5\u4f7f\u7528 Queue#getJobLogs \u68c0\u7d22\u65e5\u5fd7\u3002 Job#getState TypeScript getState () : Promise \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u89e3\u6790\u5f53\u524d\u4f5c\u4e1a\u7684\u72b6\u6001(\u5b8c\u6210\u3001\u5931\u8d25\u3001\u5ef6\u8fdf\u7b49)\u3002 \u53ef\u80fd\u7684\u8fd4\u56de\u6709:\u5b8c\u6210\u7684\u3001\u5931\u8d25\u7684\u3001\u5ef6\u8fdf\u7684\u3001\u6d3b\u52a8\u7684\u3001\u7b49\u5f85\u7684\u3001\u6682\u505c\u7684\u3001\u5361\u4f4f\u7684\u6216 null\u3002 \u8bf7\u6ce8\u610f\uff0c\u8be5\u65b9\u6cd5\u7684\u5b9e\u73b0\u6548\u7387\u4e0d\u662f\u5f88\u9ad8\uff0c\u4e5f\u4e0d\u662f\u539f\u5b50\u6027\u7684\u3002 \u5982\u679c\u60a8\u7684\u961f\u5217\u786e\u5b9e\u6709\u5927\u91cf\u4f5c\u4e1a\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u907f\u514d\u4f7f\u7528\u6b64\u65b9\u6cd5\u3002 Job#update TypeScript update ( data : object ) : Promise \u4f7f\u7528 give data \u5bf9\u8c61\u66f4\u65b0\u4e86\u4f5c\u4e1a\u6570\u636e\u5b57\u6bb5\u3002 Job#remove TypeScript remove () : Promise \u4ece\u961f\u5217\u548c\u53ef\u80fd\u5305\u542b\u4f5c\u4e1a\u7684\u4efb\u4f55\u5217\u8868\u4e2d\u5220\u9664\u4f5c\u4e1a\u3002 Job#retry TypeScript retry () : Promise \u91cd\u65b0\u8fd0\u884c\u5931\u8d25\u7684\u4f5c\u4e1a\u3002 \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u8be5\u627f\u8bfa\u5728\u4f5c\u4e1a\u8ba1\u5212\u91cd\u8bd5\u65f6\u89e3\u51b3\u3002 Job#discard TypeScript discard () : Promise \u5373\u4f7f attemptsMade \u5c0f\u4e8e job.attempts \uff0c\u4e5f\u786e\u4fdd\u4e0d\u518d\u8fd0\u884c\u6b64\u4f5c\u4e1a\u3002 Job#promote TypeScript promote () : Promise \u5c06\u5f53\u524d\u88ab \u5ef6\u8fdf \u7684\u4f5c\u4e1a\u63d0\u5347\u5230 \u7b49\u5f85 \u72b6\u6001\uff0c\u5e76\u5c3d\u5feb\u6267\u884c\u3002 Job#finished TypeScript finished () : Promise \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u8be5\u627f\u8bfa\u5728\u4efb\u52a1\u5b8c\u6210\u6216\u5931\u8d25\u65f6\u89e3\u6790\u6216\u62d2\u7edd\u3002 Job#moveToCompleted TypeScript moveToCompleted ( returnValue : any , ignoreLock : boolean , notFetch? : boolean ) : Promise < string [ Jobdata , JobId ] | null > \u5c06\u4f5c\u4e1a\u79fb\u52a8\u5230 \u5df2\u5b8c\u6210 \u961f\u5217\u3002 \u5c06\u4e00\u4e2a\u4f5c\u4e1a\u4ece waiting \u62c9\u5230 active \uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u4e0b\u4e00\u4e2a\u4f5c\u4e1a\u6570\u636e\u548c id \u7684\u5143\u7ec4\u3002 \u5982\u679c \u7b49\u5f85 \u961f\u5217\u4e2d\u6ca1\u6709\u4f5c\u4e1a\uff0c\u5219\u8fd4\u56de null\u3002 \u8bbe\u7f6e notFetch \u4e3a true \u4ee5\u907f\u514d\u9884\u53d6\u961f\u5217\u4e2d\u7684\u4e0b\u4e00\u4e2a\u4f5c\u4e1a\u3002 Job#moveToFailed TypeScript moveToFailed ( errorInfo : { message : string ; }, ignoreLock? : boolean ) : Promise < string [ Jobdata , JobId ] | null > \u5c06\u4f5c\u4e1a\u79fb\u52a8\u5230 \u5931\u8d25 \u961f\u5217\u3002 \u5c06\u4e00\u4e2a\u4f5c\u4e1a\u4ece waiting \u62c9\u5230 active \uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u4e0b\u4e00\u4e2a\u4f5c\u4e1a\u6570\u636e\u548c id \u7684\u5143\u7ec4\u3002 \u5982\u679c \u7b49\u5f85 \u961f\u5217\u4e2d\u6ca1\u6709\u4f5c\u4e1a\uff0c\u5219\u8fd4\u56de null\u3002 \u6d3b\u52a8 \u961f\u5217\u4e5f\u4f1a\u53d1\u51fa\u4e00\u4e9b\u6709\u7528\u7684\u4e8b\u4ef6: JavaScript . on ( 'error' , function ( error ) { // An error occured. }) . on ( 'waiting' , function ( jobId ) { // A Job is waiting to be processed as soon as a worker is idling. }); . on ( 'active' , function ( job , jobPromise ) { // A job has started. // You can use `jobPromise.cancel()`` to abort it. }) . on ( 'stalled' , function ( job ) { // A job has been marked as stalled. // This is useful for debugging job workers that crash or pause the event loop. }) . on ( 'lock-extension-failed' , function ( job , err ) { // A job failed to extend lock. // This will be useful to debug redis connection issues and jobs getting restarted because workers are not able to extend locks. }); . on ( 'progress' , function ( job , progress ) { // A job's progress was updated! }) . on ( 'completed' , function ( job , result ) { // A job successfully completed with a `result`. }) . on ( 'failed' , function ( job , err ) { // A job failed with reason `err`! }) . on ( 'paused' , function () { // The queue has been paused. }) . on ( 'resumed' , function ( job ) { // The queue has been resumed. }) . on ( 'cleaned' , function ( jobs , type ) { // Old jobs have been cleaned from the queue. `jobs` is an array of cleaned // jobs, and `type` is the type of jobs cleaned. }); . on ( 'drained' , function () { // Emitted every time the queue has processed all the waiting jobs (even if there can be some delayed jobs not yet processed) }); . on ( 'removed' , function ( job ) { // A job successfully removed. }); \u5168\u5c40\u4e8b\u4ef6 \u4e8b\u4ef6\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u672c\u5730\u7684\u2014\u2014\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u4eec\u53ea\u89e6\u53d1\u5728\u7ed9\u5b9a worker \u4e0a\u6ce8\u518c\u7684\u4fa6\u542c\u5668\u3002 \u5982\u679c\u4f60\u9700\u8981\u5168\u5c40\u76d1\u542c\u4e8b\u4ef6\uff0c\u4f8b\u5982\u6765\u81ea\u5176\u4ed6\u670d\u52a1\u5668\u7684\u4e8b\u4ef6\uff0c\u53ea\u9700\u5728\u4e8b\u4ef6\u524d\u52a0\u4e0a global: '' : JavaScript // Will listen locally, just to this queue... queue . on ( 'completed' , listener ) : // Will listen globally, to instances of this queue... queue . on ( 'global:completed' , listener ); \u5f53\u5904\u7406\u5168\u5c40\u4e8b\u4ef6\u65f6\uff0c\u5c40\u90e8\u4e8b\u4ef6\u5c06\u4e00\u4e2a Job \u5b9e\u4f8b\u4f20\u9012\u7ed9\u4e8b\u4ef6\u76d1\u542c\u5668\u56de\u8c03\uff0c\u6ce8\u610f\u5168\u5c40\u4e8b\u4ef6\u4f20\u9012\u7684\u662f\u4f5c\u4e1a\u7684 ID\u3002 \u5982\u679c\u4f60\u9700\u8981\u5728\u5168\u5c40\u76d1\u542c\u5668\u4e2d\u8bbf\u95ee Job \u5b9e\u4f8b\uff0c\u4f7f\u7528 Queue#getJob \u6765\u68c0\u7d22\u5b83\u3002 \u4f46\u662f\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u5982\u679c\u5728\u6dfb\u52a0\u4f5c\u4e1a\u65f6\u542f\u7528\u4e86 removeOnComplete \uff0c\u5219\u4f5c\u4e1a\u5728\u5b8c\u6210\u540e\u5c06\u4e0d\u518d\u53ef\u7528\u3002 \u5982\u679c\u60a8\u9700\u8981\u8bbf\u95ee\u4f5c\u4e1a\u5e76\u5728\u5b8c\u6210\u540e\u5220\u9664\u5b83\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 job #remove \u5728\u4fa6\u542c\u5668\u4e2d\u5220\u9664\u5b83\u3002 JavaScript // Local events pass the job instance... queue . on ( \"progress\" , function ( job , progress ) { console . log ( `Job ${ job . id } is ${ progress * 100 } % ready!` ); }); queue . on ( \"completed\" , function ( job , result ) { console . log ( `Job ${ job . id } completed! Result: ${ result } ` ); job . remove (); }); // ...whereas global events only pass the job ID: queue . on ( \"global:progress\" , function ( jobId , progress ) { console . log ( `Job ${ jobId } is ${ progress * 100 } % ready!` ); }); queue . on ( \"global:completed\" , function ( jobId , result ) { console . log ( `Job ${ jobId } completed! Result: ${ result } ` ); queue . getJob ( jobId ). then ( function ( job ) { job . remove (); }); });","title":"\u53c2\u8003"},{"location":"docs/queue/reference/#_1","text":"TypeScript Queue ( queueName : string , url? : string , opts? : QueueOptions ) : Queue \u8fd9\u662f Queue \u6784\u9020\u51fd\u6570\u3002 \u5b83\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684 Queue \u6301\u4e45\u5316\u5728 Redis \u4e2d\u3002 \u6bcf\u6b21\u5b9e\u4f8b\u5316\u540c\u4e00\u4e2a\u961f\u5217\u65f6\uff0c\u5b83\u90fd\u4f1a\u5c1d\u8bd5\u5904\u7406\u4ee5\u524d\u672a\u5b8c\u6210\u4f1a\u8bdd\u4e2d\u53ef\u80fd\u5b58\u5728\u7684\u6240\u6709\u65e7\u4f5c\u4e1a\u3002 \u53ef\u9009\u7684 url \u53c2\u6570\uff0c\u5141\u8bb8\u6307\u5b9a\u4e00\u4e2a redis \u8fde\u63a5\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982: redis://mypassword@myredis.server.com:1234 TypeScript interface QueueOptions { createClient ? ( type : \"client\" | \"subscriber\" | \"bclient\" , config? : Redis.RedisOptions ) : Redis . Redis | Redis . Cluster ; limiter? : RateLimiter ; redis? : RedisOpts ; prefix? : string = \"bull\" ; // prefix for all queue keys. metrics? : MetricsOpts ; // Configure metrics defaultJobOptions? : JobOpts ; settings? : AdvancedSettings ; } TypeScript interface MetricsOpts { maxDataPoints? : number ; // Max number of data points to collect, granularity is fixed at one minute. } TypeScript interface RateLimiter { max : number ; // Max number of jobs processed duration : number ; // per duration in milliseconds bounceBack? : boolean = false ; // When jobs get rate limited, they stay in the waiting queue and are not moved to the delayed queue groupKey? : string ; // allows grouping of jobs with the specified key from the data object passed to the Queue#add (ex. \"network.handle\" ) } RedisOpts \u76f4\u63a5\u4f20\u9012\u7ed9 ioredis \u6784\u9020\u51fd\u6570\uff0c\u8bf7\u67e5\u770b ioredis \u4e86\u89e3\u8be6\u7ec6\u4fe1\u606f\u3002 \u6211\u4eec\u5728\u8fd9\u91cc\u53ea\u8bb0\u5f55\u6700\u91cd\u8981\u7684\u3002 TypeScript interface RedisOpts { port? : number = 6379 ; host? : string = localhost ; db? : number = 0 ; password? : string ; } TypeScript interface AdvancedSettings { lockDuration : number = 30000 ; // Key expiration time for job locks. lockRenewTime : number = 15000 ; // Interval on which to acquire the job lock stalledInterval : number = 30000 ; // How often check for stalled jobs (use 0 for never checking). maxStalledCount : number = 1 ; // Max amount of times a stalled job will be re-processed. guardInterval : number = 5000 ; // Poll interval for delayed jobs and added jobs. retryProcessDelay : number = 5000 ; // delay before processing next job in case of internal error. backoffStrategies : {}; // A set of custom backoff strategies keyed by name. drainDelay : number = 5 ; // A timeout for when the queue is in drained state (empty waiting for jobs). isSharedChildPool : boolean = false ; // enables multiple queues on the same instance of child pool to share the same instance. }","title":"\u961f\u5217"},{"location":"docs/queue/reference/#ioredis","text":"createClient \u88ab\u4f20\u9012\u4e00\u4e2a type \u6765\u6307\u5b9a Bull \u8bd5\u56fe\u521b\u5efa\u7684\u8fde\u63a5\u7684\u7c7b\u578b\uff0c\u4ee5\u53ca Bull \u60f3\u8981\u4e3a\u8be5\u8fde\u63a5\u8bbe\u7f6e\u7684\u4e00\u4e9b\u9009\u9879\u3002 \u60a8\u53ef\u4ee5\u5c06\u63d0\u4f9b\u7684\u9009\u9879\u4e0e\u60a8\u81ea\u5df1\u7684\u4e00\u4e9b\u9009\u9879\u5408\u5e76\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a ioredis \u8fde\u63a5\u3002 \u5f53 type \u4e3a client \u6216 subscriber \u65f6\uff0c\u4f60\u53ef\u4ee5\u4e3a\u591a\u4e2a\u961f\u5217\u8fd4\u56de\u76f8\u540c\u7684\u8fde\u63a5\uff0c\u8fd9\u53ef\u4ee5\u51cf\u5c11\u4f60\u6253\u5f00\u5230 redis \u670d\u52a1\u5668\u7684\u8fde\u63a5\u6570\u3002 \u5f53\u961f\u5217\u5173\u95ed\u65f6\uff0cBull \u4e0d\u4f1a\u5173\u95ed\u6216\u65ad\u5f00\u8fd9\u4e9b\u8fde\u63a5\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u9700\u8981\u8ba9\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u505a\u4e00\u4e2a\u4f18\u96c5\u7684\u5173\u95ed\uff0c\u4f60\u9700\u8981\u4fdd\u7559\u5bf9\u8fd9\u4e9b\u8fde\u63a5\u7684\u5f15\u7528 Redis \u5728\u67d0\u4e2a\u5730\u65b9\u8fde\u63a5\uff0c\u5e76\u5728\u5173\u95ed\u6240\u6709\u961f\u5217\u540e\u65ad\u5f00\u8fde\u63a5\u3002 \u7136\u800c\uff0c bclient \u8fde\u63a5\u662f\u4e00\u4e2a \u963b\u585e\u5ba2\u6237\u7aef \uff0c\u7528\u4e8e\u6bcf\u6b21\u7b49\u5f85\u5355\u4e2a\u961f\u5217\u4e0a\u7684\u65b0\u4f5c\u4e1a\u3002 \u56e0\u6b64\uff0c\u5b83\u4e0d\u80fd\u88ab\u5171\u4eab\uff0c\u6bcf\u6b21\u90fd\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u8fde\u63a5\u3002","title":"\u81ea\u5b9a\u4e49\u6216\u5171\u4eab IORedis \u8fde\u63a5"},{"location":"docs/queue/reference/#_2","text":"\u8b66\u544a: \u4e0d\u8981\u8986\u76d6\u8fd9\u4e9b\u9ad8\u7ea7\u8bbe\u7f6e\uff0c\u9664\u975e\u4f60\u4e86\u89e3\u961f\u5217\u7684\u5185\u90e8\u3002 lockDuration :\u83b7\u53d6\u4f5c\u4e1a\u9501\u7684\u65f6\u95f4\uff0c\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u3002 \u5982\u679c\u60a8\u53d1\u73b0\u60a8\u7684\u4f5c\u4e1a\u56e0\u4e3a\u60a8\u7684\u4f5c\u4e1a\u5904\u7406\u5668\u662f cpu \u5bc6\u96c6\u578b\u7684\u5e76\u4e14\u963b\u585e\u4e86\u4e8b\u4ef6\u5faa\u73af\u800c\u88ab\u6682\u505c\uff0c\u90a3\u4e48\u5c06\u8fd9\u4e2a\u503c\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u66f4\u9ad8\u7684\u503c(\u8bf7\u53c2\u9605\u4e0b\u9762\u5173\u4e8e\u6682\u505c\u4f5c\u4e1a\u7684\u8bf4\u660e)\u3002 \u5982\u679c\u60a8\u7684\u4f5c\u4e1a\u5bf9\u65f6\u95f4\u975e\u5e38\u654f\u611f\uff0c\u5219\u5c06\u6b64\u503c\u8bbe\u7f6e\u4e3a\u8f83\u4f4e\u7684\u503c\uff0c\u5e76\u4e14\u5982\u679c\u5b83\u4eec\u88ab\u91cd\u590d\u5904\u7406(\u56e0\u4e3a\u5b83\u4eec\u88ab\u9519\u8bef\u5730\u8ba4\u4e3a\u662f\u6682\u505c\u7684)\uff0c\u5219\u6b64\u503c\u53ef\u80fd\u662f\u53ef\u4ee5\u7684\u3002 lockRenewTime :\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u7684\u83b7\u53d6\u4f5c\u4e1a\u9501\u7684\u65f6\u95f4\u95f4\u9694\u3002 \u9ed8\u8ba4\u8bbe\u7f6e\u4e3a lockDuration / 2 \uff0c\u4ee5\u4fbf\u5728\u6bcf\u6b21\u4f5c\u4e1a\u9501\u5230\u671f\u524d\u63d0\u4f9b\u8db3\u591f\u7684\u7f13\u51b2\u533a\u6765\u66f4\u65b0\u9501\u3002 \u5b83\u4e0d\u5e94\u8be5\u8bbe\u7f6e\u5927\u4e8e lockDuration \u7684\u503c\u3002 \u5982\u679c\u53d1\u73b0\u4f5c\u4e1a\u7531\u4e8e cpu \u5bc6\u96c6\u578b\u4f5c\u4e1a\u5904\u7406\u5668\u529f\u80fd\u800c\u9677\u5165\u505c\u987f\uff0c\u5219\u5c06\u6b64\u503c\u8bbe\u7f6e\u4e3a\u8f83\u4f4e\u7684\u503c\u3002 \u4e0d\u8fc7\u4e00\u822c\u6765\u8bf4\uff0c\u4f60\u4e0d\u5e94\u8be5\u6539\u53d8\u8fd9\u4e2a\u3002 stalledInterval :\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u7684\u65f6\u95f4\u95f4\u9694\uff0c\u6bcf\u4e2a worker \u5c06\u5728\u6b64\u65f6\u95f4\u95f4\u9694\u5185\u68c0\u67e5\u6682\u505c\u7684\u4f5c\u4e1a(\u4f8b\u5982: \u5904\u4e8e \u6d3b\u52a8 \u72b6\u6001\u7684\u672a\u9501\u5b9a\u4f5c\u4e1a)\u3002 \u89c1\u4e0b\u9762\u5173\u4e8e\u505c\u6ede\u7684\u5de5\u4f5c\u7684\u8bf4\u660e\u3002 \u5982\u679c\u60a8\u7684\u4f5c\u4e1a\u5bf9\u65f6\u95f4\u975e\u5e38\u654f\u611f\uff0c\u8bf7\u5c06\u6b64\u503c\u8bbe\u7f6e\u4e3a\u8f83\u4f4e\u7684\u503c\u3002 \u5982\u679c\u4f60\u7684 Redis CPU \u4f7f\u7528\u7387\u5f88\u9ad8\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u66f4\u9ad8\u7684\u503c\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u68c0\u67e5\u53ef\u80fd\u4f1a\u5f88\u6602\u8d35\u3002 \u8bf7\u6ce8\u610f\uff0c\u56e0\u4e3a\u6bcf\u4e2a worker \u90fd\u5728\u81ea\u5df1\u7684\u65f6\u95f4\u95f4\u9694\u5185\u8fd0\u884c\u5b83\uff0c\u5e76\u68c0\u67e5\u6574\u4e2a\u961f\u5217\uff0c\u6240\u4ee5\u88ab\u6682\u505c\u7684\u4f5c\u4e1a\u5b9e\u9645\u8fd0\u884c\u7684\u9891\u7387\u8981\u6bd4\u8fd9\u4e2a\u503c\u6240\u6697\u793a\u7684\u9ad8\u5f97\u591a\u3002 maxStalledCount :\u5728\u51fa\u73b0 \u4f5c\u4e1a\u505c\u6b62\u8d85\u8fc7\u5141\u8bb8\u9650\u5236 \u9519\u8bef\u800c\u5bfc\u81f4\u4f5c\u4e1a\u6c38\u4e45\u5931\u8d25\u4e4b\u524d\uff0c\u4f5c\u4e1a\u53ef\u4ee5\u91cd\u65b0\u542f\u52a8\u7684\u6700\u5927\u6b21\u6570\u3002 \u8fd9\u88ab\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u503c 1 \uff0c\u5047\u8bbe\u6682\u505c\u7684\u4f5c\u4e1a\u975e\u5e38\u7f55\u89c1(\u53ea\u7531\u4e8e\u8fdb\u7a0b\u5d29\u6e83)\uff0c\u5e76\u4e14\u60a8\u5e0c\u671b\u66f4\u5b89\u5168\u4e00\u70b9\uff0c\u4e0d\u8981\u91cd\u65b0\u542f\u52a8\u4f5c\u4e1a\u3002 \u5982\u679c\u4f5c\u4e1a\u7ecf\u5e38\u5b95\u673a(\u4f8b\u5982\u8fdb\u7a0b\u7ecf\u5e38\u5d29\u6e83)\uff0c\u5219\u8bbe\u7f6e\u66f4\u9ad8\u7684\u503c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5c06\u5904\u7406\u4f5c\u4e1a\u52a0\u500d\u3002 guardInterval :\u5ef6\u8fdf\u4f5c\u4e1a watchdog \u8fd0\u884c\u7684\u65f6\u95f4\u95f4\u9694(\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d)\u3002 \u5f53\u8fd0\u884c\u591a\u4e2a\u5177\u6709\u5ef6\u8fdf\u4efb\u52a1\u7684\u5e76\u53d1 worker \u65f6\uff0c guardInterval \u7684\u9ed8\u8ba4\u503c\u4f1a\u5bfc\u81f4\u7f51\u7edc\u5e26\u5bbd\u3001cpu \u5360\u7528\u7387\u548c\u5185\u5b58\u5360\u7528\u7387\u51fa\u73b0\u5cf0\u503c\u3002 \u6bcf\u4e2a\u5e76\u53d1\u7684\u5de5\u4eba\u5c06\u8fd0\u884c\u5ef6\u8fdf\u7684\u5de5\u4f5c\u76d1\u7763\u7a0b\u5e8f\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u5c06\u8be5\u503c\u8bbe\u7f6e\u4e3a\u66f4\u9ad8\u7684\u503c\u3002 guardInterval = numberOfWorkers * 5000 \u3002 \u8bbe\u7f6e\u4e00\u4e2a\u8f83\u4f4e\u7684\u503c\uff0c\u5982\u679c\u4f60\u7684 Redis \u8fde\u63a5\u4e0d\u7a33\u5b9a\uff0c\u5ef6\u8fdf\u7684\u5de5\u4f5c\u6ca1\u6709\u88ab\u53ca\u65f6\u5904\u7406\u3002 retryProcessDelay :\u5728\u9047\u5230 Redis \u9519\u8bef\u65f6\uff0c\u5728\u5c1d\u8bd5\u5904\u7406\u4efb\u52a1\u4e4b\u524d\u7b49\u5f85\u7684\u65f6\u95f4(\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d)\u3002 \u5728\u4e0d\u7a33\u5b9a\u7684 Redis \u8fde\u63a5\u4e0a\u8bbe\u7f6e\u4e00\u4e2a\u8f83\u4f4e\u7684\u503c\u3002 backoffStrategies :\u4e00\u4e2a\u5305\u542b\u81ea\u5b9a\u4e49 backoffStrategies \u7684\u5bf9\u8c61\u3002 \u5bf9\u8c61\u4e2d\u7684\u952e\u662f\u7b56\u7565\u7684\u540d\u79f0\uff0c\u503c\u662f\u5e94\u8be5\u8fd4\u56de\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u7684\u5ef6\u8fdf\u7684\u51fd\u6570\u3002 \u5b8c\u6574\u7684\u4f8b\u5b50\u53c2\u89c1 Patterns \u3002 drainDelay :\u961f\u5217\u5904\u4e8e drain \u72b6\u6001(\u7a7a\u7b49\u5f85\u4f5c\u4e1a)\u65f6\u7684\u8d85\u65f6\u3002 \u5b83\u5728\u8c03\u7528 queue.getNextJob() \u65f6\u4f7f\u7528\uff0c\u5b83\u5c06\u628a\u5b83\u4f20\u9012\u7ed9 \u3002brpoplpush \u5728 Redis \u5ba2\u6237\u7aef\u3002 JavaScript backoffStrategies : { jitter : function () { return 5000 + Math . random () * 500 ; } }","title":"\u9ad8\u7ea7\u8bbe\u7f6e"},{"location":"docs/queue/reference/#queueprocess","text":"TypeScript /** * \u53ef\u4ee5\u5c06\u8fd9\u4e9b\u51fd\u6570\u89c6\u4e3a\u91cd\u8f7d\u51fd\u6570\u3002 * \u7531\u4e8e\u65b9\u6cd5\u91cd\u8f7d\u4e0d\u5b58\u5728\u4e8e\u6587\u672c\u4e2d\uff0c\u516c\u725b\u901a\u8fc7\u68c0\u67e5\u53c2\u6570\u7684\u7c7b\u578b\u6765\u8bc6\u522b\u6240\u9700\u7684\u51fd\u6570\u8c03\u7528\u3002 * \u786e\u4fdd\u60a8\u7b26\u5408\u4ee5\u4e0b\u5b9a\u4e49\u7684\u6a21\u5f0f\u4e4b\u4e00\u3002 * * \u6ce8\u610f:\u5982\u679c\u672a\u6307\u5b9a\uff0c\u9ed8\u8ba4\u4e3a1\u3002 */ process ( processor : (( job , done ? ) => Promise < any > ) | string ) process ( concurrency : number , processor : (( job , done ? ) => Promise < any > ) | string ) process ( name : string , processor : (( job , done ? ) => Promise < any > ) | string ) process ( name : string , concurrency : number , processor : (( job , done ? ) => Promise < any > ) | string ) \u5b9a\u4e49\u7ed9\u5b9a\u961f\u5217\u4e2d\u7684\u4f5c\u4e1a\u7684\u5904\u7406\u51fd\u6570\u3002 \u6bcf\u6b21\u5c06\u4f5c\u4e1a\u653e\u5165\u961f\u5217\u65f6\uff0c\u90fd\u4f1a\u8c03\u7528\u56de\u8c03\u3002 \u5c06\u4f5c\u4e1a\u7684\u4e00\u4e2a\u5b9e\u4f8b\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u5b83\u3002 \u5982\u679c\u56de\u8c03\u7b7e\u540d\u5305\u542b\u7b2c\u4e8c\u4e2a\u53ef\u9009\u7684 done \u53c2\u6570\uff0c\u5219\u56de\u8c03\u5c06\u88ab\u4f20\u9012\u4e00\u4e2a done \u56de\u8c03\uff0c\u4ee5\u4fbf\u5728\u4f5c\u4e1a\u5b8c\u6210\u540e\u8c03\u7528\u3002 done \u56de\u8c03\u51fd\u6570\u53ef\u4ee5\u4e0e Error \u5b9e\u4f8b\u4e00\u8d77\u8c03\u7528\uff0c\u8868\u793a\u4f5c\u4e1a\u6ca1\u6709\u6210\u529f\u5b8c\u6210\uff0c\u6216\u8005\u5f53\u4f5c\u4e1a\u6210\u529f\u65f6\uff0c\u5c06\u7ed3\u679c\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570(\u4f8b\u5982: done(null, result); )\u3002 \u9519\u8bef\u5c06\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 failed \u4e8b\u4ef6;\u7ed3\u679c\u5c06\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 completed \u4e8b\u4ef6\u3002 \u4f46\u662f\uff0c\u5982\u679c\u56de\u8c03\u7b7e\u540d\u4e0d\u5305\u542b done \u53c2\u6570\uff0c\u5219\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a promise \u6765\u8868\u793a\u4f5c\u4e1a\u5b8c\u6210\u3002 \u5982\u679c promise \u88ab\u62d2\u7edd\uff0c\u5219\u9519\u8bef\u5c06\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 failed \u4e8b\u4ef6\u3002 \u5982\u679c\u5b83\u88ab\u89e3\u6790\uff0c\u5b83\u7684\u503c\u5c06\u662f \u5b8c\u6210 \u4e8b\u4ef6\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002 \u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u5e76\u53d1 \u53c2\u6570\u3002 \u7136\u540e\uff0cBull \u5c06\u6839\u636e\u8fd9\u4e2a\u6700\u5927\u503c\u5e76\u884c\u8c03\u7528\u5904\u7406\u7a0b\u5e8f\u3002 \u6d41\u7a0b\u529f\u80fd\u4e5f\u53ef\u4ee5\u58f0\u660e\u4e3a\u5355\u72ec\u7684\u6d41\u7a0b\u3002 \u8fd9\u5c06\u66f4\u597d\u5730\u5229\u7528\u53ef\u7528\u7684 CPU \u5185\u6838\uff0c\u5e76\u5e76\u884c\u8fd0\u884c\u4f5c\u4e1a\u3002 \u8fd9\u662f\u8fd0\u884c\u963b\u585e\u4ee3\u7801\u7684\u5b8c\u7f8e\u65b9\u5f0f\u3002 \u53ea\u9700\u6307\u5b9a\u5230\u5904\u7406\u5668\u6a21\u5757\u7684\u7edd\u5bf9\u8def\u5f84\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u50cf\u8fd9\u6837\u5bfc\u51fa process \u51fd\u6570\u7684\u6587\u4ef6: JavaScript // my-processor.js module . exports = function ( job ) { // do some job return value ; }; \u60a8\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u503c\u6216\u627f\u8bfa\u6765\u8868\u793a\u4f5c\u4e1a\u5df2\u7ecf\u5b8c\u6210\u3002 \u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a name \u53c2\u6570\uff0c\u4ee5\u4fbf\u6bcf\u4e2a\u961f\u5217\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a\u8fdb\u7a0b\u51fd\u6570\u3002 \u547d\u540d\u8fdb\u7a0b\u5c06\u53ea\u5904\u7406\u4e0e\u7ed9\u5b9a\u540d\u79f0\u5339\u914d\u7684\u4f5c\u4e1a\u3002 \u4f46\u662f\uff0c\u5982\u679c\u5728\u4e00\u4e2a Queue \u4e2d\u5b9a\u4e49\u4e86\u591a\u4e2a\u547d\u540d\u8fdb\u7a0b\u51fd\u6570\uff0c\u5219\u6bcf\u4e2a\u8fdb\u7a0b\u51fd\u6570\u5b9a\u4e49\u7684\u5e76\u53d1\u6027\u5c06\u5806\u53e0\u5230 Queue \u4e2d\u3002 \u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50: JavaScript /*** * \u5bf9\u4e8e\u6bcf\u4e2a\u547d\u540d\u7684\u5904\u7406\u5668\uff0c\u5e76\u53d1\u6027\u53e0\u52a0\u5728\u4e00\u8d77\uff0c\u56e0\u6b64\u8fd9\u4e09\u4e2a\u8fdb\u7a0b\u51fd\u6570\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u90fd\u53ef\u4ee5\u4ee5125\u5e76\u53d1\u6027\u8fd0\u884c\u3002 * \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u884c\u4e3a\uff0c\u60a8\u9700\u8981\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u81ea\u5df1\u7684\u961f\u5217\u3002 */ const loadBalancerQueue = new Queue ( \"loadbalancer\" ); loadBalancerQueue . process ( \"requestProfile\" , 100 , requestProfile ); loadBalancerQueue . process ( \"sendEmail\" , 25 , sendEmail ); loadBalancerQueue . process ( \"sendInvitation\" , 0 , sendInvite ); const profileQueue = new Queue ( \"profile\" ); // Max concurrency for requestProfile is 100 profileQueue . process ( \"requestProfile\" , 100 , requestProfile ); const emailQueue = new Queue ( \"email\" ); // Max concurrency for sendEmail is 25 emailQueue . process ( \"sendEmail\" , 25 , sendEmail ); \u6307\u5b9a * \u4f5c\u4e3a\u8fdb\u7a0b\u540d\u5c06\u4f7f\u5176\u6210\u4e3a\u6240\u6709\u5df2\u547d\u540d\u4f5c\u4e1a\u7684\u9ed8\u8ba4\u5904\u7406\u5668\u3002 \u5b83\u7ecf\u5e38\u7528\u4e8e\u4ece\u4e00\u4e2a\u8fdb\u7a0b\u51fd\u6570\u4e2d\u5904\u7406\u6240\u6709\u5df2\u547d\u540d\u7684\u4f5c\u4e1a: JavaScript const differentJobsQueue = new Queue ( \"differentJobsQueue\" ); differentJobsQueue . process ( \"*\" , processFunction ); differentJobsQueue . add ( \"jobA\" , data , opts ); differentJobsQueue . add ( \"jobB\" , data , opts ); \u6ce8\u610f: \u4e3a\u4e86\u786e\u5b9a\u662f\u5426\u901a\u8fc7\u8fd4\u56de promise \u6216\u8c03\u7528 done \u56de\u8c03\u6765\u901a\u77e5\u4efb\u52a1\u5b8c\u6210\uff0cBull \u4f1a\u67e5\u770b\u4f60\u4f20\u9012\u7ed9\u5b83\u7684\u56de\u8c03\u7684\u957f\u5ea6\u5c5e\u6027\u3002 \u6240\u4ee5\u8981\u5c0f\u5fc3\uff0c\u56e0\u4e3a\u4e0b\u9762\u7684\u65b9\u6cd5\u662f\u884c\u4e0d\u901a\u7684: JavaScript // THIS WON'T WORK!! queue . process ( function ( job , done ) { // Oops! done callback here! return Promise . resolve (); }); This, however, will: JavaScript queue . process ( function ( job ) { // No done callback here :) return Promise . resolve (); });","title":"Queue#process"},{"location":"docs/queue/reference/#queueadd","text":"TypeScript add ( name? : string , data : object , opts? : JobOpts ) : Promise < Job > \u521b\u5efa\u4e00\u4e2a\u65b0\u4f5c\u4e1a\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u3002 \u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u6267\u884c\u4f5c\u4e1a\uff0c\u5426\u5219\u5c06\u88ab\u653e\u5165\u961f\u5217\u5e76\u5c3d\u5feb\u6267\u884c\u3002 \u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a\u53ef\u9009\u540d\u79f0\uff0c\u4ee5\u4fbf\u53ea\u6709\u4e3a\u8be5\u540d\u79f0(\u4e5f\u79f0\u4e3a\u4f5c\u4e1a\u7c7b\u578b)\u5b9a\u4e49\u7684\u6d41\u7a0b\u51fd\u6570\u5c06\u5904\u7406\u8be5\u4f5c\u4e1a\u3002 \u6ce8\u610f: \u60a8\u9700\u8981\u4e3a\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u7684\u6240\u6709\u5df2\u547d\u540d\u4f5c\u4e1a\u5b9a\u4e49 processors \uff0c\u5426\u5219\u961f\u5217\u5c06\u62a5\u9519\u7ed9\u5b9a\u4f5c\u4e1a\u7f3a\u5c11\u4e00\u4e2a\u5904\u7406\u5668\uff0c\u9664\u975e\u60a8\u5728\u5b9a\u4e49\u5904\u7406\u5668\u65f6\u4f7f\u7528 * \u4f5c\u4e3a\u4f5c\u4e1a\u540d\u79f0\u3002 TypeScript interface JobOpts { priority : number ; // Optional priority value.ranges from 1 (highest priority) to MAX_INT (lowest priority). // Note that using priorities has a slight impact on performance, so do not use it if not required. delay : number ; // An amount of milliseconds to wait until this job can be processed. // Note that for accurate delays, both server and clients should have their clocks synchronized.[optional]. attempts : number ; // The total number of attempts to try the job until it completes. repeat : RepeatOpts ; // Repeat job according to a cron specification, see below for details. backoff : number | BackoffOpts ; // Backoff setting for automatic retries if the job fails, default strategy: `fixed`. // Needs `attempts` to be set. lifo : boolean ; // if true, adds the job to the right of the queue instead of the left (default false) timeout : number ; // The number of milliseconds after which the job should fail with a timeout error [optional] jobId : number | string ; // Override the job ID - by default, the job ID is a unique integer, but you can use this setting to override it. // If you use this option, it is up to you to ensure the jobId is unique. // If you attempt to add a job with an id that already exists, it will not be added (see caveat below about repeatable jobs). removeOnComplete : boolean | number | KeepJobs ; // If true, removes the job when it successfully completes. // A number specified the amount of jobs to keep. // Default behavior is to keep the job in the completed set. // See KeepJobs if using that interface instead. removeOnFail : boolean | number | KeepJobs ; // If true, removes the job when it fails after all attempts. // A number specified the amount of jobs to keep, see KeepJobs if using that interface instead. // Default behavior is to keep the job in the failed set. stackTraceLimit : number ; // Limits the amount of stack trace lines that will be recorded in the stacktrace. }","title":"Queue#add"},{"location":"docs/queue/reference/#keepjobs","text":"TypeScript /** * KeepJobs * * Specify which jobs to keep after finishing. * If both age and count are * specified, then the jobs kept will be the ones that satisfies both properties. */ export interface KeepJobs { /** * Maximum age in *seconds* for job to be kept. */ age? : number ; /** * Maximum count of jobs to be kept. */ count? : number ; }","title":"KeepJobs \u9009\u9879"},{"location":"docs/queue/reference/#_3","text":"\u52a1\u5fc5\u6ce8\u610f\uff0c\u5728\u7ed9\u5b9a\u7684 \u8d85\u65f6 \u4e4b\u540e\uff0c\u4f5c\u4e1a\u4e0d\u4f1a\u88ab\u4e3b\u52a8\u505c\u6b62\u3002 \u4f5c\u4e1a\u88ab\u6807\u8bb0\u4e3a\u5931\u8d25\uff0c\u4f5c\u4e1a\u7684\u627f\u8bfa\u88ab\u62d2\u7edd\uff0c\u4f46\u662f Bull \u6ca1\u6709\u529e\u6cd5\u4ece\u5916\u90e8\u505c\u6b62\u5904\u7406\u5668\u529f\u80fd\u3002 \u5982\u679c\u60a8\u9700\u8981\u4e00\u4e2a\u4f5c\u4e1a\u5728\u8d85\u65f6\u540e\u505c\u6b62\u5904\u7406\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9b\u5efa\u8bae: \u8ba9\u4f5c\u4e1a\u672c\u8eab\u5b9a\u671f\u68c0\u67e5 job. getstatus() \uff0c\u5982\u679c\u72b6\u6001\u53d8\u4e3a failed \u5219\u9000\u51fa\u3002 \u5c06\u4f5c\u4e1a\u5b9e\u73b0\u4e3a\u4e00\u4e2a\u53ef\u53d6\u6d88\u627f\u8bfa_\u3002 \u5982\u679c\u5904\u7406\u5668 promise \u6709\u4e00\u4e2a cancel() \u65b9\u6cd5\uff0c\u5b83\u5c06\u5728\u4f5c\u4e1a\u8d85\u65f6\u65f6\u88ab\u8c03\u7528\uff0c\u4f5c\u4e1a\u53ef\u4ee5\u76f8\u5e94\u5730\u54cd\u5e94\u3002 (\u6ce8:\u76ee\u524d\u8fd9\u53ea\u9002\u7528\u4e8e\u539f\u751f\u627f\u8bfa\uff0c\u53c2\u89c1 #2203 \u5982\u679c\u60a8\u6709\u4e00\u79cd\u4ece\u5916\u90e8\u505c\u6b62\u4f5c\u4e1a\u7684\u65b9\u6cd5\uff0c\u90a3\u4e48\u4e3a failed \u4e8b\u4ef6\u6dfb\u52a0\u4e00\u4e2a\u4fa6\u542c\u5668\uff0c\u5e76\u5728\u90a3\u91cc\u6267\u884c\u8be5\u64cd\u4f5c\u3002","title":"\u8d85\u65f6\u7684\u5b9e\u73b0"},{"location":"docs/queue/reference/#_4","text":"TypeScript interface RepeatOpts { cron? : string ; // Cron string tz? : string ; // Timezone startDate? : Date | string | number ; // Start date when the repeat job should start repeating (only with cron). endDate? : Date | string | number ; // End date when the repeat job should stop repeating. limit? : number ; // Number of times the job should repeat at max. every? : number ; // Repeat every millis (cron setting cannot be used together with this setting.) count? : number ; // The start value for the repeat iteration count. readonly key : string ; // The key for the repeatable job metadata in Redis. } \u6dfb\u52a0\u5e26\u6709 repeat \u9009\u9879\u96c6\u7684\u4f5c\u4e1a\u5b9e\u9645\u4e0a\u4f1a\u7acb\u5373\u5b8c\u6210\u4e24\u4ef6\u4e8b\u60c5:\u521b\u5efa\u4e00\u4e2a Repeatable job \u914d\u7f6e\uff0c\u4ee5\u53ca\u5728\u4f5c\u4e1a\u7b2c\u4e00\u6b21\u8fd0\u884c\u65f6\u8c03\u5ea6\u4e00\u4e2a\u5e38\u89c4\u7684\u5ef6\u8fdf\u4f5c\u4e1a\u3002 \u7b2c\u4e00\u6b21\u8fd0\u884c\u5c06\u88ab\u5b89\u6392\u4e3a \u6309\u5c0f\u65f6 \u8fd0\u884c\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u60a8\u521b\u5efa\u4e86\u4e00\u4e2a\u5728 4:07 \u6bcf 15 \u5206\u949f\u91cd\u590d\u4e00\u6b21\u7684\u4f5c\u4e1a\uff0c\u90a3\u4e48\u8be5\u4f5c\u4e1a\u5c06\u9996\u5148\u5728 4:15 \u8fd0\u884c\uff0c\u7136\u540e\u662f 4:30\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u5982\u679c\u8bbe\u7f6e\u4e86 startDate \uff0c\u4f5c\u4e1a\u5c06\u4e0d\u4f1a\u5728 startDate \u4e4b\u524d\u8fd0\u884c\uff0c\u4f46\u4ecd\u7136\u4f1a\u6309\u5c0f\u65f6\u8fd0\u884c\u3002 \u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5982\u679c\u5c06 startDate \u8bbe\u7f6e\u4e3a\u67d0\u4e00\u5929\u7684 6:05\uff0c\u5373\u5f53\u5929\uff0c\u7b2c\u4e00\u4e2a\u4f5c\u4e1a\u5c06\u5728 6:15 \u8fd0\u884c\u3002 cron \u8868\u8fbe\u5f0f\u4f7f\u7528 cron-parser \u5e93\uff0c\u8bf7\u53c2\u9605\u5b83\u4eec\u7684\u6587\u6863\u4ee5\u4e86\u89e3\u66f4\u591a\u7ec6\u8282\u3002 \u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\u4e0d\u662f\u4f5c\u4e1a\uff0c\u56e0\u6b64\u5b83\u4e0d\u4f1a\u51fa\u73b0\u5728 getJobs() \u7b49\u65b9\u6cd5\u4e2d\u3002 \u8981\u7ba1\u7406\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\uff0c\u8bf7\u4f7f\u7528 getRepeatableJobs() \u6216\u7c7b\u4f3c\u7684\u65b9\u6cd5\u3002 \u8fd9\u4e5f\u610f\u5473\u7740\u91cd\u590d\u4f5c\u4e1a\u4e0d\u53c2\u4e0e\u8bc4\u4f30 jobId \u7684\u552f\u4e00\u6027\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u4e0d\u53ef\u91cd\u590d\u4f5c\u4e1a\u53ef\u4ee5\u5177\u6709\u4e0e\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\u76f8\u540c\u7684 jobId \uff0c\u800c\u4e24\u4e2a\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\u53ef\u4ee5\u5177\u6709\u76f8\u540c\u7684 jobId \uff0c\u53ea\u8981\u5b83\u4eec\u5177\u6709\u4e0d\u540c\u7684\u91cd\u590d\u9009\u9879\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u4ee5\u4e0b\u4ee3\u7801\u5c06\u5bfc\u81f4\u521b\u5efa\u4e09\u4e2a\u4efb\u52a1(\u4e00\u4e2a\u662f\u7acb\u5373\u7684\uff0c\u4e24\u4e2a\u662f\u5ef6\u8fdf\u7684): TypeScript await queue . add ({}, { jobId : \"example\" , repeat : { every : 5 * 1000 } }); await queue . add ({}, { jobId : \"example\" , repeat : { every : 5 * 1000 } }); // Will not be created, same repeat configuration await queue . add ({}, { jobId : \"example\" , repeat : { every : 10 * 1000 } }); // Will be created, different repeat configuration await queue . add ({}, { jobId : \"example\" }); // Will be created, no regular job with this id await queue . add ({}, { jobId : \"example\" }); // Will not be created, conflicts with previous regular job","title":"\u91cd\u590d\u7684\u5de5\u4f5c\u7ec6\u8282"},{"location":"docs/queue/reference/#_5","text":"TypeScript interface BackoffOpts { type : string ; // Backoff type, which can be either `fixed` or `exponential`. // A custom backoff strategy can also be specified in `backoffStrategies` on the queue settings. delay : number ; // Backoff delay, in milliseconds. }","title":"\u8865\u507f\u9009\u9879"},{"location":"docs/queue/reference/#queueaddbulk","text":"TypeScript addBulk ( jobs : { name? : string , data : object , opts? : JobOpts }[]) : Promise < Job [] > \u521b\u5efa\u4f5c\u4e1a\u6570\u7ec4\u5e76\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u3002 \u5b83\u4eec\u7684\u7b7e\u540d\u4e0e Queue#add \u76f8\u540c\u3002","title":"Queue#addBulk"},{"location":"docs/queue/reference/#queuepause","text":"TypeScript pause ( isLocal? : boolean , doNotWaitActive? : boolean ) : Promise \u8fd4\u56de\u4e00\u4e2a\u5728\u961f\u5217\u6682\u505c\u65f6\u89e3\u6790\u7684\u627f\u8bfa\u3002 \u6682\u505c\u7684\u961f\u5217\u5728\u6062\u590d\u4e4b\u524d\u4e0d\u4f1a\u5904\u7406\u65b0\u4f5c\u4e1a\uff0c\u4f46\u6b63\u5728\u5904\u7406\u7684\u5f53\u524d\u4f5c\u4e1a\u5c06\u7ee7\u7eed\uff0c\u76f4\u5230\u5b8c\u6210\u3002 \u6682\u505c\u53ef\u4ee5\u662f\u5168\u5c40\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u5c40\u90e8\u7684\u3002 \u5982\u679c\u662f\u5168\u5c40\u7684\uff0c\u90a3\u4e48\u7ed9\u5b9a\u961f\u5217\u7684\u6240\u6709\u961f\u5217\u5b9e\u4f8b\u4e2d\u7684\u6240\u6709 worker \u90fd\u5c06\u88ab\u6682\u505c\u3002 \u5982\u679c\u662f\u672c\u5730\u7684\uff0c\u5728\u5f53\u524d\u9501\u8fc7\u671f\u540e\uff0c\u53ea\u6709\u8fd9\u4e2a worker \u5c06\u505c\u6b62\u5904\u7406\u65b0\u4f5c\u4e1a\u3002 \u8fd9\u5bf9\u4e8e\u963b\u6b62\u5de5\u4eba\u5728\u5012\u95ed\u524d\u63a5\u53d7\u65b0\u5de5\u4f5c\u662f\u5f88\u6709\u7528\u7684\u3002 \u5982\u679c doNotWaitActive \u4e3a true \uff0c pause \u5c06\u4e0d\u4f1a\u7b49\u5f85\u4efb\u4f55\u6d3b\u52a8\u4f5c\u4e1a\u5b8c\u6210\u540e\u518d\u89e3\u6790\u3002 \u5426\u5219\uff0c pause _\u5c06\u7b49\u5f85\u6d3b\u52a8\u7684\u4f5c\u4e1a\u5b8c\u6210\u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1 Queue#whenCurrentJobsFinished \u3002 \u6682\u505c\u5df2\u7ecf\u6682\u505c\u7684\u961f\u5217\u4e0d\u4f1a\u505a\u4efb\u4f55\u4e8b\u60c5\u3002","title":"Queue#pause"},{"location":"docs/queue/reference/#queueispaused","text":"TypeScript isPaused ( isLocal? : boolean ) : Promise < boolean > \u68c0\u67e5\u961f\u5217\u662f\u5426\u88ab\u6682\u505c\u3002 \u5982\u679c\u9700\u8981\u77e5\u9053\u8fd9\u4e2a\u7279\u5b9a\u5b9e\u4f8b\u662f\u5426\u6682\u505c\uff0c\u5219\u4f20\u9012 true\u3002","title":"Queue#isPaused"},{"location":"docs/queue/reference/#queueresume","text":"TypeScript resume ( isLocal? : boolean ) : Promise \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u8be5\u627f\u8bfa\u5728\u6682\u505c\u540e\u6062\u590d\u961f\u5217\u65f6\u89e3\u6790\u3002 \u7b80\u5386\u53ef\u4ee5\u662f\u672c\u5730\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u5168\u7403\u7684\u3002 \u5982\u679c\u662f\u5168\u5c40\u7684\uff0c\u90a3\u4e48\u7ed9\u5b9a\u961f\u5217\u7684\u6240\u6709\u961f\u5217\u5b9e\u4f8b\u4e2d\u7684\u6240\u6709 worker \u90fd\u5c06\u88ab\u6062\u590d\u3002 \u5982\u679c\u662f\u672c\u5730\u7684\uff0c\u53ea\u6709\u8fd9\u4e2a\u5de5\u4eba\u5c06\u88ab\u6062\u590d\u3002 \u6ce8\u610f\u5168\u5c40\u6062\u590d\u961f\u5217\u4e0d\u4f1a\u6062\u590d\u5df2\u7ecf\u5728\u672c\u5730\u6682\u505c\u7684 worker;\u5bf9\u4e8e\u8fd9\u4e9b\uff0c\u5fc5\u987b\u5728\u5b83\u4eec\u7684\u5b9e\u4f8b\u4e0a\u76f4\u63a5\u8c03\u7528 resume(true) \u3002 \u6062\u590d\u672a\u6682\u505c\u7684\u961f\u5217\u4e0d\u4f1a\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002","title":"Queue#resume"},{"location":"docs/queue/reference/#queuewhencurrentjobsfinished","text":"TypeScript whenCurrentJobsFinished () : Promise < Void > \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u8be5\u627f\u8bfa\u5728\u5f53\u524d\u7531\u8be5\u5de5\u4eba\u5904\u7406\u7684\u6240\u6709\u4f5c\u4e1a\u5b8c\u6210\u65f6\u89e3\u51b3\u3002","title":"Queue#whenCurrentJobsFinished"},{"location":"docs/queue/reference/#queuecount","text":"TypeScript count () : Promise < number > \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u8fd4\u56de\u961f\u5217\u4e2d\u7b49\u5f85\u6216\u5ef6\u8fdf\u7684\u4f5c\u4e1a\u6570\u91cf\u3002 \u7531\u4e8e\u53ef\u80fd\u6709\u5176\u4ed6\u8fdb\u7a0b\u6dfb\u52a0\u6216\u5904\u7406\u4f5c\u4e1a\uff0c\u56e0\u6b64\u8be5\u503c\u53ef\u80fd\u53ea\u5728\u975e\u5e38\u77ed\u7684\u65f6\u95f4\u5185\u4e3a\u771f\u3002","title":"Queue#count"},{"location":"docs/queue/reference/#queueremovejobs","text":"TypeScript removeJobs ( pattern : string ) : Promise < void > \u5220\u9664 jobId \u5339\u914d\u7ed9\u5b9a\u6a21\u5f0f\u7684\u6240\u6709\u4f5c\u4e1a\u3002 \u6a21\u5f0f\u5fc5\u987b\u9075\u5faa redis \u5168\u5c40\u6837\u5f0f\u6a21\u5f0f(\u8bed\u6cd5)[https://redis.io/commands/keys] \u4f8b\u5b50: JavaScript myQueue . removeJobs ( \"?oo*\" ). then ( function () { console . log ( \"done removing jobs\" ); }); \u5c06\u5220\u9664 id \u4e3a: boo \u3001 foofighter \u7b49\u7684\u5de5\u4f5c\u3002 \u6ce8\u610f:\u6b64\u65b9\u6cd5\u4e0d\u5f71\u54cd\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\uff0c\u800c\u662f\u4f7f\u7528 removeRepeatable() \u6216 removeRepeatableByKey()","title":"Queue#removeJobs"},{"location":"docs/queue/reference/#queueempty","text":"TypeScript empty () : Promise \u6e05\u7a7a\u4e00\u4e2a\u961f\u5217\uff0c\u5220\u9664\u6240\u6709 input \u5217\u8868\u548c\u5173\u8054\u7684\u4f5c\u4e1a\u3002 \u6ce8\u610f:\u6b64\u51fd\u6570\u53ea\u5220\u9664\u6b63\u5728\u7b49\u5f85\u961f\u5217\u5904\u7406\u6216\u88ab\u5ef6\u8fdf\u5904\u7406\u7684\u4f5c\u4e1a\u3002 \u5904\u4e8e\u5176\u4ed6\u72b6\u6001(\u6d3b\u52a8\u3001\u5931\u8d25\u3001\u5df2\u5b8c\u6210)\u7684\u4f5c\u4e1a\u548c\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\u5c06\u4fdd\u6301\u4e0d\u53d8\uff0c\u53ef\u91cd\u590d\u4f5c\u4e1a\u5c06\u7ee7\u7eed\u6309\u8ba1\u5212\u521b\u5efa\u3002 \u8981\u5220\u9664\u5176\u4ed6\u4f5c\u4e1a\u72b6\u6001\uff0c\u8bf7\u4f7f\u7528 clean() \uff0c\u8981\u5220\u9664\u5305\u62ec Repeatable job \u914d\u7f6e\u5728\u5185\u7684\u6240\u6709\u914d\u7f6e\uff0c\u8bf7\u4f7f\u7528 obliterate() \u3002","title":"Queue#empty"},{"location":"docs/queue/reference/#queueclose","text":"TypeScript close ( doNotWaitJobs? : boolean ) : Promise \u5173\u95ed\u5e95\u5c42 Redis \u5ba2\u6237\u7aef\u3002 \u4f7f\u7528\u5b83\u6765\u6267\u884c\u4e00\u4e2a\u4f18\u96c5\u7684\u5173\u95ed\u3002 JavaScript const Queue = require ( \"bull\" ); const queue = Queue ( \"example\" ); const after100 = _ . after ( 100 , function () { queue . close (). then ( function () { console . log ( \"done\" ); }); }); queue . on ( \"completed\" , after100 ); close \u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u8c03\u7528\uff0c\u4f46\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f:\u5982\u679c\u5728\u4f5c\u4e1a\u5904\u7406\u7a0b\u5e8f\u5185\u90e8\u8c03\u7528\uff0c\u5219\u961f\u5217\u76f4\u5230\u4f5c\u4e1a\u5904\u7406\u5b8c\u6bd5\u624d\u4f1a\u5173\u95ed\uff0c\u6240\u4ee5\u4e0b\u9762\u7684\u8bed\u53e5\u4e0d\u8d77\u4f5c\u7528: JavaScript queue . process ( function ( job , jobDone ) { handle ( job ); queue . close (). then ( jobDone ); }); \u76f8\u53cd,\u8fd9\u6837\u505a: JavaScript queue . process ( function ( job , jobDone ) { handle ( job ); queue . close (); jobDone (); }); Or this: JavaScript queue . process ( function ( job ) { queue . close (); return handle ( job ). then (...); });","title":"Queue#close"},{"location":"docs/queue/reference/#queuegetjob","text":"TypeScript getJob ( jobId : string ) : Promise < Job > \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u4e0e jobId \u53c2\u6570\u76f8\u5173\u8054\u7684\u4f5c\u4e1a\u5b9e\u4f8b\u3002 \u5982\u679c\u6307\u5b9a\u7684\u4f5c\u4e1a\u65e0\u6cd5\u627e\u5230\uff0c\u627f\u8bfa\u5c06\u88ab\u89e3\u6790\u4e3a null \u3002 \u6ce8\u610f: \u6b64\u65b9\u6cd5\u4e0d\u8fd4\u56de\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\uff0c\u53c2\u89c1 getRepeatableJobs()","title":"Queue#getJob"},{"location":"docs/queue/reference/#queuegetjobs","text":"TypeScript getJobs ( types : JobStatus [], start? : number , end? : number , asc? : boolean ) : Promise < Job [] > \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u7ed9\u5b9a\u4f5c\u4e1a\u72b6\u6001\u7684\u4f5c\u4e1a\u5b9e\u4f8b\u6570\u7ec4\u3002 \u63d0\u4f9b\u4e86\u8303\u56f4\u548c\u987a\u5e8f\u7684\u53ef\u9009\u53c2\u6570\u3002 \u6ce8\u610f: start \u548c end \u9009\u9879\u9002\u7528\u4e8e\u6bcf\u4e2a \u4f5c\u4e1a\u72b6\u6001 \u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6709 10 \u4e2a\u4f5c\u4e1a\u5904\u4e8e completed \u72b6\u6001\uff0c10 \u4e2a\u4f5c\u4e1a\u5904\u4e8e active \u72b6\u6001\uff0c getJobs(['completed'\uff0c'active']\uff0c 0,4) \u5c06\u751f\u6210\u4e00\u4e2a\u5305\u542b 10 \u4e2a\u6761\u76ee\u7684\u6570\u7ec4\uff0c\u8868\u793a\u524d 5 \u4e2a\u5df2\u5b8c\u6210\u7684\u4f5c\u4e1a(0 - 4)\u548c\u524d 5 \u4e2a\u6d3b\u52a8\u7684\u4f5c\u4e1a(0 - 4)\u3002 \u6b64\u65b9\u6cd5\u4e0d\u8fd4\u56de\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\uff0c\u53c2\u89c1 getRepeatableJobs()","title":"Queue#getJobs"},{"location":"docs/queue/reference/#queuegetjoblogs","text":"TypeScript getJobLogs ( jobId : string , start? : number , end? : number ) : Promise < { logs : string [], count : number } > \u6839\u636e start \u548c end \u53c2\u6570\u8fd4\u56de\u5e26\u6709\u65e5\u5fd7\u7684\u5bf9\u8c61\u3002 \u8fd4\u56de\u7684\u8ba1\u6570\u503c\u662f\u65e5\u5fd7\u7684\u603b\u91cf\uff0c\u8fd9\u5bf9\u4e8e\u5b9e\u73b0\u5206\u9875\u5f88\u6709\u7528\u3002","title":"Queue#getJobLogs"},{"location":"docs/queue/reference/#queuegetrepeatablejobs","text":"TypeScript getRepeatableJobs ( start? : number , end? : number , asc? : boolean ) : Promise < { key : string , name : string , id : number | string , endDate : Date , tz : string , cron : string , every : number , next : number }[] > \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u4e00\u4e2a\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\u6570\u7ec4\u3002 \u63d0\u4f9b\u4e86\u8303\u56f4\u548c\u987a\u5e8f\u7684\u53ef\u9009\u53c2\u6570\u3002","title":"Queue#getRepeatableJobs"},{"location":"docs/queue/reference/#queueremoverepeatable","text":"TypeScript removeRepeatable ( name? : string , repeat : RepeatOpts ) : Promise < void > \u5220\u9664\u7ed9\u5b9a\u7684\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\u3002 RepeatOpts \u9700\u8981\u4e0e\u6dfb\u52a0\u4f5c\u4e1a\u65f6\u4f7f\u7528\u7684\u76f8\u540c\u3002","title":"Queue#removeRepeatable"},{"location":"docs/queue/reference/#queueremoverepeatablebykey","text":"TypeScript removeRepeatableByKey ( key : string ) : Promise < void > \u901a\u8fc7\u952e\u5220\u9664\u7ed9\u5b9a\u7684\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\uff0c\u4ee5\u4fbf\u4e0d\u518d\u4e3a\u8be5\u7279\u5b9a\u914d\u7f6e\u5904\u7406\u4efb\u4f55\u53ef\u91cd\u590d\u4f5c\u4e1a\u3002 \u76ee\u524d\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u83b7\u5f97\u53ef\u91cd\u590d\u5de5\u4f5c\u7684 \u5173\u952e \u3002 \u5f53\u7b2c\u4e00\u6b21\u521b\u5efa\u4f5c\u4e1a\u65f6\uff0c queue.add() \u5c06\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709\u8be5\u4f5c\u4e1a\u952e\u503c\u7684\u4f5c\u4e1a\u5bf9\u8c61\uff0c\u4f60\u53ef\u4ee5\u5c06\u5176\u5b58\u50a8\u8d77\u6765\u4f9b\u4ee5\u540e\u4f7f\u7528: TypeScript const job = await queue . add ( \"remove\" , { example : \"data\" }, { repeat : { every : 1000 } }); // store job.opts.repeat.key somewhere... const repeatableKey = job . opts . repeat . key ; // ...then later... await queue . removeRepeatableByKey ( repeatableKey ); \u5426\u5219\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 getRepeatableJobs() \u5217\u51fa\u6240\u6709\u53ef\u91cd\u590d\u7684\u4f5c\u4e1a\uff0c\u5728\u5217\u8868\u4e2d\u627e\u5230\u4f60\u60f3\u8981\u5220\u9664\u7684\u4f5c\u4e1a\uff0c\u5e76\u4f7f\u7528\u90a3\u91cc\u7684\u952e\u6765\u5220\u9664\u5b83: TypeScript await queue . add ( \"remove\" , { example : \"data\" }, { jobId : \"findMe\" , repeat : { every : 1000 } }); // ... then later ... const repeatableJobs = await queue . getRepeatableJobs (); const foundJob = repeatableJobs . find (( job ) => job . id === \"findMe\" ); await queue . removeRepeatableByKey ( foundJob . key );","title":"Queue#removeRepeatableByKey"},{"location":"docs/queue/reference/#queuegetjobcounts","text":"TypeScript getJobCounts () : Promise < JobCounts > \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u7ed9\u5b9a\u961f\u5217\u7684\u4f5c\u4e1a\u8ba1\u6570\u3002 ```typescript{ interface JobCounts { waiting: number, active: number, completed: number, failed: number, delayed: number } } Text Only --- ### Queue#getCompletedCount ```ts getCompletedCount() : Promise<number> \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u7ed9\u5b9a\u961f\u5217\u4e2d\u5df2\u5b8c\u6210\u7684\u4f5c\u4e1a\u8ba1\u6570\u3002","title":"Queue#getJobCounts"},{"location":"docs/queue/reference/#queuegetfailedcount","text":"TypeScript getFailedCount () : Promise < number > \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u7ed9\u5b9a\u961f\u5217\u7684\u5931\u8d25\u4f5c\u4e1a\u8ba1\u6570\u3002","title":"Queue#getFailedCount"},{"location":"docs/queue/reference/#queuegetdelayedcount","text":"TypeScript getDelayedCount () : Promise < number > \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u8be5\u627f\u8bfa\u5c06\u8fd4\u56de\u7ed9\u5b9a\u961f\u5217\u7684\u5ef6\u8fdf\u4f5c\u4e1a\u8ba1\u6570\u3002","title":"Queue#getDelayedCount"},{"location":"docs/queue/reference/#queuegetactivecount","text":"TypeScript getActiveCount () : Promise < number > \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u8be5\u627f\u8bfa\u5c06\u8fd4\u56de\u7ed9\u5b9a\u961f\u5217\u7684\u6d3b\u52a8\u4f5c\u4e1a\u8ba1\u6570\u3002","title":"Queue#getActiveCount"},{"location":"docs/queue/reference/#queuegetwaitingcount","text":"TypeScript getWaitingCount () : Promise < number > \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u7ed9\u5b9a\u961f\u5217\u7684\u7b49\u5f85\u4f5c\u4e1a\u8ba1\u6570\u3002","title":"Queue#getWaitingCount"},{"location":"docs/queue/reference/#queuegetpausedcount","text":"\u5f03\u7528 \u56e0\u4e3a\u53ea\u6709\u961f\u5217\u53ef\u4ee5\u6682\u505c\uff0c\u6240\u4ee5 getWaitingCount \u4f1a\u7ed9\u51fa\u76f8\u540c\u7684\u7ed3\u679c\u3002 TypeScript getPausedCount () : Promise < number > \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u8be5\u627f\u8bfa\u5c06\u8fd4\u56de\u7ed9\u5b9a\u961f\u5217\u7684\u6682\u505c\u4f5c\u4e1a\u8ba1\u6570\u3002","title":"Queue#getPausedCount"},{"location":"docs/queue/reference/#getters","text":"\u4e0b\u9762\u7684\u65b9\u6cd5\u7528\u4e8e\u83b7\u53d6\u5904\u4e8e\u7279\u5b9a\u72b6\u6001\u7684\u4f5c\u4e1a\u3002 GetterOpts \u53ef\u4ee5\u7528\u4e8e\u4ece getter \u4e2d\u914d\u7f6e\u67d0\u4e9b\u65b9\u9762\u3002 TypeScript interface GetterOpts excludeData : boolean ; // Exclude the data field of the jobs.","title":"Getters"},{"location":"docs/queue/reference/#queuegetwaiting","text":"TypeScript getWaiting ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u5f00\u59cb\u548c\u7ed3\u675f\u4e4b\u95f4\u7684\u7b49\u5f85\u4f5c\u4e1a\u3002","title":"Queue#getWaiting"},{"location":"docs/queue/reference/#queuegetactive","text":"TypeScript getActive ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u5f00\u59cb\u548c\u7ed3\u675f\u4e4b\u95f4\u7684\u6d3b\u52a8\u4f5c\u4e1a\u3002","title":"Queue#getActive"},{"location":"docs/queue/reference/#queuegetdelayed","text":"TypeScript getDelayed ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u5f00\u59cb\u548c\u7ed3\u675f\u4e4b\u95f4\u7684\u5ef6\u8fdf\u4f5c\u4e1a\u3002","title":"Queue#getDelayed"},{"location":"docs/queue/reference/#queuegetcompleted","text":"TypeScript getCompleted ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u5f00\u59cb\u548c\u7ed3\u675f\u4e4b\u95f4\u5df2\u5b8c\u6210\u7684\u4f5c\u4e1a\u3002","title":"Queue#getCompleted"},{"location":"docs/queue/reference/#queuegetfailed","text":"TypeScript getFailed ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u5f00\u59cb\u548c\u7ed3\u675f\u4e4b\u95f4\u5931\u8d25\u7684\u4f5c\u4e1a\u3002","title":"Queue#getFailed"},{"location":"docs/queue/reference/#queuegetworkers","text":"TypeScript getWorkers () : Promise < Array < Object >> \u8fd4\u56de\u4e00\u4e2a promise\uff0c\u8be5 promise \u5c06\u89e3\u6790\u4e3a\u5f53\u524d\u6b63\u5728\u4fa6\u542c\u6216\u5904\u7406\u4f5c\u4e1a\u7684\u6570\u7ec4\u5de5\u4f5c\u8005\u3002 \u8be5\u5bf9\u8c61\u5305\u542b\u4e0e Redis CLIENT LIST \u547d\u4ee4\u76f8\u540c\u7684\u5b57\u6bb5\u3002","title":"Queue#getWorkers"},{"location":"docs/queue/reference/#queuegetmetrics","text":"TypeScript getMetrics ( type : 'completed' | 'failed' , start = 0 , end = - 1 ) : Promise < { meta : { count : number ; prevTS : number ; prevCount : number ; }; data : number []; count : number ; } > \u8fd4\u56de\u4e00\u4e2a\u89e3\u6790\u4e3a Metrics \u5bf9\u8c61\u7684\u627f\u8bfa\u3002","title":"Queue#getMetrics"},{"location":"docs/queue/reference/#queueclean","text":"TypeScript clean ( grace : number , status? : string , limit? : number ) : Promise < number [] > \u901a\u77e5\u961f\u5217\u5220\u9664\u5728\u5bbd\u9650\u671f\u4e4b\u5916\u521b\u5efa\u7684\u7279\u5b9a\u7c7b\u578b\u7684\u4f5c\u4e1a\u3002","title":"Queue#clean"},{"location":"docs/queue/reference/#example","text":"JavaScript queue . on ( \"cleaned\" , function ( jobs , type ) { console . log ( \"Cleaned %s %s jobs\" , jobs . length , type ); }); //cleans all jobs that completed over 5 seconds ago. await queue . clean ( 5000 ); //clean all jobs that failed over 10 seconds ago. await queue . clean ( 10000 , \"failed\" );","title":"Example"},{"location":"docs/queue/reference/#queueobliterate","text":"TypeScript obliterate ( ops ?: { force : boolean }) : Promise < void > \u5b8c\u5168\u5220\u9664\u4e00\u4e2a\u961f\u5217\u53ca\u5176\u6240\u6709\u6570\u636e\u3002 \u4e3a\u4e86\u6d88\u9664\u961f\u5217\uff0c\u4e0d\u80fd\u6709\u6d3b\u52a8\u4f5c\u4e1a\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7528 force \u9009\u9879\u8986\u76d6\u8fd9\u79cd\u884c\u4e3a\u3002 \u6ce8\u610f:\u7531\u4e8e\u6b64\u64cd\u4f5c\u7684\u6301\u7eed\u65f6\u95f4\u53ef\u80fd\u76f8\u5f53\u957f\uff0c\u8fd9\u53d6\u51b3\u4e8e\u961f\u5217\u4e2d\u6709\u591a\u5c11\u4f5c\u4e1a\uff0c\u56e0\u6b64\u5b83\u4e0d\u662f\u81ea\u52a8\u6267\u884c\u7684\uff0c\u800c\u662f\u8fed\u4ee3\u6267\u884c\u7684\u3002 \u7136\u800c\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d\u961f\u5217\u603b\u662f\u6682\u505c\uff0c\u5982\u679c\u961f\u5217\u5728\u88ab\u53e6\u4e00\u4e2a\u811a\u672c\u5220\u9664\u671f\u95f4\u53d6\u6d88\u6682\u505c\uff0c\u5219\u8c03\u7528\u5c06\u5931\u8d25\uff0c\u5b83\u8bbe\u6cd5\u5220\u9664\u7684\u9879\u76ee\u5c06\u88ab\u5220\u9664\uff0c\u76f4\u5230\u5931\u8d25\u3002","title":"Queue#obliterate"},{"location":"docs/queue/reference/#_6","text":"JavaScript // Removes everything but only if there are no active jobs await queue . obliterate (); await queue . obliterate ({ force : true });","title":"\u793a\u4f8b"},{"location":"docs/queue/reference/#_7","text":"\u4f5c\u4e1a\u5305\u62ec\u6267\u884c\u4f5c\u4e1a\u6240\u9700\u7684\u6240\u6709\u6570\u636e\uff0c\u4ee5\u53ca\u66f4\u65b0\u4f5c\u4e1a\u8fdb\u5ea6\u6240\u9700\u7684\u8fdb\u5ea6\u65b9\u6cd5\u3002 \u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\uff0c\u6700\u91cd\u8981\u7684\u5c5e\u6027\u662f Job#data \uff0c\u5b83\u5305\u62ec\u88ab\u4f20\u9012\u7ed9 Queue#add \u7684\u5bf9\u8c61\uff0c\u901a\u5e38\u7528\u4e8e\u6267\u884c\u4f5c\u4e1a\u3002","title":"\u5de5\u4f5c"},{"location":"docs/queue/reference/#jobprogress","text":"TypeScript progress ( progress? : number | object ) : Promise \u5982\u679c\u4f7f\u7528\u53c2\u6570\u8c03\u7528\uff0c\u5219\u66f4\u65b0\u4f5c\u4e1a\u8fdb\u5ea6\u3002 \u5982\u679c\u6ca1\u6709\u53c2\u6570\u8c03\u7528\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u89e3\u6790\u5f53\u524d\u4f5c\u4e1a\u8fdb\u5ea6\u7684 promise\u3002","title":"Job#progress"},{"location":"docs/queue/reference/#arguments","text":"JavaScript progress : number ; Job progress number or any serializable object representing progress or similar .","title":"Arguments"},{"location":"docs/queue/reference/#joblog","text":"TypeScript log ( row : string ) : Promise \u5411\u6b64\u4f5c\u4e1a\u7279\u5b9a\u7684\u4f5c\u4e1a\u6dfb\u52a0\u65e5\u5fd7\u884c\u3002 \u53ef\u4ee5\u4f7f\u7528 Queue#getJobLogs \u68c0\u7d22\u65e5\u5fd7\u3002","title":"Job#log"},{"location":"docs/queue/reference/#jobgetstate","text":"TypeScript getState () : Promise \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u89e3\u6790\u5f53\u524d\u4f5c\u4e1a\u7684\u72b6\u6001(\u5b8c\u6210\u3001\u5931\u8d25\u3001\u5ef6\u8fdf\u7b49)\u3002 \u53ef\u80fd\u7684\u8fd4\u56de\u6709:\u5b8c\u6210\u7684\u3001\u5931\u8d25\u7684\u3001\u5ef6\u8fdf\u7684\u3001\u6d3b\u52a8\u7684\u3001\u7b49\u5f85\u7684\u3001\u6682\u505c\u7684\u3001\u5361\u4f4f\u7684\u6216 null\u3002 \u8bf7\u6ce8\u610f\uff0c\u8be5\u65b9\u6cd5\u7684\u5b9e\u73b0\u6548\u7387\u4e0d\u662f\u5f88\u9ad8\uff0c\u4e5f\u4e0d\u662f\u539f\u5b50\u6027\u7684\u3002 \u5982\u679c\u60a8\u7684\u961f\u5217\u786e\u5b9e\u6709\u5927\u91cf\u4f5c\u4e1a\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u907f\u514d\u4f7f\u7528\u6b64\u65b9\u6cd5\u3002","title":"Job#getState"},{"location":"docs/queue/reference/#jobupdate","text":"TypeScript update ( data : object ) : Promise \u4f7f\u7528 give data \u5bf9\u8c61\u66f4\u65b0\u4e86\u4f5c\u4e1a\u6570\u636e\u5b57\u6bb5\u3002","title":"Job#update"},{"location":"docs/queue/reference/#jobremove","text":"TypeScript remove () : Promise \u4ece\u961f\u5217\u548c\u53ef\u80fd\u5305\u542b\u4f5c\u4e1a\u7684\u4efb\u4f55\u5217\u8868\u4e2d\u5220\u9664\u4f5c\u4e1a\u3002","title":"Job#remove"},{"location":"docs/queue/reference/#jobretry","text":"TypeScript retry () : Promise \u91cd\u65b0\u8fd0\u884c\u5931\u8d25\u7684\u4f5c\u4e1a\u3002 \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u8be5\u627f\u8bfa\u5728\u4f5c\u4e1a\u8ba1\u5212\u91cd\u8bd5\u65f6\u89e3\u51b3\u3002","title":"Job#retry"},{"location":"docs/queue/reference/#jobdiscard","text":"TypeScript discard () : Promise \u5373\u4f7f attemptsMade \u5c0f\u4e8e job.attempts \uff0c\u4e5f\u786e\u4fdd\u4e0d\u518d\u8fd0\u884c\u6b64\u4f5c\u4e1a\u3002","title":"Job#discard"},{"location":"docs/queue/reference/#jobpromote","text":"TypeScript promote () : Promise \u5c06\u5f53\u524d\u88ab \u5ef6\u8fdf \u7684\u4f5c\u4e1a\u63d0\u5347\u5230 \u7b49\u5f85 \u72b6\u6001\uff0c\u5e76\u5c3d\u5feb\u6267\u884c\u3002","title":"Job#promote"},{"location":"docs/queue/reference/#jobfinished","text":"TypeScript finished () : Promise \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u8be5\u627f\u8bfa\u5728\u4efb\u52a1\u5b8c\u6210\u6216\u5931\u8d25\u65f6\u89e3\u6790\u6216\u62d2\u7edd\u3002","title":"Job#finished"},{"location":"docs/queue/reference/#jobmovetocompleted","text":"TypeScript moveToCompleted ( returnValue : any , ignoreLock : boolean , notFetch? : boolean ) : Promise < string [ Jobdata , JobId ] | null > \u5c06\u4f5c\u4e1a\u79fb\u52a8\u5230 \u5df2\u5b8c\u6210 \u961f\u5217\u3002 \u5c06\u4e00\u4e2a\u4f5c\u4e1a\u4ece waiting \u62c9\u5230 active \uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u4e0b\u4e00\u4e2a\u4f5c\u4e1a\u6570\u636e\u548c id \u7684\u5143\u7ec4\u3002 \u5982\u679c \u7b49\u5f85 \u961f\u5217\u4e2d\u6ca1\u6709\u4f5c\u4e1a\uff0c\u5219\u8fd4\u56de null\u3002 \u8bbe\u7f6e notFetch \u4e3a true \u4ee5\u907f\u514d\u9884\u53d6\u961f\u5217\u4e2d\u7684\u4e0b\u4e00\u4e2a\u4f5c\u4e1a\u3002","title":"Job#moveToCompleted"},{"location":"docs/queue/reference/#jobmovetofailed","text":"TypeScript moveToFailed ( errorInfo : { message : string ; }, ignoreLock? : boolean ) : Promise < string [ Jobdata , JobId ] | null > \u5c06\u4f5c\u4e1a\u79fb\u52a8\u5230 \u5931\u8d25 \u961f\u5217\u3002 \u5c06\u4e00\u4e2a\u4f5c\u4e1a\u4ece waiting \u62c9\u5230 active \uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u4e0b\u4e00\u4e2a\u4f5c\u4e1a\u6570\u636e\u548c id \u7684\u5143\u7ec4\u3002 \u5982\u679c \u7b49\u5f85 \u961f\u5217\u4e2d\u6ca1\u6709\u4f5c\u4e1a\uff0c\u5219\u8fd4\u56de null\u3002","title":"Job#moveToFailed"},{"location":"docs/queue/reference/#_8","text":"\u961f\u5217\u4e5f\u4f1a\u53d1\u51fa\u4e00\u4e9b\u6709\u7528\u7684\u4e8b\u4ef6: JavaScript . on ( 'error' , function ( error ) { // An error occured. }) . on ( 'waiting' , function ( jobId ) { // A Job is waiting to be processed as soon as a worker is idling. }); . on ( 'active' , function ( job , jobPromise ) { // A job has started. // You can use `jobPromise.cancel()`` to abort it. }) . on ( 'stalled' , function ( job ) { // A job has been marked as stalled. // This is useful for debugging job workers that crash or pause the event loop. }) . on ( 'lock-extension-failed' , function ( job , err ) { // A job failed to extend lock. // This will be useful to debug redis connection issues and jobs getting restarted because workers are not able to extend locks. }); . on ( 'progress' , function ( job , progress ) { // A job's progress was updated! }) . on ( 'completed' , function ( job , result ) { // A job successfully completed with a `result`. }) . on ( 'failed' , function ( job , err ) { // A job failed with reason `err`! }) . on ( 'paused' , function () { // The queue has been paused. }) . on ( 'resumed' , function ( job ) { // The queue has been resumed. }) . on ( 'cleaned' , function ( jobs , type ) { // Old jobs have been cleaned from the queue. `jobs` is an array of cleaned // jobs, and `type` is the type of jobs cleaned. }); . on ( 'drained' , function () { // Emitted every time the queue has processed all the waiting jobs (even if there can be some delayed jobs not yet processed) }); . on ( 'removed' , function ( job ) { // A job successfully removed. });","title":"\u6d3b\u52a8"},{"location":"docs/queue/reference/#_9","text":"\u4e8b\u4ef6\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u672c\u5730\u7684\u2014\u2014\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u4eec\u53ea\u89e6\u53d1\u5728\u7ed9\u5b9a worker \u4e0a\u6ce8\u518c\u7684\u4fa6\u542c\u5668\u3002 \u5982\u679c\u4f60\u9700\u8981\u5168\u5c40\u76d1\u542c\u4e8b\u4ef6\uff0c\u4f8b\u5982\u6765\u81ea\u5176\u4ed6\u670d\u52a1\u5668\u7684\u4e8b\u4ef6\uff0c\u53ea\u9700\u5728\u4e8b\u4ef6\u524d\u52a0\u4e0a global: '' : JavaScript // Will listen locally, just to this queue... queue . on ( 'completed' , listener ) : // Will listen globally, to instances of this queue... queue . on ( 'global:completed' , listener ); \u5f53\u5904\u7406\u5168\u5c40\u4e8b\u4ef6\u65f6\uff0c\u5c40\u90e8\u4e8b\u4ef6\u5c06\u4e00\u4e2a Job \u5b9e\u4f8b\u4f20\u9012\u7ed9\u4e8b\u4ef6\u76d1\u542c\u5668\u56de\u8c03\uff0c\u6ce8\u610f\u5168\u5c40\u4e8b\u4ef6\u4f20\u9012\u7684\u662f\u4f5c\u4e1a\u7684 ID\u3002 \u5982\u679c\u4f60\u9700\u8981\u5728\u5168\u5c40\u76d1\u542c\u5668\u4e2d\u8bbf\u95ee Job \u5b9e\u4f8b\uff0c\u4f7f\u7528 Queue#getJob \u6765\u68c0\u7d22\u5b83\u3002 \u4f46\u662f\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u5982\u679c\u5728\u6dfb\u52a0\u4f5c\u4e1a\u65f6\u542f\u7528\u4e86 removeOnComplete \uff0c\u5219\u4f5c\u4e1a\u5728\u5b8c\u6210\u540e\u5c06\u4e0d\u518d\u53ef\u7528\u3002 \u5982\u679c\u60a8\u9700\u8981\u8bbf\u95ee\u4f5c\u4e1a\u5e76\u5728\u5b8c\u6210\u540e\u5220\u9664\u5b83\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 job #remove \u5728\u4fa6\u542c\u5668\u4e2d\u5220\u9664\u5b83\u3002 JavaScript // Local events pass the job instance... queue . on ( \"progress\" , function ( job , progress ) { console . log ( `Job ${ job . id } is ${ progress * 100 } % ready!` ); }); queue . on ( \"completed\" , function ( job , result ) { console . log ( `Job ${ job . id } completed! Result: ${ result } ` ); job . remove (); }); // ...whereas global events only pass the job ID: queue . on ( \"global:progress\" , function ( jobId , progress ) { console . log ( `Job ${ jobId } is ${ progress * 100 } % ready!` ); }); queue . on ( \"global:completed\" , function ( jobId , result ) { console . log ( `Job ${ jobId } completed! Result: ${ result } ` ); queue . getJob ( jobId ). then ( function ( job ) { job . remove (); }); });","title":"\u5168\u5c40\u4e8b\u4ef6"},{"location":"docs/validator/_index/","text":"","title":"validator"},{"location":"docs/validator/class-transformer/","text":"Its ES6 and Typescript era. Nowadays you are working with classes and constructor objects more than ever. Class-transformer allows you to transform plain object to some instance of class and versa. Also it allows to serialize / deserialize object based on criteria. This tool is super useful on both frontend and backend. Example how to use with angular 2 in plunker . Source code is available here . \u4ec0\u4e48\u662f class-transformer In JavaScript there are two types of objects: plain (literal) objects class (constructor) objects Plain objects are objects that are instances of Object class. Sometimes they are called literal objects, when created via {} notation. Class objects are instances of classes with own defined constructor, properties and methods. Usually you define them via class notation. So, what is the problem? Sometimes you want to transform plain javascript object to the ES6 classes you have. For example, if you are loading a json from your backend, some api or from a json file, and after you JSON.parse it you have a plain javascript object, not instance of class you have. For example you have a list of users in your users.json that you are loading: JSON [ { \"id\" : 1 , \"firstName\" : \"Johny\" , \"lastName\" : \"Cage\" , \"age\" : 27 }, { \"id\" : 2 , \"firstName\" : \"Ismoil\" , \"lastName\" : \"Somoni\" , \"age\" : 50 }, { \"id\" : 3 , \"firstName\" : \"Luke\" , \"lastName\" : \"Dacascos\" , \"age\" : 12 } ] And you have a User class: TypeScript export class User { id : number ; firstName : string ; lastName : string ; age : number ; getName () { return this . firstName + \" \" + this . lastName ; } isAdult () { return this . age > 36 && this . age < 60 ; } } You are assuming that you are downloading users of type User from users.json file and may want to write following code: TypeScript fetch ( \"users.json\" ). then (( users : User []) => { // you can use users here, and type hinting also will be available to you, // but users are not actually instances of User class // this means that you can't use methods of User class }); In this code you can use users[0].id , you can also use users[0].firstName and users[0].lastName . However you cannot use users[0].getName() or users[0].isAdult() because \"users\" actually is array of plain javascript objects, not instances of User object. You actually lied to compiler when you said that its users: User[] . So what to do? How to make a users array of instances of User objects instead of plain javascript objects? Solution is to create new instances of User object and manually copy all properties to new objects. But things may go wrong very fast once you have a more complex object hierarchy. Alternatives? Yes, you can use class-transformer. Purpose of this library is to help you to map your plain javascript objects to the instances of classes you have. This library also great for models exposed in your APIs, because it provides a great tooling to control what your models are exposing in your API. Here is an example how it will look like: TypeScript fetch ( \"users.json\" ). then (( users : Object []) => { const realUsers = plainToClass ( User , users ); // now each user in realUsers is an instance of User class }); Now you can use users[0].getName() and users[0].isAdult() methods. \u5b89\u88c5 Node.js Install module: npm install class-transformer --save reflect-metadata shim is required, install it too: npm install reflect-metadata --save and make sure to import it in a global place, like app.ts: TypeScript import \"reflect-metadata\" ; ES6 features are used, if you are using old version of node.js you may need to install es6-shim: npm install es6-shim --save and import it in a global place like app.ts: TypeScript import \"es6-shim\" ; \u6d4f\u89c8\u5668 Install module: npm install class-transformer --save reflect-metadata shim is required, install it too: npm install reflect-metadata --save add <script> to reflect-metadata in the head of your index.html : HTML < html > < head > <!-- ... --> < script src = \"node_modules/reflect-metadata/Reflect.js\" ></ script > </ head > <!-- ... --> </ html > If you are using angular 2 you should already have this shim installed. If you are using system.js you may want to add this into map and package config: JSON { \"map\" : { \"class-transformer\" : \"node_modules/class-transformer\" }, \"packages\" : { \"class-transformer\" : { \"main\" : \"index.js\" , \"defaultExtension\" : \"js\" } } } \u65b9\u6cd5 plainToClass This method transforms a plain javascript object to instance of specific class. TypeScript import { plainToClass } from \"class-transformer\" ; let users = plainToClass ( User , userJson ); // to convert user plain object a single user. also supports arrays plainToClassFromExist This method transforms a plain object into an instance using an already filled Object which is an instance of the target class. TypeScript const defaultUser = new User (); defaultUser . role = \"user\" ; let mixedUser = plainToClassFromExist ( defaultUser , user ); // mixed user should have the value role = user when no value is set otherwise. classToPlain This method transforms your class object back to plain javascript object, that can be JSON.stringify later. TypeScript import { classToPlain } from \"class-transformer\" ; let photo = classToPlain ( photo ); classToClass This method transforms your class object into a new instance of the class object. This may be treated as deep clone of your objects. TypeScript import { classToClass } from \"class-transformer\" ; let photo = classToClass ( photo ); You can also use an ignoreDecorators option in transformation options to ignore all decorators you classes is using. serialize You can serialize your model right to json using serialize method: TypeScript import { serialize } from \"class-transformer\" ; let photo = serialize ( photo ); serialize works with both arrays and non-arrays. deserialize and deserializeArray You can deserialize your model from json using the deserialize method: TypeScript import { deserialize } from \"class-transformer\" ; let photo = deserialize ( Photo , photo ); To make deserialization work with arrays, use the deserializeArray method: TypeScript import { deserializeArray } from \"class-transformer\" ; let photos = deserializeArray ( Photo , photos ); \u6267\u884c\u7c7b\u578b\u5b89\u5168\u7684\u5b9e\u4f8b The default behaviour of the plainToClass method is to set all properties from the plain object, even those which are not specified in the class. TypeScript import { plainToClass } from \"class-transformer\" ; class User { id : number ; firstName : string ; lastName : string ; } const fromPlainUser = { unkownProp : \"hello there\" , firstName : \"Umed\" , lastName : \"Khudoiberdiev\" , }; console . log ( plainToClass ( User , fromPlainUser )); // User { // unkownProp: 'hello there', // firstName: 'Umed', // lastName: 'Khudoiberdiev', // } If this behaviour does not suit your needs, you can use the excludeExtraneousValues option in the plainToClass method while exposing all your class properties as a requirement. TypeScript import { Expose , plainToClass } from \"class-transformer\" ; class User { @Expose () id : number ; @Expose () firstName : string ; @Expose () lastName : string ; } const fromPlainUser = { unkownProp : \"hello there\" , firstName : \"Umed\" , lastName : \"Khudoiberdiev\" , }; console . log ( plainToClass ( User , fromPlainUser , { excludeExtraneousValues : true })); // User { // id: undefined, // firstName: 'Umed', // lastName: 'Khudoiberdiev' // } \u4f7f\u7528\u5d4c\u5957\u5bf9\u8c61 When you are trying to transform objects that have nested objects, it's required to known what type of object you are trying to transform. Since Typescript does not have good reflection abilities yet, we should implicitly specify what type of object each property contain. This is done using @Type decorator. Lets say we have an album with photos. And we are trying to convert album plain object to class object: TypeScript import { Type , plainToClass } from \"class-transformer\" ; export class Album { id : number ; name : string ; @Type (() => Photo ) photos : Photo []; } export class Photo { id : number ; filename : string ; } let album = plainToClass ( Album , albumJson ); // now album is Album object with Photo objects inside \u63d0\u4f9b\u591a\u4e2a\u7c7b\u578b\u9009\u9879 In case the nested object can be of different types, you can provide an additional options object, that specifies a discriminator. The discriminator option must define a property that holds the subtype name for the object and the possible subTypes that the nested object can converted to. A sub type has a value , that holds the constructor of the Type and the name , that can match with the property of the discriminator. Lets say we have an album that has a top photo. But this photo can be of certain different types. And we are trying to convert album plain object to class object. The plain object input has to define the additional property __type . This property is removed during transformation by default: JSON input : JSON { \"id\" : 1 , \"name\" : \"foo\" , \"topPhoto\" : { \"id\" : 9 , \"filename\" : \"cool_wale.jpg\" , \"depth\" : 1245 , \"__type\" : \"underwater\" } } TypeScript import { Type , plainToClass } from \"class-transformer\" ; export abstract class Photo { id : number ; filename : string ; } export class Landscape extends Photo { panorama : boolean ; } export class Portrait extends Photo { person : Person ; } export class UnderWater extends Photo { depth : number ; } export class Album { id : number ; name : string ; @Type (() => Photo , { discriminator : { property : \"__type\" , subTypes : [ { value : Landscape , name : \"landscape\" }, { value : Portrait , name : \"portrait\" }, { value : UnderWater , name : \"underwater\" }, ], }, }) topPhoto : Landscape | Portrait | UnderWater ; } let album = plainToClass ( Album , albumJson ); // now album is Album object with a UnderWater object without `__type` property. Hint: The same applies for arrays with different sub types. Moreover you can specify keepDiscriminatorProperty: true in the options to keep the discriminator property also inside your resulting class. \u516c\u5f00 getters \u548c\u65b9\u6cd5\u8fd4\u56de\u503c You can expose what your getter or method return by setting an @Expose() decorator to those getters or methods: TypeScript import { Expose } from \"class-transformer\" ; export class User { id : number ; firstName : string ; lastName : string ; password : string ; @Expose () get name () { return this . firstName + \" \" + this . lastName ; } @Expose () getFullName () { return this . firstName + \" \" + this . lastName ; } } \u516c\u5f00\u5177\u6709\u4e0d\u540c\u540d\u79f0\u7684\u5c5e\u6027 If you want to expose some of the properties with a different name, you can do that by specifying a name option to @Expose decorator: TypeScript import { Expose } from \"class-transformer\" ; export class User { @Expose ({ name : \"uid\" }) id : number ; firstName : string ; lastName : string ; @Expose ({ name : \"secretKey\" }) password : string ; @Expose ({ name : \"fullName\" }) getFullName () { return this . firstName + \" \" + this . lastName ; } } \u8df3\u8fc7\u7279\u5b9a\u5c5e\u6027 Sometimes you want to skip some properties during transformation. This can be done using @Exclude decorator: TypeScript import { Exclude } from \"class-transformer\" ; export class User { id : number ; email : string ; @Exclude () password : string ; } Now when you transform a User, the password property will be skipped and not be included in the transformed result. \u64cd\u4f5c\u7684\u8df3\u8fc7\u4f9d\u8d56\u5173\u7cfb You can control on what operation you will exclude a property. Use toClassOnly or toPlainOnly options: TypeScript import { Exclude } from \"class-transformer\" ; export class User { id : number ; email : string ; @Exclude ({ toPlainOnly : true }) password : string ; } Now password property will be excluded only during classToPlain operation. Vice versa, use the toClassOnly option. \u8df3\u8fc7\u7c7b\u7684\u6240\u6709\u5c5e\u6027 You can skip all properties of the class, and expose only those are needed explicitly: TypeScript import { Exclude , Expose } from \"class-transformer\" ; @Exclude () export class User { @Expose () id : number ; @Expose () email : string ; password : string ; } Now id and email will be exposed, and password will be excluded during transformation. Alternatively, you can set exclusion strategy during transformation: TypeScript import { classToPlain } from \"class-transformer\" ; let photo = classToPlain ( photo , { strategy : \"excludeAll\" }); In this case you don't need to @Exclude() a whole class. \u8df3\u8fc7\u79c1\u6709\u5c5e\u6027\u6216\u67d0\u4e9b\u524d\u7f00\u5c5e\u6027 If you name your private properties with a prefix, lets say with _ , then you can exclude such properties from transformation too: TypeScript import { classToPlain } from \"class-transformer\" ; let photo = classToPlain ( photo , { excludePrefixes : [ \"_\" ] }); This will skip all properties that start with _ prefix. You can pass any number of prefixes and all properties that begin with these prefixes will be ignored. For example: TypeScript import { Expose , classToPlain } from \"class-transformer\" ; export class User { id : number ; private _firstName : string ; private _lastName : string ; _password : string ; setName ( firstName : string , lastName : string ) { this . _firstName = firstName ; this . _lastName = lastName ; } @Expose () get name () { return this . _firstName + \" \" + this . _lastName ; } } const user = new User (); user . id = 1 ; user . setName ( \"Johny\" , \"Cage\" ); user . _password = \"123\" ; const plainUser = classToPlain ( user , { excludePrefixes : [ \"_\" ] }); // here plainUser will be equal to // { id: 1, name: \"Johny Cage\" } \u4f7f\u7528\u7ec4\u6765\u63a7\u5236\u6392\u9664\u7684\u5c5e\u6027 You can use groups to control what data will be exposed and what will not be: TypeScript import { Exclude , Expose , classToPlain } from \"class-transformer\" ; export class User { id : number ; name : string ; @Expose ({ groups : [ \"user\" , \"admin\" ] }) // this means that this data will be exposed only to users and admins email : string ; @Expose ({ groups : [ \"user\" ] }) // this means that this data will be exposed only to users password : string ; } let user1 = classToPlain ( user , { groups : [ \"user\" ] }); // will contain id, name, email and password let user2 = classToPlain ( user , { groups : [ \"admin\" ] }); // will contain id, name and email \u4f7f\u7528\u7248\u672c\u63a7\u5236\u6765\u63a7\u5236\u516c\u5f00\u7684\u548c\u88ab\u6392\u9664\u7684\u5c5e\u6027 If you are building an API that has different versions, class-transformer has extremely useful tools for that. You can control which properties of your model should be exposed or excluded in what version. Example: TypeScript import { Exclude , Expose , classToPlain } from \"class-transformer\" ; export class User { id : number ; name : string ; @Expose ({ since : 0.7 , until : 1 }) // this means that this property will be exposed for version starting from 0.7 until 1 email : string ; @Expose ({ since : 2.1 }) // this means that this property will be exposed for version starting from 2.1 password : string ; } let user1 = classToPlain ( user , { version : 0.5 }); // will contain id and name let user2 = classToPlain ( user , { version : 0.7 }); // will contain id, name and email let user3 = classToPlain ( user , { version : 1 }); // will contain id and name let user4 = classToPlain ( user , { version : 2 }); // will contain id and name let user5 = classToPlain ( user , { version : 2.1 }); // will contain id, name and password \u0421onverting \u65e5\u671f\u5b57\u7b26\u4e32\u5230\u65e5\u671f\u5bf9\u8c61 Sometimes you have a Date in your plain javascript object received in a string format. And you want to create a real javascript Date object from it. You can do it simply by passing a Date object to the @Type decorator: TypeScript import { Type } from \"class-transformer\" ; export class User { id : number ; email : string ; password : string ; @Type (() => Date ) registrationDate : Date ; } Same technique can be used with Number , String , Boolean primitive types when you want to convert your values into these types. \u4f7f\u7528\u6570\u7ec4 When you are using arrays you must provide a type of the object that array contains. This type, you specify in a @Type() decorator: TypeScript import { Type } from \"class-transformer\" ; export class Photo { id : number ; name : string ; @Type (() => Album ) albums : Album []; } You can also use custom array types: TypeScript import { Type } from \"class-transformer\" ; export class AlbumCollection extends Array < Album > { // custom array functions ... } export class Photo { id : number ; name : string ; @Type (() => Album ) albums : AlbumCollection ; } Library will handle proper transformation automatically. ES6 collections Set and Map also require the @Type decorator: TypeScript export class Skill { name : string ; } export class Weapon { name : string ; range : number ; } export class Player { name : string ; @Type (() => Skill ) skills : Set < Skill > ; @Type (() => Weapon ) weapons : Map < string , Weapon > ; } \u989d\u5916\u7684\u6570\u636e\u8f6c\u6362 \u57fa\u672c\u7528\u6cd5 You can perform additional data transformation using @Transform decorator. For example, you want to make your Date object to be a moment object when you are transforming object from plain to class: TypeScript import { Transform } from \"class-transformer\" ; import * as moment from \"moment\" ; import { Moment } from \"moment\" ; export class Photo { id : number ; @Type (() => Date ) @Transform (({ value }) => moment ( value ), { toClassOnly : true }) date : Moment ; } Now when you call plainToClass and send a plain representation of the Photo object, it will convert a date value in your photo object to moment date. @Transform decorator also supports groups and versioning. \u9ad8\u7ea7\u7528\u6cd5 The @Transform decorator is given more arguments to let you configure how you want the transformation to be done. TypeScript @Transform (({ value , key , obj , type }) => value ) Argument Description value The property value before the transformation. key The name of the transformed property. obj The transformation source object. type The transformation type. options The options object passed to the transformation method. \u5176\u4ed6\u4fee\u9970\u7b26 Signature Example Description @TransformClassToPlain @TransformClassToPlain({ groups: [\"user\"] }) Transform the method return with classToPlain and expose the properties on the class. @TransformClassToClass @TransformClassToClass({ groups: [\"user\"] }) Transform the method return with classToClass and expose the properties on the class. @TransformPlainToClass @TransformPlainToClass(User, { groups: [\"user\"] }) Transform the method return with plainToClass and expose the properties on the class. The above decorators accept one optional argument: ClassTransformOptions - The transform options like groups, version, name An example: TypeScript @Exclude () class User { id : number ; @Expose () firstName : string ; @Expose () lastName : string ; @Expose ({ groups : [ \"user.email\" ] }) email : string ; password : string ; } class UserController { @TransformClassToPlain ({ groups : [ \"user.email\" ] }) getUser () { const user = new User (); user . firstName = \"Snir\" ; user . lastName = \"Segal\" ; user . password = \"imnosuperman\" ; return user ; } } const controller = new UserController (); const user = controller . getUser (); the user variable will contain only firstName,lastName, email properties because they are the exposed variables. email property is also exposed because we metioned the group \"user.email\". \u4f7f\u7528\u6cdb\u578b Generics are not supported because TypeScript does not have good reflection abilities yet. Once TypeScript team provide us better runtime type reflection tools, generics will be implemented. There are some tweaks however you can use, that maybe can solve your problem. Checkout this example. \u9690\u5f0f\u7c7b\u578b\u8f6c\u6362 NOTE If you use class-validator together with class-transformer you propably DON'T want to enable this function. Enables automatic conversion between built-in types based on type information provided by Typescript. Disabled by default. TypeScript import { IsString } from \"class-validator\" ; class MyPayload { @IsString () prop : string ; } const result1 = plainToClass ( MyPayload , { prop : 1234 }, { enableImplicitConversion : true }); const result2 = plainToClass ( MyPayload , { prop : 1234 }, { enableImplicitConversion : false }); /** * result1 will be `{ prop: \"1234\" }` - notice how the prop value has been converted to string. * result2 will be `{ prop: 1234 }` - default behaviour */ \u5b83\u5982\u4f55\u5904\u7406\u5faa\u73af\u5f15\u7528? Circular references are ignored. For example, if you are transforming class User that contains property photos with type of Photo , and Photo contains link user to its parent User , then user will be ignored during transformation. Circular references are not ignored only during classToClass operation. \u4f8b\u5b50\u4e0e Angular2 Lets say you want to download users and want them automatically to be mapped to the instances of User class. TypeScript import { plainToClass } from \"class-transformer\" ; this . http . get ( \"users.json\" ) . map (( res ) => res . json ()) . map (( res ) => plainToClass ( User , res as Object [])) . subscribe (( users ) => { // now \"users\" is type of User[] and each user has getName() and isAdult() methods available console . log ( users ); }); You can also inject a class ClassTransformer as a service in providers , and use its methods. Example how to use with angular 2 in plunker . Source code is here . \u6837\u54c1 Take a look on samples in ./sample for more examples of usages. \u53d1\u5e03\u8bf4\u660e See information about breaking changes and release notes here .","title":"class-transformer"},{"location":"docs/validator/class-transformer/#class-transformer","text":"In JavaScript there are two types of objects: plain (literal) objects class (constructor) objects Plain objects are objects that are instances of Object class. Sometimes they are called literal objects, when created via {} notation. Class objects are instances of classes with own defined constructor, properties and methods. Usually you define them via class notation. So, what is the problem? Sometimes you want to transform plain javascript object to the ES6 classes you have. For example, if you are loading a json from your backend, some api or from a json file, and after you JSON.parse it you have a plain javascript object, not instance of class you have. For example you have a list of users in your users.json that you are loading: JSON [ { \"id\" : 1 , \"firstName\" : \"Johny\" , \"lastName\" : \"Cage\" , \"age\" : 27 }, { \"id\" : 2 , \"firstName\" : \"Ismoil\" , \"lastName\" : \"Somoni\" , \"age\" : 50 }, { \"id\" : 3 , \"firstName\" : \"Luke\" , \"lastName\" : \"Dacascos\" , \"age\" : 12 } ] And you have a User class: TypeScript export class User { id : number ; firstName : string ; lastName : string ; age : number ; getName () { return this . firstName + \" \" + this . lastName ; } isAdult () { return this . age > 36 && this . age < 60 ; } } You are assuming that you are downloading users of type User from users.json file and may want to write following code: TypeScript fetch ( \"users.json\" ). then (( users : User []) => { // you can use users here, and type hinting also will be available to you, // but users are not actually instances of User class // this means that you can't use methods of User class }); In this code you can use users[0].id , you can also use users[0].firstName and users[0].lastName . However you cannot use users[0].getName() or users[0].isAdult() because \"users\" actually is array of plain javascript objects, not instances of User object. You actually lied to compiler when you said that its users: User[] . So what to do? How to make a users array of instances of User objects instead of plain javascript objects? Solution is to create new instances of User object and manually copy all properties to new objects. But things may go wrong very fast once you have a more complex object hierarchy. Alternatives? Yes, you can use class-transformer. Purpose of this library is to help you to map your plain javascript objects to the instances of classes you have. This library also great for models exposed in your APIs, because it provides a great tooling to control what your models are exposing in your API. Here is an example how it will look like: TypeScript fetch ( \"users.json\" ). then (( users : Object []) => { const realUsers = plainToClass ( User , users ); // now each user in realUsers is an instance of User class }); Now you can use users[0].getName() and users[0].isAdult() methods.","title":"\u4ec0\u4e48\u662f class-transformer"},{"location":"docs/validator/class-transformer/#_1","text":"","title":"\u5b89\u88c5"},{"location":"docs/validator/class-transformer/#nodejs","text":"Install module: npm install class-transformer --save reflect-metadata shim is required, install it too: npm install reflect-metadata --save and make sure to import it in a global place, like app.ts: TypeScript import \"reflect-metadata\" ; ES6 features are used, if you are using old version of node.js you may need to install es6-shim: npm install es6-shim --save and import it in a global place like app.ts: TypeScript import \"es6-shim\" ;","title":"Node.js"},{"location":"docs/validator/class-transformer/#_2","text":"Install module: npm install class-transformer --save reflect-metadata shim is required, install it too: npm install reflect-metadata --save add <script> to reflect-metadata in the head of your index.html : HTML < html > < head > <!-- ... --> < script src = \"node_modules/reflect-metadata/Reflect.js\" ></ script > </ head > <!-- ... --> </ html > If you are using angular 2 you should already have this shim installed. If you are using system.js you may want to add this into map and package config: JSON { \"map\" : { \"class-transformer\" : \"node_modules/class-transformer\" }, \"packages\" : { \"class-transformer\" : { \"main\" : \"index.js\" , \"defaultExtension\" : \"js\" } } }","title":"\u6d4f\u89c8\u5668"},{"location":"docs/validator/class-transformer/#_3","text":"","title":"\u65b9\u6cd5"},{"location":"docs/validator/class-transformer/#plaintoclass","text":"This method transforms a plain javascript object to instance of specific class. TypeScript import { plainToClass } from \"class-transformer\" ; let users = plainToClass ( User , userJson ); // to convert user plain object a single user. also supports arrays","title":"plainToClass"},{"location":"docs/validator/class-transformer/#plaintoclassfromexist","text":"This method transforms a plain object into an instance using an already filled Object which is an instance of the target class. TypeScript const defaultUser = new User (); defaultUser . role = \"user\" ; let mixedUser = plainToClassFromExist ( defaultUser , user ); // mixed user should have the value role = user when no value is set otherwise.","title":"plainToClassFromExist"},{"location":"docs/validator/class-transformer/#classtoplain","text":"This method transforms your class object back to plain javascript object, that can be JSON.stringify later. TypeScript import { classToPlain } from \"class-transformer\" ; let photo = classToPlain ( photo );","title":"classToPlain"},{"location":"docs/validator/class-transformer/#classtoclass","text":"This method transforms your class object into a new instance of the class object. This may be treated as deep clone of your objects. TypeScript import { classToClass } from \"class-transformer\" ; let photo = classToClass ( photo ); You can also use an ignoreDecorators option in transformation options to ignore all decorators you classes is using.","title":"classToClass"},{"location":"docs/validator/class-transformer/#serialize","text":"You can serialize your model right to json using serialize method: TypeScript import { serialize } from \"class-transformer\" ; let photo = serialize ( photo ); serialize works with both arrays and non-arrays.","title":"serialize"},{"location":"docs/validator/class-transformer/#deserialize-and-deserializearray","text":"You can deserialize your model from json using the deserialize method: TypeScript import { deserialize } from \"class-transformer\" ; let photo = deserialize ( Photo , photo ); To make deserialization work with arrays, use the deserializeArray method: TypeScript import { deserializeArray } from \"class-transformer\" ; let photos = deserializeArray ( Photo , photos );","title":"deserialize and deserializeArray"},{"location":"docs/validator/class-transformer/#_4","text":"The default behaviour of the plainToClass method is to set all properties from the plain object, even those which are not specified in the class. TypeScript import { plainToClass } from \"class-transformer\" ; class User { id : number ; firstName : string ; lastName : string ; } const fromPlainUser = { unkownProp : \"hello there\" , firstName : \"Umed\" , lastName : \"Khudoiberdiev\" , }; console . log ( plainToClass ( User , fromPlainUser )); // User { // unkownProp: 'hello there', // firstName: 'Umed', // lastName: 'Khudoiberdiev', // } If this behaviour does not suit your needs, you can use the excludeExtraneousValues option in the plainToClass method while exposing all your class properties as a requirement. TypeScript import { Expose , plainToClass } from \"class-transformer\" ; class User { @Expose () id : number ; @Expose () firstName : string ; @Expose () lastName : string ; } const fromPlainUser = { unkownProp : \"hello there\" , firstName : \"Umed\" , lastName : \"Khudoiberdiev\" , }; console . log ( plainToClass ( User , fromPlainUser , { excludeExtraneousValues : true })); // User { // id: undefined, // firstName: 'Umed', // lastName: 'Khudoiberdiev' // }","title":"\u6267\u884c\u7c7b\u578b\u5b89\u5168\u7684\u5b9e\u4f8b"},{"location":"docs/validator/class-transformer/#_5","text":"When you are trying to transform objects that have nested objects, it's required to known what type of object you are trying to transform. Since Typescript does not have good reflection abilities yet, we should implicitly specify what type of object each property contain. This is done using @Type decorator. Lets say we have an album with photos. And we are trying to convert album plain object to class object: TypeScript import { Type , plainToClass } from \"class-transformer\" ; export class Album { id : number ; name : string ; @Type (() => Photo ) photos : Photo []; } export class Photo { id : number ; filename : string ; } let album = plainToClass ( Album , albumJson ); // now album is Album object with Photo objects inside","title":"\u4f7f\u7528\u5d4c\u5957\u5bf9\u8c61"},{"location":"docs/validator/class-transformer/#_6","text":"In case the nested object can be of different types, you can provide an additional options object, that specifies a discriminator. The discriminator option must define a property that holds the subtype name for the object and the possible subTypes that the nested object can converted to. A sub type has a value , that holds the constructor of the Type and the name , that can match with the property of the discriminator. Lets say we have an album that has a top photo. But this photo can be of certain different types. And we are trying to convert album plain object to class object. The plain object input has to define the additional property __type . This property is removed during transformation by default: JSON input : JSON { \"id\" : 1 , \"name\" : \"foo\" , \"topPhoto\" : { \"id\" : 9 , \"filename\" : \"cool_wale.jpg\" , \"depth\" : 1245 , \"__type\" : \"underwater\" } } TypeScript import { Type , plainToClass } from \"class-transformer\" ; export abstract class Photo { id : number ; filename : string ; } export class Landscape extends Photo { panorama : boolean ; } export class Portrait extends Photo { person : Person ; } export class UnderWater extends Photo { depth : number ; } export class Album { id : number ; name : string ; @Type (() => Photo , { discriminator : { property : \"__type\" , subTypes : [ { value : Landscape , name : \"landscape\" }, { value : Portrait , name : \"portrait\" }, { value : UnderWater , name : \"underwater\" }, ], }, }) topPhoto : Landscape | Portrait | UnderWater ; } let album = plainToClass ( Album , albumJson ); // now album is Album object with a UnderWater object without `__type` property. Hint: The same applies for arrays with different sub types. Moreover you can specify keepDiscriminatorProperty: true in the options to keep the discriminator property also inside your resulting class.","title":"\u63d0\u4f9b\u591a\u4e2a\u7c7b\u578b\u9009\u9879"},{"location":"docs/validator/class-transformer/#getters","text":"You can expose what your getter or method return by setting an @Expose() decorator to those getters or methods: TypeScript import { Expose } from \"class-transformer\" ; export class User { id : number ; firstName : string ; lastName : string ; password : string ; @Expose () get name () { return this . firstName + \" \" + this . lastName ; } @Expose () getFullName () { return this . firstName + \" \" + this . lastName ; } }","title":"\u516c\u5f00 getters \u548c\u65b9\u6cd5\u8fd4\u56de\u503c"},{"location":"docs/validator/class-transformer/#_7","text":"If you want to expose some of the properties with a different name, you can do that by specifying a name option to @Expose decorator: TypeScript import { Expose } from \"class-transformer\" ; export class User { @Expose ({ name : \"uid\" }) id : number ; firstName : string ; lastName : string ; @Expose ({ name : \"secretKey\" }) password : string ; @Expose ({ name : \"fullName\" }) getFullName () { return this . firstName + \" \" + this . lastName ; } }","title":"\u516c\u5f00\u5177\u6709\u4e0d\u540c\u540d\u79f0\u7684\u5c5e\u6027"},{"location":"docs/validator/class-transformer/#_8","text":"Sometimes you want to skip some properties during transformation. This can be done using @Exclude decorator: TypeScript import { Exclude } from \"class-transformer\" ; export class User { id : number ; email : string ; @Exclude () password : string ; } Now when you transform a User, the password property will be skipped and not be included in the transformed result.","title":"\u8df3\u8fc7\u7279\u5b9a\u5c5e\u6027"},{"location":"docs/validator/class-transformer/#_9","text":"You can control on what operation you will exclude a property. Use toClassOnly or toPlainOnly options: TypeScript import { Exclude } from \"class-transformer\" ; export class User { id : number ; email : string ; @Exclude ({ toPlainOnly : true }) password : string ; } Now password property will be excluded only during classToPlain operation. Vice versa, use the toClassOnly option.","title":"\u64cd\u4f5c\u7684\u8df3\u8fc7\u4f9d\u8d56\u5173\u7cfb"},{"location":"docs/validator/class-transformer/#_10","text":"You can skip all properties of the class, and expose only those are needed explicitly: TypeScript import { Exclude , Expose } from \"class-transformer\" ; @Exclude () export class User { @Expose () id : number ; @Expose () email : string ; password : string ; } Now id and email will be exposed, and password will be excluded during transformation. Alternatively, you can set exclusion strategy during transformation: TypeScript import { classToPlain } from \"class-transformer\" ; let photo = classToPlain ( photo , { strategy : \"excludeAll\" }); In this case you don't need to @Exclude() a whole class.","title":"\u8df3\u8fc7\u7c7b\u7684\u6240\u6709\u5c5e\u6027"},{"location":"docs/validator/class-transformer/#_11","text":"If you name your private properties with a prefix, lets say with _ , then you can exclude such properties from transformation too: TypeScript import { classToPlain } from \"class-transformer\" ; let photo = classToPlain ( photo , { excludePrefixes : [ \"_\" ] }); This will skip all properties that start with _ prefix. You can pass any number of prefixes and all properties that begin with these prefixes will be ignored. For example: TypeScript import { Expose , classToPlain } from \"class-transformer\" ; export class User { id : number ; private _firstName : string ; private _lastName : string ; _password : string ; setName ( firstName : string , lastName : string ) { this . _firstName = firstName ; this . _lastName = lastName ; } @Expose () get name () { return this . _firstName + \" \" + this . _lastName ; } } const user = new User (); user . id = 1 ; user . setName ( \"Johny\" , \"Cage\" ); user . _password = \"123\" ; const plainUser = classToPlain ( user , { excludePrefixes : [ \"_\" ] }); // here plainUser will be equal to // { id: 1, name: \"Johny Cage\" }","title":"\u8df3\u8fc7\u79c1\u6709\u5c5e\u6027\u6216\u67d0\u4e9b\u524d\u7f00\u5c5e\u6027"},{"location":"docs/validator/class-transformer/#_12","text":"You can use groups to control what data will be exposed and what will not be: TypeScript import { Exclude , Expose , classToPlain } from \"class-transformer\" ; export class User { id : number ; name : string ; @Expose ({ groups : [ \"user\" , \"admin\" ] }) // this means that this data will be exposed only to users and admins email : string ; @Expose ({ groups : [ \"user\" ] }) // this means that this data will be exposed only to users password : string ; } let user1 = classToPlain ( user , { groups : [ \"user\" ] }); // will contain id, name, email and password let user2 = classToPlain ( user , { groups : [ \"admin\" ] }); // will contain id, name and email","title":"\u4f7f\u7528\u7ec4\u6765\u63a7\u5236\u6392\u9664\u7684\u5c5e\u6027"},{"location":"docs/validator/class-transformer/#_13","text":"If you are building an API that has different versions, class-transformer has extremely useful tools for that. You can control which properties of your model should be exposed or excluded in what version. Example: TypeScript import { Exclude , Expose , classToPlain } from \"class-transformer\" ; export class User { id : number ; name : string ; @Expose ({ since : 0.7 , until : 1 }) // this means that this property will be exposed for version starting from 0.7 until 1 email : string ; @Expose ({ since : 2.1 }) // this means that this property will be exposed for version starting from 2.1 password : string ; } let user1 = classToPlain ( user , { version : 0.5 }); // will contain id and name let user2 = classToPlain ( user , { version : 0.7 }); // will contain id, name and email let user3 = classToPlain ( user , { version : 1 }); // will contain id and name let user4 = classToPlain ( user , { version : 2 }); // will contain id and name let user5 = classToPlain ( user , { version : 2.1 }); // will contain id, name and password","title":"\u4f7f\u7528\u7248\u672c\u63a7\u5236\u6765\u63a7\u5236\u516c\u5f00\u7684\u548c\u88ab\u6392\u9664\u7684\u5c5e\u6027"},{"location":"docs/validator/class-transformer/#onverting","text":"Sometimes you have a Date in your plain javascript object received in a string format. And you want to create a real javascript Date object from it. You can do it simply by passing a Date object to the @Type decorator: TypeScript import { Type } from \"class-transformer\" ; export class User { id : number ; email : string ; password : string ; @Type (() => Date ) registrationDate : Date ; } Same technique can be used with Number , String , Boolean primitive types when you want to convert your values into these types.","title":"\u0421onverting \u65e5\u671f\u5b57\u7b26\u4e32\u5230\u65e5\u671f\u5bf9\u8c61"},{"location":"docs/validator/class-transformer/#_14","text":"When you are using arrays you must provide a type of the object that array contains. This type, you specify in a @Type() decorator: TypeScript import { Type } from \"class-transformer\" ; export class Photo { id : number ; name : string ; @Type (() => Album ) albums : Album []; } You can also use custom array types: TypeScript import { Type } from \"class-transformer\" ; export class AlbumCollection extends Array < Album > { // custom array functions ... } export class Photo { id : number ; name : string ; @Type (() => Album ) albums : AlbumCollection ; } Library will handle proper transformation automatically. ES6 collections Set and Map also require the @Type decorator: TypeScript export class Skill { name : string ; } export class Weapon { name : string ; range : number ; } export class Player { name : string ; @Type (() => Skill ) skills : Set < Skill > ; @Type (() => Weapon ) weapons : Map < string , Weapon > ; }","title":"\u4f7f\u7528\u6570\u7ec4"},{"location":"docs/validator/class-transformer/#_15","text":"","title":"\u989d\u5916\u7684\u6570\u636e\u8f6c\u6362"},{"location":"docs/validator/class-transformer/#_16","text":"You can perform additional data transformation using @Transform decorator. For example, you want to make your Date object to be a moment object when you are transforming object from plain to class: TypeScript import { Transform } from \"class-transformer\" ; import * as moment from \"moment\" ; import { Moment } from \"moment\" ; export class Photo { id : number ; @Type (() => Date ) @Transform (({ value }) => moment ( value ), { toClassOnly : true }) date : Moment ; } Now when you call plainToClass and send a plain representation of the Photo object, it will convert a date value in your photo object to moment date. @Transform decorator also supports groups and versioning.","title":"\u57fa\u672c\u7528\u6cd5"},{"location":"docs/validator/class-transformer/#_17","text":"The @Transform decorator is given more arguments to let you configure how you want the transformation to be done. TypeScript @Transform (({ value , key , obj , type }) => value ) Argument Description value The property value before the transformation. key The name of the transformed property. obj The transformation source object. type The transformation type. options The options object passed to the transformation method.","title":"\u9ad8\u7ea7\u7528\u6cd5"},{"location":"docs/validator/class-transformer/#_18","text":"Signature Example Description @TransformClassToPlain @TransformClassToPlain({ groups: [\"user\"] }) Transform the method return with classToPlain and expose the properties on the class. @TransformClassToClass @TransformClassToClass({ groups: [\"user\"] }) Transform the method return with classToClass and expose the properties on the class. @TransformPlainToClass @TransformPlainToClass(User, { groups: [\"user\"] }) Transform the method return with plainToClass and expose the properties on the class. The above decorators accept one optional argument: ClassTransformOptions - The transform options like groups, version, name An example: TypeScript @Exclude () class User { id : number ; @Expose () firstName : string ; @Expose () lastName : string ; @Expose ({ groups : [ \"user.email\" ] }) email : string ; password : string ; } class UserController { @TransformClassToPlain ({ groups : [ \"user.email\" ] }) getUser () { const user = new User (); user . firstName = \"Snir\" ; user . lastName = \"Segal\" ; user . password = \"imnosuperman\" ; return user ; } } const controller = new UserController (); const user = controller . getUser (); the user variable will contain only firstName,lastName, email properties because they are the exposed variables. email property is also exposed because we metioned the group \"user.email\".","title":"\u5176\u4ed6\u4fee\u9970\u7b26"},{"location":"docs/validator/class-transformer/#_19","text":"Generics are not supported because TypeScript does not have good reflection abilities yet. Once TypeScript team provide us better runtime type reflection tools, generics will be implemented. There are some tweaks however you can use, that maybe can solve your problem. Checkout this example.","title":"\u4f7f\u7528\u6cdb\u578b"},{"location":"docs/validator/class-transformer/#_20","text":"NOTE If you use class-validator together with class-transformer you propably DON'T want to enable this function. Enables automatic conversion between built-in types based on type information provided by Typescript. Disabled by default. TypeScript import { IsString } from \"class-validator\" ; class MyPayload { @IsString () prop : string ; } const result1 = plainToClass ( MyPayload , { prop : 1234 }, { enableImplicitConversion : true }); const result2 = plainToClass ( MyPayload , { prop : 1234 }, { enableImplicitConversion : false }); /** * result1 will be `{ prop: \"1234\" }` - notice how the prop value has been converted to string. * result2 will be `{ prop: 1234 }` - default behaviour */","title":"\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362"},{"location":"docs/validator/class-transformer/#_21","text":"Circular references are ignored. For example, if you are transforming class User that contains property photos with type of Photo , and Photo contains link user to its parent User , then user will be ignored during transformation. Circular references are not ignored only during classToClass operation.","title":"\u5b83\u5982\u4f55\u5904\u7406\u5faa\u73af\u5f15\u7528?"},{"location":"docs/validator/class-transformer/#angular2","text":"Lets say you want to download users and want them automatically to be mapped to the instances of User class. TypeScript import { plainToClass } from \"class-transformer\" ; this . http . get ( \"users.json\" ) . map (( res ) => res . json ()) . map (( res ) => plainToClass ( User , res as Object [])) . subscribe (( users ) => { // now \"users\" is type of User[] and each user has getName() and isAdult() methods available console . log ( users ); }); You can also inject a class ClassTransformer as a service in providers , and use its methods. Example how to use with angular 2 in plunker . Source code is here .","title":"\u4f8b\u5b50\u4e0e Angular2"},{"location":"docs/validator/class-transformer/#_22","text":"Take a look on samples in ./sample for more examples of usages.","title":"\u6837\u54c1"},{"location":"docs/validator/class-transformer/#_23","text":"See information about breaking changes and release notes here .","title":"\u53d1\u5e03\u8bf4\u660e"},{"location":"docs/validator/class-validator/","text":"\u5141\u8bb8\u4f7f\u7528\u57fa\u4e8e\u88c5\u9970\u5668\u548c\u975e\u88c5\u9970\u5668\u7684\u9a8c\u8bc1\u3002 \u5185\u90e8\u4f7f\u7528 validator.js \u6267\u884c\u9a8c\u8bc1\u3002 \u7c7b\u9a8c\u8bc1\u5668\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u548c node.js \u5e73\u53f0\u4e0a\u8fd0\u884c\u3002 \u5b89\u88c5 Text Only npm install class-validator --save Note: Please use at least npm@6 when using class-validator. From npm@6 the dependency tree is flattened, which is required by class-validator to function properly. \u4f7f\u7528 Create your class and put some validation decorators on the properties you want to validate: TypeScript import { validate , validateOrReject , Contains , IsInt , Length , IsEmail , IsFQDN , IsDate , Min , Max , } from \"class-validator\" ; export class Post { @Length ( 10 , 20 ) title : string ; @Contains ( \"hello\" ) text : string ; @IsInt () @Min ( 0 ) @Max ( 10 ) rating : number ; @IsEmail () email : string ; @IsFQDN () site : string ; @IsDate () createDate : Date ; } let post = new Post (); post . title = \"Hello\" ; // should not pass post . text = \"this is a great post about hell world\" ; // should not pass post . rating = 11 ; // should not pass post . email = \"google.com\" ; // should not pass post . site = \"googlecom\" ; // should not pass validate ( post ). then (( errors ) => { // errors is an array of validation errors if ( errors . length > 0 ) { console . log ( \"validation failed. errors: \" , errors ); } else { console . log ( \"validation succeed\" ); } }); validateOrReject ( post ). catch (( errors ) => { console . log ( \"Promise rejected (validation failed). Errors: \" , errors ); }); // or async function validateOrRejectExample ( input ) { try { await validateOrReject ( input ); } catch ( errors ) { console . log ( \"Caught promise rejection (validation failed). Errors: \" , errors ); } } \u4f20\u8f93\u9009\u9879 validate \u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a ValidatorOptions \u5bf9\u8c61\u3002 TypeScript export interface ValidatorOptions { skipMissingProperties? : boolean ; whitelist? : boolean ; forbidNonWhitelisted? : boolean ; groups? : string []; dismissDefaultMessages? : boolean ; validationError ?: { target? : boolean ; value? : boolean ; }; forbidUnknownValues? : boolean ; stopAtFirstError? : boolean ; } It's highly advised to set forbidUnknownValues: true as it will prevent unknown objects from passing validation. \u9a8c\u8bc1\u9519\u8bef ' validate '\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a' ValidationError '\u5bf9\u8c61\u6570\u7ec4\u3002\u6bcf\u4e2a\u201cValidationError\u201d\u662f: TypeScript { target : Object ; // Object that was validated. property : string ; // Object's property that haven't pass validation. value : any ; // Value that haven't pass a validation. constraints ?: { // Constraints that failed validation with error messages. [ type : string ] : string ; }; children? : ValidationError []; // Contains all nested validation errors of the property } In our case, when we validated a Post object, we have such an array of ValidationError objects: TypeScript [{ target : /* post object */ , property : \"title\" , value : \"Hello\" , constraints : { length : \"$property must be longer than or equal to 10 characters\" } }, { target : /* post object */ , property : \"text\" , value : \"this is a great post about hell world\" , constraints : { contains : \"text must contain a hello string\" } }, // and other errors ] If you don't want a target to be exposed in validation errors, there is a special option when you use validator: TypeScript validator . validate ( post , { validationError : { target : false } }); This is especially useful when you send errors back over http, and you most probably don't want to expose the whole target object. \u9a8c\u8bc1\u6d88\u606f You can specify validation message in the decorator options and that message will be returned in the ValidationError returned by the validate method (in the case that validation for this field fails). TypeScript import { MinLength , MaxLength } from \"class-validator\" ; export class Post { @MinLength ( 10 , { message : \"Title is too short\" }) @MaxLength ( 50 , { message : \"Title is too long\" }) title : string ; } There are few special tokens you can use in your messages: $value - the value that is being validated $property - name of the object's property being validated $target - name of the object's class being validated $constraint1 , $constraint2 , ... $constraintN - constraints defined by specific validation type Example of usage: TypeScript import { MinLength , MaxLength } from \"class-validator\" ; export class Post { @MinLength ( 10 , { // here, $constraint1 will be replaced with \"10\", and $value with actual supplied value message : \"Title is too short. Minimal length is $constraint1 characters, but actual is $value\" , }) @MaxLength ( 50 , { // here, $constraint1 will be replaced with \"50\", and $value with actual supplied value message : \"Title is too long. Maximal length is $constraint1 characters, but actual is $value\" , }) title : string ; } Also you can provide a function, that returns a message. This allows you to create more granular messages: TypeScript import { MinLength , MaxLength , ValidationArguments } from \"class-validator\" ; export class Post { @MinLength ( 10 , { message : ( args : ValidationArguments ) => { if ( args . value . length === 1 ) { return \"Too short, minimum length is 1 character\" ; } else { return \"Too short, minimum length is \" + args . constraints [ 0 ] + \" characters\" ; } }, }) title : string ; } Message function accepts ValidationArguments which contains the following information: value - the value that is being validated constraints - array of constraints defined by specific validation type targetName - name of the object's class being validated object - object that is being validated property - name of the object's property being validated \u9a8c\u8bc1\u6570\u7ec4 If your field is an array and you want to perform validation of each item in the array you must specify a special each: true decorator option: TypeScript import { MinLength , MaxLength } from \"class-validator\" ; export class Post { @MaxLength ( 20 , { each : true , }) tags : string []; } This will validate each item in post.tags array. \u9a8c\u8bc1\u96c6 If your field is a set and you want to perform validation of each item in the set you must specify a special each: true decorator option: TypeScript import { MinLength , MaxLength } from \"class-validator\" ; export class Post { @MaxLength ( 20 , { each : true , }) tags : Set < string > ; } This will validate each item in post.tags set. \u9a8c\u8bc1\u56fe If your field is a map and you want to perform validation of each item in the map you must specify a special each: true decorator option: TypeScript import { MinLength , MaxLength } from \"class-validator\" ; export class Post { @MaxLength ( 20 , { each : true , }) tags : Map < string , string > ; } This will validate each item in post.tags map. \u9a8c\u8bc1\u5d4c\u5957\u5bf9\u8c61 If your object contains nested objects and you want the validator to perform their validation too, then you need to use the @ValidateNested() decorator: TypeScript import { ValidateNested } from \"class-validator\" ; export class Post { @ValidateNested () user : User ; } Please note that nested object must be an instance of a class, otherwise @ValidateNested won't know what class is target of validation. Check also Validating plain objects . It also works with multi-dimensional array, like : TypeScript import { ValidateNested } from \"class-validator\" ; export class Plan2D { @ValidateNested () matrix : Point [][]; } \u9a8c\u8bc1\u627f\u8bfa If your object contains property with Promise -returned value that should be validated, then you need to use the @ValidatePromise() decorator: TypeScript import { ValidatePromise , Min } from \"class-validator\" ; export class Post { @Min ( 0 ) @ValidatePromise () userId : Promise < number > ; } It also works great with @ValidateNested decorator: TypeScript import { ValidateNested , ValidatePromise } from \"class-validator\" ; export class Post { @ValidateNested () @ValidatePromise () user : Promise < User > ; } \u9a8c\u8bc1\u7ee7\u627f\u4fee\u9970\u7b26 When you define a subclass which extends from another one, the subclass will automatically inherit the parent's decorators. If a property is redefined in the descendant class decorators will be applied on it both from that and the base class. TypeScript import { validate } from \"class-validator\" ; class BaseContent { @IsEmail () email : string ; @IsString () password : string ; } class User extends BaseContent { @MinLength ( 10 ) @MaxLength ( 20 ) name : string ; @Contains ( \"hello\" ) welcome : string ; @MinLength ( 20 ) password : string ; } let user = new User (); user . email = \"invalid email\" ; // inherited property user . password = \"too short\" ; // password wil be validated not only against IsString, but against MinLength as well user . name = \"not valid\" ; user . welcome = \"helo\" ; validate ( user ). then (( errors ) => { // ... }); // it will return errors for email, title and text properties \u6709\u6761\u4ef6\u7684\u9a8c\u8bc1 The conditional validation decorator ( @ValidateIf ) can be used to ignore the validators on a property when the provided condition function returns false. The condition function takes the object being validated and must return a boolean . TypeScript import { ValidateIf , IsNotEmpty } from \"class-validator\" ; export class Post { otherProperty : string ; @ValidateIf (( o ) => o . otherProperty === \"value\" ) @IsNotEmpty () example : string ; } In the example above, the validation rules applied to example won't be run unless the object's otherProperty is \"value\" . Note that when the condition is false all validation decorators are ignored, including isDefined . \u767d\u540d\u5355 Even if your object is an instance of a validation class it can contain additional properties that are not defined. If you do not want to have such properties on your object, pass special flag to validate method: TypeScript import { validate } from \"class-validator\" ; // ... validate ( post , { whitelist : true }); This will strip all properties that don't have any decorators. If no other decorator is suitable for your property, you can use @Allow decorator: TypeScript import { validate , Allow , Min } from \"class-validator\" ; export class Post { @Allow () title : string ; @Min ( 0 ) views : number ; nonWhitelistedProperty : number ; } let post = new Post (); post . title = 'Hello world!' ; post . views = 420 ; post . nonWhitelistedProperty = 69 ; ( post as any ). anotherNonWhitelistedProperty = \"something\" ; validate ( post ). then ( errors => { // post.nonWhitelistedProperty is not defined // (post as any).anotherNonWhitelistedProperty is not defined ... }); If you would rather to have an error thrown when any non-whitelisted properties are present, pass another flag to validate method: TypeScript import { validate } from \"class-validator\" ; // ... validate ( post , { whitelist : true , forbidNonWhitelisted : true }); \u5c06\u4e0a\u4e0b\u6587\u4f20\u9012\u7ed9\u88c5\u9970\u5668 It's possible to pass a custom object to decorators which will be accessible on the ValidationError instance of the property if validation failed. TypeScript import { validate } from \"class-validator\" ; class MyClass { @MinLength ( 32 , { message : \"EIC code must be at least 32 characters\" , context : { errorCode : 1003 , developerNote : \"The validated string must contain 32 or more characters.\" , }, }) eicCode : string ; } const model = new MyClass (); validate ( model ). then (( errors ) => { //errors[0].contexts['minLength'].errorCode === 1003 }); \u8df3\u8fc7\u7f3a\u5931\u7684\u5c5e\u6027 Sometimes you may want to skip validation of the properties that do not exist in the validating object. This is usually desirable when you want to update some parts of the object, and want to validate only updated parts, but skip everything else, e.g. skip missing properties. In such situations you will need to pass a special flag to validate method: TypeScript import { validate } from \"class-validator\" ; // ... validate ( post , { skipMissingProperties : true }); When skipping missing properties, sometimes you want not to skip all missing properties, some of them maybe required for you, even if skipMissingProperties is set to true. For such cases you should use @IsDefined() decorator. @IsDefined() is the only decorator that ignores skipMissingProperties option. \u9a8c\u8bc1\u7ec4 In different situations you may want to use different validation schemas of the same object. In such cases you can use validation groups. TypeScript import { validate , Min , Length } from \"class-validator\" ; export class User { @Min ( 12 , { groups : [ \"registration\" ], }) age : number ; @Length ( 2 , 20 , { groups : [ \"registration\" , \"admin\" ], }) name : string ; } let user = new User (); user . age = 10 ; user . name = \"Alex\" ; validate ( user , { groups : [ \"registration\" ], }); // this will not pass validation validate ( user , { groups : [ \"admin\" ], }); // this will pass validation validate ( user , { groups : [ \"registration\" , \"admin\" ], }); // this will not pass validation validate ( user , { groups : undefined , // the default }); // this will not pass validation since all properties get validated regardless of their groups validate ( user , { groups : [], }); // this will not pass validation, (equivalent to 'groups: undefined', see above) There is also a special flag always: true in validation options that you can use. This flag says that this validation must be applied always no matter which group is used. \u81ea\u5b9a\u4e49\u9a8c\u8bc1\u7c7b If you have custom validation logic you can create a Constraint class : First create a file, lets say CustomTextLength.ts , and define a new class: TypeScript import { ValidatorConstraint , ValidatorConstraintInterface , ValidationArguments } from \"class-validator\" ; @ValidatorConstraint ({ name : \"customText\" , async : false }) export class CustomTextLength implements ValidatorConstraintInterface { validate ( text : string , args : ValidationArguments ) { return text . length > 1 && text . length < 10 ; // for async validations you must return a Promise<boolean> here } defaultMessage ( args : ValidationArguments ) { // here you can provide default error message if validation failed return \"Text ($value) is too short or too long!\" ; } } We marked our class with @ValidatorConstraint decorator. You can also supply a validation constraint name - this name will be used as \"error type\" in ValidationError. If you will not supply a constraint name - it will be auto-generated. Our class must implement ValidatorConstraintInterface interface and its validate method, which defines validation logic. If validation succeeds, method returns true, otherwise false. Custom validator can be asynchronous, if you want to perform validation after some asynchronous operations, simply return a promise with boolean inside in validate method. Also we defined optional method defaultMessage which defines a default error message, in the case that the decorator's implementation doesn't set an error message. 2) Then you can use your new validation constraint in your class: TypeScript import { Validate } from \"class-validator\" ; import { CustomTextLength } from \"./CustomTextLength\" ; export class Post { @Validate ( CustomTextLength , { message : \"Title is too short or long!\" , }) title : string ; } Here we set our newly created CustomTextLength validation constraint for Post.title . 3) And use validator as usual: TypeScript import { validate } from \"class-validator\" ; validate ( post ). then (( errors ) => { // ... }); You can also pass constraints to your validator, like this: TypeScript import { Validate } from \"class-validator\" ; import { CustomTextLength } from \"./CustomTextLength\" ; export class Post { @Validate ( CustomTextLength , [ 3 , 20 ], { message : \"Wrong post title\" , }) title : string ; } And use them from validationArguments object: TypeScript import { ValidationArguments , ValidatorConstraint , ValidatorConstraintInterface } from \"class-validator\" ; @ValidatorConstraint () export class CustomTextLength implements ValidatorConstraintInterface { validate ( text : string , validationArguments : ValidationArguments ) { return text . length > validationArguments . constraints [ 0 ] && text . length < validationArguments . constraints [ 1 ]; } } \u81ea\u5b9a\u4e49\u9a8c\u8bc1\u4fee\u9970\u7b26 You can also create a custom decorators. Its the most elegant way of using a custom validations. Lets create a decorator called @IsLongerThan : Create a decorator itself: TypeScript import { registerDecorator , ValidationOptions , ValidationArguments } from \"class-validator\" ; export function IsLongerThan ( property : string , validationOptions? : ValidationOptions ) { return function ( object : Object , propertyName : string ) { registerDecorator ({ name : \"isLongerThan\" , target : object.constructor , propertyName : propertyName , constraints : [ property ], options : validationOptions , validator : { validate ( value : any , args : ValidationArguments ) { const [ relatedPropertyName ] = args . constraints ; const relatedValue = ( args . object as any )[ relatedPropertyName ]; return typeof value === \"string\" && typeof relatedValue === \"string\" && value . length > relatedValue . length ; // you can return a Promise<boolean> here as well, if you want to make async validation }, }, }); }; } Put it to use: TypeScript import { IsLongerThan } from \"./IsLongerThan\" ; export class Post { title : string ; @IsLongerThan ( \"title\" , { /* you can also use additional validation options, like \"groups\" in your custom validation decorators. \"each\" is not supported */ message : \"Text must be longer than the title\" , }) text : string ; } In your custom decorators you can also use ValidationConstraint . Lets create another custom validation decorator called IsUserAlreadyExist : Create a ValidationConstraint and decorator: TypeScript import { registerDecorator , ValidationOptions , ValidatorConstraint , ValidatorConstraintInterface , ValidationArguments , } from \"class-validator\" ; @ValidatorConstraint ({ async : true }) export class IsUserAlreadyExistConstraint implements ValidatorConstraintInterface { validate ( userName : any , args : ValidationArguments ) { return UserRepository . findOneByName ( userName ). then (( user ) => { if ( user ) return false ; return true ; }); } } export function IsUserAlreadyExist ( validationOptions? : ValidationOptions ) { return function ( object : Object , propertyName : string ) { registerDecorator ({ target : object.constructor , propertyName : propertyName , options : validationOptions , constraints : [], validator : IsUserAlreadyExistConstraint , }); }; } note that we marked our constraint that it will by async by adding { async: true } in validation options. And put it to use: TypeScript import { IsUserAlreadyExist } from \"./IsUserAlreadyExist\" ; export class User { @IsUserAlreadyExist ({ message : \"User $value already exists. Choose another name.\" , }) name : string ; } \u4f7f\u7528\u670d\u52a1\u5bb9\u5668 Validator supports service container in the case if want to inject dependencies into your custom validator constraint classes. Here is example how to integrate it with typedi : TypeScript import { Container } from \"typedi\" ; import { useContainer , Validator } from \"class-validator\" ; // do this somewhere in the global application level: useContainer ( Container ); let validator = Container . get ( Validator ); // now everywhere you can inject Validator class which will go from the container // also you can inject classes using constructor injection into your custom ValidatorConstraint-s \u540c\u6b65\u9a8c\u8bc1 If you want to perform a simple non async validation you can use validateSync method instead of regular validate method. It has the same arguments as validate method. But note, this method ignores all async validations you have. \u624b\u52a8\u9a8c\u8bc1 There are several method exist in the Validator that allows to perform non-decorator based validation: TypeScript import { isEmpty , isBoolean } from \"class-validator\" ; isEmpty ( value ); isBoolean ( value ); \u9a8c\u8bc1\u4fee\u9970\u7b26 Decorator Description Common validation decorators @IsDefined(value: any) Checks if value is defined (!== undefined, !== null). This is the only decorator that ignores skipMissingProperties option. @IsOptional() Checks if given value is empty (=== null, === undefined) and if so, ignores all the validators on the property. @Equals(comparison: any) Checks if value equals (\"===\") comparison. @NotEquals(comparison: any) Checks if value not equal (\"!==\") comparison. @IsEmpty() Checks if given value is empty (=== '', === null, === undefined). @IsNotEmpty() Checks if given value is not empty (!== '', !== null, !== undefined). @IsIn(values: any[]) Checks if value is in a array of allowed values. @IsNotIn(values: any[]) Checks if value is not in a array of disallowed values. Type validation decorators @IsBoolean() Checks if a value is a boolean. @IsDate() Checks if the value is a date. @IsString() Checks if the string is a string. @IsNumber(options: IsNumberOptions) Checks if the value is a number. @IsInt() Checks if the value is an integer number. @IsArray() Checks if the value is an array @IsEnum(entity: object) Checks if the value is an valid enum Number validation decorators @IsDivisibleBy(num: number) Checks if the value is a number that's divisible by another. @IsPositive() Checks if the value is a positive number greater than zero. @IsNegative() Checks if the value is a negative number smaller than zero. @Min(min: number) Checks if the given number is greater than or equal to given number. @Max(max: number) Checks if the given number is less than or equal to given number. Date validation decorators @MinDate(date: Date) Checks if the value is a date that's after the specified date. @MaxDate(date: Date) Checks if the value is a date that's before the specified date. String-type validation decorators @IsBooleanString() Checks if a string is a boolean (e.g. is \"true\" or \"false\"). @IsDateString() Alias for @IsISO8601() . @IsNumberString(options?: IsNumericOptions) Checks if a string is a number. String validation decorators @Contains(seed: string) Checks if the string contains the seed. @NotContains(seed: string) Checks if the string not contains the seed. @IsAlpha() Checks if the string contains only letters (a-zA-Z). @IsAlphanumeric() Checks if the string contains only letters and numbers. @IsDecimal(options?: IsDecimalOptions) Checks if the string is a valid decimal value. Default IsDecimalOptions are force_decimal=False , decimal_digits: '1,' , locale: 'en-US' @IsAscii() Checks if the string contains ASCII chars only. @IsBase32() Checks if a string is base32 encoded. @IsBase64() Checks if a string is base64 encoded. @IsIBAN() Checks if a string is a IBAN (International Bank Account Number). @IsBIC() Checks if a string is a BIC (Bank Identification Code) or SWIFT code. @IsByteLength(min: number, max?: number) Checks if the string's length (in bytes) falls in a range. @IsCreditCard() Checks if the string is a credit card. @IsCurrency(options?: IsCurrencyOptions) Checks if the string is a valid currency amount. @IsEthereumAddress() Checks if the string is an Ethereum address using basic regex. Does not validate address checksums. @IsBtcAddress() Checks if the string is a valid BTC address. @IsDataURI() Checks if the string is a data uri format. @IsEmail(options?: IsEmailOptions) Checks if the string is an email. @IsFQDN(options?: IsFQDNOptions) Checks if the string is a fully qualified domain name (e.g. domain.com). @IsFullWidth() Checks if the string contains any full-width chars. @IsHalfWidth() Checks if the string contains any half-width chars. @IsVariableWidth() Checks if the string contains a mixture of full and half-width chars. @IsHexColor() Checks if the string is a hexadecimal color. @IsHSLColor() Checks if the string is an HSL color based on CSS Colors Level 4 specification . @IsRgbColor(options?: IsRgbOptions) Checks if the string is a rgb or rgba color. @IsIdentityCard(locale?: string) Checks if the string is a valid identity card code. @IsPassportNumber(countryCode?: string) Checks if the string is a valid passport number relative to a specific country code. @IsPostalCode(locale?: string) Checks if the string is a postal code. @IsHexadecimal() Checks if the string is a hexadecimal number. @IsOctal() Checks if the string is a octal number. @IsMACAddress(options?: IsMACAddressOptions) Checks if the string is a MAC Address. @IsIP(version?: \"4\"\\|\"6\") Checks if the string is an IP (version 4 or 6). @IsPort() Checks if the string is a valid port number. @IsISBN(version?: \"10\"\\|\"13\") Checks if the string is an ISBN (version 10 or 13). @IsEAN() Checks if the string is an if the string is an EAN (European Article Number). @IsISIN() Checks if the string is an ISIN (stock/security identifier). @IsISO8601(options?: IsISO8601Options) Checks if the string is a valid ISO 8601 date format. Use the option strict = true for additional checks for a valid date. @IsJSON() Checks if the string is valid JSON. @IsJWT() Checks if the string is valid JWT. @IsObject() Checks if the object is valid Object (null, functions, arrays will return false). @IsNotEmptyObject() Checks if the object is not empty. @IsLowercase() Checks if the string is lowercase. @IsLatLong() Checks if the string is a valid latitude-longitude coordinate in the format lat, long. @IsLatitude() Checks if the string or number is a valid latitude coordinate. @IsLongitude() Checks if the string or number is a valid longitude coordinate. @IsMobilePhone(locale: string) Checks if the string is a mobile phone number. @IsISO31661Alpha2() Checks if the string is a valid ISO 3166-1 alpha-2 officially assigned country code. @IsISO31661Alpha3() Checks if the string is a valid ISO 3166-1 alpha-3 officially assigned country code. @IsLocale() Checks if the string is a locale. @IsPhoneNumber(region: string) Checks if the string is a valid phone numberusing libphonenumber-js. @IsMongoId() Checks if the string is a valid hex-encoded representation of a MongoDB ObjectId. @IsMultibyte() Checks if the string contains one or more multibyte chars. @IsNumberString(options?: IsNumericOptions) Checks if the string is numeric. @IsSurrogatePair() Checks if the string contains any surrogate pairs chars. @IsUrl(options?: IsURLOptions) Checks if the string is an url. @IsMagnetURI() Checks if the string is a magnet uri format . @IsUUID(version?: \"3\"\\|\"4\"\\|\"5\"\\|\"all\") Checks if the string is a UUID (version 3, 4, 5 or all ). @IsFirebasePushId() Checks if the string is a Firebase Push ID @IsUppercase() Checks if the string is uppercase. @Length(min: number, max?: number) Checks if the string's length falls in a range. @MinLength(min: number) Checks if the string's length is not less than given number. @MaxLength(max: number) Checks if the string's length is not more than given number. @Matches(pattern: RegExp, modifiers?: string) Checks if string matches the pattern. Either matches('foo', /foo/i) or matches('foo', 'foo', 'i'). @IsMilitaryTime() Checks if the string is a valid representation of military time in the format HH:MM. @IsHash(algorithm: string) Checks if the string is a hash The following types are supported: md4 , md5 , sha1 , sha256 , sha384 , sha512 , ripemd128 , ripemd160 , tiger128 , tiger160 , tiger192 , crc32 , crc32b . @IsMimeType() Checks if the string matches to a valid MIME type format @IsSemVer() Checks if the string is a Semantic Versioning Specification (SemVer). @IsISSN(options?: IsISSNOptions) Checks if the string is a ISSN. @IsISRC() Checks if the string is a ISRC . @IsRFC3339() Checks if the string is a valid RFC 3339 date. Array validation decorators @ArrayContains(values: any[]) Checks if array contains all values from the given array of values. @ArrayNotContains(values: any[]) Checks if array does not contain any of the given values. @ArrayNotEmpty() Checks if given array is not empty. @ArrayMinSize(min: number) Checks if the array's length is greater than or equal to the specified number. @ArrayMaxSize(max: number) Checks if the array's length is less or equal to the specified number. @ArrayUnique(identifier?: (o) => any) Checks if all array's values are unique. Comparison for objects is reference-based. Optional function can be speciefied which return value will be used for the comparsion. Object validation decorators @IsInstance(value: any) Checks if the property is an instance of the passed value. Other decorators @Allow() Prevent stripping off the property when no other constraint is specified for it. \u5b9a\u4e49\u6ca1\u6709\u88c5\u9970\u5668\u7684\u9a8c\u8bc1\u6a21\u5f0f \u4f60\u53ef\u4ee5\u5728\u6ca1\u6709\u88c5\u9970\u5668\u7684\u60c5\u51b5\u4e0b\u5b9a\u4e49\u4f60\u7684\u9a8c\u8bc1\u6a21\u5f0f: you can define it in the separate object you can define it in the .json file This feature maybe useful in the cases if: are using es5/es6 and don't have decorators available you don't have a classes, and instead using interfaces you don't want to use model at all you want to have a validation schema separate of your model you want beautiful json-schema based validation models you simply hate decorators Here is an example of using it: Create a schema object: TypeScript import { ValidationSchema } from \"class-validator\" ; export let UserValidationSchema : ValidationSchema = { // using interface here is not required, its just for type-safety name : \"myUserSchema\" , // this is required, and must be unique properties : { firstName : [ { type : \"minLength\" , // validation type. All validation types are listed in ValidationTypes class. constraints : [ 2 ], }, { type : \"maxLength\" , constraints : [ 20 ], }, ], lastName : [ { type : \"minLength\" , constraints : [ 2 ], }, { type : \"maxLength\" , constraints : [ 20 ], }, ], email : [ { type : \"isEmail\" , }, ], }, }; Same schema can be provided in .json file, depend on your wish. Register your schema: TypeScript import { registerSchema } from \"class-validator\" ; import { UserValidationSchema } from \"./UserValidationSchema\" ; registerSchema ( UserValidationSchema ); // if schema is in .json file, then you can simply do registerSchema(require(\"path-to-schema.json\")); Better to put this code in a global place, maybe when you bootstrap your application, for example in app.ts . Validate your object using validation schema: TypeScript import { validate } from \"class-validator\" ; const user = { firstName : \"Johny\" , secondName : \"Cage\" , email : \"johny@cage.com\" }; validate ( \"myUserSchema\" , user ). then (( errors ) => { if ( errors . length > 0 ) { console . log ( \"Validation failed: \" , errors ); } else { console . log ( \"Validation succeed.\" ); } }); That's it. Here \"myUserSchema\" is the name of our validation schema. validate method will perform validation based on this schema \u9a8c\u8bc1\u7eaf\u5bf9\u8c61 \u7531\u4e8e\u88c5\u9970\u5668\u7684\u7279\u6027\uff0c\u9a8c\u8bc1\u8fc7\u7684\u5bf9\u8c61\u5fc5\u987b\u4f7f\u7528 new Class() \u8bed\u6cd5\u8fdb\u884c\u5b9e\u4f8b\u5316\u3002 \u5982\u679c\u4f60\u7528\u7c7b\u9a8c\u8bc1\u5668\u88c5\u9970\u5668\u5b9a\u4e49\u4e86\u4f60\u7684\u7c7b\uff0c\u5e76\u4e14\u4f60\u60f3\u9a8c\u8bc1\u666e\u901a\u7684 JS \u5bf9\u8c61(\u6587\u5b57\u5bf9\u8c61\u6216 JSON.parse \u8fd4\u56de\u7684\u5bf9\u8c61)\uff0c\u4f60\u9700\u8981\u901a\u8fc7\u4f7f\u7528 class-transformer \u5c06\u5176\u8f6c\u6362\u4e3a\u7c7b\u5b9e\u4f8b\u3002 \u6837\u54c1 \u8bf7\u53c2\u9605 ./sample \u4e2d\u7684\u793a\u4f8b\u4ee5\u83b7\u5f97\u66f4\u591a\u7528\u6cd5\u793a\u4f8b\u3002 \u6269\u5c55 \u6709\u51e0\u4e2a\u6269\u5c55\u53ef\u4ee5\u7b80\u5316\u7c7b\u9a8c\u8bc1\u5668\u4e0e\u5176\u4ed6\u6a21\u5757\u7684\u96c6\u6210: class-validator integration with class-transformer class-validator-rule ngx-dynamic-form-builder abarghoud/ngx-reactive-form-class-validator \u53d1\u5e03\u8bf4\u660e \u67e5\u770b\u5173\u4e8e\u4e2d\u65ad\u66f4\u6539\u548c\u53d1\u5e03\u8bf4\u660e\u7684\u4fe1\u606f \u5728\u8fd9\u91cc \u3002","title":"class-validator"},{"location":"docs/validator/class-validator/#_1","text":"Text Only npm install class-validator --save Note: Please use at least npm@6 when using class-validator. From npm@6 the dependency tree is flattened, which is required by class-validator to function properly.","title":"\u5b89\u88c5"},{"location":"docs/validator/class-validator/#_2","text":"Create your class and put some validation decorators on the properties you want to validate: TypeScript import { validate , validateOrReject , Contains , IsInt , Length , IsEmail , IsFQDN , IsDate , Min , Max , } from \"class-validator\" ; export class Post { @Length ( 10 , 20 ) title : string ; @Contains ( \"hello\" ) text : string ; @IsInt () @Min ( 0 ) @Max ( 10 ) rating : number ; @IsEmail () email : string ; @IsFQDN () site : string ; @IsDate () createDate : Date ; } let post = new Post (); post . title = \"Hello\" ; // should not pass post . text = \"this is a great post about hell world\" ; // should not pass post . rating = 11 ; // should not pass post . email = \"google.com\" ; // should not pass post . site = \"googlecom\" ; // should not pass validate ( post ). then (( errors ) => { // errors is an array of validation errors if ( errors . length > 0 ) { console . log ( \"validation failed. errors: \" , errors ); } else { console . log ( \"validation succeed\" ); } }); validateOrReject ( post ). catch (( errors ) => { console . log ( \"Promise rejected (validation failed). Errors: \" , errors ); }); // or async function validateOrRejectExample ( input ) { try { await validateOrReject ( input ); } catch ( errors ) { console . log ( \"Caught promise rejection (validation failed). Errors: \" , errors ); } }","title":"\u4f7f\u7528"},{"location":"docs/validator/class-validator/#_3","text":"validate \u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a ValidatorOptions \u5bf9\u8c61\u3002 TypeScript export interface ValidatorOptions { skipMissingProperties? : boolean ; whitelist? : boolean ; forbidNonWhitelisted? : boolean ; groups? : string []; dismissDefaultMessages? : boolean ; validationError ?: { target? : boolean ; value? : boolean ; }; forbidUnknownValues? : boolean ; stopAtFirstError? : boolean ; } It's highly advised to set forbidUnknownValues: true as it will prevent unknown objects from passing validation.","title":"\u4f20\u8f93\u9009\u9879"},{"location":"docs/validator/class-validator/#_4","text":"' validate '\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a' ValidationError '\u5bf9\u8c61\u6570\u7ec4\u3002\u6bcf\u4e2a\u201cValidationError\u201d\u662f: TypeScript { target : Object ; // Object that was validated. property : string ; // Object's property that haven't pass validation. value : any ; // Value that haven't pass a validation. constraints ?: { // Constraints that failed validation with error messages. [ type : string ] : string ; }; children? : ValidationError []; // Contains all nested validation errors of the property } In our case, when we validated a Post object, we have such an array of ValidationError objects: TypeScript [{ target : /* post object */ , property : \"title\" , value : \"Hello\" , constraints : { length : \"$property must be longer than or equal to 10 characters\" } }, { target : /* post object */ , property : \"text\" , value : \"this is a great post about hell world\" , constraints : { contains : \"text must contain a hello string\" } }, // and other errors ] If you don't want a target to be exposed in validation errors, there is a special option when you use validator: TypeScript validator . validate ( post , { validationError : { target : false } }); This is especially useful when you send errors back over http, and you most probably don't want to expose the whole target object.","title":"\u9a8c\u8bc1\u9519\u8bef"},{"location":"docs/validator/class-validator/#_5","text":"You can specify validation message in the decorator options and that message will be returned in the ValidationError returned by the validate method (in the case that validation for this field fails). TypeScript import { MinLength , MaxLength } from \"class-validator\" ; export class Post { @MinLength ( 10 , { message : \"Title is too short\" }) @MaxLength ( 50 , { message : \"Title is too long\" }) title : string ; } There are few special tokens you can use in your messages: $value - the value that is being validated $property - name of the object's property being validated $target - name of the object's class being validated $constraint1 , $constraint2 , ... $constraintN - constraints defined by specific validation type Example of usage: TypeScript import { MinLength , MaxLength } from \"class-validator\" ; export class Post { @MinLength ( 10 , { // here, $constraint1 will be replaced with \"10\", and $value with actual supplied value message : \"Title is too short. Minimal length is $constraint1 characters, but actual is $value\" , }) @MaxLength ( 50 , { // here, $constraint1 will be replaced with \"50\", and $value with actual supplied value message : \"Title is too long. Maximal length is $constraint1 characters, but actual is $value\" , }) title : string ; } Also you can provide a function, that returns a message. This allows you to create more granular messages: TypeScript import { MinLength , MaxLength , ValidationArguments } from \"class-validator\" ; export class Post { @MinLength ( 10 , { message : ( args : ValidationArguments ) => { if ( args . value . length === 1 ) { return \"Too short, minimum length is 1 character\" ; } else { return \"Too short, minimum length is \" + args . constraints [ 0 ] + \" characters\" ; } }, }) title : string ; } Message function accepts ValidationArguments which contains the following information: value - the value that is being validated constraints - array of constraints defined by specific validation type targetName - name of the object's class being validated object - object that is being validated property - name of the object's property being validated","title":"\u9a8c\u8bc1\u6d88\u606f"},{"location":"docs/validator/class-validator/#_6","text":"If your field is an array and you want to perform validation of each item in the array you must specify a special each: true decorator option: TypeScript import { MinLength , MaxLength } from \"class-validator\" ; export class Post { @MaxLength ( 20 , { each : true , }) tags : string []; } This will validate each item in post.tags array.","title":"\u9a8c\u8bc1\u6570\u7ec4"},{"location":"docs/validator/class-validator/#_7","text":"If your field is a set and you want to perform validation of each item in the set you must specify a special each: true decorator option: TypeScript import { MinLength , MaxLength } from \"class-validator\" ; export class Post { @MaxLength ( 20 , { each : true , }) tags : Set < string > ; } This will validate each item in post.tags set.","title":"\u9a8c\u8bc1\u96c6"},{"location":"docs/validator/class-validator/#_8","text":"If your field is a map and you want to perform validation of each item in the map you must specify a special each: true decorator option: TypeScript import { MinLength , MaxLength } from \"class-validator\" ; export class Post { @MaxLength ( 20 , { each : true , }) tags : Map < string , string > ; } This will validate each item in post.tags map.","title":"\u9a8c\u8bc1\u56fe"},{"location":"docs/validator/class-validator/#_9","text":"If your object contains nested objects and you want the validator to perform their validation too, then you need to use the @ValidateNested() decorator: TypeScript import { ValidateNested } from \"class-validator\" ; export class Post { @ValidateNested () user : User ; } Please note that nested object must be an instance of a class, otherwise @ValidateNested won't know what class is target of validation. Check also Validating plain objects . It also works with multi-dimensional array, like : TypeScript import { ValidateNested } from \"class-validator\" ; export class Plan2D { @ValidateNested () matrix : Point [][]; }","title":"\u9a8c\u8bc1\u5d4c\u5957\u5bf9\u8c61"},{"location":"docs/validator/class-validator/#_10","text":"If your object contains property with Promise -returned value that should be validated, then you need to use the @ValidatePromise() decorator: TypeScript import { ValidatePromise , Min } from \"class-validator\" ; export class Post { @Min ( 0 ) @ValidatePromise () userId : Promise < number > ; } It also works great with @ValidateNested decorator: TypeScript import { ValidateNested , ValidatePromise } from \"class-validator\" ; export class Post { @ValidateNested () @ValidatePromise () user : Promise < User > ; }","title":"\u9a8c\u8bc1\u627f\u8bfa"},{"location":"docs/validator/class-validator/#_11","text":"When you define a subclass which extends from another one, the subclass will automatically inherit the parent's decorators. If a property is redefined in the descendant class decorators will be applied on it both from that and the base class. TypeScript import { validate } from \"class-validator\" ; class BaseContent { @IsEmail () email : string ; @IsString () password : string ; } class User extends BaseContent { @MinLength ( 10 ) @MaxLength ( 20 ) name : string ; @Contains ( \"hello\" ) welcome : string ; @MinLength ( 20 ) password : string ; } let user = new User (); user . email = \"invalid email\" ; // inherited property user . password = \"too short\" ; // password wil be validated not only against IsString, but against MinLength as well user . name = \"not valid\" ; user . welcome = \"helo\" ; validate ( user ). then (( errors ) => { // ... }); // it will return errors for email, title and text properties","title":"\u9a8c\u8bc1\u7ee7\u627f\u4fee\u9970\u7b26"},{"location":"docs/validator/class-validator/#_12","text":"The conditional validation decorator ( @ValidateIf ) can be used to ignore the validators on a property when the provided condition function returns false. The condition function takes the object being validated and must return a boolean . TypeScript import { ValidateIf , IsNotEmpty } from \"class-validator\" ; export class Post { otherProperty : string ; @ValidateIf (( o ) => o . otherProperty === \"value\" ) @IsNotEmpty () example : string ; } In the example above, the validation rules applied to example won't be run unless the object's otherProperty is \"value\" . Note that when the condition is false all validation decorators are ignored, including isDefined .","title":"\u6709\u6761\u4ef6\u7684\u9a8c\u8bc1"},{"location":"docs/validator/class-validator/#_13","text":"Even if your object is an instance of a validation class it can contain additional properties that are not defined. If you do not want to have such properties on your object, pass special flag to validate method: TypeScript import { validate } from \"class-validator\" ; // ... validate ( post , { whitelist : true }); This will strip all properties that don't have any decorators. If no other decorator is suitable for your property, you can use @Allow decorator: TypeScript import { validate , Allow , Min } from \"class-validator\" ; export class Post { @Allow () title : string ; @Min ( 0 ) views : number ; nonWhitelistedProperty : number ; } let post = new Post (); post . title = 'Hello world!' ; post . views = 420 ; post . nonWhitelistedProperty = 69 ; ( post as any ). anotherNonWhitelistedProperty = \"something\" ; validate ( post ). then ( errors => { // post.nonWhitelistedProperty is not defined // (post as any).anotherNonWhitelistedProperty is not defined ... }); If you would rather to have an error thrown when any non-whitelisted properties are present, pass another flag to validate method: TypeScript import { validate } from \"class-validator\" ; // ... validate ( post , { whitelist : true , forbidNonWhitelisted : true });","title":"\u767d\u540d\u5355"},{"location":"docs/validator/class-validator/#_14","text":"It's possible to pass a custom object to decorators which will be accessible on the ValidationError instance of the property if validation failed. TypeScript import { validate } from \"class-validator\" ; class MyClass { @MinLength ( 32 , { message : \"EIC code must be at least 32 characters\" , context : { errorCode : 1003 , developerNote : \"The validated string must contain 32 or more characters.\" , }, }) eicCode : string ; } const model = new MyClass (); validate ( model ). then (( errors ) => { //errors[0].contexts['minLength'].errorCode === 1003 });","title":"\u5c06\u4e0a\u4e0b\u6587\u4f20\u9012\u7ed9\u88c5\u9970\u5668"},{"location":"docs/validator/class-validator/#_15","text":"Sometimes you may want to skip validation of the properties that do not exist in the validating object. This is usually desirable when you want to update some parts of the object, and want to validate only updated parts, but skip everything else, e.g. skip missing properties. In such situations you will need to pass a special flag to validate method: TypeScript import { validate } from \"class-validator\" ; // ... validate ( post , { skipMissingProperties : true }); When skipping missing properties, sometimes you want not to skip all missing properties, some of them maybe required for you, even if skipMissingProperties is set to true. For such cases you should use @IsDefined() decorator. @IsDefined() is the only decorator that ignores skipMissingProperties option.","title":"\u8df3\u8fc7\u7f3a\u5931\u7684\u5c5e\u6027"},{"location":"docs/validator/class-validator/#_16","text":"In different situations you may want to use different validation schemas of the same object. In such cases you can use validation groups. TypeScript import { validate , Min , Length } from \"class-validator\" ; export class User { @Min ( 12 , { groups : [ \"registration\" ], }) age : number ; @Length ( 2 , 20 , { groups : [ \"registration\" , \"admin\" ], }) name : string ; } let user = new User (); user . age = 10 ; user . name = \"Alex\" ; validate ( user , { groups : [ \"registration\" ], }); // this will not pass validation validate ( user , { groups : [ \"admin\" ], }); // this will pass validation validate ( user , { groups : [ \"registration\" , \"admin\" ], }); // this will not pass validation validate ( user , { groups : undefined , // the default }); // this will not pass validation since all properties get validated regardless of their groups validate ( user , { groups : [], }); // this will not pass validation, (equivalent to 'groups: undefined', see above) There is also a special flag always: true in validation options that you can use. This flag says that this validation must be applied always no matter which group is used.","title":"\u9a8c\u8bc1\u7ec4"},{"location":"docs/validator/class-validator/#_17","text":"If you have custom validation logic you can create a Constraint class : First create a file, lets say CustomTextLength.ts , and define a new class: TypeScript import { ValidatorConstraint , ValidatorConstraintInterface , ValidationArguments } from \"class-validator\" ; @ValidatorConstraint ({ name : \"customText\" , async : false }) export class CustomTextLength implements ValidatorConstraintInterface { validate ( text : string , args : ValidationArguments ) { return text . length > 1 && text . length < 10 ; // for async validations you must return a Promise<boolean> here } defaultMessage ( args : ValidationArguments ) { // here you can provide default error message if validation failed return \"Text ($value) is too short or too long!\" ; } } We marked our class with @ValidatorConstraint decorator. You can also supply a validation constraint name - this name will be used as \"error type\" in ValidationError. If you will not supply a constraint name - it will be auto-generated. Our class must implement ValidatorConstraintInterface interface and its validate method, which defines validation logic. If validation succeeds, method returns true, otherwise false. Custom validator can be asynchronous, if you want to perform validation after some asynchronous operations, simply return a promise with boolean inside in validate method. Also we defined optional method defaultMessage which defines a default error message, in the case that the decorator's implementation doesn't set an error message. 2) Then you can use your new validation constraint in your class: TypeScript import { Validate } from \"class-validator\" ; import { CustomTextLength } from \"./CustomTextLength\" ; export class Post { @Validate ( CustomTextLength , { message : \"Title is too short or long!\" , }) title : string ; } Here we set our newly created CustomTextLength validation constraint for Post.title . 3) And use validator as usual: TypeScript import { validate } from \"class-validator\" ; validate ( post ). then (( errors ) => { // ... }); You can also pass constraints to your validator, like this: TypeScript import { Validate } from \"class-validator\" ; import { CustomTextLength } from \"./CustomTextLength\" ; export class Post { @Validate ( CustomTextLength , [ 3 , 20 ], { message : \"Wrong post title\" , }) title : string ; } And use them from validationArguments object: TypeScript import { ValidationArguments , ValidatorConstraint , ValidatorConstraintInterface } from \"class-validator\" ; @ValidatorConstraint () export class CustomTextLength implements ValidatorConstraintInterface { validate ( text : string , validationArguments : ValidationArguments ) { return text . length > validationArguments . constraints [ 0 ] && text . length < validationArguments . constraints [ 1 ]; } }","title":"\u81ea\u5b9a\u4e49\u9a8c\u8bc1\u7c7b"},{"location":"docs/validator/class-validator/#_18","text":"You can also create a custom decorators. Its the most elegant way of using a custom validations. Lets create a decorator called @IsLongerThan : Create a decorator itself: TypeScript import { registerDecorator , ValidationOptions , ValidationArguments } from \"class-validator\" ; export function IsLongerThan ( property : string , validationOptions? : ValidationOptions ) { return function ( object : Object , propertyName : string ) { registerDecorator ({ name : \"isLongerThan\" , target : object.constructor , propertyName : propertyName , constraints : [ property ], options : validationOptions , validator : { validate ( value : any , args : ValidationArguments ) { const [ relatedPropertyName ] = args . constraints ; const relatedValue = ( args . object as any )[ relatedPropertyName ]; return typeof value === \"string\" && typeof relatedValue === \"string\" && value . length > relatedValue . length ; // you can return a Promise<boolean> here as well, if you want to make async validation }, }, }); }; } Put it to use: TypeScript import { IsLongerThan } from \"./IsLongerThan\" ; export class Post { title : string ; @IsLongerThan ( \"title\" , { /* you can also use additional validation options, like \"groups\" in your custom validation decorators. \"each\" is not supported */ message : \"Text must be longer than the title\" , }) text : string ; } In your custom decorators you can also use ValidationConstraint . Lets create another custom validation decorator called IsUserAlreadyExist : Create a ValidationConstraint and decorator: TypeScript import { registerDecorator , ValidationOptions , ValidatorConstraint , ValidatorConstraintInterface , ValidationArguments , } from \"class-validator\" ; @ValidatorConstraint ({ async : true }) export class IsUserAlreadyExistConstraint implements ValidatorConstraintInterface { validate ( userName : any , args : ValidationArguments ) { return UserRepository . findOneByName ( userName ). then (( user ) => { if ( user ) return false ; return true ; }); } } export function IsUserAlreadyExist ( validationOptions? : ValidationOptions ) { return function ( object : Object , propertyName : string ) { registerDecorator ({ target : object.constructor , propertyName : propertyName , options : validationOptions , constraints : [], validator : IsUserAlreadyExistConstraint , }); }; } note that we marked our constraint that it will by async by adding { async: true } in validation options. And put it to use: TypeScript import { IsUserAlreadyExist } from \"./IsUserAlreadyExist\" ; export class User { @IsUserAlreadyExist ({ message : \"User $value already exists. Choose another name.\" , }) name : string ; }","title":"\u81ea\u5b9a\u4e49\u9a8c\u8bc1\u4fee\u9970\u7b26"},{"location":"docs/validator/class-validator/#_19","text":"Validator supports service container in the case if want to inject dependencies into your custom validator constraint classes. Here is example how to integrate it with typedi : TypeScript import { Container } from \"typedi\" ; import { useContainer , Validator } from \"class-validator\" ; // do this somewhere in the global application level: useContainer ( Container ); let validator = Container . get ( Validator ); // now everywhere you can inject Validator class which will go from the container // also you can inject classes using constructor injection into your custom ValidatorConstraint-s","title":"\u4f7f\u7528\u670d\u52a1\u5bb9\u5668"},{"location":"docs/validator/class-validator/#_20","text":"If you want to perform a simple non async validation you can use validateSync method instead of regular validate method. It has the same arguments as validate method. But note, this method ignores all async validations you have.","title":"\u540c\u6b65\u9a8c\u8bc1"},{"location":"docs/validator/class-validator/#_21","text":"There are several method exist in the Validator that allows to perform non-decorator based validation: TypeScript import { isEmpty , isBoolean } from \"class-validator\" ; isEmpty ( value ); isBoolean ( value );","title":"\u624b\u52a8\u9a8c\u8bc1"},{"location":"docs/validator/class-validator/#_22","text":"Decorator Description Common validation decorators @IsDefined(value: any) Checks if value is defined (!== undefined, !== null). This is the only decorator that ignores skipMissingProperties option. @IsOptional() Checks if given value is empty (=== null, === undefined) and if so, ignores all the validators on the property. @Equals(comparison: any) Checks if value equals (\"===\") comparison. @NotEquals(comparison: any) Checks if value not equal (\"!==\") comparison. @IsEmpty() Checks if given value is empty (=== '', === null, === undefined). @IsNotEmpty() Checks if given value is not empty (!== '', !== null, !== undefined). @IsIn(values: any[]) Checks if value is in a array of allowed values. @IsNotIn(values: any[]) Checks if value is not in a array of disallowed values. Type validation decorators @IsBoolean() Checks if a value is a boolean. @IsDate() Checks if the value is a date. @IsString() Checks if the string is a string. @IsNumber(options: IsNumberOptions) Checks if the value is a number. @IsInt() Checks if the value is an integer number. @IsArray() Checks if the value is an array @IsEnum(entity: object) Checks if the value is an valid enum Number validation decorators @IsDivisibleBy(num: number) Checks if the value is a number that's divisible by another. @IsPositive() Checks if the value is a positive number greater than zero. @IsNegative() Checks if the value is a negative number smaller than zero. @Min(min: number) Checks if the given number is greater than or equal to given number. @Max(max: number) Checks if the given number is less than or equal to given number. Date validation decorators @MinDate(date: Date) Checks if the value is a date that's after the specified date. @MaxDate(date: Date) Checks if the value is a date that's before the specified date. String-type validation decorators @IsBooleanString() Checks if a string is a boolean (e.g. is \"true\" or \"false\"). @IsDateString() Alias for @IsISO8601() . @IsNumberString(options?: IsNumericOptions) Checks if a string is a number. String validation decorators @Contains(seed: string) Checks if the string contains the seed. @NotContains(seed: string) Checks if the string not contains the seed. @IsAlpha() Checks if the string contains only letters (a-zA-Z). @IsAlphanumeric() Checks if the string contains only letters and numbers. @IsDecimal(options?: IsDecimalOptions) Checks if the string is a valid decimal value. Default IsDecimalOptions are force_decimal=False , decimal_digits: '1,' , locale: 'en-US' @IsAscii() Checks if the string contains ASCII chars only. @IsBase32() Checks if a string is base32 encoded. @IsBase64() Checks if a string is base64 encoded. @IsIBAN() Checks if a string is a IBAN (International Bank Account Number). @IsBIC() Checks if a string is a BIC (Bank Identification Code) or SWIFT code. @IsByteLength(min: number, max?: number) Checks if the string's length (in bytes) falls in a range. @IsCreditCard() Checks if the string is a credit card. @IsCurrency(options?: IsCurrencyOptions) Checks if the string is a valid currency amount. @IsEthereumAddress() Checks if the string is an Ethereum address using basic regex. Does not validate address checksums. @IsBtcAddress() Checks if the string is a valid BTC address. @IsDataURI() Checks if the string is a data uri format. @IsEmail(options?: IsEmailOptions) Checks if the string is an email. @IsFQDN(options?: IsFQDNOptions) Checks if the string is a fully qualified domain name (e.g. domain.com). @IsFullWidth() Checks if the string contains any full-width chars. @IsHalfWidth() Checks if the string contains any half-width chars. @IsVariableWidth() Checks if the string contains a mixture of full and half-width chars. @IsHexColor() Checks if the string is a hexadecimal color. @IsHSLColor() Checks if the string is an HSL color based on CSS Colors Level 4 specification . @IsRgbColor(options?: IsRgbOptions) Checks if the string is a rgb or rgba color. @IsIdentityCard(locale?: string) Checks if the string is a valid identity card code. @IsPassportNumber(countryCode?: string) Checks if the string is a valid passport number relative to a specific country code. @IsPostalCode(locale?: string) Checks if the string is a postal code. @IsHexadecimal() Checks if the string is a hexadecimal number. @IsOctal() Checks if the string is a octal number. @IsMACAddress(options?: IsMACAddressOptions) Checks if the string is a MAC Address. @IsIP(version?: \"4\"\\|\"6\") Checks if the string is an IP (version 4 or 6). @IsPort() Checks if the string is a valid port number. @IsISBN(version?: \"10\"\\|\"13\") Checks if the string is an ISBN (version 10 or 13). @IsEAN() Checks if the string is an if the string is an EAN (European Article Number). @IsISIN() Checks if the string is an ISIN (stock/security identifier). @IsISO8601(options?: IsISO8601Options) Checks if the string is a valid ISO 8601 date format. Use the option strict = true for additional checks for a valid date. @IsJSON() Checks if the string is valid JSON. @IsJWT() Checks if the string is valid JWT. @IsObject() Checks if the object is valid Object (null, functions, arrays will return false). @IsNotEmptyObject() Checks if the object is not empty. @IsLowercase() Checks if the string is lowercase. @IsLatLong() Checks if the string is a valid latitude-longitude coordinate in the format lat, long. @IsLatitude() Checks if the string or number is a valid latitude coordinate. @IsLongitude() Checks if the string or number is a valid longitude coordinate. @IsMobilePhone(locale: string) Checks if the string is a mobile phone number. @IsISO31661Alpha2() Checks if the string is a valid ISO 3166-1 alpha-2 officially assigned country code. @IsISO31661Alpha3() Checks if the string is a valid ISO 3166-1 alpha-3 officially assigned country code. @IsLocale() Checks if the string is a locale. @IsPhoneNumber(region: string) Checks if the string is a valid phone numberusing libphonenumber-js. @IsMongoId() Checks if the string is a valid hex-encoded representation of a MongoDB ObjectId. @IsMultibyte() Checks if the string contains one or more multibyte chars. @IsNumberString(options?: IsNumericOptions) Checks if the string is numeric. @IsSurrogatePair() Checks if the string contains any surrogate pairs chars. @IsUrl(options?: IsURLOptions) Checks if the string is an url. @IsMagnetURI() Checks if the string is a magnet uri format . @IsUUID(version?: \"3\"\\|\"4\"\\|\"5\"\\|\"all\") Checks if the string is a UUID (version 3, 4, 5 or all ). @IsFirebasePushId() Checks if the string is a Firebase Push ID @IsUppercase() Checks if the string is uppercase. @Length(min: number, max?: number) Checks if the string's length falls in a range. @MinLength(min: number) Checks if the string's length is not less than given number. @MaxLength(max: number) Checks if the string's length is not more than given number. @Matches(pattern: RegExp, modifiers?: string) Checks if string matches the pattern. Either matches('foo', /foo/i) or matches('foo', 'foo', 'i'). @IsMilitaryTime() Checks if the string is a valid representation of military time in the format HH:MM. @IsHash(algorithm: string) Checks if the string is a hash The following types are supported: md4 , md5 , sha1 , sha256 , sha384 , sha512 , ripemd128 , ripemd160 , tiger128 , tiger160 , tiger192 , crc32 , crc32b . @IsMimeType() Checks if the string matches to a valid MIME type format @IsSemVer() Checks if the string is a Semantic Versioning Specification (SemVer). @IsISSN(options?: IsISSNOptions) Checks if the string is a ISSN. @IsISRC() Checks if the string is a ISRC . @IsRFC3339() Checks if the string is a valid RFC 3339 date. Array validation decorators @ArrayContains(values: any[]) Checks if array contains all values from the given array of values. @ArrayNotContains(values: any[]) Checks if array does not contain any of the given values. @ArrayNotEmpty() Checks if given array is not empty. @ArrayMinSize(min: number) Checks if the array's length is greater than or equal to the specified number. @ArrayMaxSize(max: number) Checks if the array's length is less or equal to the specified number. @ArrayUnique(identifier?: (o) => any) Checks if all array's values are unique. Comparison for objects is reference-based. Optional function can be speciefied which return value will be used for the comparsion. Object validation decorators @IsInstance(value: any) Checks if the property is an instance of the passed value. Other decorators @Allow() Prevent stripping off the property when no other constraint is specified for it.","title":"\u9a8c\u8bc1\u4fee\u9970\u7b26"},{"location":"docs/validator/class-validator/#_23","text":"\u4f60\u53ef\u4ee5\u5728\u6ca1\u6709\u88c5\u9970\u5668\u7684\u60c5\u51b5\u4e0b\u5b9a\u4e49\u4f60\u7684\u9a8c\u8bc1\u6a21\u5f0f: you can define it in the separate object you can define it in the .json file This feature maybe useful in the cases if: are using es5/es6 and don't have decorators available you don't have a classes, and instead using interfaces you don't want to use model at all you want to have a validation schema separate of your model you want beautiful json-schema based validation models you simply hate decorators Here is an example of using it: Create a schema object: TypeScript import { ValidationSchema } from \"class-validator\" ; export let UserValidationSchema : ValidationSchema = { // using interface here is not required, its just for type-safety name : \"myUserSchema\" , // this is required, and must be unique properties : { firstName : [ { type : \"minLength\" , // validation type. All validation types are listed in ValidationTypes class. constraints : [ 2 ], }, { type : \"maxLength\" , constraints : [ 20 ], }, ], lastName : [ { type : \"minLength\" , constraints : [ 2 ], }, { type : \"maxLength\" , constraints : [ 20 ], }, ], email : [ { type : \"isEmail\" , }, ], }, }; Same schema can be provided in .json file, depend on your wish. Register your schema: TypeScript import { registerSchema } from \"class-validator\" ; import { UserValidationSchema } from \"./UserValidationSchema\" ; registerSchema ( UserValidationSchema ); // if schema is in .json file, then you can simply do registerSchema(require(\"path-to-schema.json\")); Better to put this code in a global place, maybe when you bootstrap your application, for example in app.ts . Validate your object using validation schema: TypeScript import { validate } from \"class-validator\" ; const user = { firstName : \"Johny\" , secondName : \"Cage\" , email : \"johny@cage.com\" }; validate ( \"myUserSchema\" , user ). then (( errors ) => { if ( errors . length > 0 ) { console . log ( \"Validation failed: \" , errors ); } else { console . log ( \"Validation succeed.\" ); } }); That's it. Here \"myUserSchema\" is the name of our validation schema. validate method will perform validation based on this schema","title":"\u5b9a\u4e49\u6ca1\u6709\u88c5\u9970\u5668\u7684\u9a8c\u8bc1\u6a21\u5f0f"},{"location":"docs/validator/class-validator/#_24","text":"\u7531\u4e8e\u88c5\u9970\u5668\u7684\u7279\u6027\uff0c\u9a8c\u8bc1\u8fc7\u7684\u5bf9\u8c61\u5fc5\u987b\u4f7f\u7528 new Class() \u8bed\u6cd5\u8fdb\u884c\u5b9e\u4f8b\u5316\u3002 \u5982\u679c\u4f60\u7528\u7c7b\u9a8c\u8bc1\u5668\u88c5\u9970\u5668\u5b9a\u4e49\u4e86\u4f60\u7684\u7c7b\uff0c\u5e76\u4e14\u4f60\u60f3\u9a8c\u8bc1\u666e\u901a\u7684 JS \u5bf9\u8c61(\u6587\u5b57\u5bf9\u8c61\u6216 JSON.parse \u8fd4\u56de\u7684\u5bf9\u8c61)\uff0c\u4f60\u9700\u8981\u901a\u8fc7\u4f7f\u7528 class-transformer \u5c06\u5176\u8f6c\u6362\u4e3a\u7c7b\u5b9e\u4f8b\u3002","title":"\u9a8c\u8bc1\u7eaf\u5bf9\u8c61"},{"location":"docs/validator/class-validator/#_25","text":"\u8bf7\u53c2\u9605 ./sample \u4e2d\u7684\u793a\u4f8b\u4ee5\u83b7\u5f97\u66f4\u591a\u7528\u6cd5\u793a\u4f8b\u3002","title":"\u6837\u54c1"},{"location":"docs/validator/class-validator/#_26","text":"\u6709\u51e0\u4e2a\u6269\u5c55\u53ef\u4ee5\u7b80\u5316\u7c7b\u9a8c\u8bc1\u5668\u4e0e\u5176\u4ed6\u6a21\u5757\u7684\u96c6\u6210: class-validator integration with class-transformer class-validator-rule ngx-dynamic-form-builder abarghoud/ngx-reactive-form-class-validator","title":"\u6269\u5c55"},{"location":"docs/validator/class-validator/#_27","text":"\u67e5\u770b\u5173\u4e8e\u4e2d\u65ad\u66f4\u6539\u548c\u53d1\u5e03\u8bf4\u660e\u7684\u4fe1\u606f \u5728\u8fd9\u91cc \u3002","title":"\u53d1\u5e03\u8bf4\u660e"}]}